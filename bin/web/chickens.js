// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var nape_callbacks_CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$CbType();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbType"] = nape_callbacks_CbType;
nape_callbacks_CbType.__name__ = ["nape","callbacks","CbType"];
nape_callbacks_CbType.__properties__ = {get_ANY_COMPOUND:"get_ANY_COMPOUND",get_ANY_SHAPE:"get_ANY_SHAPE",get_ANY_CONSTRAINT:"get_ANY_CONSTRAINT",get_ANY_BODY:"get_ANY_BODY"};
nape_callbacks_CbType.get_ANY_BODY = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY;
};
nape_callbacks_CbType.get_ANY_CONSTRAINT = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT;
};
nape_callbacks_CbType.get_ANY_SHAPE = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE;
};
nape_callbacks_CbType.get_ANY_COMPOUND = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND;
};
nape_callbacks_CbType.prototype = {
	toString: function() {
		if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY) {
			return "ANY_BODY";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE) {
			return "ANY_SHAPE";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND) {
			return "ANY_COMPOUND";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT) {
			return "ANY_CONSTRAINT";
		} else {
			return "CbType#" + this.zpp_inner.id;
		}
	}
	,__class__: nape_callbacks_CbType
};
var zpp_$nape_callbacks_ZPP_$CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbType"] = zpp_$nape_callbacks_ZPP_$CbType;
zpp_$nape_callbacks_ZPP_$CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_$nape_callbacks_ZPP_$CbType.prototype = {
	__class__: zpp_$nape_callbacks_ZPP_$CbType
};
var zpp_$nape_ZPP_$ID = function() { };
$hxClasses["zpp_nape.ZPP_ID"] = zpp_$nape_ZPP_$ID;
zpp_$nape_ZPP_$ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_$nape_ZPP_$ID.Interactor = function() {
	return zpp_$nape_ZPP_$ID._Interactor++;
};
zpp_$nape_ZPP_$ID.CbType = function() {
	return zpp_$nape_ZPP_$ID._CbType++;
};
zpp_$nape_ZPP_$ID.CbSet = function() {
	return zpp_$nape_ZPP_$ID._CbSet++;
};
zpp_$nape_ZPP_$ID.Listener = function() {
	return zpp_$nape_ZPP_$ID._Listener++;
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionListener"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPList_$ZPP_$BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_BodyListener"] = zpp_$nape_util_ZNPList_$ZPP_$BodyListener;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPList_$ZPP_$Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Constraint"] = zpp_$nape_util_ZNPList_$ZPP_$Constraint;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_$nape_util_ZNPList_$ZPP_$Constraint.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPList_$ZPP_$Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Interactor"] = zpp_$nape_util_ZNPList_$ZPP_$Interactor;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
zpp_$nape_util_ZNPList_$ZPP_$Interactor.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSet"] = zpp_$nape_util_ZNPList_$ZPP_$CbSet;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
zpp_$nape_util_ZNPList_$ZPP_$CbSet.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSet
};
var Builder = function() { };
$hxClasses["Builder"] = Builder;
Builder.__name__ = ["Builder"];
Builder.initialize = function() {
	Builder.nape = new NapeBuilder();
	Builder.visual = new VisualBuilder();
	Builder.echo = new echo_Echo();
};
Builder.chicken = function(x,y,vx,vy) {
	var s = Builder.visual.anim("chicken_fly",25,.4);
	var this1;
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = vx;
		ret1.y = vy;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		var this2;
		var _this = ret.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(ret.zpp_inner.x == vx) {
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			this2 = ret.zpp_inner.y == vy;
		} else {
			this2 = false;
		}
		if(!this2) {
			ret.zpp_inner.x = vx;
			ret.zpp_inner.y = vy;
			var _this2 = ret.zpp_inner;
			if(_this2._invalidate != null) {
				_this2._invalidate(_this2);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this1 = ret;
	var b = Builder.nape.body(x,y,Builder.nape.cir(10));
	if(b.zpp_inner_i.wrap_cbTypes == null) {
		b.zpp_inner_i.setupcbTypes();
	}
	var _this3 = b.zpp_inner_i.wrap_cbTypes;
	var obj = Builder.Chicken;
	if(_this3.zpp_inner.reverse_flag) {
		_this3.push(obj);
	} else {
		_this3.unshift(obj);
	}
	var status = new components_Status();
	var _id_ = Builder.echo.id();
	ComponentHolder_$luxe_$Sprite.__MAP.h[_id_] = s;
	ComponentHolder_$components_$Vel.__MAP.h[_id_] = this1;
	ComponentHolder_$nape_$phys_$Body.__MAP.h[_id_] = b;
	ComponentHolder_$components_$Status.__MAP.h[_id_] = status;
	if(Builder.echo.entitiesMap.exists(_id_)) {
		var _g_head = Builder.echo.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(_id_);
		}
	}
};
Builder.monster = function(x,y,vx,vy) {
	var s = Builder.visual.anim("monster_fly",25,1.0);
	var this1;
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = vx;
		ret1.y = vy;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		var this2;
		var _this = ret.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(ret.zpp_inner.x == vx) {
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			this2 = ret.zpp_inner.y == vy;
		} else {
			this2 = false;
		}
		if(!this2) {
			ret.zpp_inner.x = vx;
			ret.zpp_inner.y = vy;
			var _this2 = ret.zpp_inner;
			if(_this2._invalidate != null) {
				_this2._invalidate(_this2);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this1 = ret;
	var b = Builder.nape.body(x,y,Builder.nape.cir(20));
	if(b.zpp_inner_i.wrap_cbTypes == null) {
		b.zpp_inner_i.setupcbTypes();
	}
	var _this3 = b.zpp_inner_i.wrap_cbTypes;
	var obj = Builder.Monster;
	if(_this3.zpp_inner.reverse_flag) {
		_this3.push(obj);
	} else {
		_this3.unshift(obj);
	}
	var status = new components_Status();
	var _id_ = Builder.echo.id();
	ComponentHolder_$luxe_$Sprite.__MAP.h[_id_] = s;
	ComponentHolder_$components_$Vel.__MAP.h[_id_] = this1;
	ComponentHolder_$nape_$phys_$Body.__MAP.h[_id_] = b;
	ComponentHolder_$components_$Status.__MAP.h[_id_] = status;
	if(Builder.echo.entitiesMap.exists(_id_)) {
		var _g_head = Builder.echo.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(_id_);
		}
	}
};
var VisualBuilder = function() {
	VisualBuilder.atlas = new spritesheet_SpriteSheet();
	spritesheet_SpriteSheet.parseSparrowXmlString(Luxe.resources.cache.get("assets/sprites.atlas").asset.text,VisualBuilder.atlas);
};
$hxClasses["VisualBuilder"] = VisualBuilder;
VisualBuilder.__name__ = ["VisualBuilder"];
VisualBuilder.prototype = {
	anim: function(name,speed,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		if(speed == null) {
			speed = 25;
		}
		var _this = VisualBuilder.atlas.series;
		var seq = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		var size = new phoenix_Vector(seq[0].sw * scale,seq[0].sh * scale);
		var s = new luxe_Sprite({ texture : Luxe.resources.cache.get("assets/sprites.png"), size : size, origin : new phoenix_Vector(size.x * .5,size.y)});
		var _component = new lx_components_Animation(seq,speed);
		s.component_count++;
		s._components.add(_component);
		return s;
	}
	,__class__: VisualBuilder
};
var NapeBuilder = function() {
};
$hxClasses["NapeBuilder"] = NapeBuilder;
NapeBuilder.__name__ = ["NapeBuilder"];
NapeBuilder.prototype = {
	cir: function(r,sensor,mat) {
		if(sensor == null) {
			sensor = false;
		}
		var sh = new nape_shape_Circle(r,null,mat != null ? mat : nape_phys_Material.wood());
		sh.zpp_inner.immutable_midstep("Shape::sensorEnabled");
		sh.zpp_inner.sensorEnabled = sensor;
		sh.zpp_inner.wake();
		return sh;
	}
	,body: function(x,y,shape,shapes,dyn,bul,filter) {
		if(bul == null) {
			bul = false;
		}
		if(dyn == null) {
			dyn = true;
		}
		var b;
		if(dyn) {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			b = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			b = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			var b1;
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				var _this1 = ret.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				b1 = ret.zpp_inner.y == y;
			} else {
				b1 = false;
			}
			if(!b1) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this2 = ret.zpp_inner;
				if(_this2._invalidate != null) {
					_this2._invalidate(_this2);
				}
			}
		}
		ret.zpp_inner.weak = true;
		var b2 = new nape_phys_Body(b,ret);
		b2.zpp_inner.bulletEnabled = bul;
		if(shape != null) {
			var _this3 = b2.zpp_inner.wrap_shapes;
			if(_this3.zpp_inner.reverse_flag) {
				_this3.push(shape);
			} else {
				_this3.unshift(shape);
			}
		}
		if(shapes != null) {
			var _g = 0;
			while(_g < shapes.length) {
				var sh = shapes[_g];
				++_g;
				var _this4 = b2.zpp_inner.wrap_shapes;
				if(_this4.zpp_inner.reverse_flag) {
					_this4.push(sh);
				} else {
					_this4.unshift(sh);
				}
			}
		}
		if(filter != null) {
			b2.setShapeFilters(filter);
		}
		return b2;
	}
	,__class__: NapeBuilder
};
var ComponentHolder_$components_$Kill = function() { };
$hxClasses["ComponentHolder_components_Kill"] = ComponentHolder_$components_$Kill;
ComponentHolder_$components_$Kill.__name__ = ["ComponentHolder_components_Kill"];
var ComponentHolder_$components_$Status = function() { };
$hxClasses["ComponentHolder_components_Status"] = ComponentHolder_$components_$Status;
ComponentHolder_$components_$Status.__name__ = ["ComponentHolder_components_Status"];
var ComponentHolder_$components_$Vel = function() { };
$hxClasses["ComponentHolder_components_Vel"] = ComponentHolder_$components_$Vel;
ComponentHolder_$components_$Vel.__name__ = ["ComponentHolder_components_Vel"];
var ComponentHolder_$luxe_$Sprite = function() { };
$hxClasses["ComponentHolder_luxe_Sprite"] = ComponentHolder_$luxe_$Sprite;
ComponentHolder_$luxe_$Sprite.__name__ = ["ComponentHolder_luxe_Sprite"];
var ComponentHolder_$nape_$phys_$Body = function() { };
$hxClasses["ComponentHolder_nape_phys_Body"] = ComponentHolder_$nape_$phys_$Body;
ComponentHolder_$nape_$phys_$Body.__name__ = ["ComponentHolder_nape_phys_Body"];
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) if(x.next() == elt) {
		return true;
	}
	return false;
};
Lambda.iter = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) f(x.next());
};
Lambda.fold = function(it,f,first) {
	var x = $iterator(it)();
	while(x.hasNext()) first = f(x.next(),first);
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			_.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) if(pred(x.next())) {
			++n;
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var Log = function() { };
$hxClasses["Log"] = Log;
Log.__name__ = ["Log"];
Log.log = function(a) {
	if(Log.tracer != null) {
		Log.tracer(a);
	}
	Log.logs.push(Log.fpretty(new Date().getTime() / 1000 - Log.INIT_STAMP,3) + " : " + Std.string(a));
};
Log.getLogs = function(count) {
	var ret = "";
	var _g1 = Math.max(0,Log.logs.length - (count == null ? Log.logs.length : count)) | 0;
	var _g = Log.logs.length;
	while(_g1 < _g) {
		var i = _g1++;
		ret += (ret.length > 0 ? "\n" : "") + Log.logs[i];
	}
	return ret;
};
Log.track = function(key,value) {
	var _this = Log.tracksMap;
	if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
		Log.tracks.push(key);
	}
	var v = Std.string(value);
	var _this1 = Log.tracksMap;
	if(__map_reserved[key] != null) {
		_this1.setReserved(key,v);
	} else {
		_this1.h[key] = v;
	}
};
Log.getTracks = function() {
	var ret = "";
	var _g = 0;
	var _g1 = Log.tracks;
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var _this = Log.tracksMap;
		ret += (ret.length > 0 ? "\n" : "") + ("" + key + ": " + (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]));
	}
	return ret;
};
Log.fpretty = function(x,digits) {
	if(digits == null) {
		digits = 1;
	}
	var s = x == null ? "null" : "" + x;
	var dotpos = s.indexOf(".");
	if(dotpos == -1) {
		if(digits < 1) {
			return s;
		} else {
			return s + "." + StringTools.rpad("","0",digits);
		}
	} else {
		return s.substring(0,dotpos) + (digits < 1 ? "" : "." + StringTools.rpad(HxOverrides.substr(s,dotpos + 1,digits),"0",digits));
	}
};
var Luxe = function() { };
$hxClasses["Luxe"] = Luxe;
Luxe.__name__ = ["Luxe"];
Luxe.__properties__ = {set_fixed_frame_time:"set_fixed_frame_time",get_fixed_frame_time:"get_fixed_frame_time",get_fixed_alpha:"get_fixed_alpha",set_fixed_timestep:"set_fixed_timestep",get_fixed_timestep:"get_fixed_timestep",set_fixed_delta:"set_fixed_delta",get_fixed_delta:"get_fixed_delta",get_sim_delta:"get_sim_delta",get_sim_time:"get_sim_time",set_timescale:"set_timescale",get_timescale:"get_timescale",get_tick_delta:"get_tick_delta",get_tick_start_prev:"get_tick_start_prev",get_tick_start:"get_tick_start",set_update_rate:"set_update_rate",get_update_rate:"get_update_rate",set_frame_max_delta:"set_frame_max_delta",get_frame_max_delta:"get_frame_max_delta",get_frame_start_prev:"get_frame_start_prev",get_frame_start:"get_frame_start",get_dt:"get_dt",get_build:"get_build",get_version:"get_version",get_screen:"get_screen",get_time:"get_time",get_snow:"get_snow"};
Luxe.on = function(event,handler) {
	Luxe.core.emitter.on(event,handler);
};
Luxe.off = function(event,handler) {
	return Luxe.core.emitter.off(event,handler);
};
Luxe.next = function(func) {
	if(func != null) {
		snow_Snow.next_queue.push(func);
	}
};
Luxe.shutdown = function() {
	Luxe.core.shutdown();
};
Luxe.showConsole = function(_show) {
	Luxe.core.debug.set_visible(_show);
};
Luxe.get_snow = function() {
	return Luxe.core.app;
};
Luxe.get_screen = function() {
	return Luxe.core.screen;
};
Luxe.get_time = function() {
	return window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
};
Luxe.get_version = function() {
	return Luxe.core.version;
};
Luxe.get_build = function() {
	return Luxe.core.build;
};
Luxe.get_dt = function() {
	return Luxe.core.frame_delta;
};
Luxe.get_frame_start = function() {
	return Luxe.core.frame_start;
};
Luxe.get_frame_start_prev = function() {
	return Luxe.core.frame_start_prev;
};
Luxe.get_frame_max_delta = function() {
	return Luxe.core.frame_max_delta;
};
Luxe.get_update_rate = function() {
	return Luxe.core.update_rate;
};
Luxe.get_tick_start = function() {
	return Luxe.core.tick_start;
};
Luxe.get_tick_start_prev = function() {
	return Luxe.core.tick_start_prev;
};
Luxe.get_tick_delta = function() {
	return Luxe.core.tick_delta;
};
Luxe.get_timescale = function() {
	return Luxe.core.timescale;
};
Luxe.get_sim_time = function() {
	return Luxe.core.sim_time;
};
Luxe.get_sim_delta = function() {
	return Luxe.core.sim_delta;
};
Luxe.get_fixed_delta = function() {
	return Luxe.core.fixed_delta;
};
Luxe.get_fixed_timestep = function() {
	return Luxe.core.fixed_timestep;
};
Luxe.get_fixed_alpha = function() {
	return Luxe.core.fixed_alpha;
};
Luxe.get_fixed_frame_time = function() {
	return Luxe.core.fixed_frame_time;
};
Luxe.set_timescale = function(_val) {
	return Luxe.core.timescale = _val;
};
Luxe.set_fixed_delta = function(_val) {
	return Luxe.core.fixed_delta = _val;
};
Luxe.set_update_rate = function(_val) {
	return Luxe.core.update_rate = _val;
};
Luxe.set_fixed_timestep = function(_val) {
	return Luxe.core.fixed_timestep = _val;
};
Luxe.set_frame_max_delta = function(_val) {
	return Luxe.core.frame_max_delta = _val;
};
Luxe.set_fixed_frame_time = function(_val) {
	return Luxe.core.fixed_frame_time = _val;
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var ViewData_$components_$Status_$components_$Vel_$nape_$phys_$Body = function() {
};
$hxClasses["ViewData_components_Status_components_Vel_nape_phys_Body"] = ViewData_$components_$Status_$components_$Vel_$nape_$phys_$Body;
ViewData_$components_$Status_$components_$Vel_$nape_$phys_$Body.__name__ = ["ViewData_components_Status_components_Vel_nape_phys_Body"];
ViewData_$components_$Status_$components_$Vel_$nape_$phys_$Body.prototype = {
	__class__: ViewData_$components_$Status_$components_$Vel_$nape_$phys_$Body
};
var ViewData_$luxe_$Sprite_$nape_$phys_$Body = function() {
};
$hxClasses["ViewData_luxe_Sprite_nape_phys_Body"] = ViewData_$luxe_$Sprite_$nape_$phys_$Body;
ViewData_$luxe_$Sprite_$nape_$phys_$Body.__name__ = ["ViewData_luxe_Sprite_nape_phys_Body"];
ViewData_$luxe_$Sprite_$nape_$phys_$Body.prototype = {
	__class__: ViewData_$luxe_$Sprite_$nape_$phys_$Body
};
var ViewData_$nape_$phys_$Body = function() {
};
$hxClasses["ViewData_nape_phys_Body"] = ViewData_$nape_$phys_$Body;
ViewData_$nape_$phys_$Body.__name__ = ["ViewData_nape_phys_Body"];
ViewData_$nape_$phys_$Body.prototype = {
	__class__: ViewData_$nape_$phys_$Body
};
var echo_ViewBase = function() {
	this.entities = [];
	this.onRemoved = [];
	this.onAdded = [];
	this.__id = -1;
	this.entitiesMap = new haxe_ds_IntMap();
};
$hxClasses["echo.ViewBase"] = echo_ViewBase;
echo_ViewBase.__name__ = ["echo","ViewBase"];
echo_ViewBase.prototype = {
	activate: function(echo1) {
		this.echo = echo1;
		var _g_head = echo1.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.addIfMatch(val);
		}
	}
	,deactivate: function() {
		while(this.entities.length > 0) this.entitiesMap.remove(this.entities.pop());
		this.echo = null;
	}
	,test: function(id) {
		return false;
	}
	,addIfMatch: function(id) {
		if(!this.entitiesMap.exists(id) && this.test(id)) {
			this.entitiesMap.set(id,id);
			this.entities.push(id);
			var i = 0;
			var l = this.onAdded.length;
			while(i < l) {
				var listener = this.onAdded[i];
				if(listener != null) {
					listener(id);
					++i;
				} else {
					this.onAdded.splice(i,1);
					--l;
				}
			}
		}
	}
	,removeIfMatch: function(id) {
		if(this.entitiesMap.exists(id)) {
			var i = 0;
			var l = this.onRemoved.length;
			while(i < l) {
				var listener = this.onRemoved[i];
				if(listener != null) {
					listener(id);
					++i;
				} else {
					this.onRemoved.splice(i,1);
					--l;
				}
			}
			HxOverrides.remove(this.entities,id);
			this.entitiesMap.remove(id);
		}
	}
	,__class__: echo_ViewBase
};
var View_$components_$Kill = function() {
	echo_ViewBase.call(this);
	this.__id = 4;
};
$hxClasses["View_components_Kill"] = View_$components_$Kill;
View_$components_$Kill.__name__ = ["View_components_Kill"];
View_$components_$Kill.__super__ = echo_ViewBase;
View_$components_$Kill.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		return ComponentHolder_$components_$Kill.__MAP.h.hasOwnProperty(id);
	}
	,__class__: View_$components_$Kill
});
var View_$components_$Status_$components_$Vel_$nape_$phys_$Body = function() {
	echo_ViewBase.call(this);
	this.__id = 2;
};
$hxClasses["View_components_Status_components_Vel_nape_phys_Body"] = View_$components_$Status_$components_$Vel_$nape_$phys_$Body;
View_$components_$Status_$components_$Vel_$nape_$phys_$Body.__name__ = ["View_components_Status_components_Vel_nape_phys_Body"];
View_$components_$Status_$components_$Vel_$nape_$phys_$Body.__super__ = echo_ViewBase;
View_$components_$Status_$components_$Vel_$nape_$phys_$Body.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		if(ComponentHolder_$nape_$phys_$Body.__MAP.h.hasOwnProperty(id) && ComponentHolder_$components_$Status.__MAP.h.hasOwnProperty(id)) {
			return ComponentHolder_$components_$Vel.__MAP.h.hasOwnProperty(id);
		} else {
			return false;
		}
	}
	,__class__: View_$components_$Status_$components_$Vel_$nape_$phys_$Body
});
var View_$luxe_$Sprite_$nape_$phys_$Body = function() {
	echo_ViewBase.call(this);
	this.__id = 3;
};
$hxClasses["View_luxe_Sprite_nape_phys_Body"] = View_$luxe_$Sprite_$nape_$phys_$Body;
View_$luxe_$Sprite_$nape_$phys_$Body.__name__ = ["View_luxe_Sprite_nape_phys_Body"];
View_$luxe_$Sprite_$nape_$phys_$Body.__super__ = echo_ViewBase;
View_$luxe_$Sprite_$nape_$phys_$Body.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		if(ComponentHolder_$nape_$phys_$Body.__MAP.h.hasOwnProperty(id)) {
			return ComponentHolder_$luxe_$Sprite.__MAP.h.hasOwnProperty(id);
		} else {
			return false;
		}
	}
	,__class__: View_$luxe_$Sprite_$nape_$phys_$Body
});
var View_$nape_$phys_$Body = function() {
	echo_ViewBase.call(this);
	this.__id = 1;
};
$hxClasses["View_nape_phys_Body"] = View_$nape_$phys_$Body;
View_$nape_$phys_$Body.__name__ = ["View_nape_phys_Body"];
View_$nape_$phys_$Body.__super__ = echo_ViewBase;
View_$nape_$phys_$Body.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		return ComponentHolder_$nape_$phys_$Body.__MAP.h.hasOwnProperty(id);
	}
	,__class__: View_$nape_$phys_$Body
});
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var components_Status = function() {
	this.interactingBodies = [];
};
$hxClasses["components.Status"] = components_Status;
components_Status.__name__ = ["components","Status"];
components_Status.prototype = {
	__class__: components_Status
};
var echo_Echo = function() {
	this.timestamp = new Date().getTime() / 1000;
	this.updateStats = new haxe_ds_IntMap();
	this.systems = new List();
	this.views = new List();
	this.entities = new List();
	this.systemsMap = new haxe_ds_IntMap();
	this.viewsMap = new haxe_ds_IntMap();
	this.entitiesMap = new haxe_ds_IntMap();
};
$hxClasses["echo.Echo"] = echo_Echo;
echo_Echo.__name__ = ["echo","Echo"];
echo_Echo.prototype = {
	toString: function() {
		var ret = "Echo" + (" ( " + this.systems.length + " )") + (" { " + this.views.length + " }") + (" [ " + this.entities.length + " ]");
		ret += "\n    since last update : " + this.updateStats.h[-10] + " ms";
		ret += "\n    echo total update : " + this.updateStats.h[-100] + " ms";
		var _g_head = this.systems.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			ret += "\n        ( " + Type.getClassName(val == null ? null : js_Boot.getClass(val)) + " ) : " + this.updateStats.h[val.__id] + " ms";
		}
		var _g_head1 = this.views.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			ret += "\n    { " + Type.getClassName(val1 == null ? null : js_Boot.getClass(val1)) + (" } [ " + val1.entities.length + " ]");
		}
		return ret;
	}
	,update: function(dt) {
		var this1 = this.updateStats;
		var value = (new Date().getTime() / 1000 - this.timestamp) * 1000 | 0;
		this1.h[-10] = value;
		var updateTimestamp = new Date().getTime() / 1000;
		var _g_head = this.systems.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var s = val;
			this.timestamp = new Date().getTime() / 1000;
			s.update(dt);
			var this2 = this.updateStats;
			var key = s.__id;
			var value1 = (new Date().getTime() / 1000 - this.timestamp) * 1000 | 0;
			this2.h[key] = value1;
		}
		this.timestamp = new Date().getTime() / 1000;
		this.updateStats.h[-100] = (this.timestamp - updateTimestamp) * 1000 | 0;
	}
	,addSystem: function(s) {
		if(!this.systemsMap.h.hasOwnProperty(s.__id)) {
			this.systemsMap.h[s.__id] = s;
			this.systems.add(s);
			s.activate(this);
		}
	}
	,removeSystem: function(s) {
		if(this.systemsMap.h.hasOwnProperty(s.__id)) {
			s.deactivate();
			this.systemsMap.remove(s.__id);
			this.systems.remove(s);
		}
	}
	,addView: function(v) {
		if(!this.viewsMap.h.hasOwnProperty(v.__id)) {
			this.viewsMap.h[v.__id] = v;
			this.views.add(v);
			v.activate(this);
		}
	}
	,removeView: function(v) {
		if(this.viewsMap.h.hasOwnProperty(v.__id)) {
			v.deactivate();
			this.viewsMap.remove(v.__id);
			this.views.remove(v);
		}
	}
	,id: function() {
		var id = ++echo_Echo.__IDSEQUENCE;
		this.entitiesMap.h[id] = id;
		this.entities.add(id);
		return id;
	}
	,__class__: echo_Echo
};
var echo_System = function() {
	this.__id = -1;
};
$hxClasses["echo.System"] = echo_System;
echo_System.__name__ = ["echo","System"];
echo_System.prototype = {
	activate: function(echo1) {
		this.echo = echo1;
		this.onactivate();
	}
	,deactivate: function() {
		this.echo = null;
	}
	,onactivate: function() {
	}
	,update: function(dt) {
	}
	,__class__: echo_System
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			return haxe_crypto_Base64.decode(x.data).toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function() { };
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return (1 - (i >>> 31 << 1)) * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[_g1++];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	path = path.split("\\").join("/");
	if(path == "/") {
		return "/";
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split("/");
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join("/");
	var regex_r = new RegExp("([^:])/+","g".split("u").join(""));
	tmp.replace(regex_r,"$1" + "/");
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var _g21 = tmp.charCodeAt(_g11++);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCharCode(_g21);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCharCode(_g21);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		var v = this.__x.get(name);
		if(v == null) {
			var _this = this.__x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			throw new js__$Boot_HaxeError(_this.nodeName + " is missing attribute " + name);
		}
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	resolve: function(name) {
		var l = new List();
		var x = this.__x.elementsNamed(name);
		while(x.hasNext()) l.add(new haxe_xml_Fast(x.next()));
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	__class__: haxe_xml_Fast
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var luxe_Audio = function(_core) {
	this.core = _core;
};
$hxClasses["luxe.Audio"] = luxe_Audio;
luxe_Audio.__name__ = ["luxe","Audio"];
luxe_Audio.prototype = {
	__class__: luxe_Audio
};
var luxe_SizeMode = { __ename__ : true, __constructs__ : ["fit","cover","contain"] };
luxe_SizeMode.fit = ["fit",0];
luxe_SizeMode.fit.toString = $estr;
luxe_SizeMode.fit.__enum__ = luxe_SizeMode;
luxe_SizeMode.cover = ["cover",1];
luxe_SizeMode.cover.toString = $estr;
luxe_SizeMode.cover.__enum__ = luxe_SizeMode;
luxe_SizeMode.contain = ["contain",2];
luxe_SizeMode.contain.toString = $estr;
luxe_SizeMode.contain.__enum__ = luxe_SizeMode;
var luxe_Emitter = function() {
	this._checking = false;
	this._to_remove = new List();
	this.connected = new List();
	this.bindings = new haxe_ds_IntMap();
};
$hxClasses["luxe.Emitter"] = luxe_Emitter;
luxe_Emitter.__name__ = ["luxe","Emitter"];
luxe_Emitter.prototype = {
	_emitter_destroy: function() {
		while(this._to_remove.length > 0) {
			var _node = this._to_remove.pop();
			_node.event = null;
			_node.handler = null;
			_node = null;
		}
		while(this.connected.length > 0) {
			var _node1 = this.connected.pop();
			_node1.event = null;
			_node1.handler = null;
			_node1 = null;
		}
		this._to_remove = null;
		this.connected = null;
		this.bindings = null;
	}
	,emit: function(event,data) {
		if(this.bindings == null) {
			return;
		}
		this._check();
		this._checking = true;
		var _list = this.bindings.h[event];
		if(_list != null && _list.length > 0) {
			var _g = 0;
			while(_g < _list.length) {
				var handler = _list[_g];
				++_g;
				handler(data);
			}
		}
		this._checking = false;
		this._check();
	}
	,on: function(event,handler) {
		if(this.bindings == null) {
			return;
		}
		this._check();
		if(!this.bindings.h.hasOwnProperty(event)) {
			this.bindings.h[event] = [handler];
			this.connected.push({ handler : handler, event : event});
		} else {
			var _list = this.bindings.h[event];
			if(_list.indexOf(handler) == -1) {
				_list.push(handler);
				this.connected.push({ handler : handler, event : event});
			}
		}
	}
	,off: function(event,handler) {
		if(this.bindings == null) {
			return false;
		}
		this._check();
		var _success = false;
		if(this.bindings.h.hasOwnProperty(event)) {
			this._to_remove.push({ event : event, handler : handler});
			var _g_head = this.connected.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				if(val.event == event && val.handler == handler) {
					this.connected.remove(val);
				}
			}
			_success = true;
		}
		return _success;
	}
	,_check: function() {
		if(this._checking || this._to_remove == null) {
			return;
		}
		this._checking = true;
		if(this._to_remove.length > 0) {
			var _g_head = this._to_remove.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var _list = this.bindings.h[val.event];
				if(_list != null) {
					HxOverrides.remove(_list,val.handler);
					if(_list.length == 0) {
						this.bindings.remove(val.event);
					}
				}
			}
			this._to_remove = null;
			this._to_remove = new List();
		}
		this._checking = false;
	}
	,__class__: luxe_Emitter
};
var luxe_Objects = function(_name,_id) {
	if(_id == null) {
		_id = "";
	}
	if(_name == null) {
		_name = "";
	}
	this.name = "";
	this.id = "";
	luxe_Emitter.call(this);
	this.set_name(_name);
	this.set_id(_id == "" ? Luxe.utils.uniqueid() : _id);
};
$hxClasses["luxe.Objects"] = luxe_Objects;
luxe_Objects.__name__ = ["luxe","Objects"];
luxe_Objects.__super__ = luxe_Emitter;
luxe_Objects.prototype = $extend(luxe_Emitter.prototype,{
	set_name: function(_name) {
		return this.name = _name;
	}
	,set_id: function(_id) {
		return this.id = _id;
	}
	,get_name: function() {
		return this.name;
	}
	,get_id: function() {
		return this.id;
	}
	,__class__: luxe_Objects
	,__properties__: {set_name:"set_name",get_name:"get_name",set_id:"set_id",get_id:"get_id"}
});
var luxe_Entity = function(_options) {
	this.component_count = 0;
	this.active = true;
	this.fixed_rate = 0;
	this.started = false;
	this.inited = false;
	this.destroyed = false;
	luxe_Objects.call(this,"entity");
	var _g = this;
	_g.set_name(_g.get_name() + ("." + this.get_id()));
	this.options = _options;
	this._components = new luxe_components_Components(this);
	this.children = [];
	this.events = new luxe_Events();
	if(this.options != null && this.options.transform != null) {
		this.set_transform(this.options.transform);
	} else {
		this.set_transform(new phoenix_Transform());
	}
	var _this = this.get_transform();
	if(_this._pos_handlers == null) {
		_this._pos_handlers = [];
	}
	_this._pos_handlers.push($bind(this,this.set_pos_from_transform));
	var _this1 = this.get_transform();
	if(_this1._scale_handlers == null) {
		_this1._scale_handlers = [];
	}
	_this1._scale_handlers.push($bind(this,this.set_scale_from_transform));
	var _this2 = this.get_transform();
	if(_this2._origin_handlers == null) {
		_this2._origin_handlers = [];
	}
	_this2._origin_handlers.push($bind(this,this.set_origin_from_transform));
	var _this3 = this.get_transform();
	if(_this3._parent_handlers == null) {
		_this3._parent_handlers = [];
	}
	_this3._parent_handlers.push($bind(this,this.set_parent_from_transform));
	var _this4 = this.get_transform();
	if(_this4._rotation_handlers == null) {
		_this4._rotation_handlers = [];
	}
	_this4._rotation_handlers.push($bind(this,this.set_rotation_from_transform));
	if(this.options != null) {
		if(this.options.name_unique == null) {
			this.options.name_unique = false;
		}
		if(this.options.name != null) {
			this.set_name(this.options.name);
			if(this.options.name_unique) {
				var _g1 = this;
				_g1.set_name(_g1.get_name() + ("." + this.get_id()));
			}
		}
		if(this.options.pos != null) {
			var _op = this.options.pos;
			this.set_pos(new phoenix_Vector(_op.x,_op.y,_op.z,_op.w));
		}
		if(this.options.scale != null) {
			var _os = this.options.scale;
			this.set_scale(new phoenix_Vector(_os.x,_os.y,_os.z,_os.w));
		}
		var _should_add = true;
		if(this.options.no_scene != null) {
			if(this.options.no_scene == true) {
				_should_add = false;
			}
		}
		if(this.options.parent != null) {
			_should_add = false;
			this.set_parent(this.options.parent);
		}
		if(_should_add) {
			if(this.options.scene != null) {
				this.set_scene(this.options.scene);
			} else {
				this.set_scene(Luxe.scene);
			}
		}
	} else {
		this.set_scene(Luxe.scene);
	}
	if(this.get_scene() != null) {
		this.get_scene().add(this);
	}
};
$hxClasses["luxe.Entity"] = luxe_Entity;
luxe_Entity.__name__ = ["luxe","Entity"];
luxe_Entity.__super__ = luxe_Objects;
luxe_Entity.prototype = $extend(luxe_Objects.prototype,{
	init: function() {
	}
	,update: function(dt) {
	}
	,ondestroy: function() {
	}
	,onwindowsized: function(event) {
	}
	,_init: function() {
		this.init();
		this.emit(2);
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]).init();
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._init();
			}
		}
		this.inited = true;
	}
	,_reset: function(_) {
		this.emit(3);
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]);
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._reset(_);
			}
		}
		var _rate = this.fixed_rate;
		if(this.fixed_rate_timer != null) {
			this.fixed_rate_timer.stop();
			this.fixed_rate_timer = null;
		}
		if(_rate != 0 && this.get_parent() == null && !this.destroyed) {
			this.fixed_rate_timer = new snow_api_Timer(_rate);
			this.fixed_rate_timer.run = $bind(this,this._fixed_update);
		}
		this.started = true;
	}
	,destroy: function(_from_parent) {
		if(_from_parent == null) {
			_from_parent = false;
		}
		if(this.destroyed != false) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("destroyed == false" + (" ( " + ("entity / destroying repeatedly " + this.get_name()) + " )")));
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child.destroy(true);
				_child = null;
			}
		}
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) {
				var _component = _this.map.get(_this._keys[_g_index++]);
				_component.onremoved();
				_component.ondestroy();
				_component = null;
			}
		}
		this.children = null;
		this._components.destroy();
		this._components = null;
		this.emit(8);
		this.ondestroy();
		if(this.get_parent() != null && !_from_parent) {
			this.get_parent()._remove_child(this);
		}
		if(this.fixed_rate_timer != null) {
			this.fixed_rate_timer.stop();
			this.fixed_rate_timer = null;
		}
		this.destroyed = true;
		this.inited = false;
		this.started = false;
		if(this.get_scene() != null) {
			this.get_scene().remove(this);
		}
		if(this.events != null) {
			this.events.destroy();
			this.events = null;
		}
		if(this.get_transform() != null) {
			this.get_transform().destroy();
			this.set_transform(null);
		}
		this._emitter_destroy();
		this.set_id(null);
	}
	,_update: function(dt) {
		if(this.destroyed) {
			return;
		}
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		var _this = this.get_transform();
		if(_this.parent != null && _this.parent.dirty) {
			_this.parent.clean_check();
		}
		if(_this.dirty && !_this._cleaning && !_this.manual_update) {
			_this.clean();
		}
		this.update(dt);
		if(this.events != null) {
			this.events.process();
		}
		if(this.component_count > 0) {
			var _g_index;
			var _this1 = this._components.components;
			_g_index = 0;
			while(_g_index < _this1._keys.length) _this1.map.get(_this1._keys[_g_index++]).update(dt);
		}
		if(this.children != null && this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._update(dt);
			}
		}
	}
	,_fixed_update: function() {
		if(this.destroyed) {
			return;
		}
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(7);
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]);
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._fixed_update();
			}
		}
	}
	,_listen: function(_event,_handler,_self) {
		if(_self == null) {
			_self = false;
		}
		if(!_self) {
			this.on(_event,_handler);
		}
		var _source = null;
		if(this.get_scene() != null) {
			_source = this.get_scene();
		} else if(this.get_parent() != null) {
			var _parent = this.get_parent();
			while(true) if(_parent.get_scene() == null) {
				if(_parent.get_parent() == null) {
					haxe_Log.trace("   i / entity / " + "entity has no parent or scene, currently no core events will reach it.",{ fileName : "Entity.hx", lineNumber : 517, className : "luxe.Entity", methodName : "_find_emit_source"});
					break;
				} else {
					_parent = _parent.get_parent();
				}
			} else {
				_source = _parent.get_scene();
				break;
			}
		} else {
			haxe_Log.trace("   i / entity / " + "entity has no parent or scene, currently no core events will reach it.",{ fileName : "Entity.hx", lineNumber : 539, className : "luxe.Entity", methodName : "_find_emit_source"});
		}
		var _source1 = _source;
		if(_source1 != null) {
			switch(_event) {
			case 12:
				_source1.on(_event,$bind(this,this._keydown));
				break;
			case 13:
				_source1.on(_event,$bind(this,this._keyup));
				break;
			case 14:
				_source1.on(_event,$bind(this,this._textinput));
				break;
			case 15:
				_source1.on(_event,$bind(this,this._inputdown));
				break;
			case 16:
				_source1.on(_event,$bind(this,this._inputup));
				break;
			case 17:
				_source1.on(_event,$bind(this,this._mousedown));
				break;
			case 18:
				_source1.on(_event,$bind(this,this._mouseup));
				break;
			case 19:
				_source1.on(_event,$bind(this,this._mousemove));
				break;
			case 20:
				_source1.on(_event,$bind(this,this._mousewheel));
				break;
			case 21:
				_source1.on(_event,$bind(this,this._touchdown));
				break;
			case 22:
				_source1.on(_event,$bind(this,this._touchup));
				break;
			case 23:
				_source1.on(_event,$bind(this,this._touchmove));
				break;
			case 24:
				_source1.on(_event,$bind(this,this._gamepadaxis));
				break;
			case 25:
				_source1.on(_event,$bind(this,this._gamepaddown));
				break;
			case 26:
				_source1.on(_event,$bind(this,this._gamepadup));
				break;
			case 27:
				_source1.on(_event,$bind(this,this._gamepaddevice));
				break;
			case 29:
				_source1.on(_event,$bind(this,this._windowmoved));
				break;
			case 30:
				_source1.on(_event,$bind(this,this._windowresized));
				break;
			case 31:
				_source1.on(_event,$bind(this,this._windowsized));
				break;
			case 32:
				_source1.on(_event,$bind(this,this._windowminimized));
				break;
			case 33:
				_source1.on(_event,$bind(this,this._windowrestored));
				break;
			}
		}
	}
	,_unlisten: function(_event,_handler,_self) {
		if(_self == null) {
			_self = false;
		}
		var _source = null;
		if(this.get_scene() != null) {
			_source = this.get_scene();
		} else if(this.get_parent() != null) {
			var _parent = this.get_parent();
			while(true) if(_parent.get_scene() == null) {
				if(_parent.get_parent() == null) {
					break;
				} else {
					_parent = _parent.get_parent();
				}
			} else {
				_source = _parent.get_scene();
				break;
			}
		}
		var _source1 = _source;
		if(!_self) {
			this.off(_event,_handler);
		}
		if(_source1 != null) {
			switch(_event) {
			case 12:
				_source1.off(_event,$bind(this,this._keydown));
				break;
			case 13:
				_source1.off(_event,$bind(this,this._keyup));
				break;
			case 14:
				_source1.off(_event,$bind(this,this._textinput));
				break;
			case 15:
				_source1.off(_event,$bind(this,this._inputdown));
				break;
			case 16:
				_source1.off(_event,$bind(this,this._inputup));
				break;
			case 17:
				_source1.off(_event,$bind(this,this._mousedown));
				break;
			case 18:
				_source1.off(_event,$bind(this,this._mouseup));
				break;
			case 19:
				_source1.off(_event,$bind(this,this._mousemove));
				break;
			case 20:
				_source1.off(_event,$bind(this,this._mousewheel));
				break;
			case 21:
				_source1.off(_event,$bind(this,this._touchdown));
				break;
			case 22:
				_source1.off(_event,$bind(this,this._touchup));
				break;
			case 23:
				_source1.off(_event,$bind(this,this._touchmove));
				break;
			case 24:
				_source1.off(_event,$bind(this,this._gamepadaxis));
				break;
			case 25:
				_source1.off(_event,$bind(this,this._gamepaddown));
				break;
			case 26:
				_source1.off(_event,$bind(this,this._gamepadup));
				break;
			case 27:
				_source1.off(_event,$bind(this,this._gamepaddevice));
				break;
			case 29:
				_source1.off(_event,$bind(this,this._windowmoved));
				break;
			case 30:
				_source1.off(_event,$bind(this,this._windowresized));
				break;
			case 31:
				_source1.off(_event,$bind(this,this._windowsized));
				break;
			case 32:
				_source1.off(_event,$bind(this,this._windowminimized));
				break;
			case 33:
				_source1.off(_event,$bind(this,this._windowrestored));
				break;
			}
		}
	}
	,_detach_scene: function() {
		if(this.get_scene() != null) {
			this.get_scene().off(3,$bind(this,this._reset));
			this.get_scene().off(8,$bind(this,this.destroy));
			this.get_scene().off(13,$bind(this,this._keyup));
			this.get_scene().off(12,$bind(this,this._keydown));
			this.get_scene().off(14,$bind(this,this._textinput));
			this.get_scene().off(17,$bind(this,this._mousedown));
			this.get_scene().off(18,$bind(this,this._mouseup));
			this.get_scene().off(19,$bind(this,this._mousemove));
			this.get_scene().off(20,$bind(this,this._mousewheel));
			this.get_scene().off(21,$bind(this,this._touchdown));
			this.get_scene().off(22,$bind(this,this._touchup));
			this.get_scene().off(23,$bind(this,this._touchmove));
			this.get_scene().off(16,$bind(this,this._inputup));
			this.get_scene().off(15,$bind(this,this._inputdown));
			this.get_scene().off(25,$bind(this,this._gamepaddown));
			this.get_scene().off(26,$bind(this,this._gamepadup));
			this.get_scene().off(24,$bind(this,this._gamepadaxis));
			this.get_scene().off(27,$bind(this,this._gamepaddevice));
			this.get_scene().off(29,$bind(this,this._windowmoved));
			this.get_scene().off(30,$bind(this,this._windowresized));
			this.get_scene().off(31,$bind(this,this._windowsized));
			this.get_scene().off(32,$bind(this,this._windowminimized));
			this.get_scene().off(33,$bind(this,this._windowrestored));
		}
	}
	,_attach_scene: function() {
		if(this.get_scene() != null) {
			this.get_scene().on(3,$bind(this,this._reset));
			this.get_scene().on(8,$bind(this,this.destroy));
		}
	}
	,_keyup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(13,_event);
	}
	,_keydown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(12,_event);
	}
	,_textinput: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(14,_event);
	}
	,_mousedown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(17,_event);
	}
	,_mouseup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(18,_event);
	}
	,_mousewheel: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(20,_event);
	}
	,_mousemove: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(19,_event);
	}
	,_touchdown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(21,_event);
	}
	,_touchup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(22,_event);
	}
	,_touchmove: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(23,_event);
	}
	,_gamepadaxis: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(24,_event);
	}
	,_gamepaddown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(25,_event);
	}
	,_gamepadup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(26,_event);
	}
	,_gamepaddevice: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(27,_event);
	}
	,_windowmoved: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(29,_event);
	}
	,_windowresized: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(30,_event);
	}
	,_windowsized: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.onwindowsized(_event);
		this.emit(31,_event);
	}
	,_windowminimized: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(32,_event);
	}
	,_windowrestored: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(33,_event);
	}
	,_inputdown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(15,_event);
	}
	,_inputup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) {
			return;
		}
		this.emit(16,_event);
	}
	,_add_child: function(child) {
		this.children.push(child);
		child.set_scene_root(this.scene_root);
		if(child.get_scene() != null) {
			child.get_scene().remove(child);
		} else {
			if(this.inited && !child.inited) {
				this.scene_root._delayed_init_entities.push(child);
			}
			if(this.started && !child.started) {
				this.scene_root._delayed_reset_entities.push(child);
			}
		}
	}
	,_remove_child: function(child) {
		HxOverrides.remove(this.children,child);
	}
	,set_pos_from_transform: function(_pos) {
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]);
		}
	}
	,set_rotation_from_transform: function(_rotation) {
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]);
		}
	}
	,set_scale_from_transform: function(_scale) {
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]);
		}
	}
	,set_origin_from_transform: function(_origin) {
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]);
		}
	}
	,set_parent_from_transform: function(_parent) {
		if(this.component_count > 0) {
			var _g_index;
			var _this = this._components.components;
			_g_index = 0;
			while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]);
		}
	}
	,set_pos: function(_p) {
		var _this = this.get_transform().local;
		_this.pos = _p;
		if(_p != null) {
			var _v = _this.pos;
			var listener = $bind(_this,_this._pos_change);
			_v.listen_x = listener;
			_v.listen_y = listener;
			_v.listen_z = listener;
			if(_this.pos_changed != null && !_this.ignore_listeners) {
				_this.pos_changed(_this.pos);
			}
		}
		return _this.pos;
	}
	,get_pos: function() {
		return this.get_transform().local.pos;
	}
	,set_rotation: function(_r) {
		var _this = this.get_transform().local;
		_this.rotation = _r;
		if(_r != null) {
			var _q = _this.rotation;
			var listener = $bind(_this,_this._rotation_change);
			_q.listen_x = listener;
			_q.listen_y = listener;
			_q.listen_z = listener;
			_q.listen_w = listener;
			if(_this.rotation_changed != null && !_this.ignore_listeners) {
				_this.rotation_changed(_this.rotation);
			}
		}
		return _this.rotation;
	}
	,set_scale: function(_s) {
		var _this = this.get_transform().local;
		_this.scale = _s;
		if(_s != null) {
			var _v = _this.scale;
			var listener = $bind(_this,_this._scale_change);
			_v.listen_x = listener;
			_v.listen_y = listener;
			_v.listen_z = listener;
			if(_this.scale_changed != null && !_this.ignore_listeners) {
				_this.scale_changed(_this.scale);
			}
		}
		return _this.scale;
	}
	,get_scale: function() {
		return this.get_transform().local.scale;
	}
	,set_origin: function(_origin) {
		var _this = this.get_transform();
		_this.dirty = true;
		if(_this.dirty && !_this._setup && _this._dirty_handlers != null && _this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = _this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(_this);
				}
			}
		}
		_this.origin = _origin;
		if(_this._origin_handlers != null && _this._origin_handlers.length > 0) {
			var _origin1 = _this.origin;
			var _g2 = 0;
			var _g11 = _this._origin_handlers;
			while(_g2 < _g11.length) {
				var _handler1 = _g11[_g2];
				++_g2;
				if(_handler1 != null) {
					_handler1(_origin1);
				}
			}
		}
		return _this.origin;
	}
	,get_origin: function() {
		return this.get_transform().origin;
	}
	,set_transform: function(_transform) {
		return this.transform = _transform;
	}
	,get_transform: function() {
		return this.transform;
	}
	,set_parent: function(other) {
		if(other == this) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("other != this" + (" ( " + "Entity setting itself as parent makes no sense" + " )")));
		}
		if(this.get_parent() != null) {
			this.get_parent()._remove_child(this);
		}
		this.parent = other;
		if(this.get_parent() != null) {
			this.get_parent()._add_child(this);
			var _this = this.get_transform();
			var _p = this.get_parent().get_transform();
			_this.dirty = true;
			if(_this.dirty && !_this._setup && _this._dirty_handlers != null && _this._dirty_handlers.length > 0) {
				var _g = 0;
				var _g1 = _this._dirty_handlers;
				while(_g < _g1.length) {
					var _handler = _g1[_g];
					++_g;
					if(_handler != null) {
						_handler(_this);
					}
				}
			}
			if(_this.parent != null) {
				var _this1 = _this.parent;
				if(_this1._clean_handlers != null) {
					HxOverrides.remove(_this1._clean_handlers,$bind(_this,_this.on_parent_cleaned));
				}
			}
			_this.parent = _p;
			if(_this._parent_handlers != null && _this._parent_handlers.length > 0) {
				var _parent = _this.parent;
				var _g2 = 0;
				var _g11 = _this._parent_handlers;
				while(_g2 < _g11.length) {
					var _handler1 = _g11[_g2];
					++_g2;
					if(_handler1 != null) {
						_handler1(_parent);
					}
				}
			}
			if(_this.parent != null) {
				var _this2 = _this.parent;
				if(_this2._clean_handlers == null) {
					_this2._clean_handlers = [];
				}
				_this2._clean_handlers.push($bind(_this,_this.on_parent_cleaned));
			}
		} else {
			var _this3 = this.get_transform();
			_this3.dirty = true;
			if(_this3.dirty && !_this3._setup && _this3._dirty_handlers != null && _this3._dirty_handlers.length > 0) {
				var _g3 = 0;
				var _g12 = _this3._dirty_handlers;
				while(_g3 < _g12.length) {
					var _handler2 = _g12[_g3];
					++_g3;
					if(_handler2 != null) {
						_handler2(_this3);
					}
				}
			}
			if(_this3.parent != null) {
				var _this4 = _this3.parent;
				if(_this4._clean_handlers != null) {
					HxOverrides.remove(_this4._clean_handlers,$bind(_this3,_this3.on_parent_cleaned));
				}
			}
			_this3.parent = null;
			if(_this3._parent_handlers != null && _this3._parent_handlers.length > 0) {
				var _parent1 = _this3.parent;
				var _g4 = 0;
				var _g13 = _this3._parent_handlers;
				while(_g4 < _g13.length) {
					var _handler3 = _g13[_g4];
					++_g4;
					if(_handler3 != null) {
						_handler3(_parent1);
					}
				}
			}
			if(_this3.parent != null) {
				var _this5 = _this3.parent;
				if(_this5._clean_handlers == null) {
					_this5._clean_handlers = [];
				}
				_this5._clean_handlers.push($bind(_this3,_this3.on_parent_cleaned));
			}
			this.scene_root.add(this);
		}
		return this.get_parent();
	}
	,get_parent: function() {
		return this.parent;
	}
	,set_scene: function(_scene) {
		this._detach_scene();
		this.scene = _scene;
		this._attach_scene();
		return this.get_scene();
	}
	,get_scene: function() {
		return this.scene;
	}
	,set_scene_root: function(_scene) {
		this.scene_root = _scene;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var _child = _g1[_g];
			++_g;
			_child.set_scene_root(_scene);
		}
		return this.scene_root;
	}
	,set_name: function(_name) {
		var _scene = this.get_scene();
		if(_scene != null && this.get_name() != null) {
			_scene.entities.remove(this.get_name());
			if(_scene.entities.exists(_name)) {
				haxe_Log.trace("    i / scene / " + ("" + _scene.get_name() + " / adding a second entity named " + _name + "!\r\n                This will replace the existing one, possibly leaving the previous one in limbo."),{ fileName : "Scene.hx", lineNumber : 96, className : "luxe.Scene", methodName : "handle_duplicate_warning"});
			}
			var _this = _scene.entities;
			if(__map_reserved[_name] != null) {
				_this.setReserved(_name,this);
			} else {
				_this.h[_name] = this;
			}
			_scene._has_changed = true;
		}
		return this.name = _name;
	}
	,get_active: function() {
		return this.active;
	}
	,__class__: luxe_Entity
	,__properties__: $extend(luxe_Objects.prototype.__properties__,{set_scene_root:"set_scene_root",set_origin:"set_origin",get_origin:"get_origin",set_scale:"set_scale",get_scale:"get_scale",set_rotation:"set_rotation",set_pos:"set_pos",get_pos:"get_pos",set_transform:"set_transform",get_transform:"get_transform",get_active:"get_active",set_scene:"set_scene",get_scene:"get_scene",set_parent:"set_parent",get_parent:"get_parent"})
});
var luxe_Camera = function(_options) {
	this._connected = false;
	this.minimum_shake = 0.1;
	this.shaking = false;
	this._size_factor = new phoenix_Vector();
	this._rotation_radian = new phoenix_Vector();
	this._rotation_cache = new phoenix_Quaternion();
	this.set_size_mode(luxe_SizeMode.fit);
	var _name = "untitled camera";
	if(_options != null) {
		if(_options.name != null) {
			_name = _options.name;
			_options.camera_name = "" + _name + ".view";
		}
	} else {
		_options = { no_scene : false};
	}
	if(_options.view == null) {
		_options.view = new phoenix_Camera(_options);
	}
	this.view = _options.view;
	luxe_Entity.call(this,{ name : _name, no_scene : _options.no_scene});
};
$hxClasses["luxe.Camera"] = luxe_Camera;
luxe_Camera.__name__ = ["luxe","Camera"];
luxe_Camera.__super__ = luxe_Entity;
luxe_Camera.prototype = $extend(luxe_Entity.prototype,{
	get_viewport: function() {
		return this.view.viewport;
	}
	,set_viewport: function(_v) {
		return this.view.set_viewport(_v);
	}
	,set_center: function(_c) {
		this.set_pos(new phoenix_Vector(_c.x - this.get_viewport().w / 2,_c.y - this.get_viewport().h / 2));
		return this.view.set_center(_c);
	}
	,get_zoom: function() {
		return this.view.zoom;
	}
	,set_zoom: function(_z) {
		this.view.set_zoom(_z);
		if(this.get_size() != null) {
			var _g = this.view.transform.local.scale;
			var _x = _g.x * (1 / this._size_factor.x);
			_g.x = _x;
			if(!_g._construct) {
				if(_g.listen_x != null && !_g.ignore_listeners) {
					_g.listen_x(_x);
				}
			}
			var _g1 = this.view.transform.local.scale;
			var _y = _g1.y * (1 / this._size_factor.y);
			_g1.y = _y;
			if(!_g1._construct) {
				if(_g1.listen_y != null && !_g1.ignore_listeners) {
					_g1.listen_y(_y);
				}
			}
		}
		return this.view.zoom;
	}
	,get_size: function() {
		return this.size;
	}
	,get_size_mode: function() {
		return this.size_mode;
	}
	,set_size_mode: function(_m) {
		if(this.get_size_mode() != null) {
			this.size_mode = _m;
			if(this.get_size() != null) {
				this.set_size(this.get_size());
			}
		}
		return this.size_mode = _m;
	}
	,_onwindowsized: function(_event) {
		if(this.get_size() != null) {
			this.set_viewport(new phoenix_Rectangle(this.get_viewport().x,this.get_viewport().y,_event.x,_event.y));
			this.set_size(this.get_size());
		}
	}
	,set_size: function(_size) {
		if(_size == null) {
			this.set_center(new phoenix_Vector(this.get_viewport().w / 2,this.get_viewport().h / 2));
			this.size = null;
			var _this = this._size_factor;
			var _this1 = this._size_factor;
			_this1.y = 1;
			var _x;
			if(_this1._construct) {
				_x = _this1.y;
			} else {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(1);
				}
				_x = _this1.y;
			}
			_this.x = _x;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x);
				}
			}
			this.set_zoom(this.get_zoom());
			this._connected = false;
			Luxe.off(31,$bind(this,this._onwindowsized));
			return this.get_size();
		}
		if(!this._connected) {
			Luxe.on(31,$bind(this,this._onwindowsized));
			this._connected = true;
		}
		var _ratio_x = this.get_viewport().w / _size.x;
		var _ratio_y = this.get_viewport().h / _size.y;
		var _shortest = Math.max(_ratio_x,_ratio_y);
		var _longest = Math.min(_ratio_x,_ratio_y);
		switch(this.get_size_mode()[1]) {
		case 0:
			_ratio_y = _longest;
			_ratio_x = _longest;
			break;
		case 1:
			_ratio_y = _shortest;
			_ratio_x = _shortest;
			break;
		case 2:
			break;
		}
		var _this2 = this._size_factor;
		_this2.x = _ratio_x;
		if(!_this2._construct) {
			if(_this2.listen_x != null && !_this2.ignore_listeners) {
				_this2.listen_x(_ratio_x);
			}
		}
		var _this3 = this._size_factor;
		_this3.y = _ratio_y;
		if(!_this3._construct) {
			if(_this3.listen_y != null && !_this3.ignore_listeners) {
				_this3.listen_y(_ratio_y);
			}
		}
		var _this4 = this.view.transform.local.scale;
		var _x1 = 1 / (this._size_factor.x * this.get_zoom());
		_this4.x = _x1;
		if(!_this4._construct) {
			if(_this4.listen_x != null && !_this4.ignore_listeners) {
				_this4.listen_x(_x1);
			}
		}
		var _this5 = this.view.transform.local.scale;
		var _y = 1 / (this._size_factor.y * this.get_zoom());
		_this5.y = _y;
		if(!_this5._construct) {
			if(_this5.listen_y != null && !_this5.ignore_listeners) {
				_this5.listen_y(_y);
			}
		}
		this.set_center(new phoenix_Vector(_size.x / 2,_size.y / 2));
		return this.size = new phoenix_Vector(_size.x,_size.y,_size.z,_size.w);
	}
	,set_pos_from_transform: function(_pos) {
		var _vw = this.view.viewport.w;
		var _vh = this.view.viewport.h;
		var _hvw = _vw / 2;
		var _hvh = _vh / 2;
		var _px = _pos.x;
		var _py = _pos.y;
		if(this.bounds != null) {
			if(_px < this.bounds.x) {
				_px = this.bounds.x;
			}
			if(_py < this.bounds.y) {
				_py = this.bounds.y;
			}
			if(_px + _hvw > this.bounds.w - _vw) {
				_px = this.bounds.w - _vw - _hvw;
			}
			if(_py + _hvh > this.bounds.h - _vh) {
				_py = this.bounds.h - _vh - _hvh;
			}
		}
		var _prev = _pos.ignore_listeners;
		_pos.ignore_listeners = true;
		var prev = _pos.ignore_listeners;
		_pos.ignore_listeners = true;
		_pos.x = _px;
		if(!_pos._construct) {
			if(_pos.listen_x != null && !_pos.ignore_listeners) {
				_pos.listen_x(_px);
			}
		}
		_pos.y = _py;
		if(!_pos._construct) {
			if(_pos.listen_y != null && !_pos.ignore_listeners) {
				_pos.listen_y(_py);
			}
		}
		_pos.ignore_listeners = prev;
		if(_pos.listen_x != null && !_pos.ignore_listeners) {
			_pos.listen_x(_pos.x);
		}
		if(_pos.listen_y != null && !_pos.ignore_listeners) {
			_pos.listen_y(_pos.y);
		}
		_pos.ignore_listeners = _prev;
		luxe_Entity.prototype.set_pos_from_transform.call(this,_pos);
		var tmp = this.view;
		var _this = this.view.pos;
		var _x = _pos.x;
		var _y = _pos.y;
		var _z = _pos.z;
		var prev1 = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = _x;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_x);
			}
		}
		_this.y = _y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_y);
			}
		}
		_this.z = _z;
		if(!_this._construct) {
			if(_this.listen_z != null && !_this.ignore_listeners) {
				_this.listen_z(_z);
			}
		}
		_this.ignore_listeners = prev1;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
		if(_this.listen_z != null && !_this.ignore_listeners) {
			_this.listen_z(_this.z);
		}
		tmp.set_pos(_this);
	}
	,set_rotation_from_transform: function(_rotation) {
		luxe_Entity.prototype.set_rotation_from_transform.call(this,_rotation);
		if(this.view != null) {
			var _this = this.view.transform.local;
			_this.rotation = _rotation;
			if(_rotation != null) {
				var _q = _this.rotation;
				var listener = $bind(_this,_this._rotation_change);
				_q.listen_x = listener;
				_q.listen_y = listener;
				_q.listen_z = listener;
				_q.listen_w = listener;
				if(_this.rotation_changed != null && !_this.ignore_listeners) {
					_this.rotation_changed(_this.rotation);
				}
			}
		}
	}
	,set_scale_from_transform: function(_scale) {
		luxe_Entity.prototype.set_scale_from_transform.call(this,_scale);
		if(this.view != null) {
			var _this = this.view.transform.local;
			_this.scale = _scale;
			if(_scale != null) {
				var _v = _this.scale;
				var listener = $bind(_this,_this._scale_change);
				_v.listen_x = listener;
				_v.listen_y = listener;
				_v.listen_z = listener;
				if(_this.scale_changed != null && !_this.ignore_listeners) {
					_this.scale_changed(_this.scale);
				}
			}
		}
	}
	,update: function(dt) {
		if(this.shaking) {
			this.shake_vector = Luxe.utils.geometry.random_point_in_unit_circle();
			var _g = this.shake_vector;
			var _x = _g.x * this.shake_amount;
			_g.x = _x;
			if(!_g._construct) {
				if(_g.listen_x != null && !_g.ignore_listeners) {
					_g.listen_x(_x);
				}
			}
			var _g1 = this.shake_vector;
			var _y = _g1.y * this.shake_amount;
			_g1.y = _y;
			if(!_g1._construct) {
				if(_g1.listen_y != null && !_g1.ignore_listeners) {
					_g1.listen_y(_y);
				}
			}
			var _g2 = this.shake_vector;
			var _z = _g2.z * this.shake_amount;
			_g2.z = _z;
			if(!_g2._construct) {
				if(_g2.listen_z != null && !_g2.ignore_listeners) {
					_g2.listen_z(_z);
				}
			}
			this.shake_amount *= 0.9;
			if(this.shake_amount <= this.minimum_shake) {
				this.shake_amount = 0;
				this.shaking = false;
			}
			var tmp = this.view;
			var _this = this.view.pos;
			var _x1 = this.get_transform().local.pos.x + this.shake_vector.x;
			var _y1 = this.get_transform().local.pos.y + this.shake_vector.y;
			var _z1 = this.get_transform().local.pos.z + this.shake_vector.z;
			var prev = _this.ignore_listeners;
			_this.ignore_listeners = true;
			_this.x = _x1;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x1);
				}
			}
			_this.y = _y1;
			if(!_this._construct) {
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(_y1);
				}
			}
			_this.z = _z1;
			if(!_this._construct) {
				if(_this.listen_z != null && !_this.ignore_listeners) {
					_this.listen_z(_z1);
				}
			}
			_this.ignore_listeners = prev;
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_this.x);
			}
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_this.y);
			}
			if(_this.listen_z != null && !_this.ignore_listeners) {
				_this.listen_z(_this.z);
			}
			tmp.set_pos(_this);
		}
	}
	,init: function() {
		luxe_Entity.prototype.init.call(this);
	}
	,ondestroy: function() {
		luxe_Entity.prototype.ondestroy.call(this);
	}
	,__class__: luxe_Camera
	,__properties__: $extend(luxe_Entity.prototype.__properties__,{set_size_mode:"set_size_mode",get_size_mode:"get_size_mode",set_size:"set_size",get_size:"get_size",set_zoom:"set_zoom",get_zoom:"get_zoom",set_center:"set_center",set_viewport:"set_viewport",get_viewport:"get_viewport"})
});
var luxe_ID = function(_name,_id) {
	if(_id == null) {
		_id = "";
	}
	if(_name == null) {
		_name = "";
	}
	this.name = "";
	this.name = _name;
	this.id = _id == "" ? Luxe.utils.uniqueid() : _id;
};
$hxClasses["luxe.ID"] = luxe_ID;
luxe_ID.__name__ = ["luxe","ID"];
luxe_ID.prototype = {
	__class__: luxe_ID
};
var luxe_Component = function(_options) {
	var _name = "";
	if(_options != null) {
		if(_options.name != null) {
			_name = _options.name;
		}
	}
	luxe_ID.call(this,_name == "" ? Luxe.utils.uniqueid() : _name);
};
$hxClasses["luxe.Component"] = luxe_Component;
luxe_Component.__name__ = ["luxe","Component"];
luxe_Component.__super__ = luxe_ID;
luxe_Component.prototype = $extend(luxe_ID.prototype,{
	init: function() {
	}
	,update: function(dt) {
	}
	,onadded: function() {
	}
	,onremoved: function() {
	}
	,ondestroy: function() {
	}
	,_detach_entity: function() {
	}
	,_attach_entity: function() {
	}
	,set_entity: function(_entity) {
		this._detach_entity();
		this.entity = _entity;
		this._attach_entity();
		return this.get_entity();
	}
	,get_entity: function() {
		return this.entity;
	}
	,__class__: luxe_Component
	,__properties__: {set_entity:"set_entity",get_entity:"get_entity"}
});
var luxe_Debug = function(_app) {
	this.last_cursor_grab = false;
	this.last_view_index = 0;
	this.current_view_index = 0;
	this.dt_average_count = 0;
	this.dt_average_span = 60;
	this.dt_average_accum = 0;
	this.dt_average = 0;
	this.visible = false;
	this.app = _app;
};
$hxClasses["luxe.Debug"] = luxe_Debug;
luxe_Debug.__name__ = ["luxe","Debug"];
luxe_Debug.internal_trace = function(_value,_info) {
	if(luxe_Debug.tracing != false) {
		throw new js__$Boot_HaxeError(luxe_DebugError.assertion("tracing == false" + (" ( " + "luxe.Debug: calling trace from a trace callback is an infinite loop!" + " )")));
	}
	luxe_Debug.tracing = true;
	var _out = "" + Std.string(_value);
	if(_info != null && _info.customParams != null) {
		_out += " " + _info.customParams.join(" ");
	}
	console.log("" + _info.fileName + "::" + StringTools.rpad(_info.lineNumber == null ? "null" : "" + _info.lineNumber," ",4) + " " + _out);
	if(!luxe_Debug.shut_down) {
		var _g = 0;
		var _g1 = luxe_Debug.trace_callbacks;
		while(_g < _g1.length) {
			var _callback = _g1[_g];
			++_g;
			_callback(_value,_info);
		}
	}
	luxe_Debug.tracing = false;
};
luxe_Debug.prototype = {
	get_view: function(_name) {
		var _g = 0;
		var _g1 = luxe_Debug.views;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			if(view.get_name() == _name) {
				return view;
			}
		}
		return null;
	}
	,start: function(_name,_max) {
		if(!this.app.headless) {
			luxe_debug_ProfilerDebugView.start(_name,_max);
		}
	}
	,end: function(_name) {
		if(!this.app.headless) {
			luxe_debug_ProfilerDebugView.end(_name);
		}
	}
	,init: function() {
		luxe_Debug.views = [];
		luxe_Debug.views.push(new luxe_debug_TraceDebugView(this));
		luxe_Debug.views.push(new luxe_debug_StatsDebugView(this));
		luxe_Debug.views.push(new luxe_debug_ProfilerDebugView(this));
		luxe_Debug.views.push(new luxe_debug_SceneDebugView(this));
		this.current_view = luxe_Debug.views[0];
		haxe_Log.trace = luxe_Debug.internal_trace;
	}
	,create_debug_console: function() {
		var _gthis = this;
		this.app.emitter.on(13,$bind(this,this.keyup));
		this.app.emitter.on(12,$bind(this,this.keydown));
		this.app.emitter.on(18,$bind(this,this.mouseup));
		this.app.emitter.on(17,$bind(this,this.mousedown));
		this.app.emitter.on(19,$bind(this,this.mousemove));
		this.app.emitter.on(20,$bind(this,this.mousewheel));
		this.app.emitter.on(22,$bind(this,this.touchup));
		this.app.emitter.on(21,$bind(this,this.touchdown));
		this.app.emitter.on(23,$bind(this,this.touchmove));
		this.batcher = new phoenix_Batcher(this.app.renderer,"debug_batcher",Math.floor(Math.pow(2,20)));
		this.batcher.set_show_stats(0);
		this.view = new phoenix_Camera({ camera_name : "debug_batcher_camera"});
		this.batcher.view = this.view;
		var _this = this.batcher;
		_this.layer = 999;
		_this.renderer.batchers.sort(($_=_this.renderer,$bind($_,$_.sort_batchers)));
		this.overlay = new phoenix_geometry_QuadGeometry({ id : "debug.overlay", x : 0, y : 0, w : this.app.screen.get_w(), h : this.app.screen.get_h(), color : new phoenix_Color(0,0,0,0.8), depth : 999, visible : false, batcher : this.batcher});
		this.overlay.set_locked(true);
		this.padding = new phoenix_Vector(this.app.screen.get_w() * 0.05,this.app.screen.get_h() * 0.05);
		this.inspector = new luxe_debug_Inspector({ pos : new phoenix_Vector(this.padding.x,this.padding.y), size : new phoenix_Vector(this.app.screen.get_w() - this.padding.x * 2,this.app.screen.get_h() - this.padding.y * 2), batcher : this.batcher});
		this.inspector.onrefresh = $bind(this,this.refresh);
		this.app.emitter.on(31,function(_event) {
			var _w = _event.x;
			var _h = _event.y;
			var _this1 = _gthis.padding;
			var _x = _w * 0.05;
			var _y = _h * 0.05;
			var prev = _this1.ignore_listeners;
			_this1.ignore_listeners = true;
			_this1.x = _x;
			if(!_this1._construct) {
				if(_this1.listen_x != null && !_this1.ignore_listeners) {
					_this1.listen_x(_x);
				}
			}
			_this1.y = _y;
			if(!_this1._construct) {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_y);
				}
			}
			_this1.ignore_listeners = prev;
			if(_this1.listen_x != null && !_this1.ignore_listeners) {
				_this1.listen_x(_this1.x);
			}
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(_this1.y);
			}
			_gthis.overlay.resize_xy(_w,_h);
			_gthis.view.set_viewport(new phoenix_Rectangle(0,0,_w,_h));
			_gthis.inspector.set_size(new phoenix_Vector(_w - _gthis.padding.x * 2,_h - _gthis.padding.y * 2));
			_gthis.inspector.set_pos(new phoenix_Vector(_gthis.padding.x,_gthis.padding.y));
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onwindowsized(_event);
			}
		});
		var _g2 = 0;
		var _g11 = luxe_Debug.views;
		while(_g2 < _g11.length) {
			var view1 = _g11[_g2];
			++_g2;
			view1.create();
		}
	}
	,render: function() {
		if(this.visible) {
			this.start(luxe_Debug.debug_batch_tag);
			var _this = this.batcher;
			if(_this.name != "") {
				Luxe.debug.start(_this.name);
			}
			_this.draw_calls = 0;
			_this.vert_count = 0;
			_this.emitter.emit(1,_this);
			_this.view.process();
			_this.renderer.state.viewport(_this.view.viewport.x,_this.view.viewport.y,_this.view.viewport.w,_this.view.viewport.h);
			_this.batch(false);
			_this.emitter.emit(2,_this);
			var _stats = _this.renderer.stats;
			var _node = _this.geometry.root;
			_stats.geometry_count += (_node == null ? 0 : _node.nodecount) * _this.show_stats;
			_stats.dynamic_batched_count += _this.dynamic_batched_count * _this.show_stats;
			_stats.static_batched_count += _this.static_batched_count * _this.show_stats;
			_stats.visible_count += _this.visible_count * _this.show_stats;
			_stats.draw_calls += _this.draw_calls * _this.show_stats;
			_stats.vert_count += _this.vert_count * _this.show_stats;
			if(_this.name != "") {
				Luxe.debug.end(_this.name);
			}
			this.end(luxe_Debug.debug_batch_tag);
		}
	}
	,mouseup: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) ++_g;
		}
	}
	,mousedown: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) ++_g;
		}
	}
	,mousemove: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) ++_g;
		}
	}
	,mousewheel: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onmousewheel(e);
			}
		}
	}
	,touchup: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) ++_g;
		}
	}
	,touchdown: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) ++_g;
		}
	}
	,touchmove: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) ++_g;
		}
	}
	,keyup: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) ++_g;
		}
	}
	,keydown: function(e) {
		if(e.scancode == 53) {
			this.set_visible(!this.visible);
		}
		if(this.visible) {
			if(e.keycode == 49 && this.visible) {
				this.switch_view();
			}
			var _g = 0;
			var _g1 = luxe_Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onkeydown(e);
			}
		}
	}
	,refresh: function() {
		if(this.current_view != null) {
			this.current_view.refresh();
		}
	}
	,switch_view: function() {
		this.last_view_index = this.current_view_index;
		this.current_view_index++;
		if(this.current_view_index > luxe_Debug.views.length - 1) {
			this.current_view_index = 0;
		}
		luxe_Debug.views[this.last_view_index].hide();
		this.current_view = luxe_Debug.views[this.current_view_index];
		this.current_view.show();
	}
	,set_visible: function(_value) {
		this.visible = _value;
		this.overlay.set_visible(this.visible);
		if(this.visible) {
			this.last_cursor_grab = this.app.screen.cursor.get_grab();
			this.app.screen.cursor.set_grab(false);
			this.current_view.show();
			this.inspector.show();
		} else {
			if(this.last_cursor_grab != false) {
				this.app.screen.cursor.set_grab(this.last_cursor_grab);
			}
			this.current_view.hide();
			this.inspector.hide();
		}
		return this.visible;
	}
	,destroy: function() {
		this.app.emitter.off(13,$bind(this,this.keyup));
		this.app.emitter.off(12,$bind(this,this.keydown));
		this.app.emitter.off(18,$bind(this,this.mouseup));
		this.app.emitter.off(17,$bind(this,this.mousedown));
		this.app.emitter.off(19,$bind(this,this.mousemove));
		this.app.emitter.off(20,$bind(this,this.mousewheel));
		luxe_Debug.shut_down = true;
	}
	,process: function() {
		this.dt_average_accum += this.app.frame_delta;
		this.dt_average_count++;
		if(this.dt_average_count == this.dt_average_span - 1) {
			this.dt_average = this.dt_average_accum / this.dt_average_span;
			this.dt_average_accum = this.dt_average;
			this.dt_average_count = 0;
		}
		if(!this.visible) {
			return;
		}
		var n = Math.pow(10,5);
		var n1 = Math.pow(10,5);
		this.inspector.title.set_text("[" + this.current_view.get_name() + "] / " + Math.round(1 / this.dt_average) + " / " + (this.app.frame_delta * n | 0) / n + " / " + (this.dt_average * n1 | 0) / n1);
		var _g = 0;
		var _g1 = luxe_Debug.views;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			view.process();
		}
	}
	,__class__: luxe_Debug
	,__properties__: {set_visible:"set_visible"}
};
var luxe_Draw = function(_core) {
	this.core = _core;
};
$hxClasses["luxe.Draw"] = luxe_Draw;
luxe_Draw.__name__ = ["luxe","Draw"];
luxe_Draw.prototype = {
	rectangle: function(options) {
		if(options.id == null) {
			options.id = "rectangle.geometry";
		}
		if(options.batcher == null) {
			options.batcher = Luxe.renderer.batcher;
		}
		return new phoenix_geometry_RectangleGeometry(options);
	}
	,box: function(options) {
		if(options.id == null) {
			options.id = "quad.geometry";
		}
		if(options.batcher == null) {
			options.batcher = Luxe.renderer.batcher;
		}
		return new phoenix_geometry_QuadGeometry(options);
	}
	,arc: function(options) {
		if(options.id == null) {
			options.id = "arc.geometry";
		}
		if(options.batcher == null) {
			options.batcher = Luxe.renderer.batcher;
		}
		return new phoenix_geometry_ArcGeometry(options);
	}
	,ngon: function(options) {
		if(options.id == null) {
			options.id = "ngon.geometry";
		}
		if(options.batcher == null) {
			options.batcher = Luxe.renderer.batcher;
		}
		var _sides = 3;
		var _radius = 64;
		var _solid = false;
		var _x = 0;
		var _y = 0;
		var _angle = 0;
		if(options.sides != null) {
			_sides = options.sides;
		}
		if(options.r != null) {
			_radius = options.r;
		}
		if(options.x != null) {
			_x = options.x;
		}
		if(options.y != null) {
			_y = options.y;
		}
		if(options.angle != null) {
			_angle = options.angle;
		}
		if(options.solid != null) {
			_solid = options.solid;
		}
		if(!_solid) {
			options.primitive_type = 1;
		} else {
			options.primitive_type = 6;
		}
		var _geometry = new phoenix_geometry_Geometry(options);
		var _sides_over_pi = Math.PI / _sides;
		var _sides_over_twopi = 2 * Math.PI / _sides;
		var _angle_rad = _angle * 0.017453292519943278;
		var _color = options.color;
		if(_solid) {
			_geometry.add(new phoenix_geometry_Vertex(new phoenix_Vector(_x,_y),_color));
		}
		var _points = [];
		var _g1 = 0;
		var _g = _solid == false ? _sides : _sides + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var __pos = new phoenix_Vector(_x + _radius * Math.sin(_angle_rad + _sides_over_pi + i * _sides_over_twopi),_y + _radius * Math.cos(_angle_rad + _sides_over_pi + i * _sides_over_twopi),0);
			_geometry.add(new phoenix_geometry_Vertex(__pos,_color));
			if(!_solid) {
				if(i > 0) {
					_geometry.add(new phoenix_geometry_Vertex(__pos,_color));
				}
			}
			_points.push(__pos);
		}
		if(!_solid) {
			_geometry.add(new phoenix_geometry_Vertex(_points[0],_color));
		}
		return _geometry;
	}
	,poly: function(options) {
		if(options.id == null) {
			options.id = "poly.geometry";
		}
		if(options.batcher == null) {
			options.batcher = Luxe.renderer.batcher;
		}
		if(options.solid == null) {
			options.solid = true;
		}
		if(options.close == null) {
			options.close = false;
		}
		var _default_col = null;
		var _has_colors = options.colors != null;
		if(!_has_colors) {
			if(options.color == null) {
				options.color = new phoenix_Color();
			}
			_default_col = options.color;
		}
		if(options.solid) {
			if(options.primitive_type == null) {
				options.primitive_type = 6;
			}
			var _geometry = new phoenix_geometry_Geometry(options);
			var _idx = 0;
			var _g = 0;
			var _g1 = options.points;
			while(_g < _g1.length) {
				var _point = _g1[_g];
				++_g;
				_geometry.add(new phoenix_geometry_Vertex(_point,_has_colors ? options.colors[_idx] : _default_col));
				++_idx;
			}
			return _geometry;
		} else {
			if(options.primitive_type == null) {
				options.primitive_type = 1;
			}
			var _geometry1 = new phoenix_geometry_Geometry(options);
			var _idx1 = 0;
			var _l = options.points.length;
			var _g2 = 0;
			var _g11 = options.points;
			while(_g2 < _g11.length) {
				var _point1 = _g11[_g2];
				++_g2;
				_geometry1.add(new phoenix_geometry_Vertex(_point1,_has_colors ? options.colors[_idx1] : _default_col));
				if(_idx1 < _l - 2) {
					_geometry1.add(new phoenix_geometry_Vertex(options.points[_idx1 + 1],_has_colors ? options.colors[_idx1 + 1] : _default_col));
				}
				++_idx1;
			}
			if(options.close) {
				var _last = options.points.length - 1;
				var _color2 = _has_colors ? options.colors[_last] : _default_col;
				_geometry1.add(new phoenix_geometry_Vertex(options.points[_last],_has_colors ? options.colors[0] : _default_col));
				_geometry1.add(new phoenix_geometry_Vertex(options.points[0],_color2));
			}
			return _geometry1;
		}
	}
	,__class__: luxe_Draw
};
var snow_App = function() {
	this.next_tick = 0;
	this.fixed_overflow = 0.0;
	this.fixed_frame_time = 0.0167;
	this.fixed_timestep = false;
	this.fixed_alpha = 1.0;
	this.sim_time = 0;
	this.sim_delta = 0.016666666666666666;
	this.frame_max_delta = 0.25;
	this.frame_delta = 0.016666666666666666;
	this.frame_start_prev = 0.0;
	this.frame_start = 0.016666666666666666;
	this.tick_delta = 0.016666666666666666;
	this.tick_start_prev = 0.0;
	this.tick_start = 0.016666666666666666;
	this.update_rate = 0;
	this.fixed_delta = 0;
	this.timescale = 1;
};
$hxClasses["snow.App"] = snow_App;
snow_App.__name__ = ["snow","App"];
snow_App.prototype = {
	update: function(dt) {
	}
	,tick: function(dt) {
	}
	,ontickstart: function() {
	}
	,ontickend: function() {
	}
	,internal_init: function() {
		this.sim_time = 0;
		this.fixed_frame_time = 0.016666666666666666;
		this.tick_start = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
		this.tick_start_prev = this.tick_start - this.fixed_frame_time;
		this.tick_delta = this.fixed_frame_time;
		this.frame_start = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
		this.frame_start_prev = this.frame_start - this.fixed_frame_time;
		this.frame_delta = this.sim_delta = this.fixed_frame_time;
	}
	,internal_tick: function() {
		this.ontickstart();
		this.tick_start = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
		this.tick_delta = this.tick_start - this.tick_start_prev;
		this.tick_start_prev = this.tick_start;
		if(this.fixed_timestep) {
			this.frame_start = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
			this.frame_delta = this.frame_start - this.frame_start_prev;
			this.frame_start_prev = this.frame_start;
			this.sim_delta = this.frame_delta * this.timescale;
			if(this.sim_delta > this.frame_max_delta) {
				this.sim_delta = this.frame_max_delta;
			}
			this.fixed_overflow += this.sim_delta;
			var _slice = this.fixed_frame_time * this.timescale;
			while(this.fixed_overflow >= this.fixed_frame_time) {
				this.update(_slice);
				this.sim_time += _slice;
				this.fixed_overflow -= _slice;
			}
			this.fixed_alpha = this.fixed_overflow / this.fixed_frame_time;
		} else {
			this.internal_tick_default();
		}
		this.tick(this.tick_delta);
		this.ontickend();
	}
	,internal_tick_default: function() {
		if(this.update_rate != 0) {
			if(window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start < this.next_tick) {
				return;
			}
			this.next_tick = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start + this.update_rate;
		}
		this.frame_start = this.tick_start;
		this.frame_delta = this.frame_start - this.frame_start_prev;
		this.frame_start_prev = this.frame_start;
		if(this.frame_delta > this.frame_max_delta) {
			this.frame_delta = this.frame_max_delta;
		}
		var _used_delta = this.fixed_delta == 0 ? this.frame_delta : this.fixed_delta;
		_used_delta *= this.timescale;
		this.sim_delta = _used_delta;
		this.sim_time += _used_delta;
		this.update(_used_delta);
	}
	,__class__: snow_App
};
var luxe_Engine = function(_game) {
	this.pixel_scale = 1;
	this.running = false;
	this.headless = false;
	this.inited = false;
	this.has_shutdown = false;
	this.shutting_down = false;
	this.build = "+7345f6fe2d";
	this.version = "dev";
	snow_App.call(this);
	this.game = _game;
	this.emitter = new luxe_Emitter();
	Luxe.core = this;
	Luxe.utils = new luxe_utils_Utils(this);
};
$hxClasses["luxe.Engine"] = luxe_Engine;
luxe_Engine.__name__ = ["luxe","Engine"];
luxe_Engine.__super__ = snow_App;
luxe_Engine.prototype = $extend(snow_App.prototype,{
	run: function() {
		if(this.running != false) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("running == false"));
		}
		this.running = true;
		new snow_Snow(this);
	}
	,shutdown: function() {
		this.shutting_down = true;
		var func = ($_=this.app,$bind($_,$_.shutdown));
		if(func != null) {
			snow_Snow.next_queue.push(func);
		}
	}
	,runtime_info: function() {
		return "" + this.build + " / debug:" + Std.string(this.app.debug) + " / os:" + this.app.os + " / platform:" + this.app.platform;
	}
	,on: function(event,handler) {
		this.emitter.on(event,handler);
	}
	,off: function(event,handler) {
		return this.emitter.off(event,handler);
	}
	,emit: function(event,data) {
		this.emitter.emit(event,data);
		return;
	}
	,ready: function() {
		var _gthis = this;
		this.version = haxe_Resource.getString("version");
		this.build = this.version + haxe_Resource.getString("build");
		haxe_Log.trace("   i / luxe / " + ("" + this.build + " / debug:" + Std.string(this.app.debug) + " / os:" + this.app.os + " / platform:" + this.app.platform),{ fileName : "Engine.hx", lineNumber : 148, className : "luxe.Engine", methodName : "ready"});
		this.headless = this.game_config.headless;
		if(!this.headless) {
			var _font_image = new Uint8Array(haxe_Resource.getBytes("default.png").b.bufferValue);
			snow_systems_assets_AssetImage.load_from_bytes(this.app.assets,"default.png",_font_image).then(function(asset) {
				_gthis.init(asset);
			}).error(function(error) {
				haxe_Log.trace("   i / luxe / " + "failed to load default font, things will probably not look right... $error",{ fileName : "Engine.hx", lineNumber : 167, className : "luxe.Engine", methodName : "ready"});
				_gthis.init(null);
			});
		} else {
			this.init(null);
		}
	}
	,ondestroy: function() {
		this.shutting_down = true;
		haxe_Log.trace("   i / luxe / " + "shutting down...",{ fileName : "Engine.hx", lineNumber : 185, className : "luxe.Engine", methodName : "ondestroy"});
		this.emitter.emit(8);
		if(this.renderer != null) {
			this.renderer.destroy();
		}
		this.physics.destroy();
		this.timer.destroy();
		this.events.destroy();
		this.debug.destroy();
		this.emitter = null;
		this.input = null;
		this.audio = null;
		this.events = null;
		this.timer = null;
		this.debug = null;
		Luxe.utils = null;
		this.has_shutdown = true;
		haxe_Log.trace("   i / luxe / " + "goodbye.",{ fileName : "Engine.hx", lineNumber : 215, className : "luxe.Engine", methodName : "ondestroy"});
	}
	,init: function(asset) {
		Luxe.debug = this.debug = new luxe_Debug(this);
		Luxe.io = this.io = new luxe_IO(this);
		this.draw = new luxe_Draw(this);
		this.timer = new luxe_Timer(this);
		this.events = new luxe_Events();
		this.audio = new luxe_Audio(this);
		this.input = new luxe_Input(this);
		this.physics = new luxe_Physics(this);
		this.resources = new luxe_Resources();
		Luxe.resources = this.resources;
		if(!this.headless) {
			this.renderer = new phoenix_Renderer(this,asset);
			Luxe.renderer = this.renderer;
		}
		this.pixel_scale = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
		this.screen = new luxe_Screen(this,Math.floor(this.app.runtime.window.width / this.pixel_scale),Math.floor(this.app.runtime.window.height / this.pixel_scale));
		this.debug.init();
		this.input.init();
		if(!this.headless) {
			this.renderer.init();
		}
		this.physics.init();
		Luxe.audio = this.audio;
		Luxe.draw = this.draw;
		Luxe.events = this.events;
		Luxe.timer = this.timer;
		Luxe.input = this.input;
		if(!this.headless) {
			Luxe.camera = new luxe_Camera({ name : "default camera", view : this.renderer.camera});
		}
		Luxe.physics = this.physics;
		this.scene = new luxe_Scene("default scene");
		Luxe.scene = this.scene;
		if(!this.headless) {
			this.scene.add(Luxe.camera);
			this.debug.create_debug_console();
		}
		this.internal_pre_ready();
	}
	,internal_pre_ready: function() {
		if(!this.headless) {
			new luxe_Parcel({ id : "default_parcel", system : this.resources, bytes : this.game_config.preload.bytes, texts : this.game_config.preload.texts, jsons : this.game_config.preload.jsons, textures : this.game_config.preload.textures, fonts : this.game_config.preload.fonts, shaders : this.game_config.preload.shaders, sounds : this.game_config.preload.sounds, oncomplete : $bind(this,this.internal_ready), onfailed : function(_error) {
				haxe_Log.trace("   i / luxe / " + "config / preload / failed to load",{ fileName : "Engine.hx", lineNumber : 310, className : "luxe.Engine", methodName : "internal_pre_ready"});
				throw new js__$Boot_HaxeError(snow_types_Error.error(_error));
			}}).load();
		} else {
			this.internal_ready(null);
		}
	}
	,internal_ready: function(_) {
		if(!this.headless) {
			this.debug.start(luxe_Tag.update,50);
			this.debug.start(luxe_Tag.tick,50);
		}
		this.game.ready();
		if(!this.shutting_down) {
			this.emitter.emit(2);
			this.inited = true;
			this.physics.reset();
		}
	}
	,onevent: function(_event) {
		if(_event.window != null) {
			this.window_event(_event.window);
		}
	}
	,update: function(_delta) {
		if(this.has_shutdown) {
			return;
		}
		if(!this.inited) {
			return;
		}
		this.debug.end(luxe_Tag.update);
		this.debug.start(luxe_Tag.update);
		this.input.process();
		this.events.process();
		this.physics.process();
		this.debug.start(luxe_Tag.updates);
		this.emitter.emit(6,_delta);
		this.debug.end(luxe_Tag.updates);
		this.debug.start(luxe_Tag.game_update);
		this.game.update(_delta);
		this.debug.end(luxe_Tag.game_update);
		this.debug.process();
	}
	,tick: function(_delta) {
		if(this.shutting_down) {
			return;
		}
		if(!this.inited) {
			return;
		}
		this.debug.end(luxe_Tag.tick);
		this.debug.start(luxe_Tag.tick);
		if(!this.headless) {
			this.debug.start(luxe_Tag.render);
			this.renderer.prerender();
			this.emitter.emit(9);
			this.emitter.emit(10);
			this.renderer.process();
			this.emitter.emit(11);
			this.debug.end(luxe_Tag.render);
			this.debug.render();
		}
	}
	,ontickstart: function() {
		if(!this.has_shutdown) {
			this.emitter.emit(4);
		}
	}
	,ontickend: function() {
		if(!this.has_shutdown) {
			this.emitter.emit(5);
		}
	}
	,window_event: function(_event) {
		if(this.shutting_down) {
			return;
		}
		if(!this.inited) {
			return;
		}
		var _render_w = _event.x;
		var _render_h = _event.y;
		this.pixel_scale = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
		_event.x = Math.floor(_render_w / this.pixel_scale);
		_event.y = Math.floor(_render_h / this.pixel_scale);
		this.emitter.emit(28,_event);
		switch(_event.type) {
		case 4:
			this.emitter.emit(29,_event);
			break;
		case 5:
			this.screen.internal_resized(_event.x,_event.y);
			this.renderer.internal_resized(_render_w,_render_h);
			this.emitter.emit(30,_event);
			break;
		case 6:
			this.screen.internal_resized(_event.x,_event.y);
			this.renderer.internal_resized(_render_w,_render_h);
			this.emitter.emit(31,_event);
			this.game.onwindowsized(_event);
			break;
		case 7:
			this.emitter.emit(32,_event);
			break;
		case 9:
			this.emitter.emit(33,_event);
			break;
		default:
		}
		_event = null;
	}
	,onmousedown: function(_x,_y,_button,_timestamp,_window_id) {
		if(!this.inited) {
			return;
		}
		_x = _x / this.pixel_scale | 0;
		_y = _y / this.pixel_scale | 0;
		var _this = this.screen.cursor;
		_this.ignore = true;
		_this.pos = new phoenix_Vector(_x,_y);
		_this.ignore = false;
		this.input.onmousedown(_x,_y,_button,_timestamp,_window_id);
	}
	,onmouseup: function(_x,_y,_button,_timestamp,_window_id) {
		if(!this.inited) {
			return;
		}
		_x = _x / this.pixel_scale | 0;
		_y = _y / this.pixel_scale | 0;
		var _this = this.screen.cursor;
		_this.ignore = true;
		_this.pos = new phoenix_Vector(_x,_y);
		_this.ignore = false;
		this.input.onmouseup(_x,_y,_button,_timestamp,_window_id);
	}
	,onmousemove: function(_x,_y,_x_rel,_y_rel,_timestamp,_window_id) {
		if(!this.inited) {
			return;
		}
		_x = _x / this.pixel_scale | 0;
		_y = _y / this.pixel_scale | 0;
		var _this = this.screen.cursor;
		_this.ignore = true;
		_this.pos = new phoenix_Vector(_x,_y);
		_this.ignore = false;
		this.input.onmousemove(_x,_y,_x_rel,_y_rel,_timestamp,_window_id);
	}
	,onmousewheel: function(_x,_y,_timestamp,_window_id) {
		if(!this.inited) {
			return;
		}
		this.input.onmousewheel(_x,_y,_timestamp,_window_id);
	}
	,onkeydown: function(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id) {
		if(!this.inited) {
			return;
		}
		this.input.onkeydown(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id);
	}
	,onkeyup: function(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id) {
		if(!this.inited) {
			return;
		}
		this.input.onkeyup(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id);
	}
	,ontextinput: function(_text,_start,_length,_etype,_timestamp,_window_id) {
		if(!this.inited) {
			return;
		}
		this.input.ontextinput(_text,_start,_length,_etype,_timestamp,_window_id);
	}
	,ontouchdown: function(_x,_y,_dx,_dy,_touch_id,_timestamp) {
		if(!this.inited) {
			return;
		}
		this.input.ontouchdown(_x,_y,_dx,_dy,_touch_id,_timestamp);
	}
	,ontouchup: function(_x,_y,_dx,_dy,_touch_id,_timestamp) {
		if(!this.inited) {
			return;
		}
		this.input.ontouchup(_x,_y,_dx,_dy,_touch_id,_timestamp);
	}
	,ontouchmove: function(_x,_y,_dx,_dy,_touch_id,_timestamp) {
		if(!this.inited) {
			return;
		}
		this.input.ontouchmove(_x,_y,_dx,_dy,_touch_id,_timestamp);
	}
	,oninputdown: function(_name,_key_event,_mouse_event,_touch_event,_gamepad_event) {
		if(!this.inited) {
			return;
		}
		this.input.oninputdown(_name,_key_event,_mouse_event,_touch_event,_gamepad_event);
	}
	,oninputup: function(_name,_key_event,_mouse_event,_touch_event,_gamepad_event) {
		if(!this.inited) {
			return;
		}
		this.input.oninputup(_name,_key_event,_mouse_event,_touch_event,_gamepad_event);
	}
	,ongamepadaxis: function(_gamepad,_axis,_value,_timestamp) {
		if(!this.inited) {
			return;
		}
		this.input.ongamepadaxis(_gamepad,_axis,_value,_timestamp);
	}
	,ongamepaddown: function(_gamepad,_button,_value,_timestamp) {
		if(!this.inited) {
			return;
		}
		this.input.ongamepaddown(_gamepad,_button,_value,_timestamp);
	}
	,ongamepadup: function(_gamepad,_button,_value,_timestamp) {
		if(!this.inited) {
			return;
		}
		this.input.ongamepadup(_gamepad,_button,_value,_timestamp);
	}
	,ongamepaddevice: function(_gamepad,_id,_etype,_timestamp) {
		if(!this.inited) {
			return;
		}
		this.input.ongamepaddevice(_gamepad,_id,_etype,_timestamp);
	}
	,config: function(_config) {
		if(_config.user == null) {
			_config.user = { };
		}
		this.game_config = _config;
		this.game_config.window.title = "luxe game";
		this.game_config.window.width = 960;
		this.game_config.window.height = 640;
		this.game_config.window.resizable = true;
		this.game_config.window.fullscreen = false;
		this.game_config.window.borderless = false;
		this.game_config.preload = { bytes : [], texts : [], jsons : [], textures : [], fonts : [], shaders : [], sounds : []};
		this.game_config = this.game.config(this.game_config);
		return this.game_config;
	}
	,__class__: luxe_Engine
});
var luxe_Tag = function() { };
$hxClasses["luxe.Tag"] = luxe_Tag;
luxe_Tag.__name__ = ["luxe","Tag"];
var luxe_Events = function() {
	this.event_connections = new haxe_ds_StringMap();
	this.event_slots = new haxe_ds_StringMap();
	this.event_filters = new haxe_ds_StringMap();
	this.event_queue = [];
	this.event_schedules = new haxe_ds_StringMap();
};
$hxClasses["luxe.Events"] = luxe_Events;
luxe_Events.__name__ = ["luxe","Events"];
luxe_Events.prototype = {
	destroy: function() {
		this.clear();
	}
	,clear: function() {
		var _this = this.event_schedules;
		var schedule = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(schedule.hasNext()) {
			var schedule1 = schedule.next();
			schedule1.stop();
			schedule1 = null;
		}
		var connection = this.event_connections.keys();
		while(connection.hasNext()) {
			var connection1 = connection.next();
			this.event_connections.remove(connection1);
		}
		var filter = this.event_filters.keys();
		while(filter.hasNext()) {
			var filter1 = filter.next();
			this.event_filters.remove(filter1);
		}
		var slot = this.event_slots.keys();
		while(slot.hasNext()) {
			var slot1 = slot.next();
			this.event_slots.remove(slot1);
		}
		var _count = this.event_queue.length;
		while(_count > 0) {
			this.event_queue.pop();
			--_count;
		}
	}
	,does_filter_event: function(_filter,_event) {
		var _replace_stars_r = new RegExp("\\*","gi".split("u").join(""));
		return new EReg(_filter.replace(_replace_stars_r,".*?"),"gi").match(_event);
	}
	,process: function() {
		var _count = this.event_queue.length;
		while(_count > 0) {
			var _event = this.event_queue.shift();
			this.fire(_event.name,_event.properties);
			--_count;
		}
	}
	,fire: function(_event_name,_properties,_tag) {
		if(_tag == null) {
			_tag = false;
		}
		var _fired = false;
		var _this = this.event_filters;
		var _filter = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(_filter.hasNext()) {
			var _filter1 = _filter.next();
			if(_filter1.length > 0) {
				if(this.does_filter_event(_filter1[0].event_name,_event_name)) {
					if(_tag) {
						_properties = this.tag_properties(_properties,_event_name,_filter1.length);
					}
					var _g = 0;
					while(_g < _filter1.length) {
						var _connection = _filter1[_g];
						++_g;
						_connection.listener(_properties);
					}
					_fired = true;
				}
			}
		}
		var _this1 = this.event_slots;
		if(__map_reserved[_event_name] != null ? _this1.existsReserved(_event_name) : _this1.h.hasOwnProperty(_event_name)) {
			var _this2 = this.event_slots;
			var _connections = __map_reserved[_event_name] != null ? _this2.getReserved(_event_name) : _this2.h[_event_name];
			if(_tag) {
				_properties = this.tag_properties(_properties,_event_name,_connections.length);
			}
			var _g1 = 0;
			while(_g1 < _connections.length) {
				var connection = _connections[_g1];
				++_g1;
				connection.listener(_properties);
			}
			_fired = true;
		}
		return _fired;
	}
	,tag_properties: function(_properties,_name,_count) {
		if(_properties == null) {
			_properties = { };
		}
		_properties["_event_name_"] = _name;
		_properties["_event_connection_count_"] = _count;
		return _properties;
	}
	,__class__: luxe_Events
};
var luxe__$Events_EventConnection = function() { };
$hxClasses["luxe._Events.EventConnection"] = luxe__$Events_EventConnection;
luxe__$Events_EventConnection.__name__ = ["luxe","_Events","EventConnection"];
luxe__$Events_EventConnection.prototype = {
	__class__: luxe__$Events_EventConnection
};
var luxe__$Events_EventObject = function() { };
$hxClasses["luxe._Events.EventObject"] = luxe__$Events_EventObject;
luxe__$Events_EventObject.__name__ = ["luxe","_Events","EventObject"];
luxe__$Events_EventObject.prototype = {
	__class__: luxe__$Events_EventObject
};
var luxe_Game = function() {
	this.app = new luxe_Engine(this);
	this.app.run();
};
$hxClasses["luxe.Game"] = luxe_Game;
luxe_Game.__name__ = ["luxe","Game"];
luxe_Game.main = function() {
	new lx_Main();
};
luxe_Game.prototype = {
	config: function(_config) {
		return _config;
	}
	,ready: function() {
	}
	,update: function(dt) {
	}
	,ondestroy: function() {
	}
	,onprerender: function() {
	}
	,onrender: function() {
	}
	,onpostrender: function() {
	}
	,oninputdown: function(event) {
	}
	,oninputup: function(event) {
	}
	,onmousedown: function(event) {
	}
	,onmouseup: function(event) {
	}
	,onmousewheel: function(event) {
	}
	,onmousemove: function(event) {
	}
	,onkeydown: function(event) {
	}
	,onkeyup: function(event) {
	}
	,ontextinput: function(event) {
	}
	,ontouchdown: function(event) {
	}
	,ontouchup: function(event) {
	}
	,ontouchmove: function(event) {
	}
	,ongamepadaxis: function(event) {
	}
	,ongamepaddown: function(event) {
	}
	,ongamepadup: function(event) {
	}
	,ongamepaddevice: function(event) {
	}
	,onwindowmoved: function(event) {
	}
	,onwindowresized: function(event) {
	}
	,onwindowsized: function(event) {
	}
	,onwindowminimized: function(event) {
	}
	,onwindowrestored: function(event) {
	}
	,onevent: function(event) {
	}
	,__class__: luxe_Game
};
var luxe_IO = function(_core) {
	this.core = _core;
};
$hxClasses["luxe.IO"] = luxe_IO;
luxe_IO.__name__ = ["luxe","IO"];
luxe_IO.prototype = {
	__class__: luxe_IO
};
var luxe_Input = function(_core) {
	this.core = _core;
	this.key_event = new luxe_KeyEvent();
	this.text_event = new luxe_TextEvent();
	this.mouse_event = new luxe_MouseEvent();
	this.touch_event = new luxe_TouchEvent();
	this.gamepad_event = new luxe_GamepadEvent();
	this.input_event = new luxe_InputEvent();
};
$hxClasses["luxe.Input"] = luxe_Input;
luxe_Input.__name__ = ["luxe","Input"];
luxe_Input.prototype = {
	init: function() {
		this.key_bindings = new haxe_ds_StringMap();
		this.mouse_bindings = new haxe_ds_StringMap();
		this.gamepad_bindings = new haxe_ds_StringMap();
		this._named_input_down = new haxe_ds_StringMap();
		this._named_input_pressed = new haxe_ds_StringMap();
		this._named_input_released = new haxe_ds_StringMap();
	}
	,process: function() {
		var _event = this._named_input_pressed.keys();
		while(_event.hasNext()) {
			var _event1 = _event.next();
			var _this = this._named_input_pressed;
			if(__map_reserved[_event1] != null ? _this.getReserved(_event1) : _this.h[_event1]) {
				this._named_input_pressed.remove(_event1);
			} else {
				var _this1 = this._named_input_pressed;
				if(__map_reserved[_event1] != null) {
					_this1.setReserved(_event1,true);
				} else {
					_this1.h[_event1] = true;
				}
			}
		}
		var _event2 = this._named_input_released.keys();
		while(_event2.hasNext()) {
			var _event3 = _event2.next();
			var _this2 = this._named_input_released;
			if(__map_reserved[_event3] != null ? _this2.getReserved(_event3) : _this2.h[_event3]) {
				this._named_input_released.remove(_event3);
			} else {
				var _this3 = this._named_input_released;
				if(__map_reserved[_event3] != null) {
					_this3.setReserved(_event3,true);
				} else {
					_this3.h[_event3] = true;
				}
			}
		}
	}
	,onmousedown: function(_x,_y,_button,_timestamp,_window_id) {
		if(this.core.shutting_down) {
			return;
		}
		this.mouse_event.set_press(_x,_y,_button,luxe_InteractState.down,_timestamp,_window_id);
		this.check_named_mouse(this.mouse_event,true);
		this.core.emitter.emit(17,this.mouse_event);
	}
	,onmouseup: function(_x,_y,_button,_timestamp,_window_id) {
		if(this.core.shutting_down) {
			return;
		}
		this.mouse_event.set_press(_x,_y,_button,luxe_InteractState.up,_timestamp,_window_id);
		this.check_named_mouse(this.mouse_event);
		this.core.emitter.emit(18,this.mouse_event);
	}
	,onmousemove: function(_x,_y,_x_rel,_y_rel,_timestamp,_window_id) {
		if(this.core.shutting_down) {
			return;
		}
		this.mouse_event.set_move(_x,_y,_x_rel,_y_rel,_timestamp,_window_id);
		this.core.emitter.emit(19,this.mouse_event);
	}
	,onmousewheel: function(_x,_y,_timestamp,_window_id) {
		if(this.core.shutting_down) {
			return;
		}
		this.mouse_event.set_wheel(_x,_y,_timestamp,_window_id);
		this.check_named_mouse(this.mouse_event,false);
		this.core.emitter.emit(20,this.mouse_event);
	}
	,onkeydown: function(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id) {
		if(this.core.shutting_down) {
			return;
		}
		this.key_event.set(_keycode,_scancode,_repeat,_mod,luxe_InteractState.down,_timestamp,_window_id);
		this.check_named_keys(this.key_event,true);
		this.core.emitter.emit(12,this.key_event);
	}
	,onkeyup: function(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id) {
		if(this.core.shutting_down) {
			return;
		}
		this.key_event.set(_keycode,_scancode,_repeat,_mod,luxe_InteractState.up,_timestamp,_window_id);
		this.check_named_keys(this.key_event);
		this.core.emitter.emit(13,this.key_event);
	}
	,ontextinput: function(_text,_start,_length,_etype,_timestamp,_window_id) {
		if(this.core.shutting_down) {
			return;
		}
		var _type;
		switch(_etype) {
		case 1:
			_type = luxe_TextEventType.edit;
			break;
		case 2:
			_type = luxe_TextEventType.input;
			break;
		default:
			return;
		}
		this.text_event.set(_text,_start,_length,_type,_timestamp,_window_id);
		this.core.emitter.emit(14,this.text_event);
	}
	,ontouchdown: function(_x,_y,_dx,_dy,_touch_id,_timestamp) {
		if(this.core.shutting_down) {
			return;
		}
		this.touch_event.set(_x,_y,_dx,_dy,_touch_id,luxe_InteractState.down,_timestamp);
		this.core.emitter.emit(21,this.touch_event);
	}
	,ontouchup: function(_x,_y,_dx,_dy,_touch_id,_timestamp) {
		if(this.core.shutting_down) {
			return;
		}
		this.touch_event.set(_x,_y,_dx,_dy,_touch_id,luxe_InteractState.up,_timestamp);
		this.core.emitter.emit(22,this.touch_event);
	}
	,ontouchmove: function(_x,_y,_dx,_dy,_touch_id,_timestamp) {
		if(this.core.shutting_down) {
			return;
		}
		this.touch_event.set(_x,_y,_dx,_dy,_touch_id,luxe_InteractState.move,_timestamp);
		this.core.emitter.emit(23,this.touch_event);
	}
	,ongamepadaxis: function(_gamepad,_axis,_value,_timestamp) {
		if(this.core.shutting_down) {
			return;
		}
		this.gamepad_event.set_axis(_gamepad,_axis,_value,_timestamp);
		this.core.emitter.emit(24,this.gamepad_event);
	}
	,ongamepaddown: function(_gamepad,_button,_value,_timestamp) {
		if(this.core.shutting_down) {
			return;
		}
		this.gamepad_event.set_button(_gamepad,_button,_value,luxe_InteractState.down,_timestamp);
		this.check_named_gamepad_buttons(this.gamepad_event,true);
		this.core.emitter.emit(25,this.gamepad_event);
	}
	,ongamepadup: function(_gamepad,_button,_value,_timestamp) {
		if(this.core.shutting_down) {
			return;
		}
		this.gamepad_event.set_button(_gamepad,_button,_value,luxe_InteractState.up,_timestamp);
		this.check_named_gamepad_buttons(this.gamepad_event,false);
		this.core.emitter.emit(26,this.gamepad_event);
	}
	,ongamepaddevice: function(_gamepad,_id,_etype,_timestamp) {
		if(this.core.shutting_down) {
			return;
		}
		var _type;
		switch(_etype) {
		case 1:
			_type = luxe_GamepadEventType.device_added;
			break;
		case 2:
			_type = luxe_GamepadEventType.device_removed;
			break;
		case 3:
			_type = luxe_GamepadEventType.device_remapped;
			break;
		default:
			_type = luxe_GamepadEventType.unknown;
		}
		this.gamepad_event.set_device(_gamepad,_id,_type,_timestamp);
		this.core.emitter.emit(27,this.gamepad_event);
	}
	,oninputdown: function(_name,_key_event,_mouse_event,_touch_event,_gamepad_event) {
		if(this.core.shutting_down) {
			return;
		}
		if(_key_event != null) {
			this.input_event.set_key(_name,luxe_InteractState.down,_key_event);
		} else if(_mouse_event != null) {
			this.input_event.set_mouse(_name,luxe_InteractState.down,_mouse_event);
		} else if(_touch_event != null) {
			this.input_event.set_touch(_name,luxe_InteractState.down,_touch_event);
		} else if(_gamepad_event != null) {
			this.input_event.set_gamepad(_name,luxe_InteractState.down,_gamepad_event);
		} else {
			this.input_event.set_unknown(_name,luxe_InteractState.down);
		}
		this.core.emitter.emit(15,this.input_event);
	}
	,oninputup: function(_name,_key_event,_mouse_event,_touch_event,_gamepad_event) {
		if(this.core.shutting_down) {
			return;
		}
		if(_key_event != null) {
			this.input_event.set_key(_name,luxe_InteractState.up,_key_event);
		} else if(_mouse_event != null) {
			this.input_event.set_mouse(_name,luxe_InteractState.up,_mouse_event);
		} else if(_touch_event != null) {
			this.input_event.set_touch(_name,luxe_InteractState.up,_touch_event);
		} else if(_gamepad_event != null) {
			this.input_event.set_gamepad(_name,luxe_InteractState.up,_gamepad_event);
		} else {
			this.input_event.set_unknown(_name,luxe_InteractState.up);
		}
		this.core.emitter.emit(16,this.input_event);
	}
	,check_named_keys: function(e,_down) {
		if(_down == null) {
			_down = false;
		}
		var _fired = [];
		var _name = this.key_bindings.keys();
		while(_name.hasNext()) {
			var _name1 = _name.next();
			var _this = this.key_bindings;
			var _is_down_repeat = _down && e.repeat;
			if((__map_reserved[_name1] != null ? _this.getReserved(_name1) : _this.h[_name1]).h.hasOwnProperty(e.keycode) && !_is_down_repeat) {
				if(!Lambda.has(_fired,_name1)) {
					_fired.push(_name1);
				}
			}
		}
		var _g = 0;
		while(_g < _fired.length) {
			var _f = _fired[_g];
			++_g;
			if(_down) {
				var _this1 = this._named_input_pressed;
				if(__map_reserved[_f] != null) {
					_this1.setReserved(_f,false);
				} else {
					_this1.h[_f] = false;
				}
				var _this2 = this._named_input_down;
				if(__map_reserved[_f] != null) {
					_this2.setReserved(_f,true);
				} else {
					_this2.h[_f] = true;
				}
				this.oninputdown(_f,e);
			} else {
				var _this3 = this._named_input_released;
				if(__map_reserved[_f] != null) {
					_this3.setReserved(_f,false);
				} else {
					_this3.h[_f] = false;
				}
				this._named_input_down.remove(_f);
				this.oninputup(_f,e);
			}
		}
	}
	,check_named_mouse: function(e,_down) {
		if(_down == null) {
			_down = false;
		}
		var _fired = [];
		var _name = this.mouse_bindings.keys();
		while(_name.hasNext()) {
			var _name1 = _name.next();
			var _this = this.mouse_bindings;
			if((__map_reserved[_name1] != null ? _this.getReserved(_name1) : _this.h[_name1]).h.hasOwnProperty(e.button)) {
				if(!Lambda.has(_fired,_name1)) {
					_fired.push(_name1);
				}
			}
		}
		var _g = 0;
		while(_g < _fired.length) {
			var _f = _fired[_g];
			++_g;
			if(_down) {
				var _this1 = this._named_input_pressed;
				if(__map_reserved[_f] != null) {
					_this1.setReserved(_f,false);
				} else {
					_this1.h[_f] = false;
				}
				var _this2 = this._named_input_down;
				if(__map_reserved[_f] != null) {
					_this2.setReserved(_f,true);
				} else {
					_this2.h[_f] = true;
				}
				this.oninputdown(_f,null,e);
			} else {
				var _this3 = this._named_input_released;
				if(__map_reserved[_f] != null) {
					_this3.setReserved(_f,false);
				} else {
					_this3.h[_f] = false;
				}
				this._named_input_down.remove(_f);
				this.oninputup(_f,null,e);
			}
		}
	}
	,check_named_gamepad_buttons: function(e,_down) {
		if(_down == null) {
			_down = false;
		}
		var _fired = [];
		var _name = this.gamepad_bindings.keys();
		while(_name.hasNext()) {
			var _name1 = _name.next();
			var _this = this.gamepad_bindings;
			var _b = __map_reserved[_name1] != null ? _this.getReserved(_name1) : _this.h[_name1];
			if(_b.h.hasOwnProperty(e.button)) {
				var _kb = _b.h[e.button];
				var _accepted_gamepad = _kb == null || _kb == e.gamepad;
				if(!Lambda.has(_fired,_name1) && _accepted_gamepad) {
					_fired.push(_name1);
				}
			}
		}
		var _g = 0;
		while(_g < _fired.length) {
			var _f = _fired[_g];
			++_g;
			if(_down) {
				var _this1 = this._named_input_pressed;
				if(__map_reserved[_f] != null) {
					_this1.setReserved(_f,false);
				} else {
					_this1.h[_f] = false;
				}
				var _this2 = this._named_input_down;
				if(__map_reserved[_f] != null) {
					_this2.setReserved(_f,true);
				} else {
					_this2.h[_f] = true;
				}
				this.oninputdown(_f,null,null,null,e);
			} else {
				var _this3 = this._named_input_released;
				if(__map_reserved[_f] != null) {
					_this3.setReserved(_f,false);
				} else {
					_this3.h[_f] = false;
				}
				this._named_input_down.remove(_f);
				this.oninputup(_f,null,null,null,e);
			}
		}
	}
	,__class__: luxe_Input
};
var luxe_InteractState = { __ename__ : true, __constructs__ : ["unknown","none","down","up","move","wheel","axis"] };
luxe_InteractState.unknown = ["unknown",0];
luxe_InteractState.unknown.toString = $estr;
luxe_InteractState.unknown.__enum__ = luxe_InteractState;
luxe_InteractState.none = ["none",1];
luxe_InteractState.none.toString = $estr;
luxe_InteractState.none.__enum__ = luxe_InteractState;
luxe_InteractState.down = ["down",2];
luxe_InteractState.down.toString = $estr;
luxe_InteractState.down.__enum__ = luxe_InteractState;
luxe_InteractState.up = ["up",3];
luxe_InteractState.up.toString = $estr;
luxe_InteractState.up.__enum__ = luxe_InteractState;
luxe_InteractState.move = ["move",4];
luxe_InteractState.move.toString = $estr;
luxe_InteractState.move.__enum__ = luxe_InteractState;
luxe_InteractState.wheel = ["wheel",5];
luxe_InteractState.wheel.toString = $estr;
luxe_InteractState.wheel.__enum__ = luxe_InteractState;
luxe_InteractState.axis = ["axis",6];
luxe_InteractState.axis.toString = $estr;
luxe_InteractState.axis.__enum__ = luxe_InteractState;
var luxe_TextEventType = { __ename__ : true, __constructs__ : ["unknown","edit","input"] };
luxe_TextEventType.unknown = ["unknown",0];
luxe_TextEventType.unknown.toString = $estr;
luxe_TextEventType.unknown.__enum__ = luxe_TextEventType;
luxe_TextEventType.edit = ["edit",1];
luxe_TextEventType.edit.toString = $estr;
luxe_TextEventType.edit.__enum__ = luxe_TextEventType;
luxe_TextEventType.input = ["input",2];
luxe_TextEventType.input.toString = $estr;
luxe_TextEventType.input.__enum__ = luxe_TextEventType;
var luxe_KeyEvent = function() {
};
$hxClasses["luxe.KeyEvent"] = luxe_KeyEvent;
luxe_KeyEvent.__name__ = ["luxe","KeyEvent"];
luxe_KeyEvent.prototype = {
	set: function(_keycode,_scancode,_repeat,_mod,_state,_timestamp,_window_id) {
		this.mod = _mod;
		this.state = _state;
		this.repeat = _repeat;
		this.keycode = _keycode;
		this.scancode = _scancode;
		this.timestamp = _timestamp;
		this.window_id = _window_id;
	}
	,__class__: luxe_KeyEvent
};
var luxe_TouchEvent = function() {
	this.pos = new phoenix_Vector();
};
$hxClasses["luxe.TouchEvent"] = luxe_TouchEvent;
luxe_TouchEvent.__name__ = ["luxe","TouchEvent"];
luxe_TouchEvent.prototype = {
	set: function(_x,_y,_dx,_dy,_touch_id,_state,_timestamp) {
		this.x = _x;
		this.y = _y;
		this.dx = _dx;
		this.dy = _dy;
		this.touch_id = _touch_id;
		this.timestamp = _timestamp;
		this.state = _state;
		var _this = this.pos;
		var prev = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = _x;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_x);
			}
		}
		_this.y = _y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_y);
			}
		}
		_this.ignore_listeners = prev;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
	}
	,__class__: luxe_TouchEvent
};
var luxe_TextEvent = function() {
};
$hxClasses["luxe.TextEvent"] = luxe_TextEvent;
luxe_TextEvent.__name__ = ["luxe","TextEvent"];
luxe_TextEvent.prototype = {
	set: function(_text,_start,_length,_type,_timestamp,_window_id) {
		this.text = _text;
		this.start = _start;
		this.length = _length;
		this.type = _type;
		this.timestamp = _timestamp;
		this.window_id = _window_id;
	}
	,__class__: luxe_TextEvent
};
var luxe_GamepadEventType = { __ename__ : true, __constructs__ : ["unknown","axis","button","device_added","device_removed","device_remapped"] };
luxe_GamepadEventType.unknown = ["unknown",0];
luxe_GamepadEventType.unknown.toString = $estr;
luxe_GamepadEventType.unknown.__enum__ = luxe_GamepadEventType;
luxe_GamepadEventType.axis = ["axis",1];
luxe_GamepadEventType.axis.toString = $estr;
luxe_GamepadEventType.axis.__enum__ = luxe_GamepadEventType;
luxe_GamepadEventType.button = ["button",2];
luxe_GamepadEventType.button.toString = $estr;
luxe_GamepadEventType.button.__enum__ = luxe_GamepadEventType;
luxe_GamepadEventType.device_added = ["device_added",3];
luxe_GamepadEventType.device_added.toString = $estr;
luxe_GamepadEventType.device_added.__enum__ = luxe_GamepadEventType;
luxe_GamepadEventType.device_removed = ["device_removed",4];
luxe_GamepadEventType.device_removed.toString = $estr;
luxe_GamepadEventType.device_removed.__enum__ = luxe_GamepadEventType;
luxe_GamepadEventType.device_remapped = ["device_remapped",5];
luxe_GamepadEventType.device_remapped.toString = $estr;
luxe_GamepadEventType.device_remapped.__enum__ = luxe_GamepadEventType;
var luxe_GamepadEvent = function() {
};
$hxClasses["luxe.GamepadEvent"] = luxe_GamepadEvent;
luxe_GamepadEvent.__name__ = ["luxe","GamepadEvent"];
luxe_GamepadEvent.prototype = {
	set_axis: function(_gamepad,_axis,_value,_timestamp) {
		this.id = null;
		this.button = -1;
		this.axis = _axis;
		this.value = _value;
		this.gamepad = _gamepad;
		this.timestamp = _timestamp;
		this.state = luxe_InteractState.axis;
		this.type = luxe_GamepadEventType.axis;
	}
	,set_button: function(_gamepad,_button,_value,_state,_timestamp) {
		this.id = null;
		this.axis = -1;
		this.state = _state;
		this.value = _value;
		this.button = _button;
		this.gamepad = _gamepad;
		this.timestamp = _timestamp;
		this.type = luxe_GamepadEventType.button;
	}
	,set_device: function(_gamepad,_id,_type,_timestamp) {
		this.id = _id;
		this.axis = -1;
		this.value = 0;
		this.button = -1;
		this.type = _type;
		this.gamepad = _gamepad;
		this.timestamp = _timestamp;
		this.state = luxe_InteractState.none;
	}
	,__class__: luxe_GamepadEvent
};
var luxe_MouseEvent = function() {
	this.y_rel = 0;
	this.x_rel = 0;
	this.y = 0;
	this.x = 0;
	this.window_id = 1;
	this.timestamp = 0.0;
	this.pos = new phoenix_Vector();
};
$hxClasses["luxe.MouseEvent"] = luxe_MouseEvent;
luxe_MouseEvent.__name__ = ["luxe","MouseEvent"];
luxe_MouseEvent.prototype = {
	set_press: function(_x,_y,_button,_state,_timestamp,_window_id) {
		this.x = _x;
		this.y = _y;
		this.x_rel = 0;
		this.y_rel = 0;
		this.state = _state;
		this.button = _button;
		this.window_id = _window_id;
		this.timestamp = _timestamp;
		var _this = this.pos;
		var prev = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = _x;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_x);
			}
		}
		_this.y = _y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_y);
			}
		}
		_this.ignore_listeners = prev;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
	}
	,set_move: function(_x,_y,_x_rel,_y_rel,_timestamp,_window_id) {
		this.x = _x;
		this.y = _y;
		this.x_rel = _x_rel;
		this.y_rel = _y_rel;
		this.state = luxe_InteractState.move;
		this.button = 0;
		this.window_id = _window_id;
		this.timestamp = _timestamp;
		var _this = this.pos;
		var prev = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = _x;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_x);
			}
		}
		_this.y = _y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_y);
			}
		}
		_this.ignore_listeners = prev;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
	}
	,set_wheel: function(_x,_y,_timestamp,_window_id) {
		this.x = Math.floor(_x);
		this.y = Math.floor(_y);
		this.x_rel = 0;
		this.y_rel = 0;
		this.state = luxe_InteractState.wheel;
		this.button = 0;
		this.window_id = _window_id;
		this.timestamp = _timestamp;
	}
	,__class__: luxe_MouseEvent
};
var luxe_InputEventType = { __ename__ : true, __constructs__ : ["unknown","mouse","touch","key","gamepad"] };
luxe_InputEventType.unknown = ["unknown",0];
luxe_InputEventType.unknown.toString = $estr;
luxe_InputEventType.unknown.__enum__ = luxe_InputEventType;
luxe_InputEventType.mouse = ["mouse",1];
luxe_InputEventType.mouse.toString = $estr;
luxe_InputEventType.mouse.__enum__ = luxe_InputEventType;
luxe_InputEventType.touch = ["touch",2];
luxe_InputEventType.touch.toString = $estr;
luxe_InputEventType.touch.__enum__ = luxe_InputEventType;
luxe_InputEventType.key = ["key",3];
luxe_InputEventType.key.toString = $estr;
luxe_InputEventType.key.__enum__ = luxe_InputEventType;
luxe_InputEventType.gamepad = ["gamepad",4];
luxe_InputEventType.gamepad.toString = $estr;
luxe_InputEventType.gamepad.__enum__ = luxe_InputEventType;
var luxe_InputEvent = function() {
};
$hxClasses["luxe.InputEvent"] = luxe_InputEvent;
luxe_InputEvent.__name__ = ["luxe","InputEvent"];
luxe_InputEvent.prototype = {
	set_key: function(_name,_state,_key_event) {
		this.set_common(_name,luxe_InputEventType.key,_state);
		this.set_events(_key_event,null,null,null);
	}
	,set_mouse: function(_name,_state,_mouse_event) {
		this.set_common(_name,luxe_InputEventType.mouse,_state);
		this.set_events(null,_mouse_event,null,null);
	}
	,set_touch: function(_name,_state,_touch_event) {
		this.set_common(_name,luxe_InputEventType.touch,_state);
		this.set_events(null,null,_touch_event,null);
	}
	,set_gamepad: function(_name,_state,_gamepad_event) {
		this.set_common(_name,luxe_InputEventType.gamepad,_state);
		this.set_events(null,null,null,_gamepad_event);
	}
	,set_unknown: function(_name,_state) {
		this.set_common(_name,luxe_InputEventType.unknown,_state);
		this.set_events(null,null,null,null);
	}
	,set_common: function(_name,_type,_state) {
		this.name = _name;
		this.type = _type;
		this.state = _state;
	}
	,set_events: function(_key_event,_mouse_event,_touch_event,_gamepad_event) {
		this.key_event = _key_event;
		this.mouse_event = _mouse_event;
		this.touch_event = _touch_event;
		this.gamepad_event = _gamepad_event;
	}
	,__class__: luxe_InputEvent
};
var luxe_DebugError = { __ename__ : true, __constructs__ : ["assertion","null_assertion"] };
luxe_DebugError.assertion = function(expr) { var $x = ["assertion",0,expr]; $x.__enum__ = luxe_DebugError; $x.toString = $estr; return $x; };
luxe_DebugError.null_assertion = function(expr) { var $x = ["null_assertion",1,expr]; $x.__enum__ = luxe_DebugError; $x.toString = $estr; return $x; };
var luxe_Visual = function(_options) {
	this._creating_geometry = false;
	this._has_custom_origin = false;
	this.radians = 0.0;
	this.depth = 0.0;
	this.visible = true;
	this.locked = false;
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null" + (" ( " + "Visual requires non-null options" + " )")));
	}
	this._rotation_euler = new phoenix_Vector();
	this._rotation_quat = new phoenix_Quaternion();
	luxe_Entity.call(this,_options);
	this.set_color(new phoenix_Color());
	this.set_size(new phoenix_Vector());
	if(this.options.texture != null) {
		this.set_texture(this.options.texture);
	}
	if(this.options.shader != null) {
		this.set_shader(this.options.shader);
	}
	if(this.options.color != null) {
		this.set_color(this.options.color);
	}
	if(this.options.depth != null) {
		this.set_depth(this.options.depth);
	}
	if(this.options.visible != null) {
		this.set_visible(this.options.visible);
	}
	if(this.options.size != null) {
		this.set_size(this.options.size);
		this._create_geometry();
	} else if(this.texture != null) {
		this.set_size(new phoenix_Vector(this.texture.width,this.texture.height));
		this._create_geometry();
	} else {
		this.set_size(new phoenix_Vector(64,64));
		this._create_geometry();
	}
};
$hxClasses["luxe.Visual"] = luxe_Visual;
luxe_Visual.__name__ = ["luxe","Visual"];
luxe_Visual.__super__ = luxe_Entity;
luxe_Visual.prototype = $extend(luxe_Entity.prototype,{
	_create_geometry: function() {
		if(this.options.geometry == null) {
			if(this.options.no_geometry == null || this.options.no_geometry == false) {
				this._creating_geometry = true;
				var _batcher = null;
				if(this.options.no_batcher_add == null || this.options.no_batcher_add == false) {
					if(this.options.batcher != null) {
						_batcher = this.options.batcher;
					} else {
						_batcher = Luxe.renderer.batcher;
					}
				}
				var tmp = this.options.depth == null ? 0 : this.options.depth;
				var tmp1 = this.options.visible == null ? this.visible : this.options.visible;
				this.set_geometry(new phoenix_geometry_QuadGeometry({ id : this.get_name() + ".visual", x : 0, y : 0, w : this.size.x, h : this.size.y, scale : new phoenix_Vector(1,1,1), texture : this.texture, color : this.color, shader : this.shader, batcher : _batcher, depth : tmp, visible : tmp1}));
				this._creating_geometry = false;
				this.on_geometry_created();
			}
		} else {
			this.set_geometry(this.options.geometry);
		}
		if(this.geometry != null) {
			this.geometry.id = this.get_name() + ".visual";
			this.geometry.transform.id = this.get_name() + ".visual.transform";
		}
		if(this.options.origin != null) {
			this._has_custom_origin = true;
			this.set_origin(this.options.origin);
		}
		if(this.options.rotation_z != null) {
			this.set_rotation_z(this.options.rotation_z);
		}
	}
	,ondestroy: function() {
		if(this.geometry != null && this.geometry.added) {
			this.geometry.drop(true);
		}
		this.set_transform(null);
		this.options = null;
		this.set_geometry(null);
		this.set_texture(null);
		this.set_shader(null);
		this.set_color(null);
		this.set_size(null);
		this.set_clip_rect(null);
		this._rotation_euler = null;
		this._rotation_quat = null;
	}
	,on_geometry_created: function() {
	}
	,set_visible: function(_v) {
		this.visible = _v;
		if(this.geometry != null) {
			this.geometry.set_visible(this.visible);
		}
		return this.visible;
	}
	,set_depth: function(_v) {
		if(this.geometry != null) {
			this.geometry.set_depth(_v);
		}
		return this.depth = _v;
	}
	,set_color: function(_c) {
		if(this.color != null && this.geometry != null) {
			this.geometry.set_color(_c);
		}
		return this.color = _c;
	}
	,set_texture: function(_t) {
		if(this.geometry != null && this.geometry.state.texture != _t) {
			this.geometry.set_texture(_t);
		}
		return this.texture = _t;
	}
	,set_shader: function(_s) {
		if(this.geometry != null && this.geometry.state.shader != _s) {
			this.geometry.set_shader(_s);
		}
		return this.shader = _s;
	}
	,set_geometry: function(_g) {
		if(this.geometry == _g) {
			return this.geometry;
		}
		if(this.geometry != null) {
			this.geometry.drop();
		}
		this.geometry = _g;
		if(this.geometry != null) {
			var _this = this.geometry.transform;
			var _p = this.get_transform();
			_this.dirty = true;
			if(_this.dirty && !_this._setup && _this._dirty_handlers != null && _this._dirty_handlers.length > 0) {
				var _g1 = 0;
				var _g11 = _this._dirty_handlers;
				while(_g1 < _g11.length) {
					var _handler = _g11[_g1];
					++_g1;
					if(_handler != null) {
						_handler(_this);
					}
				}
			}
			if(_this.parent != null) {
				var _this1 = _this.parent;
				if(_this1._clean_handlers != null) {
					HxOverrides.remove(_this1._clean_handlers,$bind(_this,_this.on_parent_cleaned));
				}
			}
			_this.parent = _p;
			if(_this._parent_handlers != null && _this._parent_handlers.length > 0) {
				var _parent = _this.parent;
				var _g2 = 0;
				var _g12 = _this._parent_handlers;
				while(_g2 < _g12.length) {
					var _handler1 = _g12[_g2];
					++_g2;
					if(_handler1 != null) {
						_handler1(_parent);
					}
				}
			}
			if(_this.parent != null) {
				var _this2 = _this.parent;
				if(_this2._clean_handlers == null) {
					_this2._clean_handlers = [];
				}
				_this2._clean_handlers.push($bind(_this,_this.on_parent_cleaned));
			}
			if(this._creating_geometry == false) {
				this.geometry.set_color(this.color);
				this.geometry.set_depth(this.depth);
				this.geometry.set_visible(this.visible);
			}
		}
		return this.geometry;
	}
	,set_parent_from_transform: function(_parent) {
		luxe_Entity.prototype.set_parent_from_transform.call(this,_parent);
		if(this.geometry != null) {
			var _this = this.geometry.transform;
			var _p = this.get_transform();
			_this.dirty = true;
			if(_this.dirty && !_this._setup && _this._dirty_handlers != null && _this._dirty_handlers.length > 0) {
				var _g = 0;
				var _g1 = _this._dirty_handlers;
				while(_g < _g1.length) {
					var _handler = _g1[_g];
					++_g;
					if(_handler != null) {
						_handler(_this);
					}
				}
			}
			if(_this.parent != null) {
				var _this1 = _this.parent;
				if(_this1._clean_handlers != null) {
					HxOverrides.remove(_this1._clean_handlers,$bind(_this,_this.on_parent_cleaned));
				}
			}
			_this.parent = _p;
			if(_this._parent_handlers != null && _this._parent_handlers.length > 0) {
				var _parent1 = _this.parent;
				var _g2 = 0;
				var _g11 = _this._parent_handlers;
				while(_g2 < _g11.length) {
					var _handler1 = _g11[_g2];
					++_g2;
					if(_handler1 != null) {
						_handler1(_parent1);
					}
				}
			}
			if(_this.parent != null) {
				var _this2 = _this.parent;
				if(_this2._clean_handlers == null) {
					_this2._clean_handlers = [];
				}
				_this2._clean_handlers.push($bind(_this,_this.on_parent_cleaned));
			}
		}
	}
	,set_rotation_from_transform: function(_rotation) {
		luxe_Entity.prototype.set_rotation_from_transform.call(this,_rotation);
		var _this = this._rotation_euler;
		var sqx = _rotation.x * _rotation.x;
		var sqy = _rotation.y * _rotation.y;
		var sqz = _rotation.z * _rotation.z;
		var sqw = _rotation.w * _rotation.w;
		var _x = _this.x;
		var _y = _this.y;
		var _z = _this.z;
		_x = Math.atan2(2 * (_rotation.x * _rotation.w - _rotation.y * _rotation.z),sqw - sqx - sqy + sqz);
		var value = 2 * (_rotation.x * _rotation.z + _rotation.y * _rotation.w);
		_y = Math.asin(value < -1 ? -1 : value > 1 ? 1 : value);
		_z = Math.atan2(2 * (_rotation.z * _rotation.w - _rotation.x * _rotation.y),sqw + sqx - sqy - sqz);
		var prev = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = _x;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_x);
			}
		}
		_this.y = _y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_y);
			}
		}
		_this.z = _z;
		if(!_this._construct) {
			if(_this.listen_z != null && !_this.ignore_listeners) {
				_this.listen_z(_z);
			}
		}
		_this.ignore_listeners = prev;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
		if(_this.listen_z != null && !_this.ignore_listeners) {
			_this.listen_z(_this.z);
		}
		this._rotation_quat.copy(_rotation);
	}
	,set_size: function(_v) {
		this.size = _v;
		if(this.size != null) {
			var _v1 = this.size;
			var listener = $bind(this,this._size_change);
			_v1.listen_x = listener;
			_v1.listen_y = listener;
			_v1.listen_z = listener;
		}
		return this.size;
	}
	,get_rotation_z: function() {
		return this.get_radians() * 57.29577951308238;
	}
	,set_rotation_z: function(_degrees) {
		this.set_radians(_degrees * 0.017453292519943278);
		return _degrees;
	}
	,set_radians: function(_r) {
		var _this = this._rotation_euler;
		_this.z = _r;
		if(!_this._construct) {
			if(_this.listen_z != null && !_this.ignore_listeners) {
				_this.listen_z(_r);
			}
		}
		this._rotation_quat.setFromEuler(this._rotation_euler);
		this.set_rotation(this._rotation_quat.clone());
		return this.radians = _r;
	}
	,get_radians: function() {
		return this.radians;
	}
	,set_locked: function(_l) {
		if(this.geometry != null) {
			this.geometry.set_locked(_l);
		}
		return this.locked = _l;
	}
	,set_clip_rect: function(_val) {
		if(this.geometry != null) {
			this.geometry.set_clip_rect(_val);
		}
		return this.clip_rect = _val;
	}
	,_size_change: function(_v) {
		this.set_size(this.size);
	}
	,init: function() {
		luxe_Entity.prototype.init.call(this);
	}
	,__class__: luxe_Visual
	,__properties__: $extend(luxe_Entity.prototype.__properties__,{set_rotation_z:"set_rotation_z",get_rotation_z:"get_rotation_z",set_radians:"set_radians",get_radians:"get_radians",set_clip_rect:"set_clip_rect",set_depth:"set_depth",set_visible:"set_visible",set_color:"set_color",set_shader:"set_shader",set_texture:"set_texture",set_locked:"set_locked",set_geometry:"set_geometry",set_size:"set_size"})
});
var luxe_Parcel = function(_options) {
	this.load_start_delay = 0.2;
	this.load_time_spacing = 0.05;
	this.start_load = 0.0;
	this.time_to_load = 0.0;
	if(_options == null) {
		_options = { };
	}
	if(_options.system == null) {
		_options.system = Luxe.resources;
	}
	if(_options.id == null) {
		_options.id = Luxe.utils.uniqueid();
	}
	if(_options.oncomplete != null) {
		this.oncomplete = _options.oncomplete;
	}
	if(_options.onprogress != null) {
		this.onprogress = _options.onprogress;
	}
	if(_options.onfailed != null) {
		this.onfailed = _options.onfailed;
	}
	if(_options.load_time_spacing != null) {
		this.load_time_spacing = _options.load_time_spacing;
	}
	if(_options.load_start_delay != null) {
		this.load_start_delay = _options.load_start_delay;
	}
	this.state = 0;
	this.loaded = [];
	this.emitter = new luxe_Emitter();
	this.system = _options.system;
	this.id = _options.id;
	this.list = this.empty_list();
	if(_options.bytes != null) {
		this.list.bytes = _options.bytes;
	}
	if(_options.texts != null) {
		this.list.texts = _options.texts;
	}
	if(_options.jsons != null) {
		this.list.jsons = _options.jsons;
	}
	if(_options.textures != null) {
		this.list.textures = _options.textures;
	}
	if(_options.fonts != null) {
		this.list.fonts = _options.fonts;
	}
	if(_options.shaders != null) {
		this.list.shaders = _options.shaders;
	}
	if(_options.sounds != null) {
		this.list.sounds = _options.sounds;
	}
	this.system.track(this);
};
$hxClasses["luxe.Parcel"] = luxe_Parcel;
luxe_Parcel.__name__ = ["luxe","Parcel"];
luxe_Parcel.prototype = {
	load: function(_load_id) {
		var _gthis = this;
		this.emitter.emit(1,this);
		this.state = 1;
		Luxe.timer.schedule(this.load_start_delay,function() {
			var tmp = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
			_gthis.start_load = tmp;
			if(_load_id == null) {
				_load_id = _gthis.id;
			}
			if(_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length == 0) {
				_gthis.state = 2;
				var tmp1 = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
				_gthis.time_to_load = tmp1 - _gthis.start_load;
				_gthis.emitter.emit(4,_gthis);
				if(_gthis.oncomplete != null) {
					_gthis.oncomplete(_gthis);
				}
				return;
			}
			var _index = 0;
			var _load_index = 0;
			var _g = 0;
			var _g1 = _gthis.list.bytes;
			while(_g < _g1.length) {
				var _bytes = [_g1[_g]];
				++_g;
				++_load_index;
				if(_gthis.loaded.indexOf(_bytes[0].id) == -1) {
					_gthis.loaded.push(_bytes[0].id);
					Luxe.timer.schedule(_gthis.load_time_spacing * _load_index,(function(_bytes1) {
						return function() {
							var _item_id = _bytes1[0].id;
							_gthis.system.load_bytes(_bytes1[0].id).then((function() {
								return function(_res) {
									var tmp2 = _index += 1;
									_gthis.one_loaded(_item_id,_load_id,_res,tmp2,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})(),(function() {
								return function(_err) {
									var tmp3 = _index += 1;
									_gthis.one_failed(_item_id,_load_id,_err,tmp3,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})());
						};
					})(_bytes));
				} else {
					haxe_Log.trace("   i / parcel / " + ("" + _gthis.id + " / already had " + _bytes[0].id + " loaded, skipped"),{ fileName : "Parcel.hx", lineNumber : 202, className : "luxe.Parcel", methodName : "load"});
					var _bytes2 = _bytes[0].id;
					var tmp4 = _gthis.system.cache.get(_bytes[0].id);
					var tmp5 = _index += 1;
					_gthis.one_loaded(_bytes2,_load_id,tmp4,tmp5,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
				}
			}
			var _g2 = 0;
			var _g11 = _gthis.list.texts;
			while(_g2 < _g11.length) {
				var _text = [_g11[_g2]];
				++_g2;
				++_load_index;
				if(_gthis.loaded.indexOf(_text[0].id) == -1) {
					_gthis.loaded.push(_text[0].id);
					Luxe.timer.schedule(_gthis.load_time_spacing * _load_index,(function(_text1) {
						return function() {
							var _item_id1 = _text1[0].id;
							_gthis.system.load_text(_text1[0].id).then((function() {
								return function(_res1) {
									var tmp6 = _index += 1;
									_gthis.one_loaded(_item_id1,_load_id,_res1,tmp6,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})(),(function() {
								return function(_err1) {
									var tmp7 = _index += 1;
									_gthis.one_failed(_item_id1,_load_id,_err1,tmp7,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})());
						};
					})(_text));
				} else {
					haxe_Log.trace("   i / parcel / " + ("" + _gthis.id + " / already had " + _text[0].id + " loaded, skipped"),{ fileName : "Parcel.hx", lineNumber : 224, className : "luxe.Parcel", methodName : "load"});
					var _text2 = _text[0].id;
					var tmp8 = _gthis.system.cache.get(_text[0].id);
					var tmp9 = _index += 1;
					_gthis.one_loaded(_text2,_load_id,tmp8,tmp9,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
				}
			}
			var _g3 = 0;
			var _g12 = _gthis.list.jsons;
			while(_g3 < _g12.length) {
				var _json = [_g12[_g3]];
				++_g3;
				++_load_index;
				if(_gthis.loaded.indexOf(_json[0].id) == -1) {
					_gthis.loaded.push(_json[0].id);
					Luxe.timer.schedule(_gthis.load_time_spacing * _load_index,(function(_json1) {
						return function() {
							var _item_id2 = _json1[0].id;
							_gthis.system.load_json(_json1[0].id).then((function() {
								return function(_res2) {
									var tmp10 = _index += 1;
									_gthis.one_loaded(_item_id2,_load_id,_res2,tmp10,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})(),(function() {
								return function(_err2) {
									var tmp11 = _index += 1;
									_gthis.one_failed(_item_id2,_load_id,_err2,tmp11,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})());
						};
					})(_json));
				} else {
					haxe_Log.trace("   i / parcel / " + ("" + _gthis.id + " / already had " + _json[0].id + " loaded, skipped"),{ fileName : "Parcel.hx", lineNumber : 246, className : "luxe.Parcel", methodName : "load"});
					var _json2 = _json[0].id;
					var tmp12 = _gthis.system.cache.get(_json[0].id);
					var tmp13 = _index += 1;
					_gthis.one_loaded(_json2,_load_id,tmp12,tmp13,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
				}
			}
			var _g4 = 0;
			var _g13 = _gthis.list.textures;
			while(_g4 < _g13.length) {
				var _texture = [_g13[_g4]];
				++_g4;
				++_load_index;
				if(_gthis.loaded.indexOf(_texture[0].id) == -1) {
					_gthis.loaded.push(_texture[0].id);
					Luxe.timer.schedule(_gthis.load_time_spacing * _load_index,(function(_texture1) {
						return function() {
							var _load = _gthis.system.load_texture(_texture1[0].id,{ load_premultiply_alpha : _texture1[0].load_premultiply_alpha, filter_min : _texture1[0].filter_min, filter_mag : _texture1[0].filter_mag, clamp_s : _texture1[0].clamp_s, clamp_t : _texture1[0].clamp_t});
							var _item_id3 = _texture1[0].id;
							_load.then((function() {
								return function(_res3) {
									var tmp14 = _index += 1;
									_gthis.one_loaded(_item_id3,_load_id,_res3,tmp14,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})(),(function() {
								return function(_err3) {
									var tmp15 = _index += 1;
									_gthis.one_failed(_item_id3,_load_id,_err3,tmp15,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})());
						};
					})(_texture));
				} else {
					haxe_Log.trace("   i / parcel / " + ("" + _gthis.id + " / already had " + _texture[0].id + " loaded, skipped"),{ fileName : "Parcel.hx", lineNumber : 276, className : "luxe.Parcel", methodName : "load"});
					var _texture2 = _texture[0].id;
					var tmp16 = _gthis.system.cache.get(_texture[0].id);
					var tmp17 = _index += 1;
					_gthis.one_loaded(_texture2,_load_id,tmp16,tmp17,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
				}
			}
			var _g5 = 0;
			var _g14 = _gthis.list.fonts;
			while(_g5 < _g14.length) {
				var _font = [_g14[_g5]];
				++_g5;
				++_load_index;
				if(_gthis.loaded.indexOf(_font[0].id) == -1) {
					_gthis.loaded.push(_font[0].id);
					Luxe.timer.schedule(_gthis.load_time_spacing * _load_index,(function(_font1) {
						return function() {
							var _load1 = _gthis.system.load_font(_font1[0].id,{ texture_path : _font1[0].texture_path});
							var _item_id4 = _font1[0].id;
							_load1.then((function() {
								return function(_res4) {
									var tmp18 = _index += 1;
									_gthis.one_loaded(_item_id4,_load_id,_res4,tmp18,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})(),(function() {
								return function(_err4) {
									var tmp19 = _index += 1;
									_gthis.one_failed(_item_id4,_load_id,_err4,tmp19,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})());
						};
					})(_font));
				} else {
					haxe_Log.trace("   i / parcel / " + ("" + _gthis.id + " / already had " + _font[0].id + " loaded, skipped"),{ fileName : "Parcel.hx", lineNumber : 302, className : "luxe.Parcel", methodName : "load"});
					var _font2 = _font[0].id;
					var tmp20 = _gthis.system.cache.get(_font[0].id);
					var tmp21 = _index += 1;
					_gthis.one_loaded(_font2,_load_id,tmp20,tmp21,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
				}
			}
			var _g6 = 0;
			var _g15 = _gthis.list.shaders;
			while(_g6 < _g15.length) {
				var _shader = [_g15[_g6]];
				++_g6;
				++_load_index;
				if(_gthis.loaded.indexOf(_shader[0].id) == -1) {
					_gthis.loaded.push(_shader[0].id);
					Luxe.timer.schedule(_gthis.load_time_spacing * _load_index,(function(_shader1) {
						return function() {
							var _load2 = _gthis.system.load_shader(_shader1[0].id,{ frag_id : _shader1[0].frag_id, vert_id : _shader1[0].vert_id});
							var _item_id5 = _shader1[0].id;
							_load2.then((function() {
								return function(_res5) {
									var tmp22 = _index += 1;
									_gthis.one_loaded(_item_id5,_load_id,_res5,tmp22,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})(),(function() {
								return function(_err5) {
									var tmp23 = _index += 1;
									_gthis.one_failed(_item_id5,_load_id,_err5,tmp23,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})());
						};
					})(_shader));
				} else {
					haxe_Log.trace("   i / parcel / " + ("" + _gthis.id + " / already had " + _shader[0].id + " loaded, skipped"),{ fileName : "Parcel.hx", lineNumber : 329, className : "luxe.Parcel", methodName : "load"});
					var _shader2 = _shader[0].id;
					var tmp24 = _gthis.system.cache.get(_shader[0].id);
					var tmp25 = _index += 1;
					_gthis.one_loaded(_shader2,_load_id,tmp24,tmp25,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
				}
			}
			var _g7 = 0;
			var _g16 = _gthis.list.sounds;
			while(_g7 < _g16.length) {
				var _sound = [_g16[_g7]];
				++_g7;
				++_load_index;
				if(_gthis.loaded.indexOf(_sound[0].id) == -1) {
					_gthis.loaded.push(_sound[0].id);
					Luxe.timer.schedule(_gthis.load_time_spacing * _load_index,(function(_sound1) {
						return function() {
							var _load3 = _gthis.system.load_audio(_sound1[0].id,{ is_stream : _sound1[0].is_stream});
							var _item_id6 = _sound1[0].id;
							_load3.then((function() {
								return function(_res6) {
									var tmp26 = _index += 1;
									_gthis.one_loaded(_item_id6,_load_id,_res6,tmp26,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})(),(function() {
								return function(_err6) {
									var tmp27 = _index += 1;
									_gthis.one_failed(_item_id6,_load_id,_err6,tmp27,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
								};
							})());
						};
					})(_sound));
				} else {
					haxe_Log.trace("   i / parcel / " + ("" + _gthis.id + " / already had " + _sound[0].id + " loaded, skipped"),{ fileName : "Parcel.hx", lineNumber : 355, className : "luxe.Parcel", methodName : "load"});
					var _sound2 = _sound[0].id;
					var tmp28 = _gthis.system.cache.get(_sound[0].id);
					var tmp29 = _index += 1;
					_gthis.one_loaded(_sound2,_load_id,tmp28,tmp29,_gthis.list.bytes.length + _gthis.list.texts.length + _gthis.list.jsons.length + _gthis.list.textures.length + _gthis.list.shaders.length + _gthis.list.fonts.length + _gthis.list.sounds.length);
				}
			}
		});
	}
	,one_loaded: function(_item_id,_load_id,_resource,_index,_total) {
		var _state = { id : _item_id, load_id : _load_id, resource : _resource, index : _index, total : _total};
		this.emitter.emit(3,_state);
		if(this.onprogress != null) {
			this.onprogress(_state);
		}
		if(_index == _total) {
			this.state = 2;
			this.time_to_load = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start - this.start_load;
			this.emitter.emit(4,this);
			if(this.oncomplete != null) {
				this.oncomplete(this);
			}
		}
	}
	,one_failed: function(_item_id,_load_id,_error,_index,_total) {
		var _state = { id : _item_id, load_id : _load_id, error : _error, index : _index, total : _total};
		this.emitter.emit(5,_state);
		if(this.onfailed != null) {
			this.onfailed(_state);
		}
	}
	,empty_list: function() {
		return { bytes : [], texts : [], jsons : [], textures : [], fonts : [], shaders : [], sounds : []};
	}
	,__class__: luxe_Parcel
};
var luxe_ParcelProgress = function(_options) {
	this.fade_alpha = 0;
	this.height = 0;
	this.width = 0;
	var _view_width = Luxe.core.screen.get_w();
	var _view_height = Luxe.core.screen.get_h();
	if(Luxe.camera.get_size() != null) {
		_view_width = Luxe.camera.get_size().x;
		_view_height = Luxe.camera.get_size().y;
	}
	var _view_mid_x = Math.floor(_view_width / 2);
	this.width = Math.max(Math.floor(_view_width * 0.75),2);
	this.height = Math.max(Math.floor(_view_height * 0.002),2);
	this.options = _options;
	if(this.options.no_visuals == null) {
		this.options.no_visuals = false;
	}
	if(this.options.bar == null) {
		this.options.bar = new phoenix_Color().rgb(3421236);
	}
	if(this.options.bar_border == null) {
		this.options.bar_border = new phoenix_Color().rgb(1447446);
	}
	if(this.options.background == null) {
		this.options.background = new phoenix_Color().rgb(592137);
	}
	if(this.options.fade_in == null) {
		this.options.fade_in = true;
	}
	if(this.options.fade_out == null) {
		this.options.fade_out = true;
	}
	if(this.options.fade_time == null) {
		this.options.fade_time = 0.3;
	}
	this.fade_alpha = this.options.background.a;
	if(!this.options.no_visuals) {
		if(this.options.fade_in) {
			this.options.background.a = 0;
			this.options.bar.a = 0;
			this.options.bar_border.a = 0;
		}
		var _ypos = Math.floor(_view_height * 0.60);
		var _half_width = Math.floor(this.width / 2);
		var _half_height = Math.floor(this.height / 2);
		this.background = new luxe_Sprite({ no_scene : true, size : new phoenix_Vector(_view_width,_view_height), centered : false, color : this.options.background, depth : 998, visible : true});
		this.progress_bar = new luxe_Sprite({ pos : new phoenix_Vector(_view_mid_x - _half_width,_ypos - _half_height), size : new phoenix_Vector(2,this.height), no_scene : true, centered : false, color : this.options.bar, depth : 998});
		this.progress_border = new luxe_Visual({ color : this.options.bar, no_scene : true, pos : new phoenix_Vector(_view_mid_x - _half_width,_ypos - _half_height), geometry : Luxe.draw.rectangle({ w : this.width, h : this.height, depth : 998.1}), depth : 998.1});
		if(this.options.fade_in) {
			this.background.color.tween(this.options.fade_time,{ a : this.fade_alpha},true);
			this.progress_bar.color.tween(this.options.fade_time,{ a : 1},true);
			this.progress_border.color.tween(this.options.fade_time,{ a : 1},true);
		}
	}
	this.options.parcel.emitter.on(1,$bind(this,this.onbegin));
	this.options.parcel.emitter.on(3,$bind(this,this.onprogress));
	this.options.parcel.emitter.on(4,$bind(this,this.oncomplete));
};
$hxClasses["luxe.ParcelProgress"] = luxe_ParcelProgress;
luxe_ParcelProgress.__name__ = ["luxe","ParcelProgress"];
luxe_ParcelProgress.prototype = {
	set_progress: function(amount) {
		if(amount < 0) {
			amount = 0;
		}
		if(amount > 1) {
			amount = 1;
		}
		if(!this.options.no_visuals) {
			var _this = this.progress_bar.size;
			var _x = Math.ceil(this.width * amount);
			_this.x = _x;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x);
				}
			}
		}
	}
	,onbegin: function(_parcel) {
		this.set_progress(0);
		if(!this.options.no_visuals) {
			if(this.options.fade_in) {
				this.options.background.a = 0;
				this.options.bar.a = 0;
				this.options.bar_border.a = 0;
				this.background.color.tween(this.options.fade_time,{ a : this.fade_alpha},true);
				this.progress_bar.color.tween(this.options.fade_time,{ a : 1},true);
				this.progress_border.color.tween(this.options.fade_time,{ a : 1},true);
			} else {
				this.options.background.a = 1;
				this.options.bar.a = 1;
				this.options.bar_border.a = 1;
			}
		}
	}
	,onprogress: function(_state) {
		this.set_progress(_state.index / _state.total);
	}
	,oncomplete: function(_parcel) {
		if(!this.options.no_visuals && this.options.fade_out) {
			this.do_complete();
			this.background.color.tween(this.options.fade_time,{ a : 0},true);
			this.progress_bar.color.tween(this.options.fade_time,{ a : 0},true);
			this.progress_border.color.tween(this.options.fade_time,{ a : 0},true);
		} else {
			this.do_complete();
		}
	}
	,do_complete: function() {
		if(this.options.oncomplete != null) {
			this.options.oncomplete(this.options.parcel);
		}
	}
	,__class__: luxe_ParcelProgress
};
var luxe_Physics = function(_core) {
	this.step_delta = 0.016666666666666666;
	this.step_rate = 0.016666666666666666;
	this.core = _core;
	this.emitter = new luxe_Emitter();
};
$hxClasses["luxe.Physics"] = luxe_Physics;
luxe_Physics.__name__ = ["luxe","Physics"];
luxe_Physics.prototype = {
	init: function() {
		this.engines = [];
		this.nape = this.add_engine(luxe_physics_nape_PhysicsNape);
	}
	,reset: function() {
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
		if(this.step_rate != 0) {
			this.timer = Luxe.timer.schedule(this.step_rate,$bind(this,this.fixed_update),true);
		}
	}
	,fixed_update: function() {
		Luxe.debug.start(luxe_Physics.tag_physics);
		this.emitter.emit(1,this.step_delta * Luxe.core.timescale);
		this.update();
		this.emitter.emit(2,this.step_delta * Luxe.core.timescale);
		Luxe.debug.end(luxe_Physics.tag_physics);
	}
	,add_engine: function(type,_data) {
		var _engine_instance = Type.createInstance(type,[_data]);
		var _physics_engine = _engine_instance;
		_physics_engine.init();
		this.engines.push(_physics_engine);
		return _engine_instance;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.engines;
		while(_g < _g1.length) {
			var engine = _g1[_g];
			++_g;
			engine.update();
		}
	}
	,process: function() {
		var _g = 0;
		var _g1 = this.engines;
		while(_g < _g1.length) ++_g;
	}
	,destroy: function() {
		if(this.timer != null) {
			this.timer.stop();
		}
		this.timer = null;
		var _g = 0;
		var _g1 = this.engines;
		while(_g < _g1.length) {
			var engine = _g1[_g];
			++_g;
			engine.destroy();
		}
	}
	,__class__: luxe_Physics
};
var luxe_PhysicsEngine = function() {
	this.draw = true;
	this.paused = false;
};
$hxClasses["luxe.PhysicsEngine"] = luxe_PhysicsEngine;
luxe_PhysicsEngine.__name__ = ["luxe","PhysicsEngine"];
luxe_PhysicsEngine.prototype = {
	init: function() {
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,get_paused: function() {
		return this.paused;
	}
	,get_draw: function() {
		return this.draw;
	}
	,set_gravity: function(_gravity) {
		return this.gravity = _gravity;
	}
	,__class__: luxe_PhysicsEngine
	,__properties__: {get_draw:"get_draw",set_gravity:"set_gravity",get_paused:"get_paused"}
};
var luxe_Resources = function() {
	this.parcels = [];
	this.emitter = new luxe_Emitter();
	this.cache = new haxe_ds_StringMap();
	this.stats = new luxe_ResourceStats();
};
$hxClasses["luxe.Resources"] = luxe_Resources;
luxe_Resources.__name__ = ["luxe","Resources"];
luxe_Resources.prototype = {
	track: function(_cache) {
		if(_cache == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_cache was null"));
		}
		if(this.parcels.indexOf(_cache) != -1) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("parcels.indexOf(_cache) == -1"));
		}
		this.parcels.push(_cache);
		this.emit(11,_cache);
	}
	,add: function(resource) {
		var key = resource.id;
		var _this = this.cache;
		if(!(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)))) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("!cache.exists(resource.id)"));
		}
		var key1 = resource.id;
		var _this1 = this.cache;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,resource);
		} else {
			_this1.h[key1] = resource;
		}
		this.emit(2,resource);
		switch(resource.resource_type) {
		case 0:
			this.stats.unknown += 1;
			break;
		case 1:
			this.stats.texts += 1;
			break;
		case 2:
			this.stats.jsons += 1;
			break;
		case 3:
			this.stats.bytes += 1;
			break;
		case 4:
			this.stats.textures += 1;
			break;
		case 5:
			this.stats.rtt += 1;
			break;
		case 6:
			this.stats.fonts += 1;
			break;
		case 7:
			this.stats.shaders += 1;
			break;
		case 8:
			this.stats.audios += 1;
			break;
		}
		this.stats.total += 1;
	}
	,remove: function(resource) {
		var key = resource.id;
		var _this = this.cache;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("cache.exists(resource.id)"));
		}
		this.emit(7,resource);
		switch(resource.resource_type) {
		case 0:
			this.stats.unknown += -1;
			break;
		case 1:
			this.stats.texts += -1;
			break;
		case 2:
			this.stats.jsons += -1;
			break;
		case 3:
			this.stats.bytes += -1;
			break;
		case 4:
			this.stats.textures += -1;
			break;
		case 5:
			this.stats.rtt += -1;
			break;
		case 6:
			this.stats.fonts += -1;
			break;
		case 7:
			this.stats.shaders += -1;
			break;
		case 8:
			this.stats.audios += -1;
			break;
		}
		this.stats.total += -1;
		return this.cache.remove(resource.id);
	}
	,on: function(ev,handler) {
		this.emitter.on(ev,handler);
	}
	,emit: function(ev,data) {
		this.emitter.emit(1,data);
		this.emitter.emit(ev,data);
	}
	,load_bytes: function(_id) {
		if(_id == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_id was null"));
		}
		var _resource = this.cache.get(_id);
		if(_resource != null) {
			var _g = _resource;
			_g.set_ref(_g.ref + 1);
			return snow_api_Promise.resolve(_resource);
		}
		_resource = new luxe_resource_BytesResource({ id : _id, system : this, asset : null});
		this.add(_resource);
		return _resource.reload();
	}
	,load_text: function(_id) {
		if(_id == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_id was null"));
		}
		var _resource = this.cache.get(_id);
		if(_resource != null) {
			var _g = _resource;
			_g.set_ref(_g.ref + 1);
			return snow_api_Promise.resolve(_resource);
		}
		_resource = new luxe_resource_TextResource({ id : _id, system : this, asset : null});
		this.add(_resource);
		return _resource.reload();
	}
	,load_json: function(_id) {
		if(_id == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_id was null"));
		}
		var _resource = this.cache.get(_id);
		if(_resource != null) {
			var _g = _resource;
			_g.set_ref(_g.ref + 1);
			return snow_api_Promise.resolve(_resource);
		}
		_resource = new luxe_resource_JSONResource({ id : _id, system : this, asset : null});
		this.add(_resource);
		return _resource.reload();
	}
	,load_texture: function(_id,_options) {
		if(_id == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_id was null"));
		}
		var _resource = this.cache.get(_id);
		if(_resource != null) {
			var _g = _resource;
			_g.set_ref(_g.ref + 1);
			return snow_api_Promise.resolve(_resource);
		}
		var _filter_min = null;
		var _filter_mag = null;
		var _clamp_s = null;
		var _clamp_t = null;
		var _premultiply = null;
		if(_options != null) {
			_filter_min = _options.filter_min;
			_filter_mag = _options.filter_mag;
			_clamp_s = _options.clamp_s;
			_clamp_t = _options.clamp_t;
			_premultiply = _options.load_premultiply_alpha;
		}
		_resource = new phoenix_Texture({ id : _id, system : this, filter_min : _filter_min, filter_mag : _filter_mag, clamp_s : _clamp_s, clamp_t : _clamp_t, load_premultiply_alpha : _premultiply});
		this.add(_resource);
		return _resource.reload();
	}
	,load_font: function(_id,_options) {
		if(_id == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_id was null"));
		}
		var _resource = this.cache.get(_id);
		if(_resource != null) {
			var _g = _resource;
			_g.set_ref(_g.ref + 1);
			return snow_api_Promise.resolve(_resource);
		}
		var _texture_path = null;
		if(_options != null) {
			_texture_path = _options.texture_path;
		}
		_resource = new phoenix_BitmapFont({ id : _id, system : this, texture_path : _texture_path});
		this.add(_resource);
		return _resource.reload();
	}
	,load_shader: function(_id,_options) {
		if(_id == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_id was null"));
		}
		var _resource = this.cache.get(_id);
		if(_resource != null) {
			var _g = _resource;
			_g.set_ref(_g.ref + 1);
			return snow_api_Promise.resolve(_resource);
		}
		_resource = new phoenix_Shader({ id : _id, system : this, frag_id : _options.frag_id, vert_id : _options.vert_id});
		this.add(_resource);
		return _resource.reload();
	}
	,load_audio: function(_id,_options) {
		if(_id == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_id was null"));
		}
		var _resource = this.cache.get(_id);
		if(_resource != null) {
			var _g = _resource;
			_g.set_ref(_g.ref + 1);
			return snow_api_Promise.resolve(_resource);
		}
		var _is_stream = false;
		if(_options != null) {
			_is_stream = _options.is_stream;
		}
		_resource = new luxe_resource_AudioResource({ id : _id, system : this, asset : null, is_stream : _is_stream});
		this.add(_resource);
		return _resource.reload();
	}
	,__class__: luxe_Resources
};
var luxe_ResourceStats = function() {
	this.unknown = 0;
	this.audios = 0;
	this.bytes = 0;
	this.jsons = 0;
	this.texts = 0;
	this.shaders = 0;
	this.rtt = 0;
	this.textures = 0;
	this.fonts = 0;
	this.total = 0;
};
$hxClasses["luxe.ResourceStats"] = luxe_ResourceStats;
luxe_ResourceStats.__name__ = ["luxe","ResourceStats"];
luxe_ResourceStats.prototype = {
	__class__: luxe_ResourceStats
};
var luxe_Scene = function(_name) {
	if(_name == null) {
		_name = "untitled scene";
	}
	this.entity_count = 0;
	this._has_changed = false;
	this.destroyed = false;
	this.started = false;
	this.inited = false;
	luxe_Objects.call(this,_name);
	this.entities = new haxe_ds_StringMap();
	this._delayed_init_entities = [];
	this._delayed_reset_entities = [];
	Luxe.core.emitter.on(2,$bind(this,this.init));
	Luxe.core.emitter.on(8,$bind(this,this._destroy));
	Luxe.core.emitter.on(6,$bind(this,this.update));
	Luxe.core.emitter.on(9,$bind(this,this.prerender));
	Luxe.core.emitter.on(11,$bind(this,this.postrender));
	Luxe.core.emitter.on(10,$bind(this,this.render));
	Luxe.core.emitter.on(12,$bind(this,this.keydown));
	Luxe.core.emitter.on(13,$bind(this,this.keyup));
	Luxe.core.emitter.on(14,$bind(this,this.textinput));
	Luxe.core.emitter.on(16,$bind(this,this.inputup));
	Luxe.core.emitter.on(15,$bind(this,this.inputdown));
	Luxe.core.emitter.on(18,$bind(this,this.mouseup));
	Luxe.core.emitter.on(17,$bind(this,this.mousedown));
	Luxe.core.emitter.on(19,$bind(this,this.mousemove));
	Luxe.core.emitter.on(20,$bind(this,this.mousewheel));
	Luxe.core.emitter.on(22,$bind(this,this.touchup));
	Luxe.core.emitter.on(21,$bind(this,this.touchdown));
	Luxe.core.emitter.on(23,$bind(this,this.touchmove));
	Luxe.core.emitter.on(26,$bind(this,this.gamepadup));
	Luxe.core.emitter.on(25,$bind(this,this.gamepaddown));
	Luxe.core.emitter.on(24,$bind(this,this.gamepadaxis));
	Luxe.core.emitter.on(27,$bind(this,this.gamepaddevice));
	Luxe.core.emitter.on(29,$bind(this,this.windowmoved));
	Luxe.core.emitter.on(30,$bind(this,this.windowresized));
	Luxe.core.emitter.on(31,$bind(this,this.windowsized));
	Luxe.core.emitter.on(32,$bind(this,this.windowminimized));
	Luxe.core.emitter.on(33,$bind(this,this.windowrestored));
	if(Luxe.core.inited) {
		this.init(null);
	}
	var _view = Luxe.core.debug.get_view("Scenes");
	if(_view != null) {
		_view.add_scene(this);
	}
};
$hxClasses["luxe.Scene"] = luxe_Scene;
luxe_Scene.__name__ = ["luxe","Scene"];
luxe_Scene.__super__ = luxe_Objects;
luxe_Scene.prototype = $extend(luxe_Objects.prototype,{
	add: function(entity) {
		if(entity == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("entity was null" + (" ( " + "can't put entity in a scene if the entity is null." + " )")));
		}
		var _name = entity.get_name();
		if(this.entities.exists(_name)) {
			haxe_Log.trace("    i / scene / " + ("" + this.get_name() + " / adding a second entity named " + _name + "!\r\n                This will replace the existing one, possibly leaving the previous one in limbo."),{ fileName : "Scene.hx", lineNumber : 96, className : "luxe.Scene", methodName : "handle_duplicate_warning"});
		}
		entity.set_scene(this);
		entity.set_scene_root(this);
		var key = entity.get_name();
		var _this = this.entities;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,entity);
		} else {
			_this.h[key] = entity;
		}
		this.entity_count++;
		if(this.inited) {
			this._delayed_init_entities.push(entity);
		}
		if(this.started) {
			this._delayed_reset_entities.push(entity);
		}
		this._has_changed = true;
	}
	,remove: function(entity) {
		if(entity == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("entity was null" + (" ( " + "can't remove entity from a scene if the entity is null." + " )")));
		}
		this._has_changed = true;
		if(entity.get_scene() == this) {
			entity.set_scene(null);
			this.entity_count--;
			return this.entities.remove(entity.get_name());
		} else {
			haxe_Log.trace("    i / scene / " + ("can't remove the entity(`" + entity.get_name() + "`) from this scene(`" + this.get_name() + "`), it is not mine (entity.scene != this)"),{ fileName : "Scene.hx", lineNumber : 147, className : "luxe.Scene", methodName : "remove"});
			return false;
		}
	}
	,render: function(_) {
		this.emit(10);
	}
	,prerender: function(_) {
		this.emit(9);
	}
	,postrender: function(_) {
		this.emit(11);
	}
	,keydown: function(e) {
		this.emit(12,e);
	}
	,keyup: function(e) {
		this.emit(13,e);
	}
	,textinput: function(e) {
		this.emit(14,e);
	}
	,mousedown: function(e) {
		this.emit(17,e);
	}
	,mousewheel: function(e) {
		this.emit(20,e);
	}
	,mouseup: function(e) {
		this.emit(18,e);
	}
	,mousemove: function(e) {
		this.emit(19,e);
	}
	,touchdown: function(event) {
		this.emit(21,event);
	}
	,touchup: function(event) {
		this.emit(22,event);
	}
	,touchmove: function(event) {
		this.emit(23,event);
	}
	,gamepadaxis: function(event) {
		this.emit(24,event);
	}
	,gamepadup: function(event) {
		this.emit(26,event);
	}
	,gamepaddown: function(event) {
		this.emit(25,event);
	}
	,gamepaddevice: function(event) {
		this.emit(27,event);
	}
	,windowmoved: function(event) {
		this.emit(29,event);
	}
	,windowresized: function(event) {
		this.emit(30,event);
	}
	,windowsized: function(event) {
		this.emit(31,event);
	}
	,windowminimized: function(event) {
		this.emit(32,event);
	}
	,windowrestored: function(event) {
		this.emit(33,event);
	}
	,inputdown: function(_event) {
		this.emit(15,_event);
	}
	,inputup: function(_event) {
		this.emit(16,_event);
	}
	,_destroy: function(_) {
		this.destroy();
	}
	,destroy: function() {
		if(this.destroyed != false) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("destroyed == false" + (" ( " + ("scene / destroying repeatedly `" + this.get_name() + "`") + " )")));
		}
		this.destroyed = true;
		Luxe.core.emitter.off(2,$bind(this,this.init));
		Luxe.core.emitter.off(8,$bind(this,this._destroy));
		Luxe.core.emitter.off(6,$bind(this,this.update));
		Luxe.core.emitter.off(9,$bind(this,this.prerender));
		Luxe.core.emitter.off(11,$bind(this,this.postrender));
		Luxe.core.emitter.off(10,$bind(this,this.render));
		Luxe.core.emitter.off(12,$bind(this,this.keydown));
		Luxe.core.emitter.off(13,$bind(this,this.keyup));
		Luxe.core.emitter.off(14,$bind(this,this.textinput));
		Luxe.core.emitter.off(16,$bind(this,this.inputup));
		Luxe.core.emitter.off(15,$bind(this,this.inputdown));
		Luxe.core.emitter.off(18,$bind(this,this.mouseup));
		Luxe.core.emitter.off(17,$bind(this,this.mousedown));
		Luxe.core.emitter.off(19,$bind(this,this.mousemove));
		Luxe.core.emitter.off(20,$bind(this,this.mousewheel));
		Luxe.core.emitter.off(22,$bind(this,this.touchup));
		Luxe.core.emitter.off(21,$bind(this,this.touchdown));
		Luxe.core.emitter.off(23,$bind(this,this.touchmove));
		Luxe.core.emitter.off(26,$bind(this,this.gamepadup));
		Luxe.core.emitter.off(25,$bind(this,this.gamepaddown));
		Luxe.core.emitter.off(24,$bind(this,this.gamepadaxis));
		Luxe.core.emitter.off(27,$bind(this,this.gamepaddevice));
		Luxe.core.emitter.off(29,$bind(this,this.windowmoved));
		Luxe.core.emitter.off(30,$bind(this,this.windowresized));
		Luxe.core.emitter.off(31,$bind(this,this.windowsized));
		Luxe.core.emitter.off(32,$bind(this,this.windowminimized));
		Luxe.core.emitter.off(33,$bind(this,this.windowrestored));
		this.emit(8);
		var _view = Luxe.core.debug.get_view("Scenes");
		if(_view != null) {
			_view.remove_scene(this);
		}
	}
	,_do_init: function() {
		var _before_count = this.get_length();
		if(this.entity_count > 0) {
			var _this = this.entities;
			var entity = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(entity.hasNext()) {
				var entity1 = entity.next();
				if(entity1 != null) {
					if(!entity1.inited) {
						entity1.init();
						entity1.emit(2);
						if(entity1.component_count > 0) {
							var _g_index;
							var _this1 = entity1._components.components;
							_g_index = 0;
							while(_g_index < _this1._keys.length) _this1.map.get(_this1._keys[_g_index++]).init();
						}
						if(entity1.children.length > 0) {
							var _g = 0;
							var _g1 = entity1.children;
							while(_g < _g1.length) {
								var _child = _g1[_g];
								++_g;
								_child._init();
							}
						}
						entity1.inited = true;
					}
				}
			}
		}
		return _before_count != this.get_length();
	}
	,init: function(_) {
		var _keep_going = true;
		while(_keep_going) _keep_going = this._do_init();
		this.inited = true;
		this.emit(2);
		this.reset();
	}
	,reset: function() {
		this.started = false;
		this.emit(3);
		this.started = true;
	}
	,update: function(dt) {
		Luxe.core.debug.start("scene." + this.get_name());
		this.handle_delayed_additions();
		this.emit(6,dt);
		if(this.entity_count > 0) {
			var _this = this.entities;
			var entity = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(entity.hasNext()) {
				var entity1 = entity.next();
				if(entity1 != null) {
					if(!entity1.destroyed) {
						if(!(!entity1.get_active() || !entity1.inited || !entity1.started)) {
							var _this1 = entity1.get_transform();
							if(_this1.parent != null && _this1.parent.dirty) {
								_this1.parent.clean_check();
							}
							if(_this1.dirty && !_this1._cleaning && !_this1.manual_update) {
								_this1.clean();
							}
							entity1.update(dt);
							if(entity1.events != null) {
								entity1.events.process();
							}
							if(entity1.component_count > 0) {
								var _g_index;
								var _this2 = entity1._components.components;
								_g_index = 0;
								while(_g_index < _this2._keys.length) _this2.map.get(_this2._keys[_g_index++]).update(dt);
							}
							if(entity1.children != null && entity1.children.length > 0) {
								var _g = 0;
								var _g1 = entity1.children;
								while(_g < _g1.length) {
									var _child = _g1[_g];
									++_g;
									_child._update(dt);
								}
							}
						}
					}
				}
			}
		}
		Luxe.core.debug.end("scene." + this.get_name());
	}
	,handle_delayed_additions: function() {
		this._delayed_init_entities.length != 0 || this._delayed_reset_entities.length != 0;
		if(this._delayed_init_entities.length > 0) {
			var _g = 0;
			var _g1 = this._delayed_init_entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				if(entity.destroyed) {
					continue;
				}
				if(!entity.inited) {
					entity.init();
					entity.emit(2);
					if(entity.component_count > 0) {
						var _g_index;
						var _this = entity._components.components;
						_g_index = 0;
						while(_g_index < _this._keys.length) _this.map.get(_this._keys[_g_index++]).init();
					}
					if(entity.children.length > 0) {
						var _g2 = 0;
						var _g11 = entity.children;
						while(_g2 < _g11.length) {
							var _child = _g11[_g2];
							++_g2;
							_child._init();
						}
					}
					entity.inited = true;
				}
			}
			this._delayed_init_entities = null;
			this._delayed_init_entities = [];
		}
		if(this._delayed_reset_entities.length > 0) {
			var _g3 = 0;
			var _g12 = this._delayed_reset_entities;
			while(_g3 < _g12.length) {
				var entity1 = _g12[_g3];
				++_g3;
				if(entity1.destroyed) {
					continue;
				}
				entity1.emit(3);
				if(entity1.component_count > 0) {
					var _g_index1;
					var _this1 = entity1._components.components;
					_g_index1 = 0;
					while(_g_index1 < _this1._keys.length) _this1.map.get(_this1._keys[_g_index1++]);
				}
				if(entity1.children.length > 0) {
					var _g4 = 0;
					var _g13 = entity1.children;
					while(_g4 < _g13.length) {
						var _child1 = _g13[_g4];
						++_g4;
						_child1._reset(null);
					}
				}
				var _rate = entity1.fixed_rate;
				if(entity1.fixed_rate_timer != null) {
					entity1.fixed_rate_timer.stop();
					entity1.fixed_rate_timer = null;
				}
				if(_rate != 0 && entity1.get_parent() == null && !entity1.destroyed) {
					entity1.fixed_rate_timer = new snow_api_Timer(_rate);
					entity1.fixed_rate_timer.run = $bind(entity1,entity1._fixed_update);
				}
				entity1.started = true;
			}
			this._delayed_reset_entities = null;
			this._delayed_reset_entities = [];
		}
	}
	,get_length: function() {
		return Lambda.count(this.entities);
	}
	,__class__: luxe_Scene
	,__properties__: $extend(luxe_Objects.prototype.__properties__,{get_length:"get_length"})
});
var luxe_Screen = function(_core,_w,_h) {
	this.core = _core;
	this.cursor = new luxe_Cursor(this);
	this.width = _w;
	this.height = _h;
};
$hxClasses["luxe.Screen"] = luxe_Screen;
luxe_Screen.__name__ = ["luxe","Screen"];
luxe_Screen.prototype = {
	internal_resized: function(_w,_h) {
		this.width = _w;
		this.height = _h;
	}
	,get_mid: function() {
		return new phoenix_Vector(Math.round(this.get_w() / 2),Math.round(this.get_h() / 2));
	}
	,get_w: function() {
		return this.width | 0;
	}
	,get_h: function() {
		return this.height | 0;
	}
	,get_device_pixel_ratio: function() {
		if(window.devicePixelRatio == null) {
			return 1.0;
		} else {
			return window.devicePixelRatio;
		}
	}
	,__class__: luxe_Screen
	,__properties__: {get_device_pixel_ratio:"get_device_pixel_ratio",get_h:"get_h",get_w:"get_w",get_mid:"get_mid"}
};
var luxe_Cursor = function(_screen) {
	this.ignore = false;
	this.grab = false;
	this.screen = _screen;
	this.pos = new phoenix_Vector();
};
$hxClasses["luxe.Cursor"] = luxe_Cursor;
luxe_Cursor.__name__ = ["luxe","Cursor"];
luxe_Cursor.prototype = {
	get_grab: function() {
		return this.grab;
	}
	,set_grab: function(_grab) {
		this.screen.core.app.runtime.window_grab(_grab);
		return this.grab = _grab;
	}
	,__class__: luxe_Cursor
	,__properties__: {set_grab:"set_grab",get_grab:"get_grab"}
};
var luxe_Sprite = function(options) {
	this.flipy = false;
	this.flipx = false;
	this.centered = true;
	this.set_uv(new phoenix_Rectangle());
	if(options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("options was null" + (" ( " + "Sprite requires non-null options" + " )")));
	}
	if(options.centered != null) {
		this.set_centered(options.centered);
	}
	if(options.flipx != null) {
		this.set_flipx(options.flipx);
	}
	if(options.flipy != null) {
		this.set_flipy(options.flipy);
	}
	luxe_Visual.call(this,options);
};
$hxClasses["luxe.Sprite"] = luxe_Sprite;
luxe_Sprite.__name__ = ["luxe","Sprite"];
luxe_Sprite.__super__ = luxe_Visual;
luxe_Sprite.prototype = $extend(luxe_Visual.prototype,{
	on_geometry_created: function() {
		luxe_Visual.prototype.on_geometry_created.call(this);
		if(this.texture != null) {
			if(this.options.uv == null) {
				this.options.uv = new phoenix_Rectangle(0,0,this.texture.width,this.texture.height);
			}
			this.set_uv(this.options.uv);
			if(this.texture.resource_type == 5) {
				this.set_flipy(true);
			}
		}
		this.set_centered(!(!this.centered));
		this.set_flipx(!(!this.flipx));
		this.set_flipy(!(!this.flipy));
	}
	,set_geometry: function(_g) {
		this.geometry_quad = _g;
		return luxe_Visual.prototype.set_geometry.call(this,_g);
	}
	,ondestroy: function() {
		this.set_uv(null);
		this.geometry_quad = null;
		luxe_Visual.prototype.ondestroy.call(this);
	}
	,set_uv: function(_uv) {
		if(_uv == null) {
			return this.uv = _uv;
		}
		if(this.geometry_quad != null) {
			var _this = this.geometry_quad;
			if(_this.state.texture == null) {
				throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("texture was null" + (" ( " + "QuadGeometry; Calling UV on a geometry with null texture." + " )")));
			}
			var tlx = _uv.x / _this.state.texture.width_actual;
			var tly = _uv.y / _this.state.texture.height_actual;
			var szx = _uv.w / _this.state.texture.width_actual;
			var szy = _uv.h / _this.state.texture.height_actual;
			if(_this.vertices.length != 0) {
				var tl_x = tlx;
				var tl_y = tly;
				_this._uv_x = tlx;
				_this._uv_y = tly;
				_this._uv_w = szx;
				_this._uv_h = szy;
				var tr_x = tlx + szx;
				var tr_y = tly;
				var br_x = tlx + szx;
				var br_y = tly + szy;
				var bl_x = tlx;
				var bl_y = tly + szy;
				var tmp_x = 0.0;
				var tmp_y = 0.0;
				var rotations = _this.uv_angle / 90 | 0;
				rotations -= 4 * Math.floor(rotations / 4);
				var _g1 = 0;
				var _g = rotations;
				while(_g1 < _g) {
					++_g1;
					tmp_x = tl_x;
					tl_x = bl_x;
					bl_x = br_x;
					br_x = tr_x;
					tr_x = tmp_x;
					tmp_y = tl_y;
					tl_y = bl_y;
					bl_y = br_y;
					br_y = tr_y;
					tr_y = tmp_y;
				}
				if(_this.flipy) {
					tmp_y = bl_y;
					bl_y = tl_y;
					tl_y = tmp_y;
					tmp_x = bl_x;
					bl_x = tl_x;
					tl_x = tmp_x;
					tmp_y = br_y;
					br_y = tr_y;
					tr_y = tmp_y;
					tmp_x = br_x;
					br_x = tr_x;
					tr_x = tmp_x;
				}
				if(_this.flipx) {
					tmp_x = tr_x;
					tr_x = tl_x;
					tl_x = tmp_x;
					tmp_y = tr_y;
					tr_y = tl_y;
					tl_y = tmp_y;
					tmp_x = br_x;
					br_x = bl_x;
					bl_x = tmp_x;
					tmp_y = br_y;
					br_y = bl_y;
					bl_y = tmp_y;
				}
				var _this1 = _this.vertices[0].uv.uv0;
				_this1.u = tl_x;
				_this1.v = tl_y;
				var _this2 = _this.vertices[1].uv.uv0;
				_this2.u = tr_x;
				_this2.v = tr_y;
				var _this3 = _this.vertices[2].uv.uv0;
				_this3.u = br_x;
				_this3.v = br_y;
				var _this4 = _this.vertices[3].uv.uv0;
				_this4.u = bl_x;
				_this4.v = bl_y;
				var _this5 = _this.vertices[4].uv.uv0;
				_this5.u = tl_x;
				_this5.v = tl_y;
				var _this6 = _this.vertices[5].uv.uv0;
				_this6.u = br_x;
				_this6.v = br_y;
				_this.set_dirty(true);
			}
		}
		this.uv = _uv;
		phoenix_Rectangle.listen(this.uv,$bind(this,this._uv_change));
		return this.uv;
	}
	,set_flipy: function(_v) {
		if(_v == this.flipy) {
			return this.flipy;
		}
		if(this.geometry_quad != null) {
			this.geometry_quad.set_flipy(_v);
		}
		return this.flipy = _v;
	}
	,set_flipx: function(_v) {
		if(_v == this.flipx) {
			return this.flipx;
		}
		if(this.geometry_quad != null) {
			this.geometry_quad.set_flipx(_v);
		}
		return this.flipx = _v;
	}
	,set_size: function(_v) {
		if(this.geometry_quad != null) {
			this.geometry_quad.resize_xy(_v.x,_v.y);
			if(!this._has_custom_origin) {
				if(this.centered) {
					var _this = new phoenix_Vector(_v.x,_v.y,_v.z,_v.w);
					var _x = _this.x / 2;
					var _y = _this.y / 2;
					var _z = _this.z / 2;
					var prev = _this.ignore_listeners;
					_this.ignore_listeners = true;
					_this.x = _x;
					if(!_this._construct) {
						if(_this.listen_x != null && !_this.ignore_listeners) {
							_this.listen_x(_x);
						}
					}
					_this.y = _y;
					if(!_this._construct) {
						if(_this.listen_y != null && !_this.ignore_listeners) {
							_this.listen_y(_y);
						}
					}
					_this.z = _z;
					if(!_this._construct) {
						if(_this.listen_z != null && !_this.ignore_listeners) {
							_this.listen_z(_z);
						}
					}
					_this.ignore_listeners = prev;
					if(_this.listen_x != null && !_this.ignore_listeners) {
						_this.listen_x(_this.x);
					}
					if(_this.listen_y != null && !_this.ignore_listeners) {
						_this.listen_y(_this.y);
					}
					if(_this.listen_z != null && !_this.ignore_listeners) {
						_this.listen_z(_this.z);
					}
					this.set_origin(_this);
				}
			}
		}
		return luxe_Visual.prototype.set_size.call(this,_v);
	}
	,set_centered: function(_c) {
		if(this.size != null) {
			if(_c) {
				this.set_origin(new phoenix_Vector(this.size.x / 2,this.size.y / 2));
			} else {
				this.set_origin(new phoenix_Vector());
			}
		}
		return this.centered = _c;
	}
	,_uv_change: function(_v) {
		this.set_uv(this.uv);
	}
	,init: function() {
		luxe_Visual.prototype.init.call(this);
	}
	,__class__: luxe_Sprite
	,__properties__: $extend(luxe_Visual.prototype.__properties__,{set_uv:"set_uv",set_flipy:"set_flipy",set_flipx:"set_flipx",set_centered:"set_centered"})
});
var luxe_State = function(_options) {
	this.inited = false;
	this.enabled = false;
	this.active = false;
	luxe_ID.call(this,_options.name);
};
$hxClasses["luxe.State"] = luxe_State;
luxe_State.__name__ = ["luxe","State"];
luxe_State.__super__ = luxe_ID;
luxe_State.prototype = $extend(luxe_ID.prototype,{
	destroy: function() {
		this.machine.kill(this.name);
	}
	,init: function() {
	}
	,update: function(dt) {
	}
	,onleave: function(d) {
	}
	,onenter: function(d) {
	}
	,onkeyup: function(event) {
	}
	,onmousedown: function(event) {
	}
	,ontouchdown: function(event) {
	}
	,__class__: luxe_State
});
var luxe_States = function(_options) {
	this._state_count = 0;
	this.active_count = 0;
	var _name = "";
	if(_options != null && _options.name != null) {
		_name = _options.name;
	}
	luxe_Objects.call(this,_name == "" ? Luxe.utils.uniqueid() : _name);
	this._states = new haxe_ds_StringMap();
	this.active_states = [];
	Luxe.core.emitter.on(2,$bind(this,this.init));
	Luxe.core.emitter.on(8,$bind(this,this.ondestroy));
	Luxe.core.emitter.on(6,$bind(this,this.update));
	Luxe.core.emitter.on(9,$bind(this,this.prerender));
	Luxe.core.emitter.on(11,$bind(this,this.postrender));
	Luxe.core.emitter.on(10,$bind(this,this.render));
	Luxe.core.emitter.on(12,$bind(this,this.keydown));
	Luxe.core.emitter.on(13,$bind(this,this.keyup));
	Luxe.core.emitter.on(14,$bind(this,this.textinput));
	Luxe.core.emitter.on(16,$bind(this,this.inputup));
	Luxe.core.emitter.on(15,$bind(this,this.inputdown));
	Luxe.core.emitter.on(18,$bind(this,this.mouseup));
	Luxe.core.emitter.on(17,$bind(this,this.mousedown));
	Luxe.core.emitter.on(19,$bind(this,this.mousemove));
	Luxe.core.emitter.on(20,$bind(this,this.mousewheel));
	Luxe.core.emitter.on(22,$bind(this,this.touchup));
	Luxe.core.emitter.on(21,$bind(this,this.touchdown));
	Luxe.core.emitter.on(23,$bind(this,this.touchmove));
	Luxe.core.emitter.on(26,$bind(this,this.gamepadup));
	Luxe.core.emitter.on(25,$bind(this,this.gamepaddown));
	Luxe.core.emitter.on(24,$bind(this,this.gamepadaxis));
	Luxe.core.emitter.on(27,$bind(this,this.gamepaddevice));
	Luxe.core.emitter.on(29,$bind(this,this.windowmoved));
	Luxe.core.emitter.on(30,$bind(this,this.windowresized));
	Luxe.core.emitter.on(31,$bind(this,this.windowsized));
	Luxe.core.emitter.on(32,$bind(this,this.windowminimized));
	Luxe.core.emitter.on(33,$bind(this,this.windowrestored));
};
$hxClasses["luxe.States"] = luxe_States;
luxe_States.__name__ = ["luxe","States"];
luxe_States.__super__ = luxe_Objects;
luxe_States.prototype = $extend(luxe_Objects.prototype,{
	add: function(_state) {
		var key = _state.name;
		var _this = this._states;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,_state);
		} else {
			_this.h[key] = _state;
		}
		this._state_count++;
		_state.machine = this;
		if(Luxe.core.inited) {
			if(!_state.inited) {
				_state.inited = true;
				_state.init();
			}
		}
		return _state;
	}
	,remove: function(_name,_leave_with) {
		var _this = this._states;
		if(__map_reserved[_name] != null ? _this.existsReserved(_name) : _this.h.hasOwnProperty(_name)) {
			var _this1 = this._states;
			var _state = __map_reserved[_name] != null ? _this1.getReserved(_name) : _this1.h[_name];
			if(_state != null) {
				if(_state.active) {
					this.leave(_state,_leave_with);
					if(_state == this.current_state) {
						this.current_state = null;
					}
				}
				if(_state.enabled) {
					this.disable(_state.name);
				}
				this._states.remove(_name);
				this._state_count--;
			}
			return _state;
		}
		return null;
	}
	,kill: function(_name) {
		if(this._state_count > 0) {
			var _this = this._states;
			if(__map_reserved[_name] != null ? _this.existsReserved(_name) : _this.h.hasOwnProperty(_name)) {
				this.remove(_name);
			}
		}
	}
	,disable: function(_name,_disable_with) {
		if(this._state_count == 0) {
			return;
		}
		var _this = this._states;
		var _state = __map_reserved[_name] != null ? _this.getReserved(_name) : _this.h[_name];
		if(_state != null) {
			_state.active = false;
			_state.enabled = false;
			HxOverrides.remove(this.active_states,_state);
			this.active_count--;
		}
	}
	,enter: function(_state,_enter_with) {
		_state.onenter(_enter_with);
		this.active_states.push(_state);
		this.active_count++;
		_state.active = true;
	}
	,leave: function(_state,_leave_with) {
		_state.active = false;
		HxOverrides.remove(this.active_states,_state);
		this.active_count--;
		_state.onleave(_leave_with);
	}
	,set: function(name,_enter_with,_leave_with) {
		var _this = this._states;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			haxe_Log.trace("   i / states / " + ("cannot find state named " + name + ", is it added to this state machine?"),{ fileName : "States.hx", lineNumber : 318, className : "luxe.States", methodName : "set"});
			return false;
		}
		this.unset(_leave_with);
		var _this1 = this._states;
		this.current_state = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
		this.enter(this.current_state,_enter_with);
		return true;
	}
	,unset: function(_leave_with) {
		if(this.current_state != null) {
			this.leave(this.current_state,_leave_with);
			this.current_state = null;
		}
	}
	,destroy: function() {
		if(this._state_count > 0) {
			var _this = this._states;
			var state = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(state.hasNext()) state.next().destroy();
		}
		Luxe.core.emitter.off(2,$bind(this,this.init));
		Luxe.core.emitter.off(8,$bind(this,this.ondestroy));
		Luxe.core.emitter.off(6,$bind(this,this.update));
		Luxe.core.emitter.off(9,$bind(this,this.prerender));
		Luxe.core.emitter.off(11,$bind(this,this.postrender));
		Luxe.core.emitter.off(10,$bind(this,this.render));
		Luxe.core.emitter.off(12,$bind(this,this.keydown));
		Luxe.core.emitter.off(13,$bind(this,this.keyup));
		Luxe.core.emitter.off(14,$bind(this,this.textinput));
		Luxe.core.emitter.off(16,$bind(this,this.inputup));
		Luxe.core.emitter.off(15,$bind(this,this.inputdown));
		Luxe.core.emitter.off(18,$bind(this,this.mouseup));
		Luxe.core.emitter.off(17,$bind(this,this.mousedown));
		Luxe.core.emitter.off(19,$bind(this,this.mousemove));
		Luxe.core.emitter.off(20,$bind(this,this.mousewheel));
		Luxe.core.emitter.off(22,$bind(this,this.touchup));
		Luxe.core.emitter.off(21,$bind(this,this.touchdown));
		Luxe.core.emitter.off(23,$bind(this,this.touchmove));
		Luxe.core.emitter.off(26,$bind(this,this.gamepadup));
		Luxe.core.emitter.off(25,$bind(this,this.gamepaddown));
		Luxe.core.emitter.off(24,$bind(this,this.gamepadaxis));
		Luxe.core.emitter.off(27,$bind(this,this.gamepaddevice));
		Luxe.core.emitter.off(29,$bind(this,this.windowmoved));
		Luxe.core.emitter.off(30,$bind(this,this.windowresized));
		Luxe.core.emitter.off(31,$bind(this,this.windowsized));
		Luxe.core.emitter.off(32,$bind(this,this.windowminimized));
		Luxe.core.emitter.off(33,$bind(this,this.windowrestored));
		this.emit(8);
	}
	,init: function(_) {
		if(this._state_count > 0) {
			var _this = this._states;
			var state = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(state.hasNext()) {
				var state1 = state.next();
				if(!state1.inited) {
					state1.inited = true;
					state1.init();
				}
			}
		}
	}
	,update: function(dt) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) {
				var state = _g1[_g];
				++_g;
				state.update(dt);
			}
		}
	}
	,ondestroy: function(_) {
		this.destroy();
	}
	,render: function(_) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,prerender: function(_) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,postrender: function(_) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,keydown: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,keyup: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) {
				var state = _g1[_g];
				++_g;
				state.onkeyup(_event);
			}
		}
	}
	,textinput: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,inputup: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,inputdown: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,mousedown: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) {
				var state = _g1[_g];
				++_g;
				state.onmousedown(_event);
			}
		}
	}
	,mousewheel: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,mouseup: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,mousemove: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,touchdown: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) {
				var state = _g1[_g];
				++_g;
				state.ontouchdown(_event);
			}
		}
	}
	,touchup: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,touchmove: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,gamepadaxis: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,gamepadup: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,gamepaddown: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,gamepaddevice: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,windowmoved: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,windowresized: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,windowsized: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,windowminimized: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,windowrestored: function(_event) {
		if(this.active_count > 0) {
			var _g = 0;
			var _g1 = this.active_states;
			while(_g < _g1.length) ++_g;
		}
	}
	,__class__: luxe_States
});
var luxe_Text = function(_options) {
	this.text_options = _options;
	this.text_bounds = new phoenix_Rectangle();
	var _batcher = null;
	if(_options.no_batcher_add == null || _options.no_batcher_add == false) {
		if(_options.batcher != null) {
			_batcher = _options.batcher;
		} else {
			_batcher = Luxe.renderer.batcher;
		}
	}
	this.geom = new phoenix_geometry_TextGeometry({ batcher : _batcher, depth : _options.depth, visible : _options.visible, immediate : _options.immediate, color : _options.color, shader : _options.shader, texture : _options.texture, text : _options.text, font : _options.font, point_size : _options.point_size, line_spacing : _options.line_spacing, letter_spacing : _options.letter_spacing, bounds : _options.bounds, bounds_wrap : _options.bounds_wrap, align : _options.align, align_vertical : _options.align_vertical, sdf : _options.sdf, smoothness : _options.smoothness, thickness : _options.thickness, outline : _options.outline, outline_color : _options.outline_color, glow_threshold : _options.glow_threshold, glow_amount : _options.glow_amount, glow_color : _options.glow_color});
	this.geom.emitter.on(1,$bind(this,this.on_geom_text_update));
	_options.geometry = this.geom;
	_options.shader = this.geom.state.shader;
	luxe_Visual.call(this,_options);
	var _x = this.get_pos().x;
	var _y = this.get_pos().y;
	var _tw = this.geom.text_width;
	var _th = this.geom.text_height;
	var _bh = this.geom.text_height;
	if(this.get_bounds() != null) {
		_bh = this.get_bounds().h;
		_x = this.get_bounds().x;
		_y = this.get_bounds().y;
		var _x1;
		switch(this.get_align()) {
		case 1:
			_x1 = _tw;
			break;
		case 2:
			_x1 = _tw / 2;
			break;
		default:
			_x1 = 0.0;
		}
		_x += _x1;
		var _y1;
		switch(this.get_align_vertical()) {
		case 2:
			_y1 = _bh / 2 - _th / 2;
			break;
		case 4:
			_y1 = _bh - _th;
			break;
		default:
			_y1 = 0.0;
		}
		_y += _y1;
	} else {
		var _x2;
		switch(this.get_align()) {
		case 1:
			_x2 = _tw;
			break;
		case 2:
			_x2 = _tw / 2;
			break;
		default:
			_x2 = 0.0;
		}
		_x -= _x2;
		var _y2;
		switch(this.get_align_vertical()) {
		case 2:
			_y2 = _th / 2;
			break;
		case 4:
			_y2 = _th;
			break;
		default:
			_y2 = 0.0;
		}
		_y -= _y2;
	}
	this.text_bounds.set(_x,_y,_tw,_th);
};
$hxClasses["luxe.Text"] = luxe_Text;
luxe_Text.__name__ = ["luxe","Text"];
luxe_Text.__super__ = luxe_Visual;
luxe_Text.prototype = $extend(luxe_Visual.prototype,{
	set_text: function(_s) {
		return this.geom.set_text(_s);
	}
	,get_bounds: function() {
		return this.geom.bounds;
	}
	,set_bounds: function(_b) {
		return this.geom.set_bounds(_b);
	}
	,get_align: function() {
		return this.geom.align;
	}
	,get_align_vertical: function() {
		return this.geom.align_vertical;
	}
	,set_pos_from_transform: function(_p) {
		luxe_Visual.prototype.set_pos_from_transform.call(this,_p);
		var _x = this.get_pos().x;
		var _y = this.get_pos().y;
		var _tw = this.geom.text_width;
		var _th = this.geom.text_height;
		var _bh = this.geom.text_height;
		if(this.get_bounds() != null) {
			_bh = this.get_bounds().h;
			_x = this.get_bounds().x;
			_y = this.get_bounds().y;
			var _x1;
			switch(this.get_align()) {
			case 1:
				_x1 = _tw;
				break;
			case 2:
				_x1 = _tw / 2;
				break;
			default:
				_x1 = 0.0;
			}
			_x += _x1;
			var _y1;
			switch(this.get_align_vertical()) {
			case 2:
				_y1 = _bh / 2 - _th / 2;
				break;
			case 4:
				_y1 = _bh - _th;
				break;
			default:
				_y1 = 0.0;
			}
			_y += _y1;
		} else {
			var _x2;
			switch(this.get_align()) {
			case 1:
				_x2 = _tw;
				break;
			case 2:
				_x2 = _tw / 2;
				break;
			default:
				_x2 = 0.0;
			}
			_x -= _x2;
			var _y2;
			switch(this.get_align_vertical()) {
			case 2:
				_y2 = _th / 2;
				break;
			case 4:
				_y2 = _th;
				break;
			default:
				_y2 = 0.0;
			}
			_y -= _y2;
		}
		this.text_bounds.set(_x,_y,_tw,_th);
		this.text_options.pos = this.get_pos();
	}
	,on_geom_text_update: function(_) {
		var _x = this.get_pos().x;
		var _y = this.get_pos().y;
		var _tw = this.geom.text_width;
		var _th = this.geom.text_height;
		var _bh = this.geom.text_height;
		if(this.get_bounds() != null) {
			_bh = this.get_bounds().h;
			_x = this.get_bounds().x;
			_y = this.get_bounds().y;
			var _x1;
			switch(this.get_align()) {
			case 1:
				_x1 = _tw;
				break;
			case 2:
				_x1 = _tw / 2;
				break;
			default:
				_x1 = 0.0;
			}
			_x += _x1;
			var _y1;
			switch(this.get_align_vertical()) {
			case 2:
				_y1 = _bh / 2 - _th / 2;
				break;
			case 4:
				_y1 = _bh - _th;
				break;
			default:
				_y1 = 0.0;
			}
			_y += _y1;
		} else {
			var _x2;
			switch(this.get_align()) {
			case 1:
				_x2 = _tw;
				break;
			case 2:
				_x2 = _tw / 2;
				break;
			default:
				_x2 = 0.0;
			}
			_x -= _x2;
			var _y2;
			switch(this.get_align_vertical()) {
			case 2:
				_y2 = _th / 2;
				break;
			case 4:
				_y2 = _th;
				break;
			default:
				_y2 = 0.0;
			}
			_y -= _y2;
		}
		this.text_bounds.set(_x,_y,_tw,_th);
	}
	,ondestroy: function() {
		this.geom = null;
		this.text_options = null;
		this.text_bounds = null;
		luxe_Visual.prototype.ondestroy.call(this);
	}
	,init: function() {
		luxe_Visual.prototype.init.call(this);
	}
	,__class__: luxe_Text
	,__properties__: $extend(luxe_Visual.prototype.__properties__,{get_align_vertical:"get_align_vertical",get_align:"get_align",set_bounds:"set_bounds",get_bounds:"get_bounds",set_text:"set_text"})
});
var luxe_Timer = function(_core) {
	this.core = _core;
	this.timers = [];
};
$hxClasses["luxe.Timer"] = luxe_Timer;
luxe_Timer.__name__ = ["luxe","Timer"];
luxe_Timer.prototype = {
	destroy: function() {
		this.reset();
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.timers;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.stop();
			t = null;
		}
		this.timers = null;
		this.timers = [];
	}
	,schedule: function(_time_in_seconds,_on_time,repeat) {
		if(repeat == null) {
			repeat = false;
		}
		var _gthis = this;
		var t = new snow_api_Timer(_time_in_seconds);
		t.run = function() {
			if(!repeat) {
				t.stop();
				HxOverrides.remove(_gthis.timers,t);
			}
			_on_time();
		};
		this.timers.push(t);
		return t;
	}
	,__class__: luxe_Timer
};
var luxe_components_Components = function(_entity) {
	this.components = new luxe_structural_OrderedMap_$String_$luxe_$Component(new haxe_ds_StringMap());
	this.entity = _entity;
};
$hxClasses["luxe.components.Components"] = luxe_components_Components;
luxe_components_Components.__name__ = ["luxe","components","Components"];
luxe_components_Components.prototype = {
	destroy: function() {
		this.components.map = null;
		this.components = null;
		this.entity = null;
	}
	,add: function(_component) {
		if(_component == null) {
			haxe_Log.trace("attempt to add null component to " + this.entity.get_name(),{ fileName : "Components.hx", lineNumber : 36, className : "luxe.components.Components", methodName : "add"});
			return _component;
		}
		_component.set_entity(this.entity);
		var _this = this.components;
		var key = _component.name;
		if(!_this.map.exists(key)) {
			_this._keys.push(key);
		}
		_this.map.set(key,_component);
		_component.onadded();
		if(this.entity.inited) {
			_component.init();
		}
		return _component;
	}
	,__class__: luxe_components_Components
};
var luxe_debug_DebugView = function(_debug) {
	this.visible = false;
	luxe_Objects.call(this);
	this.debug = _debug;
};
$hxClasses["luxe.debug.DebugView"] = luxe_debug_DebugView;
luxe_debug_DebugView.__name__ = ["luxe","debug","DebugView"];
luxe_debug_DebugView.__super__ = luxe_Objects;
luxe_debug_DebugView.prototype = $extend(luxe_Objects.prototype,{
	refresh: function() {
	}
	,process: function() {
	}
	,onmousewheel: function(e) {
	}
	,onkeydown: function(e) {
	}
	,onwindowsized: function(e) {
	}
	,create: function() {
	}
	,show: function() {
		this.visible = true;
	}
	,hide: function() {
		this.visible = false;
	}
	,__class__: luxe_debug_DebugView
});
var luxe_debug_Inspector = function(_options) {
	this.set_size(new phoenix_Vector(Luxe.core.screen.get_w() * 0.2 | 0,Luxe.core.screen.get_h() * 0.6 | 0));
	this.set_pos(new phoenix_Vector(Luxe.core.screen.get_w() / 2 - this.size.x / 2,Luxe.core.screen.get_h() / 2 - this.size.y / 2));
	this.batcher = Luxe.renderer.batcher;
	if(_options != null) {
		if(_options.batcher != null) {
			this.batcher = _options.batcher;
		}
		if(_options.size != null) {
			this.set_size(_options.size);
		}
		if(_options.pos != null) {
			this.set_pos(_options.pos);
		}
	}
};
$hxClasses["luxe.debug.Inspector"] = luxe_debug_Inspector;
luxe_debug_Inspector.__name__ = ["luxe","debug","Inspector"];
luxe_debug_Inspector.prototype = {
	refresh: function() {
		if(this.window == null) {
			this.create_window();
		}
		if(this.onrefresh != null) {
			this.onrefresh();
		}
	}
	,show: function() {
		this.refresh();
		this.window.set_visible(true);
		this.title.set_visible(true);
		this.version.set_visible(true);
	}
	,hide: function() {
		this.window.set_visible(false);
		this.title.set_visible(false);
		this.version.set_visible(false);
	}
	,set_size: function(_size) {
		if(_size != null && this.window != null) {
			this.window.set_size(_size);
			this.window.geometry.set_dirty(true);
		}
		if(this.version != null) {
			this.version.set_pos(new phoenix_Vector(this.pos.x + (_size.x - 14),this.pos.y + 6));
		}
		return this.size = _size;
	}
	,set_pos: function(_pos) {
		if(_pos != null && this.window != null) {
			this.window.set_pos(_pos);
			this.window.geometry.set_dirty(true);
		}
		if(this.title != null) {
			this.title.set_pos(new phoenix_Vector(_pos.x + 14,_pos.y + 6));
		}
		if(this.version != null) {
			this.version.set_pos(new phoenix_Vector(_pos.x + (this.size.x - 14),_pos.y + 6));
		}
		return this.pos = _pos;
	}
	,create_window: function() {
		this.window = new luxe_Sprite({ name : "debug.window", batcher : this.batcher, no_scene : true, depth : 999.1, visible : false, color : new phoenix_Color().rgb(1447449), centered : false, size : this.size, pos : this.pos});
		this.title = new luxe_Text({ name : "debug.title", batcher : this.batcher, no_scene : true, depth : 999.2, visible : false, color : new phoenix_Color().rgb(16121979), pos : new phoenix_Vector(this.pos.x + 14,this.pos.y + 6), text : "Inspector", point_size : 15, align : 0});
		var tmp = this.batcher;
		var tmp1 = new phoenix_Color().rgb(5526617);
		var tmp2 = new phoenix_Vector(this.pos.x + (this.size.x - 14),this.pos.y + 6);
		var _this = Luxe.core;
		this.version = new luxe_Text({ name : "debug.version", batcher : tmp, no_scene : true, depth : 999.2, visible : false, color : tmp1, pos : tmp2, text : "" + ("" + _this.build + " / debug:" + Std.string(_this.app.debug) + " / os:" + _this.app.os + " / platform:" + _this.app.platform), point_size : 13, align : 1});
		this.window.set_locked(true);
		this.window.geometry.id = "debug.Inspector";
		this.title.geometry.id = "debug.title.text";
		this.version.geometry.id = "debug.version.text";
	}
	,__class__: luxe_debug_Inspector
	,__properties__: {set_size:"set_size",set_pos:"set_pos"}
};
var phoenix_Color = function(_r,_g,_b,_a) {
	if(_a == null) {
		_a = 1.0;
	}
	if(_b == null) {
		_b = 1.0;
	}
	if(_g == null) {
		_g = 1.0;
	}
	if(_r == null) {
		_r = 1.0;
	}
	this.refreshing = false;
	this.is_hsv = false;
	this.is_hsl = false;
	this.a = 1.0;
	this.b = 1.0;
	this.g = 1.0;
	this.r = 1.0;
	this.set_r(_r);
	this.set_g(_g);
	this.set_b(_b);
	this.a = _a;
};
$hxClasses["phoenix.Color"] = phoenix_Color;
phoenix_Color.__name__ = ["phoenix","Color"];
phoenix_Color.random = function(_include_alpha) {
	if(_include_alpha == null) {
		_include_alpha = false;
	}
	return new phoenix_Color(Math.random(),Math.random(),Math.random(),_include_alpha ? Math.random() : 1.0);
};
phoenix_Color.prototype = {
	set_r: function(_r) {
		this.r = _r;
		if(!this.refreshing) {
			if(this.is_hsl) {
				this.fromColor(this);
			} else if(this.is_hsv) {
				this.fromColor(this);
			}
		}
		return this.r;
	}
	,set_g: function(_g) {
		this.g = _g;
		if(!this.refreshing) {
			if(this.is_hsl) {
				this.fromColor(this);
			} else if(this.is_hsv) {
				this.fromColor(this);
			}
		}
		return this.g;
	}
	,set_b: function(_b) {
		this.b = _b;
		if(!this.refreshing) {
			if(this.is_hsl) {
				this.fromColor(this);
			} else if(this.is_hsv) {
				this.fromColor(this);
			}
		}
		return this.b;
	}
	,maxRGB: function() {
		return Math.max(this.r,Math.max(this.g,this.b));
	}
	,minRGB: function() {
		return Math.min(this.r,Math.min(this.g,this.b));
	}
	,tween: function(_time_in_seconds,_properties_to_tween,_override) {
		if(_override == null) {
			_override = true;
		}
		if(_time_in_seconds == null) {
			_time_in_seconds = 0.5;
		}
		if(_properties_to_tween != null) {
			var _dest_r = this.r;
			var _dest_g = this.g;
			var _dest_b = this.b;
			var _dest_a = this.a;
			var _change_r = false;
			var _change_g = false;
			var _change_b = false;
			var _change_a = false;
			if(js_Boot.__instanceof(_properties_to_tween,phoenix_Color)) {
				_dest_r = _properties_to_tween.r;
				_dest_g = _properties_to_tween.g;
				_dest_b = _properties_to_tween.b;
				_dest_a = _properties_to_tween.a;
				_change_r = true;
				_change_g = true;
				_change_b = true;
				_change_a = true;
			} else {
				if(_properties_to_tween.r != null) {
					_dest_r = _properties_to_tween.r;
					_change_r = true;
				}
				if(_properties_to_tween.g != null) {
					_dest_g = _properties_to_tween.g;
					_change_g = true;
				}
				if(_properties_to_tween.b != null) {
					_dest_b = _properties_to_tween.b;
					_change_b = true;
				}
				if(_properties_to_tween.a != null) {
					_dest_a = _properties_to_tween.a;
					_change_a = true;
				}
			}
			var _properties = { };
			if(_change_r) {
				_properties.r = _dest_r;
			}
			if(_change_g) {
				_properties.g = _dest_g;
			}
			if(_change_b) {
				_properties.b = _dest_b;
			}
			if(_change_a) {
				_properties.a = _dest_a;
			}
			return luxe_tween_Actuate.tween(this,_time_in_seconds,_properties,_override);
		} else {
			throw new js__$Boot_HaxeError(" Warning: Color.tween passed a null destination ");
		}
	}
	,rgb: function(_rgb) {
		if(_rgb == null) {
			_rgb = 16777215;
		}
		this.from_int(_rgb);
		return this;
	}
	,fromColorHSV: function(_color_hsv) {
		var d = _color_hsv.h % 360 / 60;
		if(d < 0) {
			d += 6;
		}
		var hf = Math.floor(d);
		var f = d - hf;
		var v = _color_hsv.v;
		var p = _color_hsv.v * (1 - _color_hsv.s);
		var q = _color_hsv.v * (1 - f * _color_hsv.s);
		var t = _color_hsv.v * (1 - (1 - f) * _color_hsv.s);
		switch(hf % 6) {
		case 0:
			this.set_r(v);
			this.set_g(t);
			this.set_b(p);
			break;
		case 1:
			this.set_r(q);
			this.set_g(v);
			this.set_b(p);
			break;
		case 2:
			this.set_r(p);
			this.set_g(v);
			this.set_b(t);
			break;
		case 3:
			this.set_r(p);
			this.set_g(q);
			this.set_b(v);
			break;
		case 4:
			this.set_r(t);
			this.set_g(p);
			this.set_b(v);
			break;
		case 5:
			this.set_r(v);
			this.set_g(p);
			this.set_b(q);
			break;
		}
		this.a = _color_hsv.a;
	}
	,fromColorHSL: function(_color_hsl) {
		var q = 1;
		if(_color_hsl.l < 0.5) {
			q = _color_hsl.l * (1 + _color_hsl.s);
		} else {
			q = _color_hsl.l + _color_hsl.s - _color_hsl.l * _color_hsl.s;
		}
		var p = 2 * _color_hsl.l - q;
		var hk = _color_hsl.h % 360 / 360;
		var tc = [hk + 0.33333333333333331,hk,hk - 0.33333333333333331];
		var _g1 = 0;
		var _g = tc.length;
		while(_g1 < _g) {
			var n = _g1++;
			var t = tc[n];
			if(t < 0) {
				++t;
			}
			if(t > 1) {
				--t;
			}
			tc[n] = t < 0.16666666666666666 ? p + (q - p) * 6 * t : t < 0.5 ? q : t < 0.66666666666666663 ? p + (q - p) * 6 * (0.66666666666666663 - t) : p;
		}
		this.set_r(tc[0]);
		this.set_g(tc[1]);
		this.set_b(tc[2]);
		this.a = _color_hsl.a;
		return this;
	}
	,from_int: function(_i) {
		this.set_r((_i >> 16) / 255);
		this.set_g((_i >> 8 & 255) / 255);
		this.set_b((_i & 255) / 255);
	}
	,__class__: phoenix_Color
	,__properties__: {set_b:"set_b",set_g:"set_g",set_r:"set_r"}
};
var luxe_debug_ProfilerDebugView = function(_debug) {
	this._setup = false;
	luxe_debug_DebugView.call(this,_debug);
	this.set_name("Profiler");
	luxe_debug_ProfilerDebugView.lists = new haxe_ds_StringMap();
};
$hxClasses["luxe.debug.ProfilerDebugView"] = luxe_debug_ProfilerDebugView;
luxe_debug_ProfilerDebugView.__name__ = ["luxe","debug","ProfilerDebugView"];
luxe_debug_ProfilerDebugView.start = function(_id,_max) {
	var _this = luxe_debug_ProfilerDebugView.lists;
	var _item = __map_reserved[_id] != null ? _this.getReserved(_id) : _this.h[_id];
	if(_item == null) {
		_item = new luxe_debug__$ProfilerDebugView_ProfilerValue(_id,new luxe_debug__$ProfilerDebugView_ProfilerBar(_id,_max,new phoenix_Color().rgb(16121979)));
		_item.bar.set_pos(new phoenix_Vector(Luxe.debug.padding.x * 2,Luxe.debug.padding.y * 3 + Lambda.count(luxe_debug_ProfilerDebugView.lists) * 20));
		var _this1 = luxe_debug_ProfilerDebugView.lists;
		if(__map_reserved[_id] != null) {
			_this1.setReserved(_id,_item);
		} else {
			_this1.h[_id] = _item;
		}
	}
	_item.start = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
};
luxe_debug_ProfilerDebugView.end = function(_id) {
	var _this = luxe_debug_ProfilerDebugView.lists;
	var _item = __map_reserved[_id] != null ? _this.getReserved(_id) : _this.h[_id];
	if(_item != null) {
		_item.set();
	} else {
		throw new js__$Boot_HaxeError("Debug / profile end called for " + _id + " but no start called");
	}
};
luxe_debug_ProfilerDebugView.__super__ = luxe_debug_DebugView;
luxe_debug_ProfilerDebugView.prototype = $extend(luxe_debug_DebugView.prototype,{
	create: function() {
	}
	,process: function() {
	}
	,show: function() {
		var _this = luxe_debug_ProfilerDebugView.lists;
		var _item = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(_item.hasNext()) {
			var _item1 = _item.next();
			if(!_item1.hidden) {
				_item1.bar.show();
			}
		}
		if(!this._setup) {
			this._setup = true;
		}
	}
	,hide: function() {
		var _this = luxe_debug_ProfilerDebugView.lists;
		var _item = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(_item.hasNext()) _item.next().bar.hide();
	}
	,__class__: luxe_debug_ProfilerDebugView
});
var luxe_debug__$ProfilerDebugView_ProfilerValue = function(_name,_bar) {
	this.accum = 0;
	this.count = 0;
	this.hidden = false;
	this.avg = 10;
	this.start = 0.0;
	this.name = _name;
	this.bar = _bar;
	this.history = [];
	this.offsets = [];
};
$hxClasses["luxe.debug._ProfilerDebugView.ProfilerValue"] = luxe_debug__$ProfilerDebugView_ProfilerValue;
luxe_debug__$ProfilerDebugView_ProfilerValue.__name__ = ["luxe","debug","_ProfilerDebugView","ProfilerValue"];
luxe_debug__$ProfilerDebugView_ProfilerValue.prototype = {
	set: function() {
		var _t = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start - this.start;
		var _g = 0;
		var _g1 = this.offsets;
		while(_g < _g1.length) {
			var _offset = _g1[_g];
			++_g;
			_t -= _offset.history[_offset.history.length - 1];
		}
		this.history.push(_t);
		if(this.history.length > this.avg) {
			this.history.shift();
		}
		this.count++;
		if(this.count == this.avg) {
			this.bar.set_value(this.accum / this.avg);
			this.accum = 0;
			this.count = 0;
		}
		this.accum += _t;
		if(this.bar.visible) {
			var n = Math.pow(10,4);
			this.bar.set_text(Std.string((_t * 1000 * n | 0) / n));
		}
	}
	,__class__: luxe_debug__$ProfilerDebugView_ProfilerValue
};
var luxe_debug__$ProfilerDebugView_ProfilerGraph = function(_name,_bg) {
	if(_bg == null) {
		_bg = true;
	}
	this.visible = false;
	this.history = 33;
	this.height2 = 8;
	this.height = 8;
	this.width = 128;
	this.bg = true;
	this.bg = _bg;
	this.name = _name;
	this.color = new phoenix_Color();
	var n = Math.pow(10,2);
	this.set_max((16.666666666666668 * n | 0) / n);
};
$hxClasses["luxe.debug._ProfilerDebugView.ProfilerGraph"] = luxe_debug__$ProfilerDebugView_ProfilerGraph;
luxe_debug__$ProfilerDebugView_ProfilerGraph.__name__ = ["luxe","debug","_ProfilerDebugView","ProfilerGraph"];
luxe_debug__$ProfilerDebugView_ProfilerGraph.prototype = {
	create: function() {
		this.segment = this.width / this.history;
		this.height2 = this.height * 2;
		if(this.bg) {
			this.graphbg_geometry = Luxe.draw.box({ color : new phoenix_Color().rgb(1052688), depth : 999.3, batcher : Luxe.debug.batcher, x : 0, y : 0, w : this.width - this.segment, h : this.height2});
		}
		this.graph_geometry = new phoenix_geometry_Geometry({ color : this.color, depth : 999.33, batcher : Luxe.debug.batcher});
		var _g1 = 0;
		var _g = this.history;
		while(_g1 < _g) {
			var _b = new phoenix_geometry_Vertex(new phoenix_Vector(this.segment * _g1++,this.height2),this.color);
			this.graph_geometry.add(_b);
		}
		this.graph_geometry.set_primitive_type(3);
		this.hide();
	}
	,set_max: function(_v) {
		var oldmax = this.max;
		this.max = _v;
		if(this.graph_geometry != null) {
			var _g = 0;
			var _g1 = this.graph_geometry.vertices;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v != null) {
					var vp = 1.0 - v.pos.y / this.height2;
					vp = vp * oldmax / this.max;
					var _this = v.pos;
					var _y = this.height2 * (1.0 - vp);
					_this.y = _y;
					if(!_this._construct) {
						if(_this.listen_y != null && !_this.ignore_listeners) {
							_this.listen_y(_y);
						}
					}
				}
			}
		}
		return this.max;
	}
	,set_ping: function(_v) {
		var n = Math.pow(10,4);
		var _p = (_v * n | 0) / n / this.max;
		var _g1 = 0;
		var _g = this.history;
		while(_g1 < _g) {
			var i = _g1++;
			var v = this.graph_geometry.vertices[i];
			if(i < this.history - 1) {
				var v1 = this.graph_geometry.vertices[i + 1];
				if(v1 != null) {
					var _this = v.pos;
					var _y = Math.floor(v1.pos.y);
					_this.y = _y;
					if(!_this._construct) {
						if(_this.listen_y != null && !_this.ignore_listeners) {
							_this.listen_y(_y);
						}
					}
					v.color = v1.color;
				}
			}
		}
		if(_p < 0.001) {
			_p = 0.001;
		} else if(_p > 1) {
			_p = 1;
		} else {
			_p = _p;
		}
		if(_p > 1) {
			this.graph_geometry.vertices[this.history - 1].color = luxe_debug_ProfilerDebugView.color_red;
		} else if(_p < 0.2) {
			this.graph_geometry.vertices[this.history - 1].color = luxe_debug_ProfilerDebugView.color_green;
		} else {
			this.graph_geometry.vertices[this.history - 1].color = this.color;
		}
		var _this1 = this.graph_geometry.vertices[this.history - 1].pos;
		var _y1 = Math.floor(this.height2 * (1.0 - _p));
		_this1.y = _y1;
		if(!_this1._construct) {
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(_y1);
			}
		}
		return this.ping = _v;
	}
	,hide: function() {
		this.visible = false;
		this.graph_geometry.set_visible(false);
		if(this.graphbg_geometry != null) {
			this.graphbg_geometry.set_visible(false);
		}
	}
	,show: function() {
		this.visible = true;
		this.graph_geometry.set_visible(true);
		if(this.graphbg_geometry != null) {
			this.graphbg_geometry.set_visible(true);
		}
	}
	,set_pos: function(_p) {
		if(this.graphbg_geometry != null) {
			var _this = this.graphbg_geometry.transform.local.pos;
			var _x = _p.x;
			var _y = _p.y;
			var _z = _p.z;
			var _w = _p.w;
			var prev = _this.ignore_listeners;
			_this.ignore_listeners = true;
			_this.x = _x;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x);
				}
			}
			_this.y = _y;
			if(!_this._construct) {
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(_y);
				}
			}
			_this.z = _z;
			if(!_this._construct) {
				if(_this.listen_z != null && !_this.ignore_listeners) {
					_this.listen_z(_z);
				}
			}
			_this.w = _w;
			_this.ignore_listeners = prev;
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_this.x);
			}
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_this.y);
			}
			if(_this.listen_z != null && !_this.ignore_listeners) {
				_this.listen_z(_this.z);
			}
		}
		var _this1 = this.graph_geometry.transform.local.pos;
		var _x1 = _p.x;
		var _y1 = _p.y;
		var _z1 = _p.z;
		var _w1 = _p.w;
		var prev1 = _this1.ignore_listeners;
		_this1.ignore_listeners = true;
		_this1.x = _x1;
		if(!_this1._construct) {
			if(_this1.listen_x != null && !_this1.ignore_listeners) {
				_this1.listen_x(_x1);
			}
		}
		_this1.y = _y1;
		if(!_this1._construct) {
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(_y1);
			}
		}
		_this1.z = _z1;
		if(!_this1._construct) {
			if(_this1.listen_z != null && !_this1.ignore_listeners) {
				_this1.listen_z(_z1);
			}
		}
		_this1.w = _w1;
		_this1.ignore_listeners = prev1;
		if(_this1.listen_x != null && !_this1.ignore_listeners) {
			_this1.listen_x(_this1.x);
		}
		if(_this1.listen_y != null && !_this1.ignore_listeners) {
			_this1.listen_y(_this1.y);
		}
		if(_this1.listen_z != null && !_this1.ignore_listeners) {
			_this1.listen_z(_this1.z);
		}
		return this.pos = _p;
	}
	,__class__: luxe_debug__$ProfilerDebugView_ProfilerGraph
	,__properties__: {set_pos:"set_pos",set_ping:"set_ping",set_max:"set_max"}
};
var luxe_debug__$ProfilerDebugView_ProfilerBar = function(_name,_max,_color) {
	this.max = 16.7;
	this.height = 8;
	this.visible = false;
	this.name = _name;
	this.graph = new luxe_debug__$ProfilerDebugView_ProfilerGraph(_name);
	this.graph.create();
	if(_max != null) {
		this.graph.set_max(_max);
	}
	this.text_item = new luxe_Text({ no_scene : true, name : "profiler.text." + _name, pos : new phoenix_Vector(0,0), color : _color, point_size : this.height * 1.8, depth : 999.3, text : "", batcher : Luxe.debug.batcher});
	this.bg_geometry = Luxe.draw.box({ color : new phoenix_Color().rgb(592137), depth : 999.3, batcher : Luxe.debug.batcher, x : 0, y : 0, w : this.graph.width, h : this.graph.height});
	this.bar_geometry = Luxe.draw.box({ color : _color, depth : 999.33, batcher : Luxe.debug.batcher, x : 1, y : 1, w : this.graph.width - 2, h : this.graph.height - 2});
	this.hide();
};
$hxClasses["luxe.debug._ProfilerDebugView.ProfilerBar"] = luxe_debug__$ProfilerDebugView_ProfilerBar;
luxe_debug__$ProfilerDebugView_ProfilerBar.__name__ = ["luxe","debug","_ProfilerDebugView","ProfilerBar"];
luxe_debug__$ProfilerDebugView_ProfilerBar.prototype = {
	hide: function() {
		this.visible = false;
		this.bar_geometry.set_visible(false);
		this.bg_geometry.set_visible(false);
		this.text_item.set_visible(false);
		this.graph.hide();
	}
	,show: function() {
		this.visible = true;
		this.bar_geometry.set_visible(true);
		this.bg_geometry.set_visible(true);
		this.text_item.set_visible(true);
		this.graph.show();
	}
	,set_value: function(_v) {
		this.graph.set_ping(_v * 1000);
		if(!this.visible) {
			return this.value = _v;
		}
		var n = Math.pow(10,4);
		var _p = (_v * 1000 * n | 0) / n / this.max;
		if(_p < 0.005) {
			_p = 0.005;
		} else if(_p > 1) {
			_p = 1;
		} else {
			_p = _p;
		}
		if(_p > 1) {
			this.bar_geometry.set_color(luxe_debug_ProfilerDebugView.color_red);
		} else if(_p < 0.15) {
			this.bar_geometry.set_color(luxe_debug_ProfilerDebugView.color_green);
		} else {
			this.bar_geometry.set_color(luxe_debug_ProfilerDebugView.color_normal);
		}
		this.bar_geometry.resize_xy((this.graph.width - 2) * _p,this.graph.height - 2);
		return this.value = _v;
	}
	,set_pos: function(_p) {
		var _this = this.bg_geometry.transform.local;
		_this.pos = _p;
		if(_p != null) {
			var _v = _this.pos;
			var listener = $bind(_this,_this._pos_change);
			_v.listen_x = listener;
			_v.listen_y = listener;
			_v.listen_z = listener;
			if(_this.pos_changed != null && !_this.ignore_listeners) {
				_this.pos_changed(_this.pos);
			}
		}
		var _this1 = this.bar_geometry.transform.local.pos;
		var _x = _p.x + 1;
		var _y = _p.y + 1;
		var prev = _this1.ignore_listeners;
		_this1.ignore_listeners = true;
		_this1.x = _x;
		if(!_this1._construct) {
			if(_this1.listen_x != null && !_this1.ignore_listeners) {
				_this1.listen_x(_x);
			}
		}
		_this1.y = _y;
		if(!_this1._construct) {
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(_y);
			}
		}
		_this1.ignore_listeners = prev;
		if(_this1.listen_x != null && !_this1.ignore_listeners) {
			_this1.listen_x(_this1.x);
		}
		if(_this1.listen_y != null && !_this1.ignore_listeners) {
			_this1.listen_y(_this1.y);
		}
		var _this2 = this.text_item.get_pos();
		var _x1 = _p.x + this.graph.width * 2 + 10;
		var _y1 = _p.y - 6;
		var prev1 = _this2.ignore_listeners;
		_this2.ignore_listeners = true;
		_this2.x = _x1;
		if(!_this2._construct) {
			if(_this2.listen_x != null && !_this2.ignore_listeners) {
				_this2.listen_x(_x1);
			}
		}
		_this2.y = _y1;
		if(!_this2._construct) {
			if(_this2.listen_y != null && !_this2.ignore_listeners) {
				_this2.listen_y(_y1);
			}
		}
		_this2.ignore_listeners = prev1;
		if(_this2.listen_x != null && !_this2.ignore_listeners) {
			_this2.listen_x(_this2.x);
		}
		if(_this2.listen_y != null && !_this2.ignore_listeners) {
			_this2.listen_y(_this2.y);
		}
		var tmp = this.graph;
		var _this3 = new phoenix_Vector(_p.x,_p.y,_p.z,_p.w);
		var _x2 = _this3.x + (this.graph.width + 2);
		var _y2 = _this3.y + (-this.graph.height + 4);
		var _z = _this3.z;
		var prev2 = _this3.ignore_listeners;
		_this3.ignore_listeners = true;
		_this3.x = _x2;
		if(!_this3._construct) {
			if(_this3.listen_x != null && !_this3.ignore_listeners) {
				_this3.listen_x(_x2);
			}
		}
		_this3.y = _y2;
		if(!_this3._construct) {
			if(_this3.listen_y != null && !_this3.ignore_listeners) {
				_this3.listen_y(_y2);
			}
		}
		_this3.z = _z;
		if(!_this3._construct) {
			if(_this3.listen_z != null && !_this3.ignore_listeners) {
				_this3.listen_z(_z);
			}
		}
		_this3.ignore_listeners = prev2;
		if(_this3.listen_x != null && !_this3.ignore_listeners) {
			_this3.listen_x(_this3.x);
		}
		if(_this3.listen_y != null && !_this3.ignore_listeners) {
			_this3.listen_y(_this3.y);
		}
		if(_this3.listen_z != null && !_this3.ignore_listeners) {
			_this3.listen_z(_this3.z);
		}
		tmp.set_pos(_this3);
		return this.pos = _p;
	}
	,set_text: function(_t) {
		this.text_item.set_text("" + this.name + " (" + this.graph.max + "ms) | " + _t + "ms");
		return this.text = _t;
	}
	,__class__: luxe_debug__$ProfilerDebugView_ProfilerBar
	,__properties__: {set_value:"set_value",set_pos:"set_pos",set_text:"set_text"}
};
var luxe_debug_SceneDebugView = function(_debug) {
	this.hide_ids = true;
	this.font_size = 15.0;
	this.margin = 32;
	luxe_debug_DebugView.call(this,_debug);
	this.set_name("Scenes");
	this.scenes = [];
};
$hxClasses["luxe.debug.SceneDebugView"] = luxe_debug_SceneDebugView;
luxe_debug_SceneDebugView.__name__ = ["luxe","debug","SceneDebugView"];
luxe_debug_SceneDebugView.__super__ = luxe_debug_DebugView;
luxe_debug_SceneDebugView.prototype = $extend(luxe_debug_DebugView.prototype,{
	create: function() {
		var debug = Luxe.debug;
		var tmp = new phoenix_Color(0,0,0,1).rgb(16121979);
		var tmp1 = new phoenix_Vector(0,0);
		var tmp2 = Luxe.renderer.font;
		var _result = "";
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var _scene = _g1[_g];
			++_g;
			_result += this.hide_ids ? "" : "" + _scene.get_id() + " ";
			_result += "" + _scene.get_name() + " ";
			_result += "( " + _scene.get_length() + " )\n";
			var _entity = _scene.entities.iterator();
			while(_entity.hasNext()) {
				var _entity1 = _entity.next();
				var _list = _result;
				var _active = _entity1.get_active() ? "" : "/ inactive";
				var res = "";
				var _g11 = 0;
				while(_g11 < 1) {
					++_g11;
					res += "    ";
				}
				var _id = this.hide_ids ? "" : _entity1.get_id();
				var _comp = "• " + Lambda.count(_entity1._components.components);
				_list += "" + res + _id + " " + _entity1.get_name() + " " + ("> " + _entity1.children.length) + " " + _comp + " " + _active + "\n";
				var _name = HxOverrides.iter(_entity1._components.components._keys);
				while(_name.hasNext()) {
					var _name1 = _name.next();
					var comp = _entity1._components.components.map.get(_name1);
					var _comp_id = this.hide_ids ? "" : " " + comp.id;
					var res1 = "";
					var _g12 = 0;
					while(_g12 < 2) {
						++_g12;
						res1 += "    ";
					}
					_list += res1 + ("•" + _comp_id + " " + comp.name + "\n");
				}
				var _g2 = 0;
				var _g13 = _entity1.children;
				while(_g2 < _g13.length) {
					var _child = _g13[_g2];
					++_g2;
					_list = this.list_entity(_list,_child,3);
				}
				_result = _list;
			}
		}
		this.items_list = new luxe_Text({ name : "debug.scene.list", depth : 999.3, no_scene : true, color : tmp, pos : tmp1, font : tmp2, text : _result, point_size : this.font_size, batcher : debug.batcher, visible : false});
		this.items_list.geometry.id = "debug.scene.list.geometry";
		this.resize();
	}
	,add_scene: function(_scene) {
		if(this.scenes.indexOf(_scene) != -1) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("scenes.indexOf(_scene) == -1"));
		}
		this.scenes.push(_scene);
	}
	,remove_scene: function(_scene) {
		if(this.scenes.indexOf(_scene) == -1) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("scenes.indexOf(_scene) != -1"));
		}
		var _result = HxOverrides.remove(this.scenes,_scene);
		this.refresh();
		return _result;
	}
	,onkeydown: function(e) {
		if(e.keycode == 50 && this.visible) {
			this.toggle_ids();
		}
	}
	,toggle_ids: function() {
		this.hide_ids = !this.hide_ids;
		this.refresh();
	}
	,list_entity: function(_list,e,_depth) {
		if(_depth == null) {
			_depth = 1;
		}
		var _active = e.get_active() ? "" : "/ inactive";
		var _pre;
		if(_depth == 1) {
			var res = "";
			var _g1 = 0;
			while(_g1 < _depth) {
				++_g1;
				res += "    ";
			}
			_pre = res;
		} else {
			var res1 = "";
			var _g11 = 0;
			while(_g11 < _depth) {
				++_g11;
				res1 += "    ";
			}
			_pre = res1 + "> ";
		}
		var _id = this.hide_ids ? "" : e.get_id();
		var _comp = "• " + Lambda.count(e._components.components);
		_list += "" + _pre + _id + " " + e.get_name() + " " + ("> " + e.children.length) + " " + _comp + " " + _active + "\n";
		var _name = HxOverrides.iter(e._components.components._keys);
		while(_name.hasNext()) {
			var _name1 = _name.next();
			var comp = e._components.components.map.get(_name1);
			var _comp_id = this.hide_ids ? "" : " " + comp.id;
			var res2 = "";
			var _g12 = 0;
			var _g = _depth + 1;
			while(_g12 < _g) {
				++_g12;
				res2 += "    ";
			}
			_list += res2 + ("•" + _comp_id + " " + comp.name + "\n");
		}
		var _g2 = 0;
		var _g13 = e.children;
		while(_g2 < _g13.length) {
			var _child = _g13[_g2];
			++_g2;
			_list = this.list_entity(_list,_child,_depth + 2);
		}
		return _list;
	}
	,refresh: function() {
		var tmp = this.items_list;
		var _result = "";
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var _scene = _g1[_g];
			++_g;
			_result += this.hide_ids ? "" : "" + _scene.get_id() + " ";
			_result += "" + _scene.get_name() + " ";
			_result += "( " + _scene.get_length() + " )\n";
			var _entity = _scene.entities.iterator();
			while(_entity.hasNext()) {
				var _entity1 = _entity.next();
				var _list = _result;
				var _active = _entity1.get_active() ? "" : "/ inactive";
				var res = "";
				var _g11 = 0;
				while(_g11 < 1) {
					++_g11;
					res += "    ";
				}
				var _id = this.hide_ids ? "" : _entity1.get_id();
				var _comp = "• " + Lambda.count(_entity1._components.components);
				_list += "" + res + _id + " " + _entity1.get_name() + " " + ("> " + _entity1.children.length) + " " + _comp + " " + _active + "\n";
				var _name = HxOverrides.iter(_entity1._components.components._keys);
				while(_name.hasNext()) {
					var _name1 = _name.next();
					var comp = _entity1._components.components.map.get(_name1);
					var _comp_id = this.hide_ids ? "" : " " + comp.id;
					var res1 = "";
					var _g12 = 0;
					while(_g12 < 2) {
						++_g12;
						res1 += "    ";
					}
					_list += res1 + ("•" + _comp_id + " " + comp.name + "\n");
				}
				var _g2 = 0;
				var _g13 = _entity1.children;
				while(_g2 < _g13.length) {
					var _child = _g13[_g2];
					++_g2;
					_list = this.list_entity(_list,_child,3);
				}
				_result = _list;
			}
		}
		tmp.set_text(_result);
	}
	,process: function() {
		if(!this.visible) {
			return;
		}
		var _has_changed = false;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var _scene = _g1[_g];
			++_g;
			if(_scene._has_changed) {
				_has_changed = true;
				_scene._has_changed = false;
			}
		}
		if(_has_changed) {
			this.refresh();
		}
	}
	,onmousewheel: function(e) {
		var diff = this.items_list.text_bounds.h - (Luxe.debug.inspector.size.y - this.margin);
		var new_y = this.items_list.get_pos().y;
		var max_y = Luxe.debug.padding.y + this.margin * 1.5;
		var min_y = max_y;
		if(diff > 0) {
			min_y = max_y - (diff + this.margin * 2);
		}
		new_y -= this.margin / 2 * e.y;
		if(new_y < min_y) {
			new_y = min_y;
		} else if(new_y > max_y) {
			new_y = max_y;
		} else {
			new_y = new_y;
		}
		var _this = this.items_list.get_pos();
		_this.y = new_y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(new_y);
			}
		}
	}
	,show: function() {
		luxe_debug_DebugView.prototype.show.call(this);
		this.refresh();
		this.items_list.set_visible(true);
	}
	,hide: function() {
		luxe_debug_DebugView.prototype.hide.call(this);
		this.items_list.set_visible(false);
	}
	,resize: function() {
		var debug = Luxe.debug;
		var viewrect = new phoenix_Rectangle(debug.inspector.pos.x + this.margin / 2,debug.inspector.pos.y + this.margin * 1.5,debug.inspector.size.x - this.margin,debug.inspector.size.y - this.margin - this.margin * 1.5);
		if(this.items_list != null) {
			this.items_list.set_pos(new phoenix_Vector(debug.padding.x + this.margin,debug.padding.y + this.margin * 1.5));
			this.items_list.set_clip_rect(viewrect);
		}
	}
	,onwindowsized: function(e) {
		this.resize();
	}
	,__class__: luxe_debug_SceneDebugView
});
var luxe_debug_StatsDebugView = function(_debug) {
	this.margin = 32;
	this.font_size = 15;
	luxe_debug_DebugView.call(this,_debug);
	this.set_name("Statistics");
	this._last_render_stats = { batchers : 0, geometry_count : 0, dynamic_batched_count : 0, static_batched_count : 0, visible_count : 0, draw_calls : 0, vert_count : 0};
	this._render_stats = { batchers : 0, geometry_count : 0, dynamic_batched_count : 0, static_batched_count : 0, visible_count : 0, draw_calls : 0, vert_count : 0};
};
$hxClasses["luxe.debug.StatsDebugView"] = luxe_debug_StatsDebugView;
luxe_debug_StatsDebugView.__name__ = ["luxe","debug","StatsDebugView"];
luxe_debug_StatsDebugView.__super__ = luxe_debug_DebugView;
luxe_debug_StatsDebugView.prototype = $extend(luxe_debug_DebugView.prototype,{
	get_render_stats_string: function() {
		var _bs = "";
		var _g = 0;
		var _g1 = phoenix_Batcher.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.show_stats != 0) {
				var _s = "  " + b.name + " (enabled " + (b.enabled == null ? "null" : "" + b.enabled) + ", layer " + b.layer + ")\n";
				_s += "    shader: " + (b.shader == null ? "none" : b.shader.id) + "\n";
				_s += "    max verts/batch: " + b.max_verts + "\n";
				_s += "    visible geom: " + b.visible_count + "\n";
				_s += "    verts: " + b.vert_count + "\n";
				_s += "    draw calls: " + b.draw_calls + "\n";
				_s += "    batched: " + b.dynamic_batched_count + "\n";
				_bs += _s += "    static: " + b.static_batched_count + "\n";
			}
		}
		return "Renderer Statistics\n\n" + "total geometry : " + this._render_stats.geometry_count + "\n" + "visible geometry : " + this._render_stats.visible_count + "\n" + "dynamic batch count : " + this._render_stats.dynamic_batched_count + "\n" + "static batch count : " + this._render_stats.static_batched_count + "\n" + "total draw calls : " + this._render_stats.draw_calls + "\n" + "total vert count : " + this._render_stats.vert_count + "\n" + "batchers : " + this._render_stats.batchers + "\n" + _bs;
	}
	,create: function() {
		var _gthis = this;
		var debug = Luxe.debug;
		this.render_stats_text = new luxe_Text({ name : "debug.render.stats", depth : 999.3, no_scene : true, color : new phoenix_Color(0,0,0,1).rgb(16121979), pos : new phoenix_Vector(0,0), font : Luxe.renderer.font, text : this.get_render_stats_string(), point_size : this.font_size, batcher : debug.batcher, visible : false});
		this.resource_list_text = new luxe_Text({ name : "debug.resource.stats", depth : 999.3, no_scene : true, color : new phoenix_Color(0,0,0,1).rgb(16121979), pos : new phoenix_Vector(0,0), font : Luxe.renderer.font, text : "", align : 1, point_size : this.font_size * 0.9, batcher : debug.batcher, visible : false});
		this.render_stats_text.geometry.id = "debug.render.stats.geometry";
		this.render_stats_text.geometry.id = "debug.resource.stats.geometry";
		this.resize();
		Luxe.resources.on(1,function(_) {
			if(_gthis.visible) {
				_gthis.refresh();
			}
		});
	}
	,resize: function() {
		if(this.resource_list_text == null || this.render_stats_text == null) {
			return;
		}
		var debug = Luxe.debug;
		var viewrect = new phoenix_Rectangle(debug.inspector.pos.x + this.margin / 2,debug.inspector.pos.y + this.margin * 1.5,debug.inspector.size.x - this.margin,debug.inspector.size.y - this.margin - this.margin * 1.5);
		var left = debug.padding.x + this.margin;
		var top = debug.padding.y + this.margin * 1.5;
		if(this.resource_list_text != null) {
			this.resource_list_text.set_pos(new phoenix_Vector(debug.padding.x + debug.inspector.size.x - this.margin,top));
			this.resource_list_text.set_clip_rect(viewrect);
		}
		if(this.render_stats_text != null) {
			this.render_stats_text.set_pos(new phoenix_Vector(left,top));
			this.render_stats_text.set_clip_rect(viewrect);
		}
		this.reset_tween();
	}
	,onwindowsized: function(e) {
		this.resize();
	}
	,refresh: function() {
		var bytes_lists = "";
		var text_lists = "";
		var json_lists = "";
		var texture_lists = "";
		var rtt_lists = "";
		var font_lists = "";
		var shader_lists = "";
		var audio_lists = "";
		var _total_txt = 0;
		var _total_tex = 0;
		var _total_rtt = 0;
		var _total_snd = 0;
		var _total_all = 0;
		var _snd = function(res) {
			var _s = "";
			if(res.source != null) {
				_s = "" + (res.source.data.is_stream ? "STREAM •" : "");
				_s += " " + res.id + " • " + res.ref + "\t\n";
				if(res.source.data != null && !res.source.data.is_stream) {
					_s += "~" + Luxe.utils.bytes_to_string(res.source.data.length);
					_total_snd += res.source.data.length;
				}
				if(res.source.data != null) {
					_s += " " + res.source.data.channels + "ch";
					var n = Math.pow(10,1);
					_s += " " + (res.source.data.rate / 1000 * n | 0) / n + "khz";
					var this1 = res.source.data.format;
					var _s1;
					if(this1 == null) {
						_s1 = "" + this1;
					} else {
						switch(this1) {
						case 0:
							_s1 = "af_unknown";
							break;
						case 1:
							_s1 = "af_custom";
							break;
						case 2:
							_s1 = "af_ogg";
							break;
						case 3:
							_s1 = "af_wav";
							break;
						case 4:
							_s1 = "af_pcm";
							break;
						default:
							_s1 = "" + this1;
						}
					}
					_s += " " + _s1;
					var value = res.source.duration();
					var n1 = Math.pow(10,4);
					_s += " " + (value * n1 | 0) / n1 + "s";
				}
				_s += "\t\t\n\n";
			} else {
				_s = "" + ("" + res.id + " • " + res.ref + "\t\n");
			}
			return _s;
		};
		var _this = Luxe.resources.cache;
		var res1 = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(res1.hasNext()) {
			var res2 = res1.next();
			switch(res2.resource_type) {
			case 1:
				var res3 = res2;
				var _l = res3.asset != null && res3.asset.text != null ? res3.asset.text.length : 0;
				_total_txt += _l;
				text_lists += "(~" + Luxe.utils.bytes_to_string(_l) + ") " + res3.id + " • " + res3.ref + "\t\n";
				break;
			case 2:
				json_lists += "" + res2.id + " • " + res2.ref + "\t\n";
				break;
			case 3:
				bytes_lists += "" + res2.id + " • " + res2.ref + "\t\n";
				break;
			case 4:
				var tex = res2;
				if(tex.resource_type == 5) {
					_total_rtt += tex.memory_use();
				} else {
					_total_tex += tex.memory_use();
				}
				texture_lists += "(" + tex.width_actual + "x" + tex.height_actual + " ~" + Luxe.utils.bytes_to_string(tex.memory_use()) + ")    " + tex.id + " • " + tex.ref + "\t\n";
				break;
			case 5:
				var tex1 = res2;
				if(tex1.resource_type == 5) {
					_total_rtt += tex1.memory_use();
				} else {
					_total_tex += tex1.memory_use();
				}
				rtt_lists += "(" + tex1.width_actual + "x" + tex1.height_actual + " ~" + Luxe.utils.bytes_to_string(tex1.memory_use()) + ")    " + tex1.id + " • " + tex1.ref + "\t\n";
				break;
			case 6:
				font_lists += "" + res2.id + " • " + res2.ref + "\t\n";
				break;
			case 7:
				var res4 = res2;
				shader_lists += "(" + res4.vert_id + ", " + res4.frag_id + ")    " + res4.id + " • " + res4.ref + "\t\n";
				break;
			case 8:
				audio_lists += _snd(res2);
				break;
			default:
			}
		}
		_total_all = _total_txt;
		_total_all += _total_tex;
		_total_all += _total_rtt;
		_total_all += _total_snd;
		var lists = "Resource list (" + Luxe.resources.stats.total + " • ~" + Luxe.utils.bytes_to_string(_total_all) + ")\n\n";
		lists += "Bytes (" + Luxe.resources.stats.bytes + ")\n";
		lists += bytes_lists == "" ? "-\t\n" : bytes_lists;
		lists += "\nText (" + Luxe.resources.stats.texts + " • ~" + Luxe.utils.bytes_to_string(_total_txt) + ")\n";
		lists += text_lists == "" ? "-\t\n" : text_lists;
		lists += "\nJSON (" + Luxe.resources.stats.jsons + ")\n";
		lists += json_lists == "" ? "-\t\n" : json_lists;
		lists += "\nTexture (" + Luxe.resources.stats.textures + " • ~" + Luxe.utils.bytes_to_string(_total_tex) + ")\n";
		lists += texture_lists == "" ? "-\t\n" : texture_lists;
		lists += "\nRenderTexture (" + Luxe.resources.stats.rtt + " • ~" + Luxe.utils.bytes_to_string(_total_rtt) + ")\n";
		lists += rtt_lists == "" ? "-\t\n" : rtt_lists;
		lists += "\nFont (" + Luxe.resources.stats.fonts + ")\n";
		lists += font_lists == "" ? "-\t\n" : font_lists;
		lists += "\nShader (" + Luxe.resources.stats.shaders + ")\n";
		lists += shader_lists == "" ? "-\t\n" : shader_lists;
		lists += "\nAudio (" + Luxe.resources.stats.audios + " • ~" + Luxe.utils.bytes_to_string(_total_snd) + ")\n";
		lists += audio_lists == "" ? "-\t\n" : audio_lists;
		this.resource_list_text.set_text(lists);
		if(this.resource_list_text.geometry != null) {
			this.resource_list_text.geometry.set_dirty(true);
		}
		this.reset_tween();
	}
	,process: function() {
		if(!this.visible) {
			return;
		}
		var dirty = false;
		this.update_render_stats();
		if(this._last_render_stats.batchers != this._render_stats.batchers) {
			dirty = true;
			this._last_render_stats.batchers = this._render_stats.batchers;
		}
		if(this._last_render_stats.geometry_count != this._render_stats.geometry_count) {
			dirty = true;
			this._last_render_stats.geometry_count = this._render_stats.geometry_count;
		}
		if(this._last_render_stats.dynamic_batched_count != this._render_stats.dynamic_batched_count) {
			dirty = true;
			this._last_render_stats.dynamic_batched_count = this._render_stats.dynamic_batched_count;
		}
		if(this._last_render_stats.static_batched_count != this._render_stats.static_batched_count) {
			dirty = true;
			this._last_render_stats.static_batched_count = this._render_stats.static_batched_count;
		}
		if(this._last_render_stats.visible_count != this._render_stats.visible_count) {
			dirty = true;
			this._last_render_stats.visible_count = this._render_stats.visible_count;
		}
		if(this._last_render_stats.draw_calls != this._render_stats.draw_calls) {
			dirty = true;
			this._last_render_stats.draw_calls = this._render_stats.draw_calls;
		}
		if(this._last_render_stats.vert_count != this._render_stats.vert_count) {
			dirty = true;
			this._last_render_stats.vert_count = this._render_stats.vert_count;
		}
		if(dirty) {
			this.refresh_render_stats();
		}
	}
	,onmousewheel: function(e) {
		luxe_tween_Actuate.stop(this.resource_list_text.get_pos());
		luxe_tween_Actuate.stop(this.render_stats_text.get_pos());
		var vh = Luxe.debug.inspector.size.y - this.margin;
		var max_y = Luxe.debug.padding.y + this.margin * 1.5;
		var min_y = max_y;
		if(e.pos.x / Luxe.core.screen.get_w() > 0.5) {
			var diff = this.resource_list_text.text_bounds.h - vh;
			var new_y = this.resource_list_text.get_pos().y;
			if(diff > 0) {
				min_y = max_y - (diff + this.margin * 2);
			}
			new_y -= this.margin / 2 * e.y;
			if(new_y < min_y) {
				new_y = min_y;
			} else if(new_y > max_y) {
				new_y = max_y;
			} else {
				new_y = new_y;
			}
			var _this = this.resource_list_text.get_pos();
			_this.y = new_y;
			if(!_this._construct) {
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(new_y);
				}
			}
			this.resource_list_text.geometry.set_dirty(true);
		} else {
			var diff1 = this.render_stats_text.text_bounds.h - vh;
			var new_y1 = this.render_stats_text.get_pos().y;
			if(diff1 > 0) {
				min_y = max_y - (diff1 + this.margin * 2);
			}
			new_y1 -= this.margin / 2 * e.y;
			if(new_y1 < min_y) {
				new_y1 = min_y;
			} else if(new_y1 > max_y) {
				new_y1 = max_y;
			} else {
				new_y1 = new_y1;
			}
			var _this1 = this.render_stats_text.get_pos();
			_this1.y = new_y1;
			if(!_this1._construct) {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(new_y1);
				}
			}
			this.render_stats_text.geometry.set_dirty(true);
		}
	}
	,onkeydown: function(e) {
		if(e.keycode == 50 && this.visible) {
			if(this.debug.batcher.show_stats == 0) {
				this.debug.batcher.set_show_stats(1);
			} else {
				this.debug.batcher.set_show_stats(0);
			}
		}
	}
	,show: function() {
		luxe_debug_DebugView.prototype.show.call(this);
		this.refresh();
		this.render_stats_text.set_visible(true);
		this.resource_list_text.set_visible(true);
	}
	,hide: function() {
		luxe_debug_DebugView.prototype.hide.call(this);
		this.render_stats_text.set_visible(false);
		this.resource_list_text.set_visible(false);
		luxe_tween_Actuate.stop(this.resource_list_text.get_pos());
		luxe_tween_Actuate.stop(this.render_stats_text.get_pos());
	}
	,reset_tween: function() {
		var _gthis = this;
		luxe_tween_Actuate.stop(this.resource_list_text.get_pos());
		luxe_tween_Actuate.stop(this.render_stats_text.get_pos());
		var vh = Luxe.debug.inspector.size.y - this.margin;
		var start_y = Luxe.debug.padding.y + this.margin * 1.5;
		var h = this.resource_list_text.text_bounds.h;
		var diff = h - vh;
		var _this = this.resource_list_text.get_pos();
		_this.y = start_y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(start_y);
			}
		}
		if(diff > 0) {
			var end_y = start_y - (diff + this.margin * 2);
			luxe_tween_Actuate.tween(this.resource_list_text.get_pos(),8,{ y : end_y}).repeat().delay(4).reflect().ease(luxe_tween_easing_Linear.get_easeNone()).onUpdate(function() {
				_gthis.resource_list_text.geometry.set_dirty(true);
			});
		}
		h = this.render_stats_text.text_bounds.h;
		diff = h - vh;
		var _this1 = this.render_stats_text.get_pos();
		_this1.y = start_y;
		if(!_this1._construct) {
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(start_y);
			}
		}
		if(diff > 0) {
			var end_y1 = start_y - (diff + this.margin * 2);
			luxe_tween_Actuate.tween(this.render_stats_text.get_pos(),8,{ y : end_y1}).repeat().delay(4).reflect().ease(luxe_tween_easing_Linear.get_easeNone()).onUpdate(function() {
				_gthis.render_stats_text.geometry.set_dirty(true);
			});
		}
	}
	,refresh_render_stats: function() {
		if(!this.visible) {
			return;
		}
		this.render_stats_text.set_text(this.get_render_stats_string());
		this.render_stats_text.set_locked(true);
		if(this.render_stats_text.geometry != null) {
			this.render_stats_text.geometry.set_dirty(true);
		}
	}
	,update_render_stats: function() {
		this._render_stats.batchers = Luxe.renderer.stats.batchers;
		this._render_stats.geometry_count = Luxe.renderer.stats.geometry_count;
		this._render_stats.visible_count = Luxe.renderer.stats.visible_count;
		this._render_stats.dynamic_batched_count = Luxe.renderer.stats.dynamic_batched_count;
		this._render_stats.static_batched_count = Luxe.renderer.stats.static_batched_count;
		this._render_stats.draw_calls = Luxe.renderer.stats.draw_calls;
		this._render_stats.vert_count = Luxe.renderer.stats.vert_count;
	}
	,__class__: luxe_debug_StatsDebugView
});
var luxe_debug_TraceDebugView = function(_debug) {
	this._last_logged_length = 0;
	this.max_lines = 35;
	luxe_debug_DebugView.call(this,_debug);
	this.set_name("Log");
	luxe_Debug.trace_callbacks.push($bind(this,this.on_trace));
	this.logged = [];
	var _this = this.debug.app;
	this.add_line("luxe version " + ("" + _this.build + " / debug:" + Std.string(_this.app.debug) + " / os:" + _this.app.os + " / platform:" + _this.app.platform));
};
$hxClasses["luxe.debug.TraceDebugView"] = luxe_debug_TraceDebugView;
luxe_debug_TraceDebugView.__name__ = ["luxe","debug","TraceDebugView"];
luxe_debug_TraceDebugView.__super__ = luxe_debug_DebugView;
luxe_debug_TraceDebugView.prototype = $extend(luxe_debug_DebugView.prototype,{
	on_trace: function(v,inf) {
		this.add_line(inf.fileName + ":" + inf.lineNumber + " " + Std.string(v));
	}
	,create: function() {
		var text_bounds = new phoenix_Rectangle(this.debug.padding.x + 20,this.debug.padding.y + 40,Luxe.core.screen.get_w() - this.debug.padding.x * 2 - 20,Luxe.core.screen.get_h() - this.debug.padding.y * 2 - 40);
		this.lines = new luxe_Text({ name : "debug.log.text", no_scene : true, depth : 999.3, color : new phoenix_Color().rgb(8947848), bounds : text_bounds, bounds_wrap : true, font : Luxe.renderer.font, text : "", align_vertical : 4, point_size : 12, batcher : this.debug.batcher, visible : false});
		if(this.lines.geometry != null) {
			this.lines.geometry.set_clip_rect(text_bounds);
			this.lines.geometry.set_locked(true);
			this.lines.geometry.id = "debug.log.text.geometry";
		}
	}
	,onwindowsized: function(e) {
		var debug = Luxe.debug;
		var text_bounds = new phoenix_Rectangle(debug.padding.x + 20,debug.padding.y + 40,Luxe.core.screen.get_w() - debug.padding.x * 2 - 20,Luxe.core.screen.get_h() - debug.padding.y * 2 - 40);
		this.lines.set_bounds(text_bounds);
		this.lines.set_clip_rect(text_bounds);
		if(this.lines.geometry != null) {
			this.lines.geometry.set_locked(true);
			this.lines.geometry.set_dirty(true);
		}
	}
	,add_line: function(_t) {
		if(this.logged == null) {
			return;
		}
		this.logged.push(_t);
		if(!this.visible) {
			return;
		}
		this.refresh_lines();
	}
	,refresh_lines: function() {
		if(this._last_logged_length == this.logged.length) {
			return;
		}
		var _final = "";
		if(this.logged.length <= this.max_lines) {
			var _g = 0;
			var _g1 = this.logged;
			while(_g < _g1.length) {
				var _line = _g1[_g];
				++_g;
				_final += _line + "\n";
			}
		} else {
			var _g11 = this.logged.length - this.max_lines;
			var _g2 = this.logged.length;
			while(_g11 < _g2) _final += this.logged[_g11++] + "\n";
		}
		this.lines.set_text(_final);
		if(this.lines.geometry != null) {
			this.lines.geometry.set_locked(true);
			this.lines.geometry.set_dirty(true);
		}
		this._last_logged_length = this.logged.length;
	}
	,refresh: function() {
	}
	,process: function() {
	}
	,show: function() {
		luxe_debug_DebugView.prototype.show.call(this);
		this.refresh_lines();
		this.lines.set_visible(true);
	}
	,hide: function() {
		luxe_debug_DebugView.prototype.hide.call(this);
		this.lines.set_visible(false);
	}
	,__class__: luxe_debug_TraceDebugView
});
var luxe_importers_bitmapfont_BitmapFontParser = function() { };
$hxClasses["luxe.importers.bitmapfont.BitmapFontParser"] = luxe_importers_bitmapfont_BitmapFontParser;
luxe_importers_bitmapfont_BitmapFontParser.__name__ = ["luxe","importers","bitmapfont","BitmapFontParser"];
luxe_importers_bitmapfont_BitmapFontParser.parse = function(_font_data) {
	if(_font_data.length == 0) {
		throw new js__$Boot_HaxeError("BitmapFont:Parser: _font_data is 0 length");
	}
	var _info = { face : null, chars : new haxe_ds_IntMap(), point_size : 0, base_size : 0, char_count : 0, line_height : 0, pages : [], kernings : new haxe_ds_IntMap()};
	var _lines = _font_data.split("\n");
	if(_lines.length == 0) {
		throw new js__$Boot_HaxeError("BitmapFont; invalid font data specified for parser.");
	}
	if(HxOverrides.substr(StringTools.ltrim(_lines[0]),0,4) != "info") {
		throw new js__$Boot_HaxeError("BitmapFont; invalid font data specified for parser. Format should be plain ascii text .fnt file only currently.");
	}
	var _g = 0;
	while(_g < _lines.length) {
		var _line = _lines[_g];
		++_g;
		var _tokens = _line.split(" ");
		var _g1 = 0;
		while(_g1 < _tokens.length) {
			var _current = _tokens[_g1];
			++_g1;
			luxe_importers_bitmapfont_BitmapFontParser.parse_token(_current,_tokens,_info);
		}
		_tokens = null;
	}
	return _info;
};
luxe_importers_bitmapfont_BitmapFontParser.parse_token = function(_token,_tokens,_info) {
	_tokens.shift();
	var _items = luxe_importers_bitmapfont_BitmapFontParser.tokenize_line(_tokens);
	switch(_token) {
	case "char":
		var _char = { id : Std.parseInt(__map_reserved["id"] != null ? _items.getReserved("id") : _items.h["id"]), x : parseFloat(__map_reserved["x"] != null ? _items.getReserved("x") : _items.h["x"]), y : parseFloat(__map_reserved["y"] != null ? _items.getReserved("y") : _items.h["y"]), width : parseFloat(__map_reserved["width"] != null ? _items.getReserved("width") : _items.h["width"]), height : parseFloat(__map_reserved["height"] != null ? _items.getReserved("height") : _items.h["height"]), xoffset : parseFloat(__map_reserved["xoffset"] != null ? _items.getReserved("xoffset") : _items.h["xoffset"]), yoffset : parseFloat(__map_reserved["yoffset"] != null ? _items.getReserved("yoffset") : _items.h["yoffset"]), xadvance : parseFloat(__map_reserved["xadvance"] != null ? _items.getReserved("xadvance") : _items.h["xadvance"]), page : Std.parseInt(__map_reserved["page"] != null ? _items.getReserved("page") : _items.h["page"])};
		_info.chars.set(_char.id,_char);
		break;
	case "chars":
		_info.char_count = Std.parseInt(__map_reserved["count"] != null ? _items.getReserved("count") : _items.h["count"]);
		break;
	case "common":
		_info.line_height = parseFloat(__map_reserved["lineHeight"] != null ? _items.getReserved("lineHeight") : _items.h["lineHeight"]);
		_info.base_size = parseFloat(__map_reserved["base"] != null ? _items.getReserved("base") : _items.h["base"]);
		break;
	case "info":
		var _s = __map_reserved["face"] != null ? _items.getReserved("face") : _items.h["face"];
		if(_s.indexOf("\"") != -1) {
			_s = StringTools.replace(_s,"\"","");
		}
		_info.face = _s;
		_info.point_size = parseFloat(__map_reserved["size"] != null ? _items.getReserved("size") : _items.h["size"]);
		break;
	case "kerning":
		var _first = Std.parseInt(__map_reserved["first"] != null ? _items.getReserved("first") : _items.h["first"]);
		var _second = Std.parseInt(__map_reserved["second"] != null ? _items.getReserved("second") : _items.h["second"]);
		var _amount = parseFloat(__map_reserved["amount"] != null ? _items.getReserved("amount") : _items.h["amount"]);
		var _map = _info.kernings.get(_first);
		if(_map == null) {
			_map = new haxe_ds_IntMap();
			_info.kernings.set(_first,_map);
		}
		_map.h[_second] = _amount;
		break;
	case "page":
		var _info1 = _info.pages;
		var tmp = Std.parseInt(__map_reserved["id"] != null ? _items.getReserved("id") : _items.h["id"]);
		var _s1 = __map_reserved["file"] != null ? _items.getReserved("file") : _items.h["file"];
		if(_s1.indexOf("\"") != -1) {
			_s1 = StringTools.replace(_s1,"\"","");
		}
		_info1.push({ id : tmp, file : StringTools.trim(_s1)});
		break;
	default:
	}
	_items = null;
};
luxe_importers_bitmapfont_BitmapFontParser.tokenize_line = function(_tokens) {
	var _item_map = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < _tokens.length) {
		var _token = _tokens[_g];
		++_g;
		var _items = _token.split("=");
		var key = _items[0];
		var value = _items[1];
		if(__map_reserved[key] != null) {
			_item_map.setReserved(key,value);
		} else {
			_item_map.h[key] = value;
		}
		_items = null;
	}
	return _item_map;
};
var phoenix_Vector = function(_x,_y,_z,_w) {
	if(_w == null) {
		_w = 0;
	}
	if(_z == null) {
		_z = 0;
	}
	if(_y == null) {
		_y = 0;
	}
	if(_x == null) {
		_x = 0;
	}
	this._construct = false;
	this.ignore_listeners = false;
	this.w = 0;
	this.z = 0;
	this.y = 0;
	this.x = 0;
	this._construct = true;
	this.x = _x;
	if(!this._construct) {
		if(this.listen_x != null && !this.ignore_listeners) {
			this.listen_x(_x);
		}
	}
	this.y = _y;
	if(!this._construct) {
		if(this.listen_y != null && !this.ignore_listeners) {
			this.listen_y(_y);
		}
	}
	this.z = _z;
	if(!this._construct) {
		if(this.listen_z != null && !this.ignore_listeners) {
			this.listen_z(_z);
		}
	}
	this.w = _w;
	this._construct = false;
};
$hxClasses["phoenix.Vector"] = phoenix_Vector;
phoenix_Vector.__name__ = ["phoenix","Vector"];
phoenix_Vector.prototype = {
	__class__: phoenix_Vector
};
var luxe_physics_nape_DebugDraw = function() {
	this.visible = true;
};
$hxClasses["luxe.physics.nape.DebugDraw"] = luxe_physics_nape_DebugDraw;
luxe_physics_nape_DebugDraw.__name__ = ["luxe","physics","nape","DebugDraw"];
luxe_physics_nape_DebugDraw.prototype = {
	update: function() {
		if(!this.visible) {
			return;
		}
		var cache;
		var body = this.geometry.keys();
		while(body.hasNext()) {
			var body1 = body.next();
			cache = this.geometry.h[body1.__id__];
			var _this = cache.geometry.transform.local.pos;
			if(body1.zpp_inner.wrap_pos == null) {
				body1.zpp_inner.setupPosition();
			}
			var _this1 = body1.zpp_inner.wrap_pos;
			var _this2 = _this1.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			var _x = _this1.zpp_inner.x;
			_this.x = _x;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x);
				}
			}
			var _this3 = cache.geometry.transform.local.pos;
			if(body1.zpp_inner.wrap_pos == null) {
				body1.zpp_inner.setupPosition();
			}
			var _this4 = body1.zpp_inner.wrap_pos;
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			var _y = _this4.zpp_inner.y;
			_this3.y = _y;
			if(!_this3._construct) {
				if(_this3.listen_y != null && !_this3.ignore_listeners) {
					_this3.listen_y(_y);
				}
			}
			var _this6 = luxe_physics_nape_DebugDraw.cache_euler;
			var _z = body1.zpp_inner.rot;
			var prev = _this6.ignore_listeners;
			_this6.ignore_listeners = true;
			_this6.x = 0;
			if(!_this6._construct) {
				if(_this6.listen_x != null && !_this6.ignore_listeners) {
					_this6.listen_x(0);
				}
			}
			_this6.y = 0;
			if(!_this6._construct) {
				if(_this6.listen_y != null && !_this6.ignore_listeners) {
					_this6.listen_y(0);
				}
			}
			_this6.z = _z;
			if(!_this6._construct) {
				if(_this6.listen_z != null && !_this6.ignore_listeners) {
					_this6.listen_z(_z);
				}
			}
			_this6.ignore_listeners = prev;
			if(_this6.listen_x != null && !_this6.ignore_listeners) {
				_this6.listen_x(_this6.x);
			}
			if(_this6.listen_y != null && !_this6.ignore_listeners) {
				_this6.listen_y(_this6.y);
			}
			if(_this6.listen_z != null && !_this6.ignore_listeners) {
				_this6.listen_z(_this6.z);
			}
			cache.geometry.transform.local.rotation.setFromEuler(luxe_physics_nape_DebugDraw.cache_euler);
			if(body1.zpp_inner.component.sleeping) {
				cache.geometry.set_color(cache.inactive_color);
			} else {
				cache.geometry.set_color(cache.active_color);
			}
		}
	}
	,set_visible: function(state) {
		if(this.visible == state) {
			return this.visible;
		}
		var cache = this.geometry.iterator();
		while(cache.hasNext()) cache.next().geometry.set_visible(state);
		return this.visible = state;
	}
	,__class__: luxe_physics_nape_DebugDraw
	,__properties__: {set_visible:"set_visible"}
};
var luxe_physics_nape_PhysicsNape = function() {
	this.position_iterations = 18;
	this.velocity_iterations = 18;
};
$hxClasses["luxe.physics.nape.PhysicsNape"] = luxe_physics_nape_PhysicsNape;
luxe_physics_nape_PhysicsNape.__name__ = ["luxe","physics","nape","PhysicsNape"];
luxe_physics_nape_PhysicsNape.__super__ = luxe_PhysicsEngine;
luxe_physics_nape_PhysicsNape.prototype = $extend(luxe_PhysicsEngine.prototype,{
	init: function() {
		this.space = new nape_space_Space();
		this.set_gravity(new phoenix_Vector(0,980));
	}
	,update: function() {
		if(!this.get_paused()) {
			this.space.step(Luxe.physics.step_delta * Luxe.core.timescale,this.velocity_iterations,this.position_iterations);
			if(this.get_draw() && this.debugdraw != null) {
				this.debugdraw.update();
			}
		}
	}
	,destroy: function() {
		this.space.clear();
		this.space = null;
	}
	,set_gravity: function(_gravity) {
		if(this.space != null) {
			var _this = this.space;
			var x = _gravity.x;
			var y = _gravity.y;
			var ret;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret = new nape_geom_Vec2();
			} else {
				ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				var tmp;
				var _this1 = ret.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				if(ret.zpp_inner.x == x) {
					var _this2 = ret.zpp_inner;
					if(_this2._validate != null) {
						_this2._validate();
					}
					tmp = ret.zpp_inner.y == y;
				} else {
					tmp = false;
				}
				if(!tmp) {
					ret.zpp_inner.x = x;
					ret.zpp_inner.y = y;
					var _this3 = ret.zpp_inner;
					if(_this3._invalidate != null) {
						_this3._invalidate(_this3);
					}
				}
			}
			ret.zpp_inner.weak = true;
			var gravity = ret;
			if(_this.zpp_inner.wrap_gravity == null) {
				_this.zpp_inner.getgravity();
			}
			var _this4 = _this.zpp_inner.wrap_gravity;
			var _this5 = gravity.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			var x1 = gravity.zpp_inner.x;
			var _this6 = gravity.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			var y1 = gravity.zpp_inner.y;
			var tmp1;
			var _this7 = _this4.zpp_inner;
			if(_this7._validate != null) {
				_this7._validate();
			}
			if(_this4.zpp_inner.x == x1) {
				var _this8 = _this4.zpp_inner;
				if(_this8._validate != null) {
					_this8._validate();
				}
				tmp1 = _this4.zpp_inner.y == y1;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				_this4.zpp_inner.x = x1;
				_this4.zpp_inner.y = y1;
				var _this9 = _this4.zpp_inner;
				if(_this9._invalidate != null) {
					_this9._invalidate(_this9);
				}
			}
			if(gravity.zpp_inner.weak) {
				var inner = gravity.zpp_inner;
				gravity.zpp_inner.outer = null;
				gravity.zpp_inner = null;
				gravity.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = gravity;
				if(inner.outer != null) {
					inner.outer.zpp_inner = null;
					inner.outer = null;
				}
				inner._isimmutable = null;
				inner._validate = null;
				inner._invalidate = null;
				inner.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = inner;
			}
			if(_this.zpp_inner.wrap_gravity == null) {
				_this.zpp_inner.getgravity();
			}
		}
		return luxe_PhysicsEngine.prototype.set_gravity.call(this,_gravity);
	}
	,set_draw: function(_draw) {
		if(this.debugdraw != null) {
			this.debugdraw.set_visible(_draw);
		}
		return this.draw = _draw;
	}
	,__class__: luxe_physics_nape_PhysicsNape
});
var luxe_resource_Resource = function(_options) {
	this.ref = 0;
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null"));
	}
	if(_options.id == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options.id was null"));
	}
	if(_options.system == null) {
		_options.system = Luxe.resources;
	}
	if(_options.resource_type == null) {
		_options.resource_type = 0;
	}
	this.id = _options.id;
	this.system = _options.system;
	this.resource_type = _options.resource_type;
	this.set_state(0);
	this.set_ref(1);
};
$hxClasses["luxe.resource.Resource"] = luxe_resource_Resource;
luxe_resource_Resource.__name__ = ["luxe","resource","Resource"];
luxe_resource_Resource.prototype = {
	destroy: function(_force) {
		if(_force == null) {
			_force = false;
		}
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed"));
		}
		if(!_force) {
			if(this.ref <= 0) {
				throw new js__$Boot_HaxeError(luxe_DebugError.assertion("ref > 0"));
			}
			var _g = this;
			_g.set_ref(_g.ref - 1);
			if(this.ref < 0) {
				throw new js__$Boot_HaxeError(luxe_DebugError.assertion("ref >= 0"));
			}
		}
		if(this.ref == 0 || _force) {
			this.clear();
			this.set_state(6);
			this.system.remove(this);
			this.system.emit(8,this);
		}
	}
	,set_ref: function(_ref) {
		var pre = this.ref;
		this.ref = _ref;
		if(this.ref > pre) {
			this.system.emit(9,this);
		} else if(this.ref < pre) {
			this.system.emit(10,this);
		}
		return this.ref;
	}
	,set_state: function(_state) {
		this.state = _state;
		switch(this.state) {
		case 2:
			this.system.emit(3,this);
			break;
		case 3:
			this.system.emit(4,this);
			break;
		case 4:
			this.system.emit(5,this);
			break;
		default:
		}
		return this.state;
	}
	,clear: function() {
	}
	,__class__: luxe_resource_Resource
	,__properties__: {set_ref:"set_ref",set_state:"set_state"}
};
var luxe_resource_BytesResource = function(_options) {
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null"));
	}
	_options.resource_type = 3;
	luxe_resource_Resource.call(this,_options);
	this.asset = _options.asset;
};
$hxClasses["luxe.resource.BytesResource"] = luxe_resource_BytesResource;
luxe_resource_BytesResource.__name__ = ["luxe","resource","BytesResource"];
luxe_resource_BytesResource.__super__ = luxe_resource_Resource;
luxe_resource_BytesResource.prototype = $extend(luxe_resource_Resource.prototype,{
	reload: function() {
		var _gthis = this;
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed"));
		}
		this.clear();
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.set_state(2);
			var get = snow_systems_assets_AssetBytes.load(Luxe.core.app.assets,_gthis.id);
			get.then(function(_asset) {
				_gthis.asset = _asset;
				_gthis.set_state(3);
				resolve(_gthis);
			});
			get.error(function(_error) {
				_gthis.set_state(4);
				reject(_error);
			});
		});
	}
	,clear: function() {
		if(this.asset != null) {
			this.asset.destroy();
			this.asset = null;
		}
	}
	,__class__: luxe_resource_BytesResource
});
var luxe_resource_TextResource = function(_options) {
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null"));
	}
	_options.resource_type = 1;
	luxe_resource_Resource.call(this,_options);
	this.asset = _options.asset;
};
$hxClasses["luxe.resource.TextResource"] = luxe_resource_TextResource;
luxe_resource_TextResource.__name__ = ["luxe","resource","TextResource"];
luxe_resource_TextResource.__super__ = luxe_resource_Resource;
luxe_resource_TextResource.prototype = $extend(luxe_resource_Resource.prototype,{
	reload: function() {
		var _gthis = this;
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed"));
		}
		this.clear();
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.set_state(2);
			var get = snow_systems_assets_AssetText.load(Luxe.core.app.assets,_gthis.id);
			get.then(function(_asset) {
				_gthis.asset = _asset;
				_gthis.set_state(3);
				resolve(_gthis);
			});
			get.error(function(_error) {
				_gthis.set_state(4);
				reject(_error);
			});
		});
	}
	,clear: function() {
		if(this.asset != null) {
			this.asset.destroy();
			this.asset = null;
		}
	}
	,__class__: luxe_resource_TextResource
});
var luxe_resource_JSONResource = function(_options) {
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null"));
	}
	_options.resource_type = 2;
	luxe_resource_Resource.call(this,_options);
	this.asset = _options.asset;
};
$hxClasses["luxe.resource.JSONResource"] = luxe_resource_JSONResource;
luxe_resource_JSONResource.__name__ = ["luxe","resource","JSONResource"];
luxe_resource_JSONResource.__super__ = luxe_resource_Resource;
luxe_resource_JSONResource.prototype = $extend(luxe_resource_Resource.prototype,{
	reload: function() {
		var _gthis = this;
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed"));
		}
		this.clear();
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.set_state(2);
			var get = snow_systems_assets_AssetJSON.load(Luxe.core.app.assets,_gthis.id);
			get.then(function(_asset) {
				_gthis.asset = _asset;
				_gthis.set_state(3);
				resolve(_gthis);
			});
			get.error(function(_error) {
				_gthis.set_state(4);
				reject(_error);
			});
		});
	}
	,clear: function() {
		if(this.asset != null) {
			this.asset.destroy();
			this.asset = null;
		}
	}
	,__class__: luxe_resource_JSONResource
});
var luxe_resource_AudioResource = function(_options) {
	this.is_stream = false;
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null"));
	}
	_options.resource_type = 8;
	luxe_resource_Resource.call(this,_options);
	this.asset = _options.asset;
	if(_options.is_stream == null) {
		_options.is_stream = false;
	}
	this.is_stream = _options.is_stream;
	if(this.asset != null) {
		this.source = new snow_systems_audio_AudioSource(Luxe.core.app,this.asset.audio);
	}
};
$hxClasses["luxe.resource.AudioResource"] = luxe_resource_AudioResource;
luxe_resource_AudioResource.__name__ = ["luxe","resource","AudioResource"];
luxe_resource_AudioResource.__super__ = luxe_resource_Resource;
luxe_resource_AudioResource.prototype = $extend(luxe_resource_Resource.prototype,{
	reload: function() {
		var _gthis = this;
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed"));
		}
		this.clear();
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.set_state(2);
			var get = snow_systems_assets_AssetAudio.load(Luxe.core.app.assets,_gthis.id,_gthis.is_stream);
			get.then(function(_asset) {
				_gthis.asset = _asset;
				_gthis.source = new snow_systems_audio_AudioSource(Luxe.core.app,_gthis.asset.audio);
				_gthis.set_state(3);
				resolve(_gthis);
			});
			get.error(function(_error) {
				_gthis.set_state(4);
				reject(_error);
			});
		});
	}
	,clear: function() {
		if(this.asset != null) {
			this.asset.destroy();
			this.asset = null;
		}
		if(this.source != null) {
			this.source.destroy();
			this.source = null;
		}
	}
	,__class__: luxe_resource_AudioResource
});
var luxe_structural_BalancedBSTIterator_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry = function(_tree) {
	if(_tree == null) {
		return;
	}
	if(_tree.root == null) {
		return;
	}
	this.tree = _tree;
	var _node = this.tree.root;
	while(_node.left != null) _node = _node.left;
	this.current = _node;
	var _node1 = this.tree.root;
	while(_node1.right != null) _node1 = _node1.right;
	this.rightest = _node1;
};
$hxClasses["luxe.structural.BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"] = luxe_structural_BalancedBSTIterator_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry;
luxe_structural_BalancedBSTIterator_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry.__name__ = ["luxe","structural","BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"];
luxe_structural_BalancedBSTIterator_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry.prototype = {
	hasNext: function() {
		if(this.current == null || this.rightest == null) {
			return false;
		}
		return this.tree.compare(this.current.key,this.rightest.key) <= 0;
	}
	,next: function() {
		var _temp = this.current;
		var tmp;
		if(!(this.current == null || this.rightest == null ? false : this.tree.compare(this.current.key,this.rightest.key) <= 0)) {
			tmp = null;
		} else if(this.current.right != null) {
			var _node = this.current.right;
			while(_node.left != null) _node = _node.left;
			tmp = _node;
		} else {
			var _next = null;
			var _temp1 = this.tree.root;
			while(_temp1 != null) {
				var _comp = this.tree.compare(this.current.key,_temp1.key);
				if(_comp < 0) {
					_next = _temp1;
					_temp1 = _temp1.left;
				} else if(_comp > 0) {
					_temp1 = _temp1.right;
				} else {
					this.current = _next;
					break;
				}
			}
			tmp = _next;
		}
		this.current = tmp;
		return _temp.value;
	}
	,__class__: luxe_structural_BalancedBSTIterator_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry
};
var luxe_structural_BalancedBSTNode_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry = function(_key,_value,_node_count,_color) {
	this.left = null;
	this.right = null;
	this.key = _key;
	this.value = _value;
	this.nodecount = _node_count;
	this.color = _color;
};
$hxClasses["luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"] = luxe_structural_BalancedBSTNode_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry;
luxe_structural_BalancedBSTNode_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry.__name__ = ["luxe","structural","BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"];
luxe_structural_BalancedBSTNode_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry.prototype = {
	__class__: luxe_structural_BalancedBSTNode_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry
};
var luxe_structural_BalancedBST_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry = function(compare_function) {
	this.compare = compare_function;
};
$hxClasses["luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"] = luxe_structural_BalancedBST_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry;
luxe_structural_BalancedBST_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry.__name__ = ["luxe","structural","BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"];
luxe_structural_BalancedBST_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry.prototype = {
	contains: function(_key) {
		return this.find(_key) != null;
	}
	,find: function(_key) {
		return this.node_find(this.root,_key);
	}
	,remove: function(_key) {
		var tmp;
		var _node = this.root.left;
		if(!(_node == null ? false : _node.color == true)) {
			var _node1 = this.root.right;
			tmp = !(_node1 == null ? false : _node1.color == true);
		} else {
			tmp = false;
		}
		if(tmp) {
			this.root.color = true;
		}
		if(!this.contains(_key)) {
			return false;
		}
		this.root = this.node_remove(this.root,_key);
		if(this.root != null) {
			this.root.color = false;
		}
		return true;
	}
	,iterator: function() {
		return new luxe_structural_BalancedBSTIterator_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry(this);
	}
	,node_insert: function(_node,_key,_value) {
		if(_node == null) {
			return new luxe_structural_BalancedBSTNode_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry(_key,_value,1,true);
		}
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) {
			_node.left = this.node_insert(_node.left,_key,_value);
		} else if(comparison > 0) {
			_node.right = this.node_insert(_node.right,_key,_value);
		} else {
			_node.value = _value;
		}
		var tmp;
		var _node1 = _node.right;
		if(_node1 == null ? false : _node1.color == true) {
			var _node2 = _node.left;
			tmp = !(_node2 == null ? false : _node2.color == true);
		} else {
			tmp = false;
		}
		if(tmp) {
			_node = this.rotate_left(_node);
		}
		var tmp1;
		var _node3 = _node.left;
		if(_node3 == null ? false : _node3.color == true) {
			var _node4 = _node.left.left;
			if(_node4 == null) {
				tmp1 = false;
			} else {
				tmp1 = _node4.color == true;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			_node = this.rotate_right(_node);
		}
		var tmp2;
		var _node5 = _node.left;
		if(_node5 == null ? false : _node5.color == true) {
			var _node6 = _node.right;
			if(_node6 == null) {
				tmp2 = false;
			} else {
				tmp2 = _node6.color == true;
			}
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			this.swap_color(_node);
		}
		var _node7 = _node.left;
		var _node8 = _node.right;
		_node.nodecount = (_node7 == null ? 0 : _node7.nodecount) + (_node8 == null ? 0 : _node8.nodecount) + 1;
		return _node;
	}
	,node_find: function(_node,_key) {
		if(_node == null) {
			return null;
		}
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) {
			return this.node_find(_node.left,_key);
		} else if(comparison > 0) {
			return this.node_find(_node.right,_key);
		} else {
			return _node.value;
		}
	}
	,node_smallest: function(_node) {
		if(_node.left == null) {
			return _node;
		}
		return this.node_smallest(_node.left);
	}
	,node_remove_smallest: function(_node) {
		if(_node.left == null) {
			return null;
		}
		var tmp;
		var _node1 = _node.left;
		if(!(_node1 == null ? false : _node1.color == true)) {
			var _node2 = _node.left.left;
			tmp = !(_node2 == null ? false : _node2.color == true);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _node3 = _node;
			this.swap_color(_node3);
			var _node4 = _node3.right.left;
			if(_node4 == null ? false : _node4.color == true) {
				_node3.right = this.rotate_right(_node3.right);
				_node3 = this.rotate_left(_node3);
			}
			_node = _node3;
		}
		_node.left = this.node_remove_smallest(_node.left);
		var _node5 = _node.left;
		var _node6 = _node.right;
		_node.nodecount = (_node5 == null ? 0 : _node5.nodecount) + (_node6 == null ? 0 : _node6.nodecount) + 1;
		var _node7 = _node;
		var _node8 = _node7.right;
		if(_node8 == null ? false : _node8.color == true) {
			_node7 = this.rotate_left(_node7);
		}
		var tmp1;
		var _node9 = _node7.left;
		if(_node9 == null ? false : _node9.color == true) {
			var _node10 = _node7.left.left;
			if(_node10 == null) {
				tmp1 = false;
			} else {
				tmp1 = _node10.color == true;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			_node7 = this.rotate_right(_node7);
		}
		var tmp2;
		var _node11 = _node7.left;
		if(_node11 == null ? false : _node11.color == true) {
			var _node12 = _node7.right;
			if(_node12 == null) {
				tmp2 = false;
			} else {
				tmp2 = _node12.color == true;
			}
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			this.swap_color(_node7);
		}
		var _node13 = _node7.left;
		var _node14 = _node7.right;
		_node7.nodecount = (_node13 == null ? 0 : _node13.nodecount) + (_node14 == null ? 0 : _node14.nodecount) + 1;
		return _node7;
	}
	,node_remove: function(_node,_key) {
		if(this.compare(_key,_node.key) < 0) {
			var tmp;
			var _node1 = _node.left;
			if(!(_node1 == null ? false : _node1.color == true)) {
				var _node2 = _node.left.left;
				tmp = !(_node2 == null ? false : _node2.color == true);
			} else {
				tmp = false;
			}
			if(tmp) {
				var _node3 = _node;
				this.swap_color(_node3);
				var _node4 = _node3.right.left;
				if(_node4 == null ? false : _node4.color == true) {
					_node3.right = this.rotate_right(_node3.right);
					_node3 = this.rotate_left(_node3);
				}
				_node = _node3;
			}
			_node.left = this.node_remove(_node.left,_key);
		} else {
			var _node5 = _node.left;
			if(_node5 == null ? false : _node5.color == true) {
				_node = this.rotate_right(_node);
			}
			if(this.compare(_key,_node.key) == 0 && _node.right == null) {
				return null;
			}
			var tmp1;
			var _node6 = _node.right;
			if(!(_node6 == null ? false : _node6.color == true)) {
				var _node7 = _node.right.left;
				tmp1 = !(_node7 == null ? false : _node7.color == true);
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var _node8 = _node;
				this.swap_color(_node8);
				var _node9 = _node8.left.left;
				if(_node9 == null ? false : _node9.color == true) {
					_node8 = this.rotate_right(_node8);
				}
				_node = _node8;
			}
			if(this.compare(_key,_node.key) == 0) {
				var _n = this.node_smallest(_node.right);
				_node.key = _n.key;
				_node.value = _n.value;
				_node.right = this.node_remove_smallest(_node.right);
			} else {
				_node.right = this.node_remove(_node.right,_key);
			}
		}
		var _node10 = _node;
		var _node11 = _node10.right;
		if(_node11 == null ? false : _node11.color == true) {
			_node10 = this.rotate_left(_node10);
		}
		var tmp2;
		var _node12 = _node10.left;
		if(_node12 == null ? false : _node12.color == true) {
			var _node13 = _node10.left.left;
			if(_node13 == null) {
				tmp2 = false;
			} else {
				tmp2 = _node13.color == true;
			}
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			_node10 = this.rotate_right(_node10);
		}
		var tmp3;
		var _node14 = _node10.left;
		if(_node14 == null ? false : _node14.color == true) {
			var _node15 = _node10.right;
			if(_node15 == null) {
				tmp3 = false;
			} else {
				tmp3 = _node15.color == true;
			}
		} else {
			tmp3 = false;
		}
		if(tmp3) {
			this.swap_color(_node10);
		}
		var _node16 = _node10.left;
		var _node17 = _node10.right;
		_node10.nodecount = (_node16 == null ? 0 : _node16.nodecount) + (_node17 == null ? 0 : _node17.nodecount) + 1;
		return _node10;
	}
	,rotate_left: function(_node) {
		var _n = _node.right;
		_n.color = _node.color;
		_node.color = true;
		_node.right = _n.left;
		_n.left = _node;
		_n.nodecount = _node.nodecount;
		var _node1 = _node.left;
		var _node2 = _node.right;
		_node.nodecount = (_node1 == null ? 0 : _node1.nodecount) + (_node2 == null ? 0 : _node2.nodecount) + 1;
		return _n;
	}
	,rotate_right: function(_node) {
		var _n = _node.left;
		_n.color = _node.color;
		_node.color = true;
		_node.left = _n.right;
		_n.right = _node;
		_n.nodecount = _node.nodecount;
		var _node1 = _node.left;
		var _node2 = _node.right;
		_node.nodecount = (_node1 == null ? 0 : _node1.nodecount) + (_node2 == null ? 0 : _node2.nodecount) + 1;
		return _n;
	}
	,swap_color: function(_node) {
		_node.color = !_node.color;
		_node.left.color = !_node.left.color;
		_node.right.color = !_node.right.color;
	}
	,__class__: luxe_structural_BalancedBST_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry
};
var luxe_structural_OrderedMapIterator_$String_$luxe_$Component = function(omap) {
	this.index = 0;
	this.map = omap;
};
$hxClasses["luxe.structural.OrderedMapIterator_String_luxe_Component"] = luxe_structural_OrderedMapIterator_$String_$luxe_$Component;
luxe_structural_OrderedMapIterator_$String_$luxe_$Component.__name__ = ["luxe","structural","OrderedMapIterator_String_luxe_Component"];
luxe_structural_OrderedMapIterator_$String_$luxe_$Component.prototype = {
	hasNext: function() {
		return this.index < this.map._keys.length;
	}
	,next: function() {
		return this.map.map.get(this.map._keys[this.index++]);
	}
	,__class__: luxe_structural_OrderedMapIterator_$String_$luxe_$Component
};
var luxe_structural_OrderedMap_$String_$luxe_$Component = function(_map) {
	this._keys = [];
	this.map = _map;
};
$hxClasses["luxe.structural.OrderedMap_String_luxe_Component"] = luxe_structural_OrderedMap_$String_$luxe_$Component;
luxe_structural_OrderedMap_$String_$luxe_$Component.__name__ = ["luxe","structural","OrderedMap_String_luxe_Component"];
luxe_structural_OrderedMap_$String_$luxe_$Component.__interfaces__ = [haxe_IMap];
luxe_structural_OrderedMap_$String_$luxe_$Component.prototype = {
	set: function(key,value) {
		if(!this.map.exists(key)) {
			this._keys.push(key);
		}
		this.map.set(key,value);
	}
	,iterator: function() {
		return new luxe_structural_OrderedMapIterator_$String_$luxe_$Component(this);
	}
	,remove: function(key) {
		if(this.map.remove(key)) {
			return HxOverrides.remove(this._keys,key);
		} else {
			return false;
		}
	}
	,exists: function(key) {
		return this.map.exists(key);
	}
	,get: function(key) {
		return this.map.get(key);
	}
	,__class__: luxe_structural_OrderedMap_$String_$luxe_$Component
};
var luxe_tween_actuators_IGenericActuator = function() { };
$hxClasses["luxe.tween.actuators.IGenericActuator"] = luxe_tween_actuators_IGenericActuator;
luxe_tween_actuators_IGenericActuator.__name__ = ["luxe","tween","actuators","IGenericActuator"];
luxe_tween_actuators_IGenericActuator.prototype = {
	__class__: luxe_tween_actuators_IGenericActuator
};
var luxe_tween_actuators_GenericActuator = function(target,duration,properties) {
	this.timescaled = false;
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = luxe_tween_Actuate.defaultEase;
};
$hxClasses["luxe.tween.actuators.GenericActuator"] = luxe_tween_actuators_GenericActuator;
luxe_tween_actuators_GenericActuator.__name__ = ["luxe","tween","actuators","GenericActuator"];
luxe_tween_actuators_GenericActuator.__interfaces__ = [luxe_tween_actuators_IGenericActuator];
luxe_tween_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		luxe_tween_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,timescale: function(_value) {
		if(_value == null) {
			_value = true;
		}
		this.timescaled = _value;
		return this;
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,pause: function() {
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: luxe_tween_actuators_GenericActuator
};
var luxe_tween_actuators_SimpleActuator = function(target,duration,properties) {
	this.has_timescaled_starttime = false;
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
	luxe_tween_actuators_GenericActuator.call(this,target,duration,properties);
	if(!luxe_tween_actuators_SimpleActuator.addedEvent) {
		luxe_tween_actuators_SimpleActuator.addedEvent = true;
		Luxe.on(4,luxe_tween_actuators_SimpleActuator.on_internal_update);
	}
};
$hxClasses["luxe.tween.actuators.SimpleActuator"] = luxe_tween_actuators_SimpleActuator;
luxe_tween_actuators_SimpleActuator.__name__ = ["luxe","tween","actuators","SimpleActuator"];
luxe_tween_actuators_SimpleActuator.on_internal_update = function(_) {
	luxe_tween_actuators_SimpleActuator.update_timer += Luxe.core.frame_delta;
	luxe_tween_actuators_SimpleActuator.current_time = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
	var currentTime = luxe_tween_actuators_SimpleActuator.current_time;
	var actuator;
	var j = 0;
	var _g1 = 0;
	var _g = luxe_tween_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		++_g1;
		actuator = luxe_tween_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(actuator.timescaled) {
				currentTime = luxe_tween_actuators_SimpleActuator.update_timer;
			} else {
				currentTime = luxe_tween_actuators_SimpleActuator.current_time;
			}
			if(actuator.timescaled && !actuator.has_timescaled_starttime) {
				actuator.has_timescaled_starttime = true;
				actuator.startTime = luxe_tween_actuators_SimpleActuator.update_timer;
				actuator.timeOffset = actuator.startTime;
			}
			if(currentTime > actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			luxe_tween_actuators_SimpleActuator.actuators.splice(j,1);
			--luxe_tween_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
luxe_tween_actuators_SimpleActuator.__super__ = luxe_tween_actuators_GenericActuator;
luxe_tween_actuators_SimpleActuator.prototype = $extend(luxe_tween_actuators_GenericActuator.prototype,{
	autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible")) {
					target["visible"] = value1;
				} else {
					Reflect.setProperty(target,"visible",value1);
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && (!this.target.__properties__ || !this.target.__properties__["set_" + i])) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var details1 = this.target;
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					value = Reflect.getProperty(target,i);
				}
				details = new luxe_tween_actuators_PropertyDetails(details1,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && Object.prototype.hasOwnProperty.call(this.properties,"visible");
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value1 = Reflect.field(target1,"visible");
			} else {
				value1 = Reflect.getProperty(target1,"visible");
			}
			this.cacheVisible = value1;
			var target2 = this.target;
			if(Object.prototype.hasOwnProperty.call(target2,"visible")) {
				target2["visible"] = true;
			} else {
				Reflect.setProperty(target2,"visible",true);
			}
		}
		this.timeOffset = this.startTime;
		luxe_tween_actuators_SimpleActuator.actuators.push(this);
		++luxe_tween_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		this.paused = true;
		this.pauseTime = this.timescaled ? luxe_tween_actuators_SimpleActuator.update_timer : luxe_tween_actuators_SimpleActuator.current_time;
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (this.timescaled ? luxe_tween_actuators_SimpleActuator.update_timer : luxe_tween_actuators_SimpleActuator.current_time) - this.pauseTime;
		}
	}
	,setField: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			Reflect.setProperty(details.target,details.propertyName,value);
		} else {
			Reflect.setProperty(details.target,details.propertyName,value);
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					details = this.propertyDetails[_g1++];
					var value = details.start + details.change * easing;
					if(details.isField) {
						Reflect.setProperty(details.target,details.propertyName,value);
					} else {
						Reflect.setProperty(details.target,details.propertyName,value);
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					details = this.propertyDetails[_g11++];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						if(details.isField) {
							Reflect.setProperty(details.target,details.propertyName,endValue);
						} else {
							Reflect.setProperty(details.target,details.propertyName,endValue);
						}
					} else {
						var value1 = Math.round(endValue);
						if(details.isField) {
							Reflect.setProperty(details.target,details.propertyName,value1);
						} else {
							Reflect.setProperty(details.target,details.propertyName,value1);
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value2 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value2 = Reflect.field(target,"alpha");
						} else {
							value2 = Reflect.getProperty(target,"alpha");
						}
						tmp = value2 == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							Reflect.setProperty(target1,"visible",false);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: luxe_tween_actuators_SimpleActuator
});
var luxe_tween_easing_Quad = function() { };
$hxClasses["luxe.tween.easing.Quad"] = luxe_tween_easing_Quad;
luxe_tween_easing_Quad.__name__ = ["luxe","tween","easing","Quad"];
luxe_tween_easing_Quad.__properties__ = {get_easeOut:"get_easeOut"};
luxe_tween_easing_Quad.get_easeOut = function() {
	return new luxe_tween_easing_QuadEaseOut();
};
var luxe_tween_easing_IEasing = function() { };
$hxClasses["luxe.tween.easing.IEasing"] = luxe_tween_easing_IEasing;
luxe_tween_easing_IEasing.__name__ = ["luxe","tween","easing","IEasing"];
luxe_tween_easing_IEasing.prototype = {
	__class__: luxe_tween_easing_IEasing
};
var luxe_tween_easing_QuadEaseOut = function() {
};
$hxClasses["luxe.tween.easing.QuadEaseOut"] = luxe_tween_easing_QuadEaseOut;
luxe_tween_easing_QuadEaseOut.__name__ = ["luxe","tween","easing","QuadEaseOut"];
luxe_tween_easing_QuadEaseOut.__interfaces__ = [luxe_tween_easing_IEasing];
luxe_tween_easing_QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,__class__: luxe_tween_easing_QuadEaseOut
};
var luxe_tween_Actuate = function() { };
$hxClasses["luxe.tween.Actuate"] = luxe_tween_Actuate;
luxe_tween_Actuate.__name__ = ["luxe","tween","Actuate"];
luxe_tween_Actuate.apply = function(target,properties,customActuator) {
	luxe_tween_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = luxe_tween_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
luxe_tween_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(luxe_tween_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		luxe_tween_Actuate.targetLibraries.set(target,[]);
	}
	return luxe_tween_Actuate.targetLibraries.h[target.__id__];
};
luxe_tween_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__instanceof(target,luxe_tween_actuators_GenericActuator)) {
			(js_Boot.__cast(target , luxe_tween_actuators_GenericActuator)).stop(null,complete,sendEvent);
		} else {
			var library = luxe_tween_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
luxe_tween_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = luxe_tween_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = luxe_tween_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = luxe_tween_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return luxe_tween_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
luxe_tween_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(luxe_tween_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(luxe_tween_Actuate.targetLibraries.h[target.__id__],actuator);
		if(luxe_tween_Actuate.targetLibraries.h[target.__id__].length == 0) {
			luxe_tween_Actuate.targetLibraries.remove(target);
		}
	}
};
var luxe_tween_IComponentPath = function() { };
$hxClasses["luxe.tween.IComponentPath"] = luxe_tween_IComponentPath;
luxe_tween_IComponentPath.__name__ = ["luxe","tween","IComponentPath"];
luxe_tween_IComponentPath.prototype = {
	__class__: luxe_tween_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var luxe_tween_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	luxe_tween_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		++_g1;
		this.currentParameters.push(null);
	}
};
$hxClasses["luxe.tween.actuators.MethodActuator"] = luxe_tween_actuators_MethodActuator;
luxe_tween_actuators_MethodActuator.__name__ = ["luxe","tween","actuators","MethodActuator"];
luxe_tween_actuators_MethodActuator.__super__ = luxe_tween_actuators_SimpleActuator;
luxe_tween_actuators_MethodActuator.prototype = $extend(luxe_tween_actuators_SimpleActuator.prototype,{
	apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		luxe_tween_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new luxe_tween_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		luxe_tween_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: luxe_tween_actuators_MethodActuator
});
var luxe_tween_actuators_MotionPathActuator = function(target,duration,properties) {
	luxe_tween_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["luxe.tween.actuators.MotionPathActuator"] = luxe_tween_actuators_MotionPathActuator;
luxe_tween_actuators_MotionPathActuator.__name__ = ["luxe","tween","actuators","MotionPathActuator"];
luxe_tween_actuators_MotionPathActuator.__super__ = luxe_tween_actuators_SimpleActuator;
luxe_tween_actuators_MotionPathActuator.prototype = $extend(luxe_tween_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , luxe_tween_IComponentPath)).get_end();
			} else {
				Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , luxe_tween_IComponentPath)).get_end());
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , luxe_tween_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.start = Reflect.field(this.target,propertyName);
				} else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new luxe_tween_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details = _g1[_g];
					++_g;
					if(details.isField) {
						details.target[details.propertyName] = (js_Boot.__cast(details , luxe_tween_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						Reflect.setProperty(details.target,details.propertyName,(js_Boot.__cast(details , luxe_tween_actuators_PropertyPathDetails)).path.calculate(easing));
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details1 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details1.isField) {
							details1.target[details1.propertyName] = (js_Boot.__cast(details1 , luxe_tween_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , luxe_tween_actuators_PropertyPathDetails)).path.calculate(easing));
						}
					} else if(details1.isField) {
						details1.target[details1.propertyName] = Math.round((js_Boot.__cast(details1 , luxe_tween_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						Reflect.setProperty(details1.target,details1.propertyName,Math.round((js_Boot.__cast(details1 , luxe_tween_actuators_PropertyPathDetails)).path.calculate(easing)));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value = Reflect.field(target,"alpha");
						} else {
							value = Reflect.getProperty(target,"alpha");
						}
						tmp = value == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							Reflect.setProperty(target1,"visible",false);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: luxe_tween_actuators_MotionPathActuator
});
var luxe_tween_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["luxe.tween.actuators.PropertyDetails"] = luxe_tween_actuators_PropertyDetails;
luxe_tween_actuators_PropertyDetails.__name__ = ["luxe","tween","actuators","PropertyDetails"];
luxe_tween_actuators_PropertyDetails.prototype = {
	__class__: luxe_tween_actuators_PropertyDetails
};
var luxe_tween_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	luxe_tween_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["luxe.tween.actuators.PropertyPathDetails"] = luxe_tween_actuators_PropertyPathDetails;
luxe_tween_actuators_PropertyPathDetails.__name__ = ["luxe","tween","actuators","PropertyPathDetails"];
luxe_tween_actuators_PropertyPathDetails.__super__ = luxe_tween_actuators_PropertyDetails;
luxe_tween_actuators_PropertyPathDetails.prototype = $extend(luxe_tween_actuators_PropertyDetails.prototype,{
	__class__: luxe_tween_actuators_PropertyPathDetails
});
var luxe_tween_easing_Linear = function() { };
$hxClasses["luxe.tween.easing.Linear"] = luxe_tween_easing_Linear;
luxe_tween_easing_Linear.__name__ = ["luxe","tween","easing","Linear"];
luxe_tween_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"};
luxe_tween_easing_Linear.get_easeNone = function() {
	return new luxe_tween_easing_LinearEaseNone();
};
var luxe_tween_easing_LinearEaseNone = function() {
};
$hxClasses["luxe.tween.easing.LinearEaseNone"] = luxe_tween_easing_LinearEaseNone;
luxe_tween_easing_LinearEaseNone.__name__ = ["luxe","tween","easing","LinearEaseNone"];
luxe_tween_easing_LinearEaseNone.__interfaces__ = [luxe_tween_easing_IEasing];
luxe_tween_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,__class__: luxe_tween_easing_LinearEaseNone
};
var luxe_utils_GeometryUtils = function() {
	this._v_cache = new phoenix_Vector();
};
$hxClasses["luxe.utils.GeometryUtils"] = luxe_utils_GeometryUtils;
luxe_utils_GeometryUtils.__name__ = ["luxe","utils","GeometryUtils"];
luxe_utils_GeometryUtils.prototype = {
	segments_for_smooth_circle: function(_radius,_smooth) {
		if(_smooth == null) {
			_smooth = 5;
		}
		return _smooth * Math.sqrt(_radius) | 0;
	}
	,random_point_in_unit_circle: function() {
		var _r = Math.sqrt(Math.random());
		var _t = (-1 + 2 * Math.random()) * 6.283185307179586;
		return new phoenix_Vector(_r * Math.cos(_t),_r * Math.sin(_t));
	}
	,__class__: luxe_utils_GeometryUtils
};
var luxe_utils_Random = function(_initial_seed) {
	if(!(_initial_seed > 0)) {
		throw new js__$Boot_HaxeError(luxe_DebugError.assertion("_initial_seed > 0" + (" ( " + "initial negative seed will return negative random results, if this was intentional, define luxe_random_allow_negative_seed" + " )")));
	}
	this.initial = this.seed = _initial_seed;
	this.seed = this.initial;
};
$hxClasses["luxe.utils.Random"] = luxe_utils_Random;
luxe_utils_Random.__name__ = ["luxe","utils","Random"];
luxe_utils_Random.prototype = {
	__class__: luxe_utils_Random
};
var luxe_utils_Utils = function(_luxe) {
	this.core = _luxe;
	this.geometry = new luxe_utils_GeometryUtils();
	this.random = new luxe_utils_Random(Math.random() * 2147483647);
	this._byte_levels = ["bytes","Kb","MB","GB","TB"];
};
$hxClasses["luxe.utils.Utils"] = luxe_utils_Utils;
luxe_utils_Utils.__name__ = ["luxe","utils","Utils"];
luxe_utils_Utils.prototype = {
	uniqueid: function(val) {
		if(val == null) {
			val = Std.random(2147483647);
		}
		var to_char = function(value) {
			if(value > 9) {
				var ascii = 65 + (value - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				return String.fromCharCode(ascii);
			} else {
				return (value == null ? "null" : "" + value).charAt(0);
			}
		};
		var r = val % 62 | 0;
		var q = val / 62 | 0;
		if(q > 0) {
			return this.uniqueid(q) + to_char(r);
		} else {
			return Std.string(to_char(r));
		}
	}
	,bytes_to_string: function(bytes,precision) {
		if(precision == null) {
			precision = 3;
		}
		var index = bytes == 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));
		var _byte_value = bytes / Math.pow(1024,index);
		var n = Math.pow(10,precision);
		_byte_value = (_byte_value * n | 0) / n;
		return _byte_value + " " + this._byte_levels[index];
	}
	,premultiply_alpha: function(_pixels) {
		var count = _pixels.length;
		var index = 0;
		while(index < count) {
			var g = _pixels[index + 1];
			var b = _pixels[index + 2];
			var a = _pixels[index + 3] / 255.0;
			_pixels[index] = _pixels[index] * a | 0;
			_pixels[index + 1] = g * a | 0;
			_pixels[index + 2] = b * a | 0;
			index += 4;
		}
		return _pixels;
	}
	,__class__: luxe_utils_Utils
};
var luxe_utils_unifill_Exception = { __ename__ : true, __constructs__ : ["InvalidCodePoint","InvalidCodeUnitSequence"] };
luxe_utils_unifill_Exception.InvalidCodePoint = function(code) { var $x = ["InvalidCodePoint",0,code]; $x.__enum__ = luxe_utils_unifill_Exception; $x.toString = $estr; return $x; };
luxe_utils_unifill_Exception.InvalidCodeUnitSequence = function(index) { var $x = ["InvalidCodeUnitSequence",1,index]; $x.__enum__ = luxe_utils_unifill_Exception; $x.toString = $estr; return $x; };
var luxe_utils_unifill_Unifill = function() { };
$hxClasses["luxe.utils.unifill.Unifill"] = luxe_utils_unifill_Unifill;
luxe_utils_unifill_Unifill.__name__ = ["luxe","utils","unifill","Unifill"];
luxe_utils_unifill_Unifill.uSplit = function(s,delimiter) {
	if(delimiter.length == 0) {
		var _g = [];
		var _g1_index;
		var _g1_i;
		var endIndex = s.length;
		_g1_i = 0;
		_g1_index = 0;
		while(_g1_index < endIndex) {
			_g1_i = _g1_index;
			var c = s.charCodeAt(_g1_index);
			_g1_index += !(55296 <= c && c <= 56319) ? 1 : 2;
			var i = _g1_i;
			var s1 = s;
			var c1 = s1.charCodeAt(i);
			_g.push(HxOverrides.substr(s1,i,!(55296 <= c1 && c1 <= 56319) ? 1 : 2));
		}
		return _g;
	} else {
		return s.split(delimiter);
	}
};
var luxe_utils_unifill__$Utf16_Utf16_$Impl_$ = {};
$hxClasses["luxe.utils.unifill._Utf16.Utf16_Impl_"] = luxe_utils_unifill__$Utf16_Utf16_$Impl_$;
luxe_utils_unifill__$Utf16_Utf16_$Impl_$.__name__ = ["luxe","utils","unifill","_Utf16","Utf16_Impl_"];
luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointAt = function(this1,index) {
	return luxe_utils_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return this1.charCodeAt(i);
	},index);
};
luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = this1.charCodeAt(index);
		index += !(55296 <= c && c <= 56319) ? 1 : 2;
		++i;
	}
	return i;
};
var luxe_utils_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["luxe.utils.unifill._Utf16.Utf16Impl"] = luxe_utils_unifill__$Utf16_Utf16Impl;
luxe_utils_unifill__$Utf16_Utf16Impl.__name__ = ["luxe","utils","unifill","_Utf16","Utf16Impl"];
luxe_utils_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) {
		throw new js__$Boot_HaxeError(luxe_utils_unifill_Exception.InvalidCodeUnitSequence(index));
	}
	var hi = accessor(index);
	if(55296 <= hi && hi <= 56319) {
		if(index + 1 < 0 || len <= index + 1) {
			throw new js__$Boot_HaxeError(luxe_utils_unifill_Exception.InvalidCodeUnitSequence(index));
		}
		var lo = accessor(index + 1);
		if(56320 <= lo && lo <= 57343) {
			return hi - 55232 << 10 | lo & 1023;
		} else {
			throw new js__$Boot_HaxeError(luxe_utils_unifill_Exception.InvalidCodeUnitSequence(index));
		}
	} else if(56320 <= hi && hi <= 57343) {
		throw new js__$Boot_HaxeError(luxe_utils_unifill_Exception.InvalidCodeUnitSequence(index));
	} else {
		return hi;
	}
};
var lx_GameState = function() {
	this.MONSTERS_COUNT = 16;
	this.CHICKENS_COUNT = 64;
	luxe_State.call(this,{ name : "game"});
};
$hxClasses["lx.GameState"] = lx_GameState;
lx_GameState.__name__ = ["lx","GameState"];
lx_GameState.__super__ = luxe_State;
lx_GameState.prototype = $extend(luxe_State.prototype,{
	build: function() {
		var _g1 = 0;
		var _g = this.MONSTERS_COUNT;
		while(_g1 < _g) {
			++_g1;
			var start = Luxe.core.screen.width;
			var tmp = start + (Luxe.core.screen.width * .75 - start) * Math.random();
			var start1 = Luxe.core.screen.height * .2;
			var end = Luxe.core.screen.height * .8;
			var _g2 = [];
			var _g21 = 0;
			while(_g21 < 3) {
				++_g21;
				_g2.push(start1 + (end - start1) * Math.random());
			}
			Builder.monster(tmp,Lambda.fold(_g2,function(sum,el) {
				return sum + el;
			},.0) / 3,-(40 + 20 * Math.random()),0);
		}
		var _g11 = 0;
		var _g3 = this.CHICKENS_COUNT;
		while(_g11 < _g3) {
			++_g11;
			var tmp1 = Luxe.core.screen.width * .25 * Math.random();
			var start2 = Luxe.core.screen.height * .2;
			var end1 = Luxe.core.screen.height * .8;
			var _g4 = [];
			var _g22 = 0;
			while(_g22 < 3) {
				++_g22;
				_g4.push(start2 + (end1 - start2) * Math.random());
			}
			Builder.chicken(tmp1,Lambda.fold(_g4,function(sum1,el1) {
				return sum1 + el1;
			},.0) / 3,50 + 20 * Math.random(),0);
		}
	}
	,add_chicken: function(count) {
		var _g1 = 0;
		while(_g1 < count) {
			++_g1;
			var tmp = Luxe.core.screen.width * .25 * Math.random();
			var start = Luxe.core.screen.height * .2;
			var end = Luxe.core.screen.height * .8;
			var _g = [];
			var _g2 = 0;
			while(_g2 < 3) {
				++_g2;
				_g.push(start + (end - start) * Math.random());
			}
			Builder.chicken(tmp,Lambda.fold(_g,function(sum,el) {
				return sum + el;
			},.0) / 3,50 + 20 * Math.random(),0);
		}
	}
	,remove_chicken: function(count) {
		var _g1 = 0;
		while(_g1 < count) {
			++_g1;
			if(Builder.echo.entities.last() != null) {
				var _id_ = Builder.echo.entities.last();
				var _this = Builder.echo;
				if(_this.entitiesMap.exists(_id_)) {
					var _g_head = _this.views.h;
					while(_g_head != null) {
						var val = _g_head.item;
						_g_head = _g_head.next;
						val.removeIfMatch(_id_);
					}
					_this.entitiesMap.remove(_id_);
					_this.entities.remove(_id_);
				}
				ComponentHolder_$nape_$phys_$Body.__MAP.remove(_id_);
				ComponentHolder_$luxe_$Sprite.__MAP.remove(_id_);
				ComponentHolder_$components_$Status.__MAP.remove(_id_);
				ComponentHolder_$components_$Vel.__MAP.remove(_id_);
			}
		}
	}
	,init: function() {
		this.info_text = new lx_utils_LogText(true,false,14 * Luxe.core.screen.get_device_pixel_ratio(),new phoenix_Color().rgb(Std.random(16777215)));
		this.info_text.set_text("[R] to reload scene\n[Q/A][right/left tap] to add/remove chicken\n[D] to enable/disable debug nape draw");
	}
	,onenter: function(_) {
		Builder.echo.addSystem(new systems_Nape(Luxe.physics.nape.space));
		Builder.echo.addSystem(new systems_Gameplay(Luxe.physics.nape.space));
		Builder.echo.addSystem(new systems_Render());
		Builder.echo.addSystem(new systems_Destroy());
		this.build();
		if(this.info_text.get_scene() == null) {
			Luxe.scene.add(this.info_text);
		}
	}
	,onleave: function(_) {
		Lambda.iter(Builder.echo.systems,function(s) {
			Builder.echo.removeSystem(s);
		});
		Lambda.iter(Builder.echo.views,function(v) {
			Builder.echo.removeView(v);
		});
		Lambda.iter(Builder.echo.entities,function(i) {
			var _this = Builder.echo;
			if(_this.entitiesMap.exists(i)) {
				var _g_head = _this.views.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					val.removeIfMatch(i);
				}
				_this.entitiesMap.remove(i);
				_this.entities.remove(i);
			}
			ComponentHolder_$nape_$phys_$Body.__MAP.remove(i);
			ComponentHolder_$luxe_$Sprite.__MAP.remove(i);
			ComponentHolder_$components_$Status.__MAP.remove(i);
			ComponentHolder_$components_$Vel.__MAP.remove(i);
			ComponentHolder_$components_$Kill.__MAP.remove(i);
		});
		this.info_text.get_scene().remove(this.info_text);
	}
	,ontouchdown: function(e) {
		Log.log("touch x: " + e.x + ", y: " + e.y);
		if(e.x > .5) {
			this.add_chicken(8);
		} else {
			this.remove_chicken(8);
		}
	}
	,onmousedown: function(e) {
		Log.log("click x: " + e.x + ", y: " + e.y);
		if(e.x > Luxe.core.screen.get_mid().x) {
			this.add_chicken(8);
		} else {
			this.remove_chicken(8);
		}
	}
	,onkeyup: function(e) {
		switch(e.keycode) {
		case 97:
			this.remove_chicken(8);
			break;
		case 100:
			if(Builder.echo.systemsMap.exists(5)) {
				Builder.echo.removeSystem(Builder.echo.systemsMap.get(5));
			} else {
				Builder.echo.addSystem(new systems_NapeDebugDraw());
			}
			break;
		case 113:
			this.add_chicken(8);
			break;
		case 114:
			Lambda.iter(Builder.echo.entities,function(i) {
				var _this = Builder.echo;
				if(_this.entitiesMap.exists(i)) {
					var _g_head = _this.views.h;
					while(_g_head != null) {
						var val = _g_head.item;
						_g_head = _g_head.next;
						val.removeIfMatch(i);
					}
					_this.entitiesMap.remove(i);
					_this.entities.remove(i);
				}
				ComponentHolder_$nape_$phys_$Body.__MAP.remove(i);
				ComponentHolder_$luxe_$Sprite.__MAP.remove(i);
				ComponentHolder_$components_$Status.__MAP.remove(i);
				ComponentHolder_$components_$Vel.__MAP.remove(i);
				ComponentHolder_$components_$Kill.__MAP.remove(i);
			});
			this.build();
			break;
		default:
		}
	}
	,update: function(dt) {
		Builder.echo.update(dt);
		Log.track("echo","" + Std.string(Builder.echo));
	}
	,__class__: lx_GameState
});
var lx_Main = function() {
	luxe_Game.call(this);
};
$hxClasses["lx.Main"] = lx_Main;
lx_Main.__name__ = ["lx","Main"];
lx_Main.__super__ = luxe_Game;
lx_Main.prototype = $extend(luxe_Game.prototype,{
	config: function(config) {
		config.window.fullscreen = true;
		config.window.title = "chickens";
		return config;
	}
	,ready: function() {
		var logbat = Luxe.renderer.create_batcher({ name : "log"});
		var size = 14 * Luxe.core.screen.get_device_pixel_ratio();
		this.mon_text = new lx_utils_LogText(true,true,size,new phoenix_Color().rgb(Std.random(16777215)),logbat);
		this.log_text = new lx_utils_LogText(false,false,size,new phoenix_Color().rgb(Std.random(16777215)),logbat);
		Log.log("ready");
		new lx_loading_ArcProgress(new luxe_Parcel({ load_time_spacing : .5, load_start_delay : .5, textures : [{ id : "assets/sprites.png"}], texts : [{ id : "assets/sprites.atlas"}]}),new phoenix_Color().rgb(Std.random(16777215)),$bind(this,this.start));
	}
	,start: function() {
		Builder.initialize();
		lx_Main.states = new luxe_States({ name : "states"});
		lx_Main.states.add(new lx_GameState());
		lx_Main.states.set("game");
	}
	,update: function(dt) {
		Log.track("dt",Log.fpretty(dt,3));
		Log.track("render","" + Std.string(Luxe.renderer.stats));
		this.mon_text.set_text(Log.getTracks());
		this.log_text.set_text(Log.getLogs(50));
	}
	,onwindowsized: function(e) {
		Luxe.camera.set_viewport(new phoenix_Rectangle(0,0,e.x,e.y));
	}
	,__class__: lx_Main
});
var lx_components_Frame = function(frame) {
	this.uvcache = new phoenix_Rectangle();
	this.frame = frame;
	luxe_Component.call(this);
};
$hxClasses["lx.components.Frame"] = lx_components_Frame;
lx_components_Frame.__name__ = ["lx","components","Frame"];
lx_components_Frame.__super__ = luxe_Component;
lx_components_Frame.prototype = $extend(luxe_Component.prototype,{
	onadded: function() {
		this.sprite = this.get_entity();
	}
	,init: function() {
		this.uvcache.set(this.frame.x,this.frame.y,this.frame.w,this.frame.h);
		var _ratio_x = this.frame.sw / this.sprite.size.x;
		var _ratio_y = this.frame.sh / this.sprite.size.y;
		var _this = this.sprite.geometry.transform.local.scale;
		var _x = this.frame.w / this.frame.sw * this.sprite.get_scale().x;
		_this.x = _x;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_x);
			}
		}
		var _this1 = this.sprite.geometry.transform.local.scale;
		var _y = this.frame.h / this.frame.sh * this.sprite.get_scale().y;
		_this1.y = _y;
		if(!_this1._construct) {
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(_y);
			}
		}
		var _pos_x = this.sprite.flipx ? this.sprite.get_origin().x * _ratio_x + (this.sprite.get_origin().x * _ratio_x - this.frame.sx - this.frame.w) : this.frame.sx;
		var _pos_y = this.sprite.flipy ? this.sprite.get_origin().y * _ratio_y + (this.sprite.get_origin().y * _ratio_y - this.frame.sy - this.frame.h) : this.frame.sy;
		var _this2 = this.sprite.geometry.transform.origin;
		var _x1 = this.sprite.geometry.transform.local.scale;
		var _x2 = -(_pos_x / _ratio_x * this.sprite.get_scale().x) / _x1.x;
		_this2.x = _x2;
		if(!_this2._construct) {
			if(_this2.listen_x != null && !_this2.ignore_listeners) {
				_this2.listen_x(_x2);
			}
		}
		var _this3 = this.sprite.geometry.transform.origin;
		var _y1 = this.sprite.geometry.transform.local.scale;
		var _y2 = -(_pos_y / _ratio_y * this.sprite.get_scale().y) / _y1.y;
		_this3.y = _y2;
		if(!_this3._construct) {
			if(_this3.listen_y != null && !_this3.ignore_listeners) {
				_this3.listen_y(_y2);
			}
		}
		this.sprite.set_uv(this.uvcache);
	}
	,ondestroy: function() {
		luxe_Component.prototype.ondestroy.call(this);
	}
	,onremoved: function() {
		luxe_Component.prototype.onremoved.call(this);
	}
	,__class__: lx_components_Frame
});
var lx_components_Animation = function(frames,speed,loop,play) {
	if(play == null) {
		play = true;
	}
	if(loop == null) {
		loop = true;
	}
	this.anim = new spritesheet_Animation(frames,speed,loop,play);
	this.index = 0;
	var _this = this.anim;
	lx_components_Frame.call(this,_this.frames[_this.index]);
};
$hxClasses["lx.components.Animation"] = lx_components_Animation;
lx_components_Animation.__name__ = ["lx","components","Animation"];
lx_components_Animation.__super__ = lx_components_Frame;
lx_components_Animation.prototype = $extend(lx_components_Frame.prototype,{
	update: function(dt) {
		this.anim.update(dt);
		if(this.index != this.anim.index) {
			var _this = this.anim;
			this.frame = _this.frames[_this.index];
			this.index = this.anim.index;
			this.uvcache.set(this.frame.x,this.frame.y,this.frame.w,this.frame.h);
			var _ratio_x = this.frame.sw / this.sprite.size.x;
			var _ratio_y = this.frame.sh / this.sprite.size.y;
			var _this1 = this.sprite.geometry.transform.local.scale;
			var _x = this.frame.w / this.frame.sw * this.sprite.get_scale().x;
			_this1.x = _x;
			if(!_this1._construct) {
				if(_this1.listen_x != null && !_this1.ignore_listeners) {
					_this1.listen_x(_x);
				}
			}
			var _this2 = this.sprite.geometry.transform.local.scale;
			var _y = this.frame.h / this.frame.sh * this.sprite.get_scale().y;
			_this2.y = _y;
			if(!_this2._construct) {
				if(_this2.listen_y != null && !_this2.ignore_listeners) {
					_this2.listen_y(_y);
				}
			}
			var _pos_x = this.sprite.flipx ? this.sprite.get_origin().x * _ratio_x + (this.sprite.get_origin().x * _ratio_x - this.frame.sx - this.frame.w) : this.frame.sx;
			var _pos_y = this.sprite.flipy ? this.sprite.get_origin().y * _ratio_y + (this.sprite.get_origin().y * _ratio_y - this.frame.sy - this.frame.h) : this.frame.sy;
			var _this3 = this.sprite.geometry.transform.origin;
			var _x1 = this.sprite.geometry.transform.local.scale;
			var _x2 = -(_pos_x / _ratio_x * this.sprite.get_scale().x) / _x1.x;
			_this3.x = _x2;
			if(!_this3._construct) {
				if(_this3.listen_x != null && !_this3.ignore_listeners) {
					_this3.listen_x(_x2);
				}
			}
			var _this4 = this.sprite.geometry.transform.origin;
			var _y1 = this.sprite.geometry.transform.local.scale;
			var _y2 = -(_pos_y / _ratio_y * this.sprite.get_scale().y) / _y1.y;
			_this4.y = _y2;
			if(!_this4._construct) {
				if(_this4.listen_y != null && !_this4.ignore_listeners) {
					_this4.listen_y(_y2);
				}
			}
			this.sprite.set_uv(this.uvcache);
		}
	}
	,init: function() {
		lx_components_Frame.prototype.init.call(this);
	}
	,ondestroy: function() {
		lx_components_Frame.prototype.ondestroy.call(this);
	}
	,onremoved: function() {
		lx_components_Frame.prototype.onremoved.call(this);
	}
	,__class__: lx_components_Animation
});
var lx_loading_ArcProgress = function(parcel,color,cb) {
	this.value = .01;
	luxe_ParcelProgress.call(this,{ parcel : parcel, no_visuals : true, oncomplete : null});
	this.cb = cb;
	this.s = new luxe_Sprite({ pos : Luxe.core.screen.get_mid(), centered : true, color : color, no_scene : true, geometry : Luxe.draw.arc({ immediate : true, x : 0.0, y : 0.0, r : 100.0, start_angle : 0.0, end_angle : 1.0})});
	this.t = new luxe_Text({ pos : Luxe.core.screen.get_mid(), color : color, text : "...", align : 2, align_vertical : 2, point_size : 14 * Luxe.core.screen.get_device_pixel_ratio()});
	parcel.load();
};
$hxClasses["lx.loading.ArcProgress"] = lx_loading_ArcProgress;
lx_loading_ArcProgress.__name__ = ["lx","loading","ArcProgress"];
lx_loading_ArcProgress.__super__ = luxe_ParcelProgress;
lx_loading_ArcProgress.prototype = $extend(luxe_ParcelProgress.prototype,{
	upd: function(dt) {
		this.t.set_text("" + Math.floor(this.value * 100) + "%");
		var _g = this.s;
		_g.set_rotation_z(_g.get_rotation_z() + 360 * dt);
		this.s.set_geometry(Luxe.draw.arc({ immediate : true, x : 0.0, y : 0.0, r : 100.0, start_angle : 0.0, end_angle : this.value * 360}));
	}
	,complete: function() {
		Luxe.off(6,$bind(this,this.upd));
		this.s.destroy(true);
		this.t.destroy(true);
		this.cb();
		this.cb = null;
	}
	,onbegin: function(_parcel) {
		luxe_ParcelProgress.prototype.onbegin.call(this,_parcel);
		Luxe.on(6,$bind(this,this.upd));
	}
	,onprogress: function(_state) {
		luxe_ParcelProgress.prototype.onprogress.call(this,_state);
		luxe_tween_Actuate.tween(this,.3,{ value : _state.index / _state.total});
	}
	,oncomplete: function(_parcel) {
		luxe_tween_Actuate.tween(this,.3,{ value : 1.0}).onComplete($bind(this,this.complete));
	}
	,__class__: lx_loading_ArcProgress
});
var lx_utils_LogText = function(l,t,size,color,batch,text) {
	if(size == null) {
		size = 14.0;
	}
	if(t == null) {
		t = true;
	}
	if(l == null) {
		l = true;
	}
	this.margin = 3.0;
	this.l = l;
	this.t = t;
	var tmp = new phoenix_Vector(this.l ? this.margin : Luxe.core.screen.width - this.margin,this.t ? this.margin : Luxe.core.screen.height - this.margin);
	var a = new phoenix_Color().rgb(15790320);
	luxe_Text.call(this,{ pos : tmp, align : l ? 0 : 1, align_vertical : t ? 3 : 4, color : color == null ? a : color, point_size : size, batcher : batch == null ? Luxe.renderer.batcher : batch, text : text == null ? "..." : text});
};
$hxClasses["lx.utils.LogText"] = lx_utils_LogText;
lx_utils_LogText.__name__ = ["lx","utils","LogText"];
lx_utils_LogText.__super__ = luxe_Text;
lx_utils_LogText.prototype = $extend(luxe_Text.prototype,{
	onwindowsized: function(e) {
		var _this = this.get_pos();
		var _x = this.l ? this.margin : Luxe.core.screen.width - this.margin;
		var _y = this.t ? this.margin : Luxe.core.screen.height - this.margin;
		var prev = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = _x;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_x);
			}
		}
		_this.y = _y;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_y);
			}
		}
		_this.ignore_listeners = prev;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
	}
	,init: function() {
		luxe_Text.prototype.init.call(this);
		this._listen(31,$bind(this,this.onwindowsized),true);
	}
	,ondestroy: function() {
		luxe_Text.prototype.ondestroy.call(this);
		this._unlisten(31,$bind(this,this.onwindowsized),true);
	}
	,__class__: lx_utils_LogText
});
var lx_utils_NapeDrawer = function() { };
$hxClasses["lx.utils.NapeDrawer"] = lx_utils_NapeDrawer;
lx_utils_NapeDrawer.__name__ = ["lx","utils","NapeDrawer"];
lx_utils_NapeDrawer.cir = function(c,color,solid,batch,imm,local) {
	if(local == null) {
		local = true;
	}
	if(imm == null) {
		imm = false;
	}
	if(solid == null) {
		solid = false;
	}
	var com;
	if(local) {
		if(c.zpp_inner.wrap_localCOM == null) {
			if(c.zpp_inner.type == 0) {
				c.zpp_inner.circle.setupLocalCOM();
			} else {
				c.zpp_inner.polygon.setupLocalCOM();
			}
		}
		com = c.zpp_inner.wrap_localCOM;
	} else {
		if(c.zpp_inner.wrap_worldCOM == null) {
			var x = c.zpp_inner.worldCOMx;
			var y = c.zpp_inner.worldCOMy;
			var ret;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret = new nape_geom_Vec2();
			} else {
				ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				var com1;
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				if(ret.zpp_inner.x == x) {
					var _this1 = ret.zpp_inner;
					if(_this1._validate != null) {
						_this1._validate();
					}
					com1 = ret.zpp_inner.y == y;
				} else {
					com1 = false;
				}
				if(!com1) {
					ret.zpp_inner.x = x;
					ret.zpp_inner.y = y;
					var _this2 = ret.zpp_inner;
					if(_this2._invalidate != null) {
						_this2._invalidate(_this2);
					}
				}
			}
			ret.zpp_inner.weak = false;
			c.zpp_inner.wrap_worldCOM = ret;
			c.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			c.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			c.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=c.zpp_inner,$bind($_,$_.getworldCOM));
		}
		com = c.zpp_inner.wrap_worldCOM;
	}
	var tmp = Luxe.draw;
	var _this3 = com.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp1 = com.zpp_inner.x;
	var _this4 = com.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	return tmp.ngon({ x : tmp1, y : com.zpp_inner.y, r : c.zpp_inner_zn.radius, sides : 15, solid : solid, batcher : batch, color : color, immediate : imm});
};
lx_utils_NapeDrawer.pol = function(p,color,solid,batch,imm,local) {
	if(local == null) {
		local = true;
	}
	if(imm == null) {
		imm = false;
	}
	if(solid == null) {
		solid = false;
	}
	var verts;
	if(local) {
		if(p.zpp_inner_zn.wrap_lverts == null) {
			p.zpp_inner_zn.getlverts();
		}
		verts = p.zpp_inner_zn.wrap_lverts;
	} else {
		if(p.zpp_inner_zn.wrap_gverts == null) {
			p.zpp_inner_zn.getgverts();
		}
		verts = p.zpp_inner_zn.wrap_gverts;
	}
	var com;
	if(local) {
		if(p.zpp_inner.wrap_localCOM == null) {
			if(p.zpp_inner.type == 0) {
				p.zpp_inner.circle.setupLocalCOM();
			} else {
				p.zpp_inner.polygon.setupLocalCOM();
			}
		}
		com = p.zpp_inner.wrap_localCOM;
	} else {
		if(p.zpp_inner.wrap_worldCOM == null) {
			var x = p.zpp_inner.worldCOMx;
			var y = p.zpp_inner.worldCOMy;
			var ret;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret = new nape_geom_Vec2();
			} else {
				ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				var com1;
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				if(ret.zpp_inner.x == x) {
					var _this1 = ret.zpp_inner;
					if(_this1._validate != null) {
						_this1._validate();
					}
					com1 = ret.zpp_inner.y == y;
				} else {
					com1 = false;
				}
				if(!com1) {
					ret.zpp_inner.x = x;
					ret.zpp_inner.y = y;
					var _this2 = ret.zpp_inner;
					if(_this2._invalidate != null) {
						_this2._invalidate(_this2);
					}
				}
			}
			ret.zpp_inner.weak = false;
			p.zpp_inner.wrap_worldCOM = ret;
			p.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			p.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			p.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=p.zpp_inner,$bind($_,$_.getworldCOM));
		}
		com = p.zpp_inner.wrap_worldCOM;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = verts.zpp_gl();
	while(_g2 < _g1) {
		var i = _g2++;
		var _this3 = verts.at(i);
		var _this4 = _this3.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		var tmp = _this3.zpp_inner.x;
		var _this5 = verts.at(i);
		var _this6 = _this5.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		_g.push(new phoenix_Vector(tmp,_this5.zpp_inner.y));
	}
	var _this7 = verts.at(0);
	var _this8 = _this7.zpp_inner;
	if(_this8._validate != null) {
		_this8._validate();
	}
	var tmp1 = _this7.zpp_inner.x;
	var _this9 = verts.at(0);
	var _this10 = _this9.zpp_inner;
	if(_this10._validate != null) {
		_this10._validate();
	}
	_g.push(new phoenix_Vector(tmp1,_this9.zpp_inner.y));
	var _this11 = com.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var tmp2 = com.zpp_inner.x;
	var _this12 = com.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	_g.push(new phoenix_Vector(tmp2,com.zpp_inner.y));
	return Luxe.draw.poly({ points : _g, solid : solid, batcher : batch, color : color, immediate : imm});
};
var nape_Config = function() { };
$hxClasses["nape.Config"] = nape_Config;
nape_Config.__name__ = ["nape","Config"];
var nape_callbacks_Callback = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Callback"] = nape_callbacks_Callback;
nape_callbacks_Callback.__name__ = ["nape","callbacks","Callback"];
nape_callbacks_Callback.prototype = {
	toString: function() {
		return "";
	}
	,__class__: nape_callbacks_Callback
};
var nape_callbacks_BodyCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.BodyCallback"] = nape_callbacks_BodyCallback;
nape_callbacks_BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
nape_callbacks_BodyCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_BodyCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret = "Cb:" + ["WAKE","SLEEP"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_BodyCallback
});
var nape_callbacks_Listener = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Listener"] = nape_callbacks_Listener;
nape_callbacks_Listener.__name__ = ["nape","callbacks","Listener"];
nape_callbacks_Listener.prototype = {
	toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == 0) {
			return "BodyListener{" + event + "::" + Std.string(this.zpp_inner.body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == 1) {
			return "ConstraintListener{" + event + "::" + Std.string(this.zpp_inner.constraint.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con = this.zpp_inner.interaction;
			var itype;
			switch(con.itype) {
			case 1:
				itype = "COLLISION";
				break;
			case 2:
				itype = "SENSOR";
				break;
			case 4:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == 2 ? "InteractionListener{" + event + "#" + itype + "::" + Std.string(con.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_zni.zpp_inner_zn.options2.outer) + "}" : "PreListener{" + itype + "::" + Std.string(con.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape_callbacks_Listener
};
var nape_callbacks_BodyListener = function() {
	this.zpp_inner_zn = null;
};
$hxClasses["nape.callbacks.BodyListener"] = nape_callbacks_BodyListener;
nape_callbacks_BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape_callbacks_BodyListener.__super__ = nape_callbacks_Listener;
nape_callbacks_BodyListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_BodyListener
});
var nape_callbacks_CbEvent = function() {
};
$hxClasses["nape.callbacks.CbEvent"] = nape_callbacks_CbEvent;
nape_callbacks_CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape_callbacks_CbEvent.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_PRE) {
			return "PRE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN) {
				return "BEGIN";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING) {
					return "ONGOING";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_END) {
						return "END";
					} else {
						if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
							return "WAKE";
						} else {
							if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
								return "SLEEP";
							} else {
								if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
									zpp_$nape_util_ZPP_$Flags.internal = true;
									zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
									zpp_$nape_util_ZPP_$Flags.internal = false;
								}
								if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK) {
									return "BREAK";
								} else {
									return "";
								}
							}
						}
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_CbEvent
};
var nape_callbacks_CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.CbTypeIterator"] = nape_callbacks_CbTypeIterator;
nape_callbacks_CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
nape_callbacks_CbTypeIterator.get = function(list) {
	var ret;
	if(nape_callbacks_CbTypeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CbTypeList.internal = true;
		var ret1 = new nape_callbacks_CbTypeIterator();
		zpp_$nape_util_ZPP_$CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_CbTypeIterator.zpp_pool;
		nape_callbacks_CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_CbTypeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_CbTypeIterator
};
var nape_callbacks_CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CbTypeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbTypeList"] = nape_callbacks_CbTypeList;
nape_callbacks_CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
nape_callbacks_CbTypeList.fromArray = function(array) {
	var ret = new nape_callbacks_CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_CbTypeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_CbTypeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
				nape_callbacks_CbTypeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_CbTypeList
};
var nape_callbacks_ConstraintCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.ConstraintCallback"] = nape_callbacks_ConstraintCallback;
nape_callbacks_ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
nape_callbacks_ConstraintCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_ConstraintCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret = "Cb:" + ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_ConstraintCallback
});
var nape_callbacks_ConstraintListener = function() {
	this.zpp_inner_zn = null;
};
$hxClasses["nape.callbacks.ConstraintListener"] = nape_callbacks_ConstraintListener;
nape_callbacks_ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape_callbacks_ConstraintListener.__super__ = nape_callbacks_Listener;
nape_callbacks_ConstraintListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_ConstraintListener
});
var nape_callbacks_InteractionCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.InteractionCallback"] = nape_callbacks_InteractionCallback;
nape_callbacks_InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
nape_callbacks_InteractionCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_InteractionCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret = "Cb:" + ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_InteractionCallback
});
var nape_callbacks_InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	var xevent = -1;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN) {
		xevent = 0;
	} else {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_END) {
			xevent = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING) {
				xevent = 6;
			}
		}
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),xevent,2);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID) {
					xtype = 4;
				} else {
					xtype = 7;
				}
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret1 = this.zpp_inner_zn.itype;
	if(ret1 == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	}
};
$hxClasses["nape.callbacks.InteractionListener"] = nape_callbacks_InteractionListener;
nape_callbacks_InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
nape_callbacks_InteractionListener.__super__ = nape_callbacks_Listener;
nape_callbacks_InteractionListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_InteractionListener
});
var nape_callbacks_InteractionType = function() {
};
$hxClasses["nape.callbacks.InteractionType"] = nape_callbacks_InteractionType;
nape_callbacks_InteractionType.__name__ = ["nape","callbacks","InteractionType"];
nape_callbacks_InteractionType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID) {
					return "FLUID";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_ANY) {
						return "ANY";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_InteractionType
};
var nape_callbacks_ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.ListenerIterator"] = nape_callbacks_ListenerIterator;
nape_callbacks_ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape_callbacks_ListenerIterator.get = function(list) {
	var ret;
	if(nape_callbacks_ListenerIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ListenerList.internal = true;
		var ret1 = new nape_callbacks_ListenerIterator();
		zpp_$nape_util_ZPP_$ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_ListenerIterator.zpp_pool;
		nape_callbacks_ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_ListenerIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_ListenerIterator
};
var nape_callbacks_ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ListenerList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.ListenerList"] = nape_callbacks_ListenerList;
nape_callbacks_ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape_callbacks_ListenerList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			if(cx_ite.elt == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_ListenerIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
				nape_callbacks_ListenerIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_ListenerList
};
var nape_callbacks_ListenerType = function() {
};
$hxClasses["nape.callbacks.ListenerType"] = nape_callbacks_ListenerType;
nape_callbacks_ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape_callbacks_ListenerType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_BODY) {
			return "BODY";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT) {
				return "CONSTRAINT";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION) {
					return "INTERACTION";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_PRE) {
						return "PRE";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_ListenerType
};
var nape_callbacks_OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) {
		this.including(includes);
	}
	if(excludes != null) {
		this.excluding(excludes);
	}
};
$hxClasses["nape.callbacks.OptionType"] = nape_callbacks_OptionType;
nape_callbacks_OptionType.__name__ = ["nape","callbacks","OptionType"];
nape_callbacks_OptionType.prototype = {
	including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		if(this.zpp_inner.wrap_includes == null) {
			this.zpp_inner.setup_includes();
		}
		var inc = this.zpp_inner.wrap_includes.toString();
		if(this.zpp_inner.wrap_excludes == null) {
			this.zpp_inner.setup_excludes();
		}
		return "@{" + inc + " excluding " + this.zpp_inner.wrap_excludes.toString() + "}";
	}
	,__class__: nape_callbacks_OptionType
};
var nape_callbacks_PreCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.PreCallback"] = nape_callbacks_PreCallback;
nape_callbacks_PreCallback.__name__ = ["nape","callbacks","PreCallback"];
nape_callbacks_PreCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_PreCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:PRE:";
		ret = "Cb:PRE:" + (":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString());
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_PreCallback
});
var nape_callbacks_PreFlag = function() {
};
$hxClasses["nape.callbacks.PreFlag"] = nape_callbacks_PreFlag;
nape_callbacks_PreFlag.__name__ = ["nape","callbacks","PreFlag"];
nape_callbacks_PreFlag.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
			return "ACCEPT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
				return "IGNORE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
					return "ACCEPT_ONCE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE) {
						return "IGNORE_ONCE";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_PreFlag
};
var nape_callbacks_PreListener = function() {
	this.zpp_inner_zn = null;
};
$hxClasses["nape.callbacks.PreListener"] = nape_callbacks_PreListener;
nape_callbacks_PreListener.__name__ = ["nape","callbacks","PreListener"];
nape_callbacks_PreListener.__super__ = nape_callbacks_Listener;
nape_callbacks_PreListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_PreListener
});
var nape_constraint_Constraint = function() { };
$hxClasses["nape.constraint.Constraint"] = nape_constraint_Constraint;
nape_constraint_Constraint.__name__ = ["nape","constraint","Constraint"];
nape_constraint_Constraint.prototype = {
	toString: function() {
		return "{Constraint}";
	}
	,__class__: nape_constraint_Constraint
};
var nape_constraint_ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.constraint.ConstraintIterator"] = nape_constraint_ConstraintIterator;
nape_constraint_ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape_constraint_ConstraintIterator.get = function(list) {
	var ret;
	if(nape_constraint_ConstraintIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConstraintList.internal = true;
		var ret1 = new nape_constraint_ConstraintIterator();
		zpp_$nape_util_ZPP_$ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape_constraint_ConstraintIterator.zpp_pool;
		nape_constraint_ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_constraint_ConstraintIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_constraint_ConstraintIterator
};
var nape_constraint_ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConstraintList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.constraint.ConstraintList"] = nape_constraint_ConstraintList;
nape_constraint_ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape_constraint_ConstraintList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,remove: function(obj) {
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			if(cx_ite.elt == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_constraint_ConstraintIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
				nape_constraint_ConstraintIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_constraint_ConstraintList
};
var nape_dynamics_Arbiter = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.Arbiter"] = nape_dynamics_Arbiter;
nape_dynamics_Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape_dynamics_Arbiter.prototype = {
	toString: function() {
		var ret = this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "CollisionArbiter" : this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID ? "FluidArbiter" : "SensorArbiter";
		if(this.zpp_inner.cleared) {
			return ret + "(object-pooled)";
		} else {
			var tmp = ret + "(" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws2.outer : this.zpp_inner.ws1.outer).toString() + "|" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws1.outer : this.zpp_inner.ws2.outer).toString() + ")" + (this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "[" + ["SD","DD"][this.zpp_inner.colarb.stat ? 0 : 1] + "]" : "") + "<-";
			var _g = this.zpp_inner.immState;
			var tmp1;
			if(_g == 5) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp1 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
			} else if(_g == 1) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp1 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			} else if(_g == 6) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp1 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp1 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
			}
			return tmp + tmp1.toString();
		}
	}
	,__class__: nape_dynamics_Arbiter
};
var nape_dynamics_ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ArbiterIterator"] = nape_dynamics_ArbiterIterator;
nape_dynamics_ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape_dynamics_ArbiterIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ArbiterIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ArbiterList.internal = true;
		var ret1 = new nape_dynamics_ArbiterIterator();
		zpp_$nape_util_ZPP_$ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ArbiterIterator.zpp_pool;
		nape_dynamics_ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ArbiterIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ArbiterIterator
};
var nape_dynamics_ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ArbiterList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ArbiterList"] = nape_dynamics_ArbiterList;
nape_dynamics_ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape_dynamics_ArbiterList.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				if(cx_ite.elt.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(!this.zpp_inner.at_ite.elt.active) this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(!this.zpp_inner.at_ite.elt.active) this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_dynamics_ArbiterIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
				nape_dynamics_ArbiterIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_ArbiterList
};
var nape_dynamics_ArbiterType = function() {
};
$hxClasses["nape.dynamics.ArbiterType"] = nape_dynamics_ArbiterType;
nape_dynamics_ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape_dynamics_ArbiterType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID) {
					return "FLUID";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_dynamics_ArbiterType
};
var nape_dynamics_CollisionArbiter = function() {
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.CollisionArbiter"] = nape_dynamics_CollisionArbiter;
nape_dynamics_CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape_dynamics_CollisionArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_CollisionArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	__class__: nape_dynamics_CollisionArbiter
});
var nape_dynamics_Contact = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.Contact"] = nape_dynamics_Contact;
nape_dynamics_Contact.__name__ = ["nape","dynamics","Contact"];
nape_dynamics_Contact.prototype = {
	toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) {
			return "{object-pooled}";
		} else {
			return "{Contact}";
		}
	}
	,__class__: nape_dynamics_Contact
};
var nape_dynamics_ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ContactIterator"] = nape_dynamics_ContactIterator;
nape_dynamics_ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape_dynamics_ContactIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ContactIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ContactList.internal = true;
		var ret1 = new nape_dynamics_ContactIterator();
		zpp_$nape_util_ZPP_$ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ContactIterator.zpp_pool;
		nape_dynamics_ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ContactIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ContactIterator
};
var nape_dynamics_ContactList = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ContactList"] = nape_dynamics_ContactList;
nape_dynamics_ContactList.__name__ = ["nape","dynamics","ContactList"];
nape_dynamics_ContactList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite = this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var _this = this.zpp_inner.at_ite;
				if(_this.active && _this.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var _this1 = this.zpp_inner.at_ite;
				if(_this1.active && _this1.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_ContactIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = 0;
				var cx_ite = _this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						_this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
				nape_dynamics_ContactIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i1 = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_ContactList
};
var nape_dynamics_FluidArbiter = function() {
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.FluidArbiter"] = nape_dynamics_FluidArbiter;
nape_dynamics_FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape_dynamics_FluidArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_FluidArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	__class__: nape_dynamics_FluidArbiter
});
var nape_dynamics_InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) {
		fluidMask = -1;
	}
	if(fluidGroup == null) {
		fluidGroup = 1;
	}
	if(sensorMask == null) {
		sensorMask = -1;
	}
	if(sensorGroup == null) {
		sensorGroup = 1;
	}
	if(collisionMask == null) {
		collisionMask = -1;
	}
	if(collisionGroup == null) {
		collisionGroup = 1;
	}
	this.zpp_inner = null;
	if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
	} else {
		this.zpp_inner = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
};
$hxClasses["nape.dynamics.InteractionFilter"] = nape_dynamics_InteractionFilter;
nape_dynamics_InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape_dynamics_InteractionFilter.prototype = {
	__class__: nape_dynamics_InteractionFilter
};
var nape_dynamics_InteractionGroup = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.InteractionGroup"] = nape_dynamics_InteractionGroup;
nape_dynamics_InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
nape_dynamics_InteractionGroup.prototype = {
	toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) {
			ret = "InteractionGroup" + ":ignore";
		}
		return ret;
	}
	,__class__: nape_dynamics_InteractionGroup
};
var nape_dynamics_InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.InteractionGroupIterator"] = nape_dynamics_InteractionGroupIterator;
nape_dynamics_InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
nape_dynamics_InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape_dynamics_InteractionGroupIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = true;
		var ret1 = new nape_dynamics_InteractionGroupIterator();
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_InteractionGroupIterator.zpp_pool;
		nape_dynamics_InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_InteractionGroupIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_InteractionGroupIterator
};
var nape_dynamics_InteractionGroupList = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.InteractionGroupList"] = nape_dynamics_InteractionGroupList;
nape_dynamics_InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
nape_dynamics_InteractionGroupList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_InteractionGroupIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
				nape_dynamics_InteractionGroupIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_InteractionGroupList
};
var nape_geom_AABB = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.AABB"] = nape_geom_AABB;
nape_geom_AABB.__name__ = ["nape","geom","AABB"];
nape_geom_AABB.prototype = {
	toString: function() {
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_AABB
};
var nape_geom_ConvexResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResult"] = nape_geom_ConvexResult;
nape_geom_ConvexResult.__name__ = ["nape","geom","ConvexResult"];
nape_geom_ConvexResult.prototype = {
	toString: function() {
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " toi: " + this.zpp_inner.toiDistance + " }";
	}
	,__class__: nape_geom_ConvexResult
};
var nape_geom_ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResultIterator"] = nape_geom_ConvexResultIterator;
nape_geom_ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
nape_geom_ConvexResultIterator.get = function(list) {
	var ret;
	if(nape_geom_ConvexResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConvexResultList.internal = true;
		var ret1 = new nape_geom_ConvexResultIterator();
		zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_ConvexResultIterator.zpp_pool;
		nape_geom_ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_ConvexResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_ConvexResultIterator
};
var nape_geom_ConvexResultList = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResultList"] = nape_geom_ConvexResultList;
nape_geom_ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
nape_geom_ConvexResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_ConvexResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
				nape_geom_ConvexResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_ConvexResultList
};
var nape_geom_GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var ret;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.forced = false;
				ret.x = x;
				ret.y = v.zpp_inner.y;
				var obj = ret;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var _g1 = vertices.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
					nape_geom_Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var ret1;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x1;
				ret1.y = v1.zpp_inner.y;
				var obj1 = ret1;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var verts = vertices.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y = vite1.y;
					var ret2;
					if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
						ret2 = new nape_geom_Vec2();
					} else {
						ret2 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret2.zpp_pool;
						ret2.zpp_pool = null;
					}
					if(ret2.zpp_inner == null) {
						var ret3;
						if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
							ret3 = new zpp_$nape_geom_ZPP_$Vec2();
						} else {
							ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.weak = false;
						ret3._immutable = false;
						ret3.x = x2;
						ret3.y = y;
						ret2.zpp_inner = ret3;
						ret2.zpp_inner.outer = ret2;
					} else {
						var tmp1;
						var _this4 = ret2.zpp_inner;
						if(_this4._validate != null) {
							_this4._validate();
						}
						if(ret2.zpp_inner.x == x2) {
							var _this5 = ret2.zpp_inner;
							if(_this5._validate != null) {
								_this5._validate();
							}
							tmp1 = ret2.zpp_inner.y == y;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret2.zpp_inner.x = x2;
							ret2.zpp_inner.y = y;
							var _this6 = ret2.zpp_inner;
							if(_this6._invalidate != null) {
								_this6._invalidate(_this6);
							}
						}
					}
					ret2.zpp_inner.weak = false;
					var v2 = ret2;
					vite1 = vite1.next;
					var _this7 = v2.zpp_inner;
					if(_this7._validate != null) {
						_this7._validate();
					}
					var x3 = v2.zpp_inner.x;
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var ret4;
					if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
						ret4 = new zpp_$nape_geom_ZPP_$GeomVert();
					} else {
						ret4 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.forced = false;
					ret4.x = x3;
					ret4.y = v2.zpp_inner.y;
					var obj2 = ret4;
					if(this.zpp_inner.vertices == null) {
						this.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					if(vite1 == verts) {
						break;
					}
				}
			}
		}
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv1 = vertices;
			var i = 0;
			while(i < lv1.length) {
				var cur = lv1[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv1.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv2 = vertices;
			if(lv2.zpp_inner._validate != null) {
				lv2.zpp_inner._validate();
			}
			var ins = lv2.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this9 = x4.outer;
						var inner2 = _this9.zpp_inner;
						_this9.zpp_inner.outer = null;
						_this9.zpp_inner = null;
						var o4 = _this9;
						o4.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
$hxClasses["nape.geom.GeomPoly"] = nape_geom_GeomPoly;
nape_geom_GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape_geom_GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly == null) {
		ret = new nape_geom_GeomPoly();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var ret1;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x;
				ret1.y = v.zpp_inner.y;
				var obj = ret1;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var _g1 = vertices.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
					nape_geom_Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var ret2;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret2 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret2 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.forced = false;
				ret2.x = x1;
				ret2.y = v1.zpp_inner.y;
				var obj1 = ret2;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var verts = vertices.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y = vite1.y;
					var ret3;
					if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
						ret3 = new nape_geom_Vec2();
					} else {
						ret3 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret3.zpp_pool;
						ret3.zpp_pool = null;
					}
					if(ret3.zpp_inner == null) {
						var ret4;
						if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
							ret4 = new zpp_$nape_geom_ZPP_$Vec2();
						} else {
							ret4 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret4.next;
							ret4.next = null;
						}
						ret4.weak = false;
						ret4._immutable = false;
						ret4.x = x2;
						ret4.y = y;
						ret3.zpp_inner = ret4;
						ret3.zpp_inner.outer = ret3;
					} else {
						var tmp1;
						var _this4 = ret3.zpp_inner;
						if(_this4._validate != null) {
							_this4._validate();
						}
						if(ret3.zpp_inner.x == x2) {
							var _this5 = ret3.zpp_inner;
							if(_this5._validate != null) {
								_this5._validate();
							}
							tmp1 = ret3.zpp_inner.y == y;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret3.zpp_inner.x = x2;
							ret3.zpp_inner.y = y;
							var _this6 = ret3.zpp_inner;
							if(_this6._invalidate != null) {
								_this6._invalidate(_this6);
							}
						}
					}
					ret3.zpp_inner.weak = false;
					var v2 = ret3;
					vite1 = vite1.next;
					var _this7 = v2.zpp_inner;
					if(_this7._validate != null) {
						_this7._validate();
					}
					var x3 = v2.zpp_inner.x;
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var ret5;
					if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
						ret5 = new zpp_$nape_geom_ZPP_$GeomVert();
					} else {
						ret5 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.forced = false;
					ret5.x = x3;
					ret5.y = v2.zpp_inner.y;
					var obj2 = ret5;
					if(ret.zpp_inner.vertices == null) {
						ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					if(!(vite1 != verts)) {
						break;
					}
				}
			}
		}
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv1 = vertices;
			var i = 0;
			while(i < lv1.length) {
				var cur = lv1[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv1.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv2 = vertices;
			if(lv2.zpp_inner._validate != null) {
				lv2.zpp_inner._validate();
			}
			var ins = lv2.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this9 = x4.outer;
						var inner2 = _this9.zpp_inner;
						_this9.zpp_inner.outer = null;
						_this9.zpp_inner = null;
						var o4 = _this9;
						o4.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape_geom_GeomPoly.prototype = {
	skipForward: function(times) {
		if(this.zpp_inner.vertices != null) {
			if(times > 0) {
				while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next;
			} else if(times < 0) {
				while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
			}
		}
		return this;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				if(v != this.zpp_inner.vertices) {
					ret += ",";
				}
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPoly
};
var nape_geom_GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.GeomPolyIterator"] = nape_geom_GeomPolyIterator;
nape_geom_GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape_geom_GeomPolyIterator.get = function(list) {
	var ret;
	if(nape_geom_GeomPolyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$GeomPolyList.internal = true;
		var ret1 = new nape_geom_GeomPolyIterator();
		zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_GeomPolyIterator.zpp_pool;
		nape_geom_GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_GeomPolyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_GeomPolyIterator
};
var nape_geom_GeomPolyList = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.GeomPolyList"] = nape_geom_GeomPolyList;
nape_geom_GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape_geom_GeomPolyList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_GeomPolyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
				nape_geom_GeomPolyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPolyList
};
var nape_geom_Mat23 = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.Mat23"] = nape_geom_Mat23;
nape_geom_Mat23.__name__ = ["nape","geom","Mat23"];
nape_geom_Mat23.prototype = {
	toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,__class__: nape_geom_Mat23
};
var nape_geom_MatMN = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.MatMN"] = nape_geom_MatMN;
nape_geom_MatMN.__name__ = ["nape","geom","MatMN"];
nape_geom_MatMN.prototype = {
	toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) {
				ret += "; ";
			}
			fst = false;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) ret += this.zpp_inner.x[i * this.zpp_inner.n + _g3++] + " ";
		}
		ret += "}";
		return ret;
	}
	,__class__: nape_geom_MatMN
};
var nape_geom_RayResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResult"] = nape_geom_RayResult;
nape_geom_RayResult.__name__ = ["nape","geom","RayResult"];
nape_geom_RayResult.prototype = {
	toString: function() {
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " distance: " + this.zpp_inner.toiDistance + " ?inner: " + Std.string(this.zpp_inner.inner) + " }";
	}
	,__class__: nape_geom_RayResult
};
var nape_geom_RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResultIterator"] = nape_geom_RayResultIterator;
nape_geom_RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape_geom_RayResultIterator.get = function(list) {
	var ret;
	if(nape_geom_RayResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$RayResultList.internal = true;
		var ret1 = new nape_geom_RayResultIterator();
		zpp_$nape_util_ZPP_$RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_RayResultIterator.zpp_pool;
		nape_geom_RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_RayResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_RayResultIterator
};
var nape_geom_RayResultList = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResultList"] = nape_geom_RayResultList;
nape_geom_RayResultList.__name__ = ["nape","geom","RayResultList"];
nape_geom_RayResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_RayResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_RayResultIterator.zpp_pool;
				nape_geom_RayResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_RayResultList
};
var nape_geom_Vec2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	var ret;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Vec2();
	} else {
		ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2"] = nape_geom_Vec2;
nape_geom_Vec2.__name__ = ["nape","geom","Vec2"];
nape_geom_Vec2.prototype = {
	toString: function() {
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_Vec2
};
var nape_geom_Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.Vec2Iterator"] = nape_geom_Vec2Iterator;
nape_geom_Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape_geom_Vec2Iterator.get = function(list) {
	var ret;
	if(nape_geom_Vec2Iterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$Vec2List.internal = true;
		var ret1 = new nape_geom_Vec2Iterator();
		zpp_$nape_util_ZPP_$Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_Vec2Iterator.zpp_pool;
		nape_geom_Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_Vec2Iterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_Vec2Iterator
};
var nape_geom_Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$Vec2List();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2List"] = nape_geom_Vec2List;
nape_geom_Vec2List.__name__ = ["nape","geom","Vec2List"];
nape_geom_Vec2List.fromArray = function(array) {
	var ret = new nape_geom_Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_Vec2List.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		var _this = this.zpp_inner.at_ite.elt;
		if(_this.outer == null) {
			_this.outer = new nape_geom_Vec2();
			var o = _this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			_this.outer.zpp_inner = _this;
		}
		return _this.outer;
	}
	,push: function(obj) {
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_geom_Vec2Iterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
				nape_geom_Vec2Iterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_Vec2List
};
var nape_geom_Vec3 = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.Vec3"] = nape_geom_Vec3;
nape_geom_Vec3.__name__ = ["nape","geom","Vec3"];
nape_geom_Vec3.prototype = {
	toString: function() {
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var tmp = "{ x: " + this.zpp_inner.x + " y: ";
		var _this1 = this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		var tmp1 = tmp + this.zpp_inner.y + " z: ";
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		return tmp1 + this.zpp_inner.z + " }";
	}
	,__class__: nape_geom_Vec3
};
var nape_geom_Winding = function() {
};
$hxClasses["nape.geom.Winding"] = nape_geom_Winding;
nape_geom_Winding.__name__ = ["nape","geom","Winding"];
nape_geom_Winding.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED) {
			return "UNDEFINED";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE) {
				return "CLOCKWISE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE) {
					return "ANTICLOCKWISE";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_geom_Winding
};
var nape_phys_Interactor = function() {
	this.zpp_inner_i = null;
};
$hxClasses["nape.phys.Interactor"] = nape_phys_Interactor;
nape_phys_Interactor.__name__ = ["nape","phys","Interactor"];
nape_phys_Interactor.prototype = {
	toString: function() {
		return "";
	}
	,__class__: nape_phys_Interactor
};
var nape_phys_Body = function(type,position) {
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		var _this = position.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.posx = position.zpp_inner.x;
		var _this1 = position.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	var type1;
	if(type == null) {
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		type1 = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
	} else {
		type1 = type;
	}
	this.zpp_inner.immutable_midstep("Body::type");
	if(zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type] != type1) {
		var ntype;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(type1 == zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC) {
			ntype = 2;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(type1 == zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC) {
				ntype = 3;
			} else {
				ntype = 1;
			}
		}
		if(ntype == 1 && this.zpp_inner.space != null) {
			this.zpp_inner.velx = 0;
			this.zpp_inner.vely = 0;
			this.zpp_inner.angvel = 0;
		}
		this.zpp_inner.invalidate_type();
		if(this.zpp_inner.space != null) {
			this.zpp_inner.space.transmitType(this.zpp_inner,ntype);
		} else {
			this.zpp_inner.type = ntype;
		}
	}
	if(position != null) {
		if(position.zpp_inner.weak) {
			var inner = position.zpp_inner;
			position.zpp_inner.outer = null;
			position.zpp_inner = null;
			position.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = position;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = inner;
		}
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY.zpp_inner);
};
$hxClasses["nape.phys.Body"] = nape_phys_Body;
nape_phys_Body.__name__ = ["nape","phys","Body"];
nape_phys_Body.__super__ = nape_phys_Interactor;
nape_phys_Body.prototype = $extend(nape_phys_Interactor.prototype,{
	setShapeFilters: function(filter) {
		this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var _this = cx_ite.elt.outer;
			_this.zpp_inner.immutable_midstep("Shape::filter");
			_this.zpp_inner.setFilter(filter.zpp_inner);
			_this.zpp_inner.filter.wrapper();
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,toString: function() {
		return (this.zpp_inner.world ? "(space::world" : "(" + (this.zpp_inner.type == 2 ? "dynamic" : this.zpp_inner.type == 1 ? "static" : "kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Body
});
var nape_phys_BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.BodyIterator"] = nape_phys_BodyIterator;
nape_phys_BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape_phys_BodyIterator.get = function(list) {
	var ret;
	if(nape_phys_BodyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$BodyList.internal = true;
		var ret1 = new nape_phys_BodyIterator();
		zpp_$nape_util_ZPP_$BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_BodyIterator.zpp_pool;
		nape_phys_BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_BodyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_BodyIterator
};
var nape_phys_BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$BodyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.BodyList"] = nape_phys_BodyList;
nape_phys_BodyList.__name__ = ["nape","phys","BodyList"];
nape_phys_BodyList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			if(cx_ite.elt == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_BodyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_BodyIterator.zpp_pool;
				nape_phys_BodyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_BodyList
};
var nape_phys_BodyType = function() {
};
$hxClasses["nape.phys.BodyType"] = nape_phys_BodyType;
nape_phys_BodyType.__name__ = ["nape","phys","BodyType"];
nape_phys_BodyType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.BodyType_STATIC) {
			return "STATIC";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC) {
				return "DYNAMIC";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC) {
					return "KINEMATIC";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_phys_BodyType
};
var nape_phys_Compound = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.phys.Compound"] = nape_phys_Compound;
nape_phys_Compound.__name__ = ["nape","phys","Compound"];
nape_phys_Compound.__super__ = nape_phys_Interactor;
nape_phys_Compound.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Compound
});
var nape_phys_CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.CompoundIterator"] = nape_phys_CompoundIterator;
nape_phys_CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
nape_phys_CompoundIterator.get = function(list) {
	var ret;
	if(nape_phys_CompoundIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CompoundList.internal = true;
		var ret1 = new nape_phys_CompoundIterator();
		zpp_$nape_util_ZPP_$CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_CompoundIterator.zpp_pool;
		nape_phys_CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_CompoundIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_CompoundIterator
};
var nape_phys_CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CompoundList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.CompoundList"] = nape_phys_CompoundList;
nape_phys_CompoundList.__name__ = ["nape","phys","CompoundList"];
nape_phys_CompoundList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,remove: function(obj) {
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			if(cx_ite.elt == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_CompoundIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_CompoundIterator.zpp_pool;
				nape_phys_CompoundIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_CompoundList
};
var nape_phys_FluidProperties = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.phys.FluidProperties"] = nape_phys_FluidProperties;
nape_phys_FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape_phys_FluidProperties.prototype = {
	toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,__class__: nape_phys_FluidProperties
};
var nape_phys_GravMassMode = function() {
};
$hxClasses["nape.phys.GravMassMode"] = nape_phys_GravMassMode;
nape_phys_GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape_phys_GravMassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED) {
				return "FIXED";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED) {
					return "SCALED";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_phys_GravMassMode
};
var nape_phys_InertiaMode = function() {
};
$hxClasses["nape.phys.InertiaMode"] = nape_phys_InertiaMode;
nape_phys_InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape_phys_InertiaMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_phys_InertiaMode
};
var nape_phys_InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.InteractorIterator"] = nape_phys_InteractorIterator;
nape_phys_InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
nape_phys_InteractorIterator.get = function(list) {
	var ret;
	if(nape_phys_InteractorIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractorList.internal = true;
		var ret1 = new nape_phys_InteractorIterator();
		zpp_$nape_util_ZPP_$InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_InteractorIterator.zpp_pool;
		nape_phys_InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_InteractorIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_InteractorIterator
};
var nape_phys_InteractorList = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.phys.InteractorList"] = nape_phys_InteractorList;
nape_phys_InteractorList.__name__ = ["nape","phys","InteractorList"];
nape_phys_InteractorList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_InteractorIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_InteractorIterator.zpp_pool;
				nape_phys_InteractorIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_InteractorList
};
var nape_phys_MassMode = function() {
};
$hxClasses["nape.phys.MassMode"] = nape_phys_MassMode;
nape_phys_MassMode.__name__ = ["nape","phys","MassMode"];
nape_phys_MassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.MassMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_phys_MassMode
};
var nape_phys_Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) {
		rollingFriction = 0.001;
	}
	if(density == null) {
		density = 1;
	}
	if(staticFriction == null) {
		staticFriction = 2.0;
	}
	if(dynamicFriction == null) {
		dynamicFriction = 1.0;
	}
	if(elasticity == null) {
		elasticity = 0.0;
	}
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_phys_ZPP_$Material();
	} else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(staticFriction != this.zpp_inner.staticFriction) {
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(density != this.zpp_inner.density * 1000) {
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
	}
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
};
$hxClasses["nape.phys.Material"] = nape_phys_Material;
nape_phys_Material.__name__ = ["nape","phys","Material"];
nape_phys_Material.wood = function() {
	return new nape_phys_Material(0.4,0.2,0.38,0.7,0.005);
};
nape_phys_Material.prototype = {
	toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,__class__: nape_phys_Material
};
var nape_shape_Shape = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
};
$hxClasses["nape.shape.Shape"] = nape_shape_Shape;
nape_shape_Shape.__name__ = ["nape","shape","Shape"];
nape_shape_Shape.__super__ = nape_phys_Interactor;
nape_shape_Shape.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		return (this.zpp_inner.type == 0 ? "Circle" : "Polygon") + "#" + this.zpp_inner_i.id;
	}
	,__class__: nape_shape_Shape
});
var nape_shape_Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.call(this);
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(radius != this.zpp_inner_zn.radius) {
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		var _this = localCOM.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		var _this1 = localCOM.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			var inner = localCOM.zpp_inner;
			localCOM.zpp_inner.outer = null;
			localCOM.zpp_inner = null;
			localCOM.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = localCOM;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = inner;
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
			this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material();
		} else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
		} else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
$hxClasses["nape.shape.Circle"] = nape_shape_Circle;
nape_shape_Circle.__name__ = ["nape","shape","Circle"];
nape_shape_Circle.__super__ = nape_shape_Shape;
nape_shape_Circle.prototype = $extend(nape_shape_Shape.prototype,{
	__class__: nape_shape_Circle
});
var nape_shape_Edge = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.shape.Edge"] = nape_shape_Edge;
nape_shape_Edge.__name__ = ["nape","shape","Edge"];
nape_shape_Edge.prototype = {
	toString: function() {
		if(this.zpp_inner.polygon == null) {
			return "Edge(object-pooled)";
		} else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			var _this = this.zpp_inner.polygon;
			if(_this.zip_gaxi) {
				if(_this.body != null) {
					_this.zip_gaxi = false;
					_this.validate_laxi();
					var _this1 = _this.body;
					if(_this1.zip_axis) {
						_this1.zip_axis = false;
						_this1.axisx = Math.sin(_this1.rot);
						_this1.axisy = Math.cos(_this1.rot);
					}
					if(_this.zip_gverts) {
						if(_this.body != null) {
							_this.zip_gverts = false;
							_this.validate_lverts();
							var _this2 = _this.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							var li = _this.lverts.next;
							var cx_ite = _this.gverts.next;
							while(cx_ite != null) {
								var g = cx_ite;
								var l = li;
								li = li.next;
								g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
								g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
								cx_ite = cx_ite.next;
							}
						}
					}
					var ite = _this.edges.head;
					var cx_ite1 = _this.gverts.next;
					var u = cx_ite1;
					cx_ite1 = cx_ite1.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var e = ite.elt;
						ite = ite.next;
						e.gp0 = u;
						e.gp1 = v;
						e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
						e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
						e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
						if(e.wrap_gnorm != null) {
							e.wrap_gnorm.zpp_inner.x = e.gnormx;
							e.wrap_gnorm.zpp_inner.y = e.gnormy;
						}
						e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
						e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
						u = v;
						cx_ite1 = cx_ite1.next;
					}
					var e1 = ite.elt;
					e1.gp0 = u;
					e1.gp1 = _this.gverts.next;
					e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
					e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
					e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
					if(e1.wrap_gnorm != null) {
						e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
						e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
					}
					e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
					e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
				}
			}
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape_shape_Edge
};
var nape_shape_EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.EdgeIterator"] = nape_shape_EdgeIterator;
nape_shape_EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape_shape_EdgeIterator.get = function(list) {
	var ret;
	if(nape_shape_EdgeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$EdgeList.internal = true;
		var ret1 = new nape_shape_EdgeIterator();
		zpp_$nape_util_ZPP_$EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_EdgeIterator.zpp_pool;
		nape_shape_EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_EdgeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_EdgeIterator
};
var nape_shape_EdgeList = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.shape.EdgeList"] = nape_shape_EdgeList;
nape_shape_EdgeList.__name__ = ["nape","shape","EdgeList"];
nape_shape_EdgeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			if(index == this.zpp_inner.user_length - 1) {
				index = index;
			} else {
				this.zpp_inner.valmod();
				if(this.zpp_inner.zip_length) {
					this.zpp_inner.zip_length = false;
					this.zpp_inner.user_length = this.zpp_inner.inner.length;
				}
				index = this.zpp_inner.user_length - 2 - index;
			}
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_EdgeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_EdgeIterator.zpp_pool;
				nape_shape_EdgeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_EdgeList
};
var nape_shape_Polygon = function() {
	this.zpp_inner_zn = null;
};
$hxClasses["nape.shape.Polygon"] = nape_shape_Polygon;
nape_shape_Polygon.__name__ = ["nape","shape","Polygon"];
nape_shape_Polygon.__super__ = nape_shape_Shape;
nape_shape_Polygon.prototype = $extend(nape_shape_Shape.prototype,{
	__class__: nape_shape_Polygon
});
var nape_shape_ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.ShapeIterator"] = nape_shape_ShapeIterator;
nape_shape_ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape_shape_ShapeIterator.get = function(list) {
	var ret;
	if(nape_shape_ShapeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ShapeList.internal = true;
		var ret1 = new nape_shape_ShapeIterator();
		zpp_$nape_util_ZPP_$ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_ShapeIterator.zpp_pool;
		nape_shape_ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_ShapeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		this.zpp_critical = true;
		if(this.zpp_i < _this.zpp_inner.user_length) {
			return true;
		} else {
			this.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_ShapeIterator
};
var nape_shape_ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ShapeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.ShapeList"] = nape_shape_ShapeList;
nape_shape_ShapeList.__name__ = ["nape","shape","ShapeList"];
nape_shape_ShapeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			if(cx_ite.elt == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_ShapeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < _this.zpp_inner.user_length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_ShapeIterator.zpp_pool;
				nape_shape_ShapeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_ShapeList
};
var nape_shape_ShapeType = function() {
};
$hxClasses["nape.shape.ShapeType"] = nape_shape_ShapeType;
nape_shape_ShapeType.__name__ = ["nape","shape","ShapeType"];
nape_shape_ShapeType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE) {
			return "CIRCLE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON) {
				return "POLYGON";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_shape_ShapeType
};
var nape_shape_ValidationResult = function() {
};
$hxClasses["nape.shape.ValidationResult"] = nape_shape_ValidationResult;
nape_shape_ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape_shape_ValidationResult.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
			return "VALID";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE) {
				return "DEGENERATE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE) {
					return "CONCAVE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING) {
						return "SELF_INTERSECTING";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_shape_ValidationResult
};
var nape_space_Broadphase = function() {
};
$hxClasses["nape.space.Broadphase"] = nape_space_Broadphase;
nape_space_Broadphase.__name__ = ["nape","space","Broadphase"];
nape_space_Broadphase.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE) {
			return "DYNAMIC_AABB_TREE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE) {
				return "SWEEP_AND_PRUNE";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_space_Broadphase
};
var nape_space_Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_space_ZPP_$Space(gravity == null ? null : gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			var inner = gravity.zpp_inner;
			gravity.zpp_inner.outer = null;
			gravity.zpp_inner = null;
			gravity.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = gravity;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = inner;
		}
	}
};
$hxClasses["nape.space.Space"] = nape_space_Space;
nape_space_Space.__name__ = ["nape","space","Space"];
nape_space_Space.prototype = {
	clear: function() {
		this.zpp_inner.clear();
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) {
			positionIterations = 10;
		}
		if(velocityIterations == null) {
			velocityIterations = 10;
		}
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,__class__: nape_space_Space
};
var phoenix_BatchState = function(_r) {
	this.batcher = _r;
	this.geom_state = new phoenix_geometry_GeometryState();
	this.last_geom_state = new phoenix_geometry_GeometryState();
};
$hxClasses["phoenix.BatchState"] = phoenix_BatchState;
phoenix_BatchState.__name__ = ["phoenix","BatchState"];
phoenix_BatchState.prototype = {
	deactivate: function(batcher) {
		if(this.last_texture_id != null) {
			Luxe.renderer.state.bindTexture2D(null);
		}
		Luxe.renderer.state.useProgram(null);
		if(this.is_clipping) {
			snow_modules_opengl_web_GL.gl.disable(3089);
		}
		snow_modules_opengl_web_GL.gl.blendFunc(770,771);
		snow_modules_opengl_web_GL.gl.blendEquation(32774);
	}
	,update: function(geom) {
		var _this = this.geom_state;
		var _other = this.last_geom_state;
		_other.dirty = _this.dirty;
		_other.dirty = true;
		_other.texture = _this.texture;
		_other.dirty = true;
		_other.shader = _this.shader;
		_other.depth = _this.depth;
		_other.dirty = true;
		_other.primitive_type = _this.primitive_type;
		_other.dirty = true;
		_other.clip = _this.clip;
		_other.dirty = true;
		_other.clip_x = _this.clip_x;
		_other.dirty = true;
		_other.clip_y = _this.clip_y;
		_other.dirty = true;
		_other.clip_w = _this.clip_w;
		_other.dirty = true;
		_other.clip_h = _this.clip_h;
		_other.dirty = true;
		_other.blend_src_alpha = _this.blend_src_alpha;
		_other.dirty = true;
		_other.blend_src_rgb = _this.blend_src_rgb;
		_other.dirty = true;
		_other.blend_dest_alpha = _this.blend_dest_alpha;
		_other.dirty = true;
		_other.blend_dest_rgb = _this.blend_dest_rgb;
		_other.ignore_blend = _this.ignore_blend;
		var _this1 = this.geom_state;
		var other = geom.state;
		if(_this1.depth != other.depth) {
			_this1.depth = other.depth;
		}
		if(_this1.texture != other.texture) {
			_this1.dirty = true;
			_this1.texture = other.texture;
		}
		if(_this1.shader != other.shader) {
			_this1.dirty = true;
			_this1.shader = other.shader;
		}
		if(_this1.primitive_type != other.primitive_type) {
			_this1.dirty = true;
			_this1.primitive_type = other.primitive_type;
		}
		if(_this1.clip != other.clip) {
			_this1.dirty = true;
			_this1.clip = other.clip;
		}
		if(_this1.clip_x != other.clip_x) {
			_this1.dirty = true;
			_this1.clip_x = other.clip_x;
		}
		if(_this1.clip_y != other.clip_y) {
			_this1.dirty = true;
			_this1.clip_y = other.clip_y;
		}
		if(_this1.clip_w != other.clip_w) {
			_this1.dirty = true;
			_this1.clip_w = other.clip_w;
		}
		if(_this1.clip_h != other.clip_h) {
			_this1.dirty = true;
			_this1.clip_h = other.clip_h;
		}
		if(_this1.blend_src_alpha != other.blend_src_alpha) {
			_this1.dirty = true;
			_this1.blend_src_alpha = other.blend_src_alpha;
		}
		if(_this1.blend_src_rgb != other.blend_src_rgb) {
			_this1.dirty = true;
			_this1.blend_src_rgb = other.blend_src_rgb;
		}
		if(_this1.blend_dest_alpha != other.blend_dest_alpha) {
			_this1.dirty = true;
			_this1.blend_dest_alpha = other.blend_dest_alpha;
		}
		if(_this1.blend_dest_rgb != other.blend_dest_rgb) {
			_this1.dirty = true;
			_this1.blend_dest_rgb = other.blend_dest_rgb;
		}
		if(_this1.ignore_blend != other.ignore_blend) {
			_this1.ignore_blend = other.ignore_blend;
		}
		if(this.geom_state.clip) {
			this.last_clip_rect = this.clip_rect;
			this.clip_rect = geom.clip_rect;
		}
		if(!this.geom_state.dirty) {
			return this.last_clip_rect != this.clip_rect;
		} else {
			return true;
		}
	}
	,__class__: phoenix_BatchState
};
var phoenix_Batcher = function(_r,_name,_max_verts) {
	if(_max_verts == null) {
		_max_verts = 16384;
	}
	if(_name == null) {
		_name = "";
	}
	this.normal_floats = 0;
	this.color_floats = 0;
	this.tcoord_floats = 0;
	this.pos_floats = 0;
	this.sequence = -1;
	this.show_stats = 1;
	this.name = "";
	this.visible_count = 0;
	this.static_batched_count = 0;
	this.dynamic_batched_count = 0;
	this.draw_calls = 0;
	this.vert_count = 0;
	this.max_floats = 0;
	this.max_verts = 0;
	this.tree_changed = false;
	this.layer = 0;
	this.enabled = true;
	this.id = Luxe.utils.uniqueid();
	this.renderer = _r;
	this.sequence = ++phoenix_Batcher._sequence_key;
	this.geometry = new luxe_structural_BalancedBST_$phoenix_$geometry_$GeometryKey_$phoenix_$geometry_$Geometry($bind(this,this.geometry_compare));
	this.emitter = new luxe_Emitter();
	this.max_verts = _max_verts;
	this.max_floats = this.max_verts * 4;
	this.pos_list = new Float32Array(this.max_floats);
	this.tcoord_list = new Float32Array(this.max_floats);
	this.color_list = new Float32Array(this.max_floats);
	this.view = this.renderer.camera;
	snow_modules_opengl_web_GL.gl.enableVertexAttribArray(0);
	snow_modules_opengl_web_GL.gl.enableVertexAttribArray(1);
	snow_modules_opengl_web_GL.gl.enableVertexAttribArray(2);
	if(_name.length == 0) {
		this.name = Luxe.utils.uniqueid();
	} else {
		this.name = _name;
	}
	this._dropped = [];
	this.renderer.stats.batchers++;
	phoenix_Batcher.all.push(this);
};
$hxClasses["phoenix.Batcher"] = phoenix_Batcher;
phoenix_Batcher.__name__ = ["phoenix","Batcher"];
phoenix_Batcher.prototype = {
	add: function(_geom,_force_add) {
		if(_force_add == null) {
			_force_add = false;
		}
		if(this.geometry.find(_geom.key) == null || _force_add) {
			if(!Lambda.has(_geom.batchers,this)) {
				_geom.batchers.push(this);
			}
			var _this = this.geometry;
			_this.root = _this.node_insert(_this.root,_geom.key,_geom);
			_this.root.color = false;
			_geom.added = true;
			this.tree_changed = true;
		}
	}
	,remove: function(_geom,_remove_batcher_from_geometry) {
		if(_remove_batcher_from_geometry == null) {
			_remove_batcher_from_geometry = true;
		}
		if(_remove_batcher_from_geometry) {
			HxOverrides.remove(_geom.batchers,this);
			if(_geom.batchers.length == 0) {
				_geom.added = false;
			}
		}
		var _node = this.geometry.root;
		if(_node == null) {
			0;
		} else {
			_node.nodecount;
		}
		this.geometry.remove(_geom.key);
		var _node1 = this.geometry.root;
		if(_node1 == null) {
			0;
		} else {
			_node1.nodecount;
		}
		this.tree_changed = true;
	}
	,batch: function(persist_immediate) {
		if(persist_immediate == null) {
			persist_immediate = false;
		}
		this.dynamic_batched_count = 0;
		this.static_batched_count = 0;
		this.visible_count = 0;
		this.pos_floats = 0;
		this.tcoord_floats = 0;
		this.color_floats = 0;
		this.normal_floats = 0;
		this.state = new phoenix_BatchState(this);
		var geom = null;
		var _g = this.geometry.iterator();
		while(_g.current == null || _g.rightest == null ? false : _g.tree.compare(_g.current.key,_g.rightest.key) <= 0) {
			var _temp = _g.current;
			var tmp;
			if(!(_g.current == null || _g.rightest == null ? false : _g.tree.compare(_g.current.key,_g.rightest.key) <= 0)) {
				tmp = null;
			} else if(_g.current.right != null) {
				var _node = _g.current.right;
				while(_node.left != null) _node = _node.left;
				tmp = _node;
			} else {
				var _next = null;
				var _temp1 = _g.tree.root;
				while(_temp1 != null) {
					var _comp = _g.tree.compare(_g.current.key,_temp1.key);
					if(_comp < 0) {
						_next = _temp1;
						_temp1 = _temp1.left;
					} else if(_comp > 0) {
						_temp1 = _temp1.right;
					} else {
						_g.current = _next;
						break;
					}
				}
				tmp = _next;
			}
			_g.current = tmp;
			var _geom = _temp.value;
			geom = _geom;
			if(_geom != null && !_geom.dropped) {
				if(this.state.update(_geom)) {
					var type = this.state.last_geom_state.primitive_type;
					if(this.pos_floats != 0) {
						if(this.pos_floats > this.max_floats) {
							throw new js__$Boot_HaxeError("uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).");
						}
						var _pos = new Float32Array(this.pos_list.buffer,0,this.pos_floats * 4 / 4 | 0);
						var _tcoords = new Float32Array(this.tcoord_list.buffer,0,this.tcoord_floats * 4 / 4 | 0);
						var _colors = new Float32Array(this.color_list.buffer,0,this.color_floats * 4 / 4 | 0);
						var _normals = null;
						this.submit_buffers(type,_pos,_tcoords,_colors,_normals);
						_pos = null;
						_tcoords = null;
						_colors = null;
						_normals = null;
						this.pos_floats = 0;
						this.tcoord_floats = 0;
						this.color_floats = 0;
						this.normal_floats = 0;
					}
				}
				var _this = this.state;
				if(_this.geom_state.dirty) {
					if(_this.geom_state.texture != null) {
						if(_this.last_texture_id != _this.geom_state.texture.id) {
							_this.last_texture_id = _this.geom_state.texture.id;
							if(_this.geom_state.texture.texture != null) {
								_this.geom_state.texture.bind();
							}
						}
					} else {
						Luxe.renderer.state.bindTexture2D(null);
						_this.last_texture_id = null;
					}
					var _shader = this.shader == null ? _this.geom_state.shader : this.shader;
					if(_shader == null) {
						if(_this.geom_state.texture != null) {
							_shader = this.renderer.shaders.textured.shader;
						} else {
							_shader = this.renderer.shaders.plain.shader;
						}
					}
					if(_this.last_shader_id != _shader.program) {
						if(!_shader.no_default_uniforms) {
							var _value = this.view.proj_arr;
							var _this1 = _shader.uniforms;
							var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_shader.program,"projectionMatrix");
							var _matrix4 = _this1.matrix4arrs.get("projectionMatrix");
							if(_matrix4 != null) {
								_matrix4.value = _value;
							} else {
								_matrix4 = new phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array("projectionMatrix",_value,_location);
								_this1.matrix4arrs.set("projectionMatrix",_matrix4);
							}
							_this1.dirty_matrix4arrs.push(_matrix4);
							var _value1 = this.view.view_inverse_arr;
							var _this2 = _shader.uniforms;
							var _location1 = snow_modules_opengl_web_GL.gl.getUniformLocation(_shader.program,"modelViewMatrix");
							var _matrix41 = _this2.matrix4arrs.get("modelViewMatrix");
							if(_matrix41 != null) {
								_matrix41.value = _value1;
							} else {
								_matrix41 = new phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array("modelViewMatrix",_value1,_location1);
								_this2.matrix4arrs.set("modelViewMatrix",_matrix41);
							}
							_this2.dirty_matrix4arrs.push(_matrix41);
						}
						_shader["use"]();
						_shader.uniforms.apply();
						Luxe.renderer.state.activeTexture(33984);
						_this.last_shader_id = _shader.program;
					}
					var blend_dirty = _this.last_blend_src_rgb != _this.geom_state.blend_src_rgb;
					if(!blend_dirty) {
						blend_dirty = _this.last_blend_src_alpha != _this.geom_state.blend_src_alpha;
					} else {
						blend_dirty = true;
					}
					if(!blend_dirty) {
						blend_dirty = _this.last_blend_dest_rgb != _this.geom_state.blend_dest_rgb;
					} else {
						blend_dirty = true;
					}
					if(!blend_dirty) {
						blend_dirty = _this.last_blend_dest_alpha != _this.geom_state.blend_dest_alpha;
					} else {
						blend_dirty = true;
					}
					if(blend_dirty && !_this.geom_state.ignore_blend) {
						_this.last_blend_src_rgb = _this.geom_state.blend_src_rgb;
						_this.last_blend_src_alpha = _this.geom_state.blend_src_alpha;
						_this.last_blend_dest_rgb = _this.geom_state.blend_dest_rgb;
						_this.last_blend_dest_alpha = _this.geom_state.blend_dest_alpha;
						snow_modules_opengl_web_GL.gl.blendFuncSeparate(_this.last_blend_src_rgb,_this.last_blend_dest_rgb,_this.last_blend_src_alpha,_this.last_blend_dest_alpha);
					}
				}
				if(_this.geom_state.clip) {
					if(!_this.is_clipping) {
						snow_modules_opengl_web_GL.gl.enable(3089);
						_this.is_clipping = true;
					}
					if(_this.clip_rect != null) {
						if(!_this.clip_rect.equal(_this.last_clip_rect)) {
							this.renderer.state.scissor(_this.clip_rect.x,_this.clip_rect.y,_this.clip_rect.w,_this.clip_rect.h);
						}
					}
				} else if(_this.is_clipping) {
					snow_modules_opengl_web_GL.gl.disable(3089);
					_this.is_clipping = false;
				}
				_this.geom_state.dirty = false;
				if(_geom.visible) {
					this.visible_count++;
					if(_geom.buffer_based) {
						this.visible_count--;
						continue;
					}
					if(_geom.locked) {
						var type1 = this.state.last_geom_state.primitive_type;
						if(this.pos_floats != 0) {
							if(this.pos_floats > this.max_floats) {
								throw new js__$Boot_HaxeError("uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).");
							}
							var _pos1 = new Float32Array(this.pos_list.buffer,0,this.pos_floats * 4 / 4 | 0);
							var _tcoords1 = new Float32Array(this.tcoord_list.buffer,0,this.tcoord_floats * 4 / 4 | 0);
							var _colors1 = new Float32Array(this.color_list.buffer,0,this.color_floats * 4 / 4 | 0);
							var _normals1 = null;
							this.submit_buffers(type1,_pos1,_tcoords1,_colors1,_normals1);
							_pos1 = null;
							_tcoords1 = null;
							_colors1 = null;
							_normals1 = null;
							this.pos_floats = 0;
							this.tcoord_floats = 0;
							this.color_floats = 0;
							this.normal_floats = 0;
						}
						if(_geom.vertices.length != 0) {
							if(_geom.update_buffers()) {
								snow_modules_opengl_web_GL.gl.bindBuffer(34962,_geom.vb_pos);
								snow_modules_opengl_web_GL.gl.vertexAttribPointer(0,4,5126,false,0,0);
								snow_modules_opengl_web_GL.gl.bufferData(34962,_geom.buffer_pos,_geom.buffer_type);
								snow_modules_opengl_web_GL.gl.bindBuffer(34962,_geom.vb_tcoords);
								snow_modules_opengl_web_GL.gl.vertexAttribPointer(1,4,5126,false,0,0);
								snow_modules_opengl_web_GL.gl.bufferData(34962,_geom.buffer_tcoords,_geom.buffer_type);
								snow_modules_opengl_web_GL.gl.bindBuffer(34962,_geom.vb_colors);
								snow_modules_opengl_web_GL.gl.vertexAttribPointer(2,4,5126,false,0,0);
								snow_modules_opengl_web_GL.gl.bufferData(34962,_geom.buffer_colors,_geom.buffer_type);
							} else {
								snow_modules_opengl_web_GL.gl.bindBuffer(34962,_geom.vb_pos);
								snow_modules_opengl_web_GL.gl.vertexAttribPointer(0,4,5126,false,0,0);
								snow_modules_opengl_web_GL.gl.bindBuffer(34962,_geom.vb_tcoords);
								snow_modules_opengl_web_GL.gl.vertexAttribPointer(1,4,5126,false,0,0);
								snow_modules_opengl_web_GL.gl.bindBuffer(34962,_geom.vb_colors);
								snow_modules_opengl_web_GL.gl.vertexAttribPointer(2,4,5126,false,0,0);
							}
							snow_modules_opengl_web_GL.gl.drawArrays(_geom.state.primitive_type,0,_geom.buffer_pos.length / 4 | 0);
							this.static_batched_count++;
							this.draw_calls++;
							_geom.set_dirty(false);
						}
						this.vert_count += _geom.vertices.length;
					} else if(_geom.state.primitive_type == 3 || _geom.state.primitive_type == 2 || _geom.state.primitive_type == 5 || _geom.state.primitive_type == 6) {
						if(_geom.vertices.length > this.max_verts) {
							_geom.set_locked(true);
							_geom.dirty_based = false;
							haxe_Log.trace("  i / batcher / " + ("WARNING batcher `" + this.name + "` trying to batch a geometry `" + _geom.id + "` that has more verts than the batcher has preallocated, (" + _geom.vertices.length + " vs max of " + this.max_verts + ")"),{ fileName : "Batcher.hx", lineNumber : 573, className : "phoenix.Batcher", methodName : "geometry_batch"});
							haxe_Log.trace("  i / batcher / " + "WARNING geometry has been marked as direct submit, and will be submitted independently!",{ fileName : "Batcher.hx", lineNumber : 574, className : "phoenix.Batcher", methodName : "geometry_batch"});
						} else {
							if(_geom.vertices.length + this.pos_floats / 4 > this.max_verts) {
								var type2 = _geom.state.primitive_type;
								if(this.pos_floats != 0) {
									if(this.pos_floats > this.max_floats) {
										throw new js__$Boot_HaxeError("uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).");
									}
									var _pos2 = new Float32Array(this.pos_list.buffer,0,this.pos_floats * 4 / 4 | 0);
									var _tcoords2 = new Float32Array(this.tcoord_list.buffer,0,this.tcoord_floats * 4 / 4 | 0);
									var _colors2 = new Float32Array(this.color_list.buffer,0,this.color_floats * 4 / 4 | 0);
									var _normals2 = null;
									this.submit_buffers(type2,_pos2,_tcoords2,_colors2,_normals2);
									_pos2 = null;
									_tcoords2 = null;
									_colors2 = null;
									_normals2 = null;
									this.pos_floats = 0;
									this.tcoord_floats = 0;
									this.color_floats = 0;
									this.normal_floats = 0;
								}
							}
							var vert_index = this.pos_floats;
							var tcoord_index = this.tcoord_floats;
							var color_index = this.color_floats;
							var vertlist = this.pos_list;
							var tcoordlist = this.tcoord_list;
							var colorlist = this.color_list;
							var _this3 = _geom.transform;
							if(!_this3._destroying) {
								if(_this3.parent != null && _this3.parent.dirty) {
									_this3.parent.clean_check();
								}
								if(_this3.dirty && !_this3._cleaning && !_this3.manual_update) {
									_this3.clean();
								}
							}
							var _el = _this3.world.matrix.elements;
							var _count = _geom.vertices.length;
							var _idx = 0;
							while(_idx < _count) {
								var v = _geom.vertices[_idx];
								var _vx = v.pos.x;
								var _vy = v.pos.y;
								var _vz = v.pos.z;
								var _tvy = _el[1] * _vx + _el[5] * _vy + _el[9] * _vz + _el[13];
								var _tvz = _el[2] * _vx + _el[6] * _vy + _el[10] * _vz + _el[14];
								vertlist[vert_index] = _el[0] * _vx + _el[4] * _vy + _el[8] * _vz + _el[12];
								vertlist[vert_index + 1] = _tvy;
								vertlist[vert_index + 2] = _tvz;
								vertlist[vert_index + 3] = v.pos.w;
								vert_index += 4;
								var _vuv = v.uv.uv0;
								tcoordlist[tcoord_index] = _vuv.u;
								tcoordlist[tcoord_index + 1] = _vuv.v;
								tcoordlist[tcoord_index + 2] = _vuv.w;
								tcoordlist[tcoord_index + 3] = _vuv.t;
								tcoord_index += 4;
								colorlist[color_index] = v.color.r;
								colorlist[color_index + 1] = v.color.g;
								colorlist[color_index + 2] = v.color.b;
								colorlist[color_index + 3] = v.color.a;
								color_index += 4;
								++_idx;
							}
							var _length = _geom.vertices.length * 4;
							this.pos_floats += _length;
							this.tcoord_floats += _length;
							this.color_floats += _length;
							this.normal_floats += _length;
						}
						var type3 = _geom.state.primitive_type;
						if(this.pos_floats != 0) {
							if(this.pos_floats > this.max_floats) {
								throw new js__$Boot_HaxeError("uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).");
							}
							var _pos3 = new Float32Array(this.pos_list.buffer,0,this.pos_floats * 4 / 4 | 0);
							var _tcoords3 = new Float32Array(this.tcoord_list.buffer,0,this.tcoord_floats * 4 / 4 | 0);
							var _colors3 = new Float32Array(this.color_list.buffer,0,this.color_floats * 4 / 4 | 0);
							var _normals3 = null;
							this.submit_buffers(type3,_pos3,_tcoords3,_colors3,_normals3);
							_pos3 = null;
							_tcoords3 = null;
							_colors3 = null;
							_normals3 = null;
							this.pos_floats = 0;
							this.tcoord_floats = 0;
							this.color_floats = 0;
							this.normal_floats = 0;
						}
						this.vert_count += _geom.vertices.length;
					} else {
						if(_geom.vertices.length > this.max_verts) {
							_geom.set_locked(true);
							_geom.dirty_based = false;
							haxe_Log.trace("  i / batcher / " + ("WARNING batcher `" + this.name + "` trying to batch a geometry `" + _geom.id + "` that has more verts than the batcher has preallocated, (" + _geom.vertices.length + " vs max of " + this.max_verts + ")"),{ fileName : "Batcher.hx", lineNumber : 573, className : "phoenix.Batcher", methodName : "geometry_batch"});
							haxe_Log.trace("  i / batcher / " + "WARNING geometry has been marked as direct submit, and will be submitted independently!",{ fileName : "Batcher.hx", lineNumber : 574, className : "phoenix.Batcher", methodName : "geometry_batch"});
						} else {
							if(_geom.vertices.length + this.pos_floats / 4 > this.max_verts) {
								var type4 = _geom.state.primitive_type;
								if(this.pos_floats != 0) {
									if(this.pos_floats > this.max_floats) {
										throw new js__$Boot_HaxeError("uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).");
									}
									var _pos4 = new Float32Array(this.pos_list.buffer,0,this.pos_floats * 4 / 4 | 0);
									var _tcoords4 = new Float32Array(this.tcoord_list.buffer,0,this.tcoord_floats * 4 / 4 | 0);
									var _colors4 = new Float32Array(this.color_list.buffer,0,this.color_floats * 4 / 4 | 0);
									var _normals4 = null;
									this.submit_buffers(type4,_pos4,_tcoords4,_colors4,_normals4);
									_pos4 = null;
									_tcoords4 = null;
									_colors4 = null;
									_normals4 = null;
									this.pos_floats = 0;
									this.tcoord_floats = 0;
									this.color_floats = 0;
									this.normal_floats = 0;
								}
							}
							var vert_index1 = this.pos_floats;
							var tcoord_index1 = this.tcoord_floats;
							var color_index1 = this.color_floats;
							var vertlist1 = this.pos_list;
							var tcoordlist1 = this.tcoord_list;
							var colorlist1 = this.color_list;
							var _this4 = _geom.transform;
							if(!_this4._destroying) {
								if(_this4.parent != null && _this4.parent.dirty) {
									_this4.parent.clean_check();
								}
								if(_this4.dirty && !_this4._cleaning && !_this4.manual_update) {
									_this4.clean();
								}
							}
							var _el1 = _this4.world.matrix.elements;
							var _count1 = _geom.vertices.length;
							var _idx1 = 0;
							while(_idx1 < _count1) {
								var v1 = _geom.vertices[_idx1];
								var _vx1 = v1.pos.x;
								var _vy1 = v1.pos.y;
								var _vz1 = v1.pos.z;
								var _tvy1 = _el1[1] * _vx1 + _el1[5] * _vy1 + _el1[9] * _vz1 + _el1[13];
								var _tvz1 = _el1[2] * _vx1 + _el1[6] * _vy1 + _el1[10] * _vz1 + _el1[14];
								vertlist1[vert_index1] = _el1[0] * _vx1 + _el1[4] * _vy1 + _el1[8] * _vz1 + _el1[12];
								vertlist1[vert_index1 + 1] = _tvy1;
								vertlist1[vert_index1 + 2] = _tvz1;
								vertlist1[vert_index1 + 3] = v1.pos.w;
								vert_index1 += 4;
								var _vuv1 = v1.uv.uv0;
								tcoordlist1[tcoord_index1] = _vuv1.u;
								tcoordlist1[tcoord_index1 + 1] = _vuv1.v;
								tcoordlist1[tcoord_index1 + 2] = _vuv1.w;
								tcoordlist1[tcoord_index1 + 3] = _vuv1.t;
								tcoord_index1 += 4;
								colorlist1[color_index1] = v1.color.r;
								colorlist1[color_index1 + 1] = v1.color.g;
								colorlist1[color_index1 + 2] = v1.color.b;
								colorlist1[color_index1 + 3] = v1.color.a;
								color_index1 += 4;
								++_idx1;
							}
							var _length1 = _geom.vertices.length * 4;
							this.pos_floats += _length1;
							this.tcoord_floats += _length1;
							this.color_floats += _length1;
							this.normal_floats += _length1;
						}
						this.dynamic_batched_count++;
						this.vert_count += _geom.vertices.length;
					}
					if(!persist_immediate && _geom.immediate) {
						_geom.dropped = true;
						this._dropped.push(_geom);
					}
				}
			}
		}
		if(this.pos_floats > 0 && geom != null) {
			this.state.update(geom);
			var _this5 = this.state;
			if(_this5.geom_state.dirty) {
				if(_this5.geom_state.texture != null) {
					if(_this5.last_texture_id != _this5.geom_state.texture.id) {
						_this5.last_texture_id = _this5.geom_state.texture.id;
						if(_this5.geom_state.texture.texture != null) {
							_this5.geom_state.texture.bind();
						}
					}
				} else {
					Luxe.renderer.state.bindTexture2D(null);
					_this5.last_texture_id = null;
				}
				var _shader1 = this.shader == null ? _this5.geom_state.shader : this.shader;
				if(_shader1 == null) {
					if(_this5.geom_state.texture != null) {
						_shader1 = this.renderer.shaders.textured.shader;
					} else {
						_shader1 = this.renderer.shaders.plain.shader;
					}
				}
				if(_this5.last_shader_id != _shader1.program) {
					if(!_shader1.no_default_uniforms) {
						var _value2 = this.view.proj_arr;
						var _this6 = _shader1.uniforms;
						var _location2 = snow_modules_opengl_web_GL.gl.getUniformLocation(_shader1.program,"projectionMatrix");
						var _matrix42 = _this6.matrix4arrs.get("projectionMatrix");
						if(_matrix42 != null) {
							_matrix42.value = _value2;
						} else {
							_matrix42 = new phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array("projectionMatrix",_value2,_location2);
							_this6.matrix4arrs.set("projectionMatrix",_matrix42);
						}
						_this6.dirty_matrix4arrs.push(_matrix42);
						var _value3 = this.view.view_inverse_arr;
						var _this7 = _shader1.uniforms;
						var _location3 = snow_modules_opengl_web_GL.gl.getUniformLocation(_shader1.program,"modelViewMatrix");
						var _matrix43 = _this7.matrix4arrs.get("modelViewMatrix");
						if(_matrix43 != null) {
							_matrix43.value = _value3;
						} else {
							_matrix43 = new phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array("modelViewMatrix",_value3,_location3);
							_this7.matrix4arrs.set("modelViewMatrix",_matrix43);
						}
						_this7.dirty_matrix4arrs.push(_matrix43);
					}
					_shader1["use"]();
					_shader1.uniforms.apply();
					Luxe.renderer.state.activeTexture(33984);
					_this5.last_shader_id = _shader1.program;
				}
				var blend_dirty1 = _this5.last_blend_src_rgb != _this5.geom_state.blend_src_rgb;
				if(!blend_dirty1) {
					blend_dirty1 = _this5.last_blend_src_alpha != _this5.geom_state.blend_src_alpha;
				} else {
					blend_dirty1 = true;
				}
				if(!blend_dirty1) {
					blend_dirty1 = _this5.last_blend_dest_rgb != _this5.geom_state.blend_dest_rgb;
				} else {
					blend_dirty1 = true;
				}
				if(!blend_dirty1) {
					blend_dirty1 = _this5.last_blend_dest_alpha != _this5.geom_state.blend_dest_alpha;
				} else {
					blend_dirty1 = true;
				}
				if(blend_dirty1 && !_this5.geom_state.ignore_blend) {
					_this5.last_blend_src_rgb = _this5.geom_state.blend_src_rgb;
					_this5.last_blend_src_alpha = _this5.geom_state.blend_src_alpha;
					_this5.last_blend_dest_rgb = _this5.geom_state.blend_dest_rgb;
					_this5.last_blend_dest_alpha = _this5.geom_state.blend_dest_alpha;
					snow_modules_opengl_web_GL.gl.blendFuncSeparate(_this5.last_blend_src_rgb,_this5.last_blend_dest_rgb,_this5.last_blend_src_alpha,_this5.last_blend_dest_alpha);
				}
			}
			if(_this5.geom_state.clip) {
				if(!_this5.is_clipping) {
					snow_modules_opengl_web_GL.gl.enable(3089);
					_this5.is_clipping = true;
				}
				if(_this5.clip_rect != null) {
					if(!_this5.clip_rect.equal(_this5.last_clip_rect)) {
						this.renderer.state.scissor(_this5.clip_rect.x,_this5.clip_rect.y,_this5.clip_rect.w,_this5.clip_rect.h);
					}
				}
			} else if(_this5.is_clipping) {
				snow_modules_opengl_web_GL.gl.disable(3089);
				_this5.is_clipping = false;
			}
			_this5.geom_state.dirty = false;
			var type5 = this.state.last_geom_state.primitive_type;
			if(this.pos_floats != 0) {
				if(this.pos_floats > this.max_floats) {
					throw new js__$Boot_HaxeError("uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).");
				}
				var _pos5 = new Float32Array(this.pos_list.buffer,0,this.pos_floats * 4 / 4 | 0);
				var _tcoords5 = new Float32Array(this.tcoord_list.buffer,0,this.tcoord_floats * 4 / 4 | 0);
				var _colors5 = new Float32Array(this.color_list.buffer,0,this.color_floats * 4 / 4 | 0);
				var _normals5 = null;
				this.submit_buffers(type5,_pos5,_tcoords5,_colors5,_normals5);
				_pos5 = null;
				_tcoords5 = null;
				_colors5 = null;
				_normals5 = null;
				this.pos_floats = 0;
				this.tcoord_floats = 0;
				this.color_floats = 0;
				this.normal_floats = 0;
			}
		}
		this.state.deactivate(this);
		this.state = null;
		if(this._dropped.length > 0) {
			var _g1 = 0;
			var _g11 = this._dropped;
			while(_g1 < _g11.length) {
				var geom1 = _g11[_g1];
				++_g1;
				geom1.drop();
				geom1 = null;
			}
			this._dropped = null;
			this._dropped = [];
		}
	}
	,submit_buffers: function(type,_pos,_tcoords,_colors,_normals) {
		var pb = snow_modules_opengl_web_GL.gl.createBuffer();
		var cb = snow_modules_opengl_web_GL.gl.createBuffer();
		var tb = snow_modules_opengl_web_GL.gl.createBuffer();
		snow_modules_opengl_web_GL.gl.bindBuffer(34962,pb);
		snow_modules_opengl_web_GL.gl.vertexAttribPointer(0,4,5126,false,0,0);
		snow_modules_opengl_web_GL.gl.bufferData(34962,_pos,35040);
		snow_modules_opengl_web_GL.gl.bindBuffer(34962,tb);
		snow_modules_opengl_web_GL.gl.vertexAttribPointer(1,4,5126,false,0,0);
		snow_modules_opengl_web_GL.gl.bufferData(34962,_tcoords,35040);
		snow_modules_opengl_web_GL.gl.bindBuffer(34962,cb);
		snow_modules_opengl_web_GL.gl.vertexAttribPointer(2,4,5126,false,0,0);
		snow_modules_opengl_web_GL.gl.bufferData(34962,_colors,35040);
		snow_modules_opengl_web_GL.gl.drawArrays(type,0,_pos.length / 4 | 0);
		snow_modules_opengl_web_GL.gl.deleteBuffer(pb);
		snow_modules_opengl_web_GL.gl.deleteBuffer(cb);
		snow_modules_opengl_web_GL.gl.deleteBuffer(tb);
		this.draw_calls++;
	}
	,geometry_compare: function(a,b) {
		if(a.uuid == b.uuid) {
			return 0;
		}
		if(a.depth < b.depth) {
			return -1;
		}
		if(a.depth > b.depth) {
			return 1;
		}
		if(a.shader != null && b.shader != null) {
			if(a.shader.id < b.shader.id) {
				return -1;
			}
			if(a.shader.id > b.shader.id) {
				return 1;
			}
		} else if(a.shader != null && b.shader == null) {
			return 1;
		} else if(a.shader == null && b.shader != null) {
			return -1;
		}
		if(a.texture != null && b.texture != null) {
			if(a.texture.id < b.texture.id) {
				return -1;
			}
			if(a.texture.id > b.texture.id) {
				return 1;
			}
		} else if(a.texture != null && b.texture == null) {
			return 1;
		} else if(a.texture == null && b.texture != null) {
			return -1;
		}
		var a_primitive_index = a.primitive_type;
		var b_primitive_index = b.primitive_type;
		if(a_primitive_index < b_primitive_index) {
			return -1;
		}
		if(a_primitive_index > b_primitive_index) {
			return 1;
		}
		if(a.clip != b.clip) {
			if(a.clip == false && b.clip == true) {
				return 1;
			} else if(a.clip == true && b.clip == false) {
				return -1;
			}
		}
		if(a.timestamp < b.timestamp) {
			return -1;
		}
		if(a.timestamp > b.timestamp) {
			return 1;
		}
		if(a.sequence < b.sequence) {
			return -1;
		}
		if(a.sequence > b.sequence) {
			return 1;
		}
		return 1;
	}
	,set_show_stats: function(_value) {
		if(_value == 0) {
			this.renderer.stats.batchers--;
		} else {
			this.renderer.stats.batchers++;
		}
		return this.show_stats = _value;
	}
	,__class__: phoenix_Batcher
	,__properties__: {set_show_stats:"set_show_stats"}
};
var phoenix_BitmapFont = function(_options) {
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null"));
	}
	_options.resource_type = 6;
	luxe_resource_Resource.call(this,_options);
	if(_options.texture_path != null) {
		this.texture_path = _options.texture_path;
	} else {
		this.texture_path = haxe_io_Path.directory(this.id);
	}
	this.pages = new haxe_ds_IntMap();
	if(_options.pages != null) {
		if(_options.font_data == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options.font_data was null" + (" ( " + "BitmapFont create from pages + font_data requires both of those options" + " )")));
		}
	}
	if(_options.font_data != null) {
		if(_options.pages == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options.pages was null" + (" ( " + "BitmapFont create from pages + font_data requires both of those options" + " )")));
		}
		this.set_info(luxe_importers_bitmapfont_BitmapFontParser.parse(_options.font_data));
		this.apply_pages(_options.pages);
	}
};
$hxClasses["phoenix.BitmapFont"] = phoenix_BitmapFont;
phoenix_BitmapFont.__name__ = ["phoenix","BitmapFont"];
phoenix_BitmapFont.__super__ = luxe_resource_Resource;
phoenix_BitmapFont.prototype = $extend(luxe_resource_Resource.prototype,{
	wrap_string_to_bounds: function(_string,_bounds,_point_size,_letter_spc) {
		if(_letter_spc == null) {
			_letter_spc = 0.0;
		}
		if(_point_size == null) {
			_point_size = 1.0;
		}
		var _gthis = this;
		if(_bounds == null) {
			return _string;
		}
		var _cur_x = 0.0;
		var _idx = 0;
		var _final_str = "";
		var _max_w = 0.0;
		var _lines = luxe_utils_unifill_Unifill.uSplit(" ","\n");
		var _g = 0;
		while(_g < _lines.length) {
			var _line = _lines[_g];
			++_g;
			_max_w = Math.max(_max_w,_gthis.width_of_line(_line,_point_size,_letter_spc));
		}
		var _spacew = _max_w;
		var _strings = _string.split(" ");
		var _count = _strings.length;
		var _g1 = 0;
		while(_g1 < _strings.length) {
			var _str = _strings[_g1];
			++_g1;
			var index = _str.indexOf("\n",0);
			if((index >= 0 ? luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointCount(_str,0,index) : -1) == -1) {
				if(_str == "") {
					_str = " ";
				}
				var _max_w1 = 0.0;
				var _lines1 = luxe_utils_unifill_Unifill.uSplit(_str,"\n");
				var _g2 = 0;
				while(_g2 < _lines1.length) {
					var _line1 = _lines1[_g2];
					++_g2;
					_max_w1 = Math.max(_max_w1,_gthis.width_of_line(_line1,_point_size,_letter_spc));
				}
				var _w = _max_w1;
				if(_cur_x + _w > _bounds.w) {
					_cur_x = 0;
					_final_str += "\n";
				}
				_cur_x += _w;
				_final_str += _str;
			} else {
				var _widx = 0;
				var _words = _str.split("\n");
				var _g11 = 0;
				while(_g11 < _words.length) {
					var _word = _words[_g11];
					++_g11;
					if(_word != "") {
						var _max_w2 = 0.0;
						var _lines2 = luxe_utils_unifill_Unifill.uSplit(_word,"\n");
						var _g3 = 0;
						while(_g3 < _lines2.length) {
							var _line2 = _lines2[_g3];
							++_g3;
							_max_w2 = Math.max(_max_w2,_gthis.width_of_line(_line2,_point_size,_letter_spc));
						}
						var _w1 = _max_w2;
						if(_cur_x + _w1 > _bounds.w) {
							_cur_x = 0;
							_final_str += "\n";
						}
						_cur_x += _w1;
						_final_str += _word;
					} else {
						_cur_x = 0;
					}
					if(_widx < _words.length - 1) {
						_final_str += "\n";
						_cur_x = 0;
					}
					++_widx;
				}
			}
			if(_idx < _count - 1) {
				_final_str += " ";
				_cur_x += _spacew + _letter_spc;
			}
			++_idx;
		}
		return _final_str;
	}
	,width_of_line: function(_string,_point_size,_letter_spc) {
		if(_letter_spc == null) {
			_letter_spc = 0.0;
		}
		if(_point_size == null) {
			_point_size = 1.0;
		}
		var _cur_x = 0.0;
		var _cur_w = 0.0;
		var _ratio = _point_size / this.info.point_size;
		var i = 0;
		var _len = luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointCount(_string,0,_string.length);
		var _g_index;
		var _g_i;
		var _g_endIndex;
		_g_i = 0;
		_g_index = 0;
		_g_endIndex = _string.length;
		while(_g_index < _g_endIndex) {
			_g_i = _g_index;
			var c = _string.charCodeAt(_g_index);
			_g_index += !(55296 <= c && c <= 56319) ? 1 : 2;
			var _index = luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointAt(_string,_g_i);
			var _char = this.info.chars.h[_index];
			if(_char == null) {
				_char = this.space_char;
			}
			var _cw = (_char.xoffset + Math.max(_char.width,_char.xadvance)) * _ratio;
			var _cx = _cur_x + _char.xoffset * _ratio;
			var _spacing = _char.xadvance;
			if(i < _len - 1) {
				var index = i + 1;
				var s = _string;
				var i1;
				if(index >= 0) {
					var index1 = 0;
					var len = s.length;
					var i2 = 0;
					while(i2 < index && index1 < len) {
						var c1 = s.charCodeAt(index1);
						index1 += !(55296 <= c1 && c1 <= 56319) ? 1 : 2;
						++i2;
					}
					i1 = index1;
				} else {
					i1 = 0;
				}
				var _next_index = luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointAt(_string,i1);
				var _map = this.info.kernings.get(_index);
				_spacing += _map != null && _map.h.hasOwnProperty(_next_index) ? _map.h[_next_index] : 0;
				if(_next_index >= 32) {
					_spacing += _letter_spc;
				}
			}
			_cur_x += _spacing * _ratio;
			_cur_w = Math.max(_cur_w,_cx + _cw);
			++i;
		}
		return _cur_w;
	}
	,clear: function() {
		this.set_info(null);
		var _pageid = this.pages.keys();
		while(_pageid.hasNext()) {
			var _pageid1 = _pageid.next();
			var _page = this.pages.h[_pageid1];
			_page.destroy();
			this.pages.remove(_pageid1);
			_page = null;
		}
	}
	,reload: function() {
		var _gthis = this;
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed"));
		}
		this.clear();
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.set_state(2);
			snow_systems_assets_AssetText.load(Luxe.core.app.assets,_gthis.id).then(function(_asset) {
				var tmp = luxe_importers_bitmapfont_BitmapFontParser.parse(_asset.text);
				_gthis.set_info(tmp);
				_asset.destroy();
				_asset = null;
				if(_gthis.info == null) {
					throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("info was null"));
				}
				var _tex_get = [];
				var _g = 0;
				var _g1 = _gthis.info.pages;
				while(_g < _g1.length) {
					var _page = _g1[_g];
					++_g;
					var _path = haxe_io_Path.join([_gthis.texture_path,_page.file]);
					var _prior = _gthis.system.cache.get(_path);
					if(_prior != null) {
						_tex_get.push(_prior.reload());
					} else {
						_tex_get.push(_gthis.system.load_texture(_path));
					}
				}
				snow_api_Promise.all(_tex_get).then(function(_pages) {
					_gthis.apply_pages(_pages);
					_gthis.set_state(3);
					resolve(_gthis);
				}).error(function(_error) {
					_gthis.set_state(4);
					reject(_error);
				});
			}).error(function(_error1) {
				_gthis.set_state(4);
				reject(_error1);
			});
		});
	}
	,apply_pages: function(_pages) {
		var _pageid = 0;
		var _g = 0;
		while(_g < _pages.length) {
			var _page = _pages[_g];
			++_g;
			_page.slot = _pageid;
			this.pages.h[_pageid] = _page;
			++_pageid;
		}
	}
	,set_info: function(_info) {
		this.info = _info;
		if(this.info != null) {
			this.space_char = this.info.chars.h[32];
		}
		return this.info;
	}
	,__class__: phoenix_BitmapFont
	,__properties__: $extend(luxe_resource_Resource.prototype.__properties__,{set_info:"set_info"})
});
var phoenix_ProjectionType = { __ename__ : true, __constructs__ : ["ortho","perspective","custom"] };
phoenix_ProjectionType.ortho = ["ortho",0];
phoenix_ProjectionType.ortho.toString = $estr;
phoenix_ProjectionType.ortho.__enum__ = phoenix_ProjectionType;
phoenix_ProjectionType.perspective = ["perspective",1];
phoenix_ProjectionType.perspective.toString = $estr;
phoenix_ProjectionType.perspective.__enum__ = phoenix_ProjectionType;
phoenix_ProjectionType.custom = ["custom",2];
phoenix_ProjectionType.custom.toString = $estr;
phoenix_ProjectionType.custom.__enum__ = phoenix_ProjectionType;
var phoenix_Camera = function(_options) {
	this.refresh_pos_ = false;
	this.up_ = new phoenix_Vector(0,1,0);
	this.setup_ = true;
	this.look_at_dirty = true;
	this.projection_dirty = true;
	this.transform_dirty = true;
	this.minimum_zoom = 0.01;
	this.depth_test = false;
	this.cull_backfaces = false;
	this.aspect = 1.5;
	this.fov_type = phoenix_FOVType.horizontal;
	this.fov = 60;
	this.far = -1000;
	this.near = 1000;
	this.zoom = 1.0;
	this.name = "camera";
	this.transform = new phoenix_Transform();
	this.projection_matrix = new phoenix_Matrix();
	this.view_matrix = new phoenix_Matrix();
	this.view_matrix_inverse = new phoenix_Matrix();
	this.look_at_matrix = new phoenix_Matrix();
	if(_options == null) {
		_options = { projection : phoenix_ProjectionType.ortho, depth_test : false, cull_backfaces : false, near : 1000, far : -1000};
	}
	if(_options.projection == null) {
		_options.projection = phoenix_ProjectionType.ortho;
	}
	this.projection = _options.projection;
	this.set_center(new phoenix_Vector(Luxe.core.screen.get_w() / 2,Luxe.core.screen.get_h() / 2));
	this.set_pos(new phoenix_Vector());
	if(_options.viewport == null) {
		_options.viewport = new phoenix_Rectangle(0,0,Luxe.core.screen.get_w(),Luxe.core.screen.get_h());
	}
	this.set_viewport(_options.viewport);
	if(_options.camera_name != null) {
		this.name = _options.camera_name;
	}
	var _this = this.transform;
	if(_this._clean_handlers == null) {
		_this._clean_handlers = [];
	}
	_this._clean_handlers.push($bind(this,this.on_transform_cleaned));
	switch(this.projection[1]) {
	case 0:
		this.set_ortho(_options);
		break;
	case 1:
		this.set_perspective(_options);
		break;
	case 2:
		break;
	}
	this.process();
	this.setup_ = false;
};
$hxClasses["phoenix.Camera"] = phoenix_Camera;
phoenix_Camera.__name__ = ["phoenix","Camera"];
phoenix_Camera.prototype = {
	set_ortho: function(_options) {
		this.projection = phoenix_ProjectionType.ortho;
		switch(this.projection[1]) {
		case 0:
			this.cull_backfaces = false;
			this.depth_test = false;
			break;
		case 1:
			this.cull_backfaces = true;
			this.depth_test = true;
			break;
		case 2:
			break;
		}
		if(_options.aspect != null) {
			this.projection_dirty = true;
			this.aspect = _options.aspect;
			var _fov = this.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov;
			}
			this.fov = _fov;
		}
		if(_options.far != null) {
			this.projection_dirty = true;
			this.far = _options.far;
		}
		if(_options.fov != null) {
			var _fov1 = _options.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov1 * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov1;
			}
			this.fov = _fov1;
		}
		if(_options.near != null) {
			this.projection_dirty = true;
			this.near = _options.near;
		}
		if(_options.viewport != null) {
			this.set_viewport(_options.viewport);
		}
		if(_options.cull_backfaces != null) {
			this.cull_backfaces = _options.cull_backfaces;
		}
		if(_options.depth_test != null) {
			this.depth_test = _options.depth_test;
		}
		if(_options.fov_type != null) {
			this.fov_type = _options.fov_type;
			var _fov2 = this.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov2 * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov2;
			}
			this.fov = _fov2;
		} else {
			this.fov_type = phoenix_FOVType.horizontal;
			var _fov3 = this.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov3 * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov3;
			}
			this.fov = _fov3;
		}
	}
	,set_perspective: function(_options) {
		this.projection = phoenix_ProjectionType.perspective;
		switch(this.projection[1]) {
		case 0:
			this.cull_backfaces = false;
			this.depth_test = false;
			break;
		case 1:
			this.cull_backfaces = true;
			this.depth_test = true;
			break;
		case 2:
			break;
		}
		if(_options.aspect != null) {
			this.projection_dirty = true;
			this.aspect = _options.aspect;
			var _fov = this.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov;
			}
			this.fov = _fov;
		}
		if(_options.far != null) {
			this.projection_dirty = true;
			this.far = _options.far;
		}
		if(_options.fov != null) {
			var _fov1 = _options.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov1 * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov1;
			}
			this.fov = _fov1;
		}
		if(_options.near != null) {
			this.projection_dirty = true;
			this.near = _options.near;
		}
		if(_options.viewport != null) {
			this.set_viewport(_options.viewport);
		}
		if(_options.cull_backfaces != null) {
			this.cull_backfaces = _options.cull_backfaces;
		}
		if(_options.depth_test != null) {
			this.depth_test = _options.depth_test;
		}
		if(_options.fov_type != null) {
			this.fov_type = _options.fov_type;
			var _fov2 = this.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov2 * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov2;
			}
			this.fov = _fov2;
		} else {
			this.fov_type = phoenix_FOVType.horizontal;
			var _fov3 = this.fov;
			this.projection_dirty = true;
			if(this.fov_type == phoenix_FOVType.horizontal) {
				this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov3 * (Math.PI / 180) / 2) * (1 / this.aspect)));
			} else {
				this.fov_y = _fov3;
			}
			this.fov = _fov3;
		}
		var _this = this.transform.origin;
		var prev = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = 0;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(0);
			}
		}
		_this.y = 0;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(0);
			}
		}
		_this.z = 0;
		if(!_this._construct) {
			if(_this.listen_z != null && !_this.ignore_listeners) {
				_this.listen_z(0);
			}
		}
		_this.ignore_listeners = prev;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
		if(_this.listen_z != null && !_this.ignore_listeners) {
			_this.listen_z(_this.z);
		}
	}
	,process: function() {
		if(this.target != null) {
			this.update_look_at();
		}
		this.update_projection_matrix();
		this.update_view_matrix();
		if(this.cull_backfaces) {
			Luxe.renderer.state.enable(2884);
		} else {
			Luxe.renderer.state.disable(2884);
		}
		if(this.depth_test) {
			Luxe.renderer.state.enable(2929);
		} else {
			Luxe.renderer.state.disable(2929);
		}
	}
	,on_transform_cleaned: function(t) {
		this.transform_dirty = true;
	}
	,update_look_at: function() {
		if(this.look_at_dirty && this.target != null) {
			var _this = this.look_at_matrix;
			var _eye = this.target;
			var _target = this.pos;
			var _up = this.up_;
			var _x = new phoenix_Vector();
			var _y = new phoenix_Vector();
			var _z = new phoenix_Vector();
			var te = _this.elements;
			var _x1 = _target.x - _eye.x;
			var _y1 = _target.y - _eye.y;
			var _z1 = _target.z - _eye.z;
			var b = Math.sqrt(_x1 * _x1 + _y1 * _y1 + _z1 * _z1);
			_z = new phoenix_Vector(_x1 / b,_y1 / b,_z1 / b);
			if(Math.sqrt(_z.x * _z.x + _z.y * _z.y + _z.z * _z.z) == 0) {
				_z.z = 1;
				if(!_z._construct) {
					if(_z.listen_z != null && !_z.ignore_listeners) {
						_z.listen_z(1);
					}
				}
			}
			var _x2 = _up.y * _z.z - _up.z * _z.y;
			var _y2 = _up.z * _z.x - _up.x * _z.z;
			var _z2 = _up.x * _z.y - _up.y * _z.x;
			var b1 = Math.sqrt(_x2 * _x2 + _y2 * _y2 + _z2 * _z2);
			_x = new phoenix_Vector(_x2 / b1,_y2 / b1,_z2 / b1);
			if(Math.sqrt(_x.x * _x.x + _x.y * _x.y + _x.z * _x.z) == 0) {
				var _g = _z;
				var _x3 = _g.x + 0.0001;
				_g.x = _x3;
				if(!_g._construct) {
					if(_g.listen_x != null && !_g.ignore_listeners) {
						_g.listen_x(_x3);
					}
				}
				var _x4 = _up.y * _z.z - _up.z * _z.y;
				var _y3 = _up.z * _z.x - _up.x * _z.z;
				var _z3 = _up.x * _z.y - _up.y * _z.x;
				var b2 = Math.sqrt(_x4 * _x4 + _y3 * _y3 + _z3 * _z3);
				_x = new phoenix_Vector(_x4 / b2,_y3 / b2,_z3 / b2);
			}
			_y = new phoenix_Vector(_z.y * _x.z - _z.z * _x.y,_z.z * _x.x - _z.x * _x.z,_z.x * _x.y - _z.y * _x.x);
			te[0] = _x.x;
			te[4] = _y.x;
			te[8] = _z.x;
			te[1] = _x.y;
			te[5] = _y.y;
			te[9] = _z.y;
			te[2] = _x.z;
			te[6] = _y.z;
			te[10] = _z.z;
			this.transform.local.rotation.setFromRotationMatrix(this.look_at_matrix);
		}
	}
	,update_view_matrix: function() {
		var _this = this.transform;
		if(!_this._destroying) {
			if(_this.parent != null && _this.parent.dirty) {
				_this.parent.clean_check();
			}
			if(_this.dirty && !_this._cleaning && !_this.manual_update) {
				_this.clean();
			}
		}
		this.view_matrix = _this.world.matrix;
		if(!this.transform_dirty) {
			return;
		}
		var _this1 = this.view_matrix;
		var te = _this1.elements;
		var _this2 = new phoenix_Matrix(te[0],te[4],te[8],te[12],te[1],te[5],te[9],te[13],te[2],te[6],te[10],te[14],te[3],te[7],te[11],te[15]);
		var te1 = _this2.elements;
		var me = _this1.elements;
		var n11 = me[0];
		var n12 = me[4];
		var n13 = me[8];
		var n14 = me[12];
		var n21 = me[1];
		var n22 = me[5];
		var n23 = me[9];
		var n24 = me[13];
		var n31 = me[2];
		var n32 = me[6];
		var n33 = me[10];
		var n34 = me[14];
		var n41 = me[3];
		var n42 = me[7];
		var n43 = me[11];
		var n44 = me[15];
		te1[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
		te1[4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
		te1[8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
		te1[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
		te1[1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
		te1[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
		te1[9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
		te1[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
		te1[2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
		te1[6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
		te1[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
		te1[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
		te1[3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
		te1[7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
		te1[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
		te1[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;
		var det = me[0] * te1[0] + me[1] * te1[4] + me[2] * te1[8] + me[3] * te1[12];
		var tmp;
		if(det == 0) {
			haxe_Log.trace("Matrix.getInverse: cant invert matrix, determinant is 0",{ fileName : "Matrix.hx", lineNumber : 697, className : "phoenix.Matrix", methodName : "getInverse"});
			var e = _this2.elements;
			e[0] = 1;
			e[4] = 0;
			e[8] = 0;
			e[12] = 0;
			e[1] = 0;
			e[5] = 1;
			e[9] = 0;
			e[13] = 0;
			e[2] = 0;
			e[6] = 0;
			e[10] = 1;
			e[14] = 0;
			e[3] = 0;
			e[7] = 0;
			e[11] = 0;
			e[15] = 1;
			tmp = _this2;
		} else {
			var _s = 1 / det;
			var te2 = _this2.elements;
			te2[0] *= _s;
			te2[4] *= _s;
			te2[8] *= _s;
			te2[12] *= _s;
			te2[1] *= _s;
			te2[5] *= _s;
			te2[9] *= _s;
			te2[13] *= _s;
			te2[2] *= _s;
			te2[6] *= _s;
			te2[10] *= _s;
			te2[14] *= _s;
			te2[3] *= _s;
			te2[7] *= _s;
			te2[11] *= _s;
			te2[15] *= _s;
			tmp = _this2;
		}
		this.view_matrix_inverse = tmp;
		var _this3 = this.view_matrix_inverse;
		var i = 0;
		while(i < 16) {
			_this3._float32array[i] = _this3.elements[i];
			++i;
		}
		this.view_inverse_arr = _this3._float32array;
		this.transform_dirty = false;
	}
	,update_projection_matrix: function() {
		if(!this.projection_dirty) {
			return;
		}
		switch(this.projection[1]) {
		case 0:
			var _l = 0.0;
			var _t = 0.0;
			var _r = this.viewport.w;
			var _b = this.viewport.h;
			if(this.ortho_left != null) {
				_l = this.ortho_left;
			}
			if(this.ortho_right != null) {
				_r = this.ortho_right;
			}
			if(this.ortho_top != null) {
				_t = this.ortho_top;
			}
			if(this.ortho_bottom != null) {
				_b = this.ortho_bottom;
			}
			var _near = this.near;
			var _far = this.far;
			var te = this.projection_matrix.elements;
			var w = _r - _l;
			var h = _t - _b;
			var p = _far - _near;
			te[0] = 2 / w;
			te[4] = 0;
			te[8] = 0;
			te[12] = -((_r + _l) / w);
			te[1] = 0;
			te[5] = 2 / h;
			te[9] = 0;
			te[13] = -((_t + _b) / h);
			te[2] = 0;
			te[6] = 0;
			te[10] = -2 / p;
			te[14] = -((_far + _near) / p);
			te[3] = 0;
			te[7] = 0;
			te[11] = 0;
			te[15] = 1;
			break;
		case 1:
			var _aspect = this.aspect;
			var _near1 = this.near;
			var _far1 = this.far;
			var ymax = _near1 * Math.tan(this.fov_y * 0.5 * 0.017453292519943278);
			var ymin = -ymax;
			var xmin = ymin * _aspect;
			var xmax = ymax * _aspect;
			var te1 = this.projection_matrix.elements;
			te1[0] = 2 * _near1 / (xmax - xmin);
			te1[4] = 0;
			te1[8] = (xmax + xmin) / (xmax - xmin);
			te1[12] = 0;
			te1[1] = 0;
			te1[5] = 2 * _near1 / (ymax - ymin);
			te1[9] = (ymax + ymin) / (ymax - ymin);
			te1[13] = 0;
			te1[2] = 0;
			te1[6] = 0;
			te1[10] = -(_far1 + _near1) / (_far1 - _near1);
			te1[14] = -2 * _far1 * _near1 / (_far1 - _near1);
			te1[3] = 0;
			te1[7] = 0;
			te1[11] = -1;
			te1[15] = 0;
			break;
		case 2:
			break;
		}
		var _this = this.projection_matrix;
		var i = 0;
		while(i < 16) {
			_this._float32array[i] = _this.elements[i];
			++i;
		}
		this.proj_arr = _this._float32array;
		this.projection_dirty = false;
	}
	,set_zoom: function(_z) {
		var _new_zoom = _z;
		if(_z < this.minimum_zoom) {
			_new_zoom = this.minimum_zoom;
		}
		switch(this.projection[1]) {
		case 0:
			var _this = this.transform.local.scale;
			var _x = 1 / _new_zoom;
			_this.x = _x;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x);
				}
			}
			var _this1 = this.transform.local.scale;
			var _y = 1 / _new_zoom;
			_this1.y = _y;
			if(!_this1._construct) {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_y);
				}
			}
			var _this2 = this.transform.local.scale;
			var _z1 = 1 / _new_zoom;
			_this2.z = _z1;
			if(!_this2._construct) {
				if(_this2.listen_z != null && !_this2.ignore_listeners) {
					_this2.listen_z(_z1);
				}
			}
			break;
		case 1:
			break;
		case 2:
			break;
		}
		return this.zoom = _new_zoom;
	}
	,set_center: function(_p) {
		this.center = _p;
		switch(this.projection[1]) {
		case 0:
			if(!this.refresh_pos_ && !this.setup_) {
				this.pos.ignore_listeners = true;
				var _this = this.pos;
				var _x = _p.x - this.viewport.w / 2;
				_this.x = _x;
				if(!_this._construct) {
					if(_this.listen_x != null && !_this.ignore_listeners) {
						_this.listen_x(_x);
					}
				}
				var _this1 = this.pos;
				var _y = _p.y - this.viewport.h / 2;
				_this1.y = _y;
				if(!_this1._construct) {
					if(_this1.listen_y != null && !_this1.ignore_listeners) {
						_this1.listen_y(_y);
					}
				}
				this.pos.ignore_listeners = false;
				var _this2 = this.transform.local.pos;
				var _x1 = _p.x;
				var _y1 = _p.y;
				var _z = _p.z;
				var _w = _p.w;
				var prev = _this2.ignore_listeners;
				_this2.ignore_listeners = true;
				_this2.x = _x1;
				if(!_this2._construct) {
					if(_this2.listen_x != null && !_this2.ignore_listeners) {
						_this2.listen_x(_x1);
					}
				}
				_this2.y = _y1;
				if(!_this2._construct) {
					if(_this2.listen_y != null && !_this2.ignore_listeners) {
						_this2.listen_y(_y1);
					}
				}
				_this2.z = _z;
				if(!_this2._construct) {
					if(_this2.listen_z != null && !_this2.ignore_listeners) {
						_this2.listen_z(_z);
					}
				}
				_this2.w = _w;
				_this2.ignore_listeners = prev;
				if(_this2.listen_x != null && !_this2.ignore_listeners) {
					_this2.listen_x(_this2.x);
				}
				if(_this2.listen_y != null && !_this2.ignore_listeners) {
					_this2.listen_y(_this2.y);
				}
				if(_this2.listen_z != null && !_this2.ignore_listeners) {
					_this2.listen_z(_this2.z);
				}
			}
			break;
		case 1:
			break;
		case 2:
			break;
		}
		var _v = this.center;
		var listener = $bind(this,this._center_changed);
		_v.listen_x = listener;
		_v.listen_y = listener;
		_v.listen_z = listener;
		return this.center;
	}
	,set_viewport: function(_r) {
		this.projection_dirty = true;
		this.viewport = _r;
		switch(this.projection[1]) {
		case 0:
			var _this = this.transform;
			var o = new phoenix_Vector(_r.w / 2,_r.h / 2);
			_this.dirty = true;
			if(_this.dirty && !_this._setup && _this._dirty_handlers != null && _this._dirty_handlers.length > 0) {
				var _g = 0;
				var _g1 = _this._dirty_handlers;
				while(_g < _g1.length) {
					var _handler = _g1[_g];
					++_g;
					if(_handler != null) {
						_handler(_this);
					}
				}
			}
			_this.origin = o;
			if(_this._origin_handlers != null && _this._origin_handlers.length > 0) {
				var _origin = _this.origin;
				var _g2 = 0;
				var _g11 = _this._origin_handlers;
				while(_g2 < _g11.length) {
					var _handler1 = _g11[_g2];
					++_g2;
					if(_handler1 != null) {
						_handler1(_origin);
					}
				}
			}
			this.set_pos(this.pos);
			break;
		case 1:
			break;
		case 2:
			break;
		}
		return this.viewport;
	}
	,set_pos: function(_p) {
		this.pos = _p;
		switch(this.projection[1]) {
		case 0:
			var _cx = this.center.x;
			var _cy = this.center.y;
			if(this.viewport != null) {
				_cx = _p.x + this.viewport.w / 2;
				_cy = _p.y + this.viewport.h / 2;
			}
			this.refresh_pos_ = true;
			this.center.ignore_listeners = true;
			var _this = this.center;
			_this.x = _cx;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_cx);
				}
			}
			var _this1 = this.center;
			_this1.y = _cy;
			if(!_this1._construct) {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_cy);
				}
			}
			this.center.ignore_listeners = false;
			this.refresh_pos_ = false;
			var _this2 = this.transform.local.pos;
			_this2.x = _cx;
			if(!_this2._construct) {
				if(_this2.listen_x != null && !_this2.ignore_listeners) {
					_this2.listen_x(_cx);
				}
			}
			var _this3 = this.transform.local.pos;
			_this3.y = _cy;
			if(!_this3._construct) {
				if(_this3.listen_y != null && !_this3.ignore_listeners) {
					_this3.listen_y(_cy);
				}
			}
			break;
		case 1:
			var value = this.pos;
			var _this4 = this.transform.local;
			_this4.pos = value;
			if(value != null) {
				var _v = _this4.pos;
				var listener = $bind(_this4,_this4._pos_change);
				_v.listen_x = listener;
				_v.listen_y = listener;
				_v.listen_z = listener;
				if(_this4.pos_changed != null && !_this4.ignore_listeners) {
					_this4.pos_changed(_this4.pos);
				}
			}
			break;
		case 2:
			break;
		}
		var _v1 = this.pos;
		var listener1 = $bind(this,this._pos_changed);
		_v1.listen_x = listener1;
		_v1.listen_y = listener1;
		_v1.listen_z = listener1;
		return this.pos;
	}
	,_pos_changed: function(v) {
		this.set_pos(this.pos);
	}
	,_center_changed: function(v) {
		this.set_center(this.center);
	}
	,__class__: phoenix_Camera
	,__properties__: {set_pos:"set_pos",set_zoom:"set_zoom",set_center:"set_center",set_viewport:"set_viewport"}
};
var phoenix_FOVType = { __ename__ : true, __constructs__ : ["vertical","horizontal"] };
phoenix_FOVType.vertical = ["vertical",0];
phoenix_FOVType.vertical.toString = $estr;
phoenix_FOVType.vertical.__enum__ = phoenix_FOVType;
phoenix_FOVType.horizontal = ["horizontal",1];
phoenix_FOVType.horizontal.toString = $estr;
phoenix_FOVType.horizontal.__enum__ = phoenix_FOVType;
var phoenix_ColorHSL = function() {
	this.l = 1.0;
	this.s = 1.0;
	this.h = 0.0;
};
$hxClasses["phoenix.ColorHSL"] = phoenix_ColorHSL;
phoenix_ColorHSL.__name__ = ["phoenix","ColorHSL"];
phoenix_ColorHSL.__super__ = phoenix_Color;
phoenix_ColorHSL.prototype = $extend(phoenix_Color.prototype,{
	set_h: function(_h) {
		this.h = _h;
		this._refresh();
		return _h;
	}
	,set_s: function(_s) {
		this.s = _s;
		this._refresh();
		return _s;
	}
	,set_l: function(_l) {
		this.l = _l;
		this._refresh();
		return _l;
	}
	,tween: function(_time_in_seconds,_dest,_override) {
		if(_override == null) {
			_override = true;
		}
		if(_time_in_seconds == null) {
			_time_in_seconds = 0.5;
		}
		phoenix_Color.prototype.tween.call(this,_time_in_seconds,_dest,_override);
		if(_dest != null) {
			var _dest_h = this.h;
			var _dest_s = this.s;
			var _dest_l = this.l;
			var _dest_a = this.a;
			var _change_h = false;
			var _change_s = false;
			var _change_l = false;
			var _change_a = false;
			if(js_Boot.__instanceof(_dest,phoenix_ColorHSL)) {
				_dest_h = _dest.h;
				_dest_s = _dest.s;
				_dest_l = _dest.l;
				_dest_a = _dest.a;
				_change_h = true;
				_change_s = true;
				_change_l = true;
				_change_a = true;
			} else {
				if(_dest.h != null) {
					_dest_h = _dest.h;
					_change_h = true;
				}
				if(_dest.s != null) {
					_dest_s = _dest.s;
					_change_s = true;
				}
				if(_dest.l != null) {
					_dest_l = _dest.l;
					_change_l = true;
				}
				if(_dest.a != null) {
					_dest_a = _dest.a;
					_change_a = true;
				}
			}
			var _properties = { };
			if(_change_h) {
				_properties.h = _dest_h;
			}
			if(_change_s) {
				_properties.s = _dest_s;
			}
			if(_change_l) {
				_properties.l = _dest_l;
			}
			if(_change_a) {
				_properties.a = _dest_a;
			}
			return luxe_tween_Actuate.tween(this,_time_in_seconds,_properties,_override);
		} else {
			throw new js__$Boot_HaxeError(" Warning: Color.tween passed a null destination ");
		}
	}
	,_refresh: function() {
		this.refreshing = true;
		phoenix_Color.prototype.fromColorHSL.call(this,this);
		this.refreshing = false;
		return this;
	}
	,fromColor: function(_color) {
		var max = _color.maxRGB();
		var min = _color.minRGB();
		var add = max + min;
		var sub = max - min;
		var _h = 0;
		if(max == min) {
			_h = 0;
		} else if(max == _color.r) {
			_h = (60 * (_color.g - _color.b) / sub + 360) % 360;
		} else if(max == _color.g) {
			_h = 60 * (_color.b - _color.r) / sub + 120;
		} else if(max == _color.b) {
			_h = 60 * (_color.r - _color.g) / sub + 240;
		}
		var _s = max == min ? 0 : this.l <= 0.5 ? sub / add : sub / (2 - add);
		this.set_h(_h);
		this.set_s(_s);
		this.set_l(add / 2);
		this.a = _color.a;
		return this;
	}
	,__class__: phoenix_ColorHSL
	,__properties__: $extend(phoenix_Color.prototype.__properties__,{set_l:"set_l",set_s:"set_s",set_h:"set_h"})
});
var phoenix_ColorHSV = function() {
	this.v = 1.0;
	this.s = 0.0;
	this.h = 0.0;
};
$hxClasses["phoenix.ColorHSV"] = phoenix_ColorHSV;
phoenix_ColorHSV.__name__ = ["phoenix","ColorHSV"];
phoenix_ColorHSV.__super__ = phoenix_Color;
phoenix_ColorHSV.prototype = $extend(phoenix_Color.prototype,{
	set_h: function(_h) {
		this.h = _h;
		this._refresh();
		return _h;
	}
	,set_s: function(_s) {
		this.s = _s;
		this._refresh();
		return this.s;
	}
	,set_v: function(_v) {
		this.v = _v;
		this._refresh();
		return this.v;
	}
	,tween: function(_time_in_seconds,_dest,_override) {
		if(_override == null) {
			_override = true;
		}
		if(_time_in_seconds == null) {
			_time_in_seconds = 0.5;
		}
		phoenix_Color.prototype.tween.call(this,_time_in_seconds,_dest,_override);
		if(_dest != null) {
			var _dest_h = this.h;
			var _dest_s = this.s;
			var _dest_v = this.v;
			var _dest_a = this.a;
			var _change_h = false;
			var _change_s = false;
			var _change_v = false;
			var _change_a = false;
			if(js_Boot.__instanceof(_dest,phoenix_ColorHSV)) {
				_dest_h = _dest.h;
				_dest_s = _dest.s;
				_dest_v = _dest.v;
				_dest_a = _dest.a;
				_change_h = true;
				_change_s = true;
				_change_v = true;
				_change_a = true;
			} else {
				if(_dest.h != null) {
					_dest_h = _dest.h;
					_change_h = true;
				}
				if(_dest.s != null) {
					_dest_s = _dest.s;
					_change_s = true;
				}
				if(_dest.v != null) {
					_dest_v = _dest.v;
					_change_v = true;
				}
				if(_dest.a != null) {
					_dest_a = _dest.a;
					_change_a = true;
				}
			}
			var _properties = { };
			if(_change_h) {
				_properties.h = _dest_h;
			}
			if(_change_s) {
				_properties.s = _dest_s;
			}
			if(_change_v) {
				_properties.v = _dest_v;
			}
			if(_change_a) {
				_properties.a = _dest_a;
			}
			return luxe_tween_Actuate.tween(this,_time_in_seconds,_properties,_override);
		} else {
			throw new js__$Boot_HaxeError(" Warning: Color.tween passed a null destination ");
		}
	}
	,_refresh: function() {
		this.refreshing = true;
		phoenix_Color.prototype.fromColorHSV.call(this,this);
		this.refreshing = false;
		return this;
	}
	,fromColorHSL: function(_color_hsl) {
		_color_hsl._refresh();
		return this.fromColor(_color_hsl);
	}
	,fromColor: function(_color) {
		var max = _color.maxRGB();
		var min = _color.minRGB();
		var sub = max - min;
		var _h = 0;
		if(max == min) {
			_h = 0;
		} else if(max == _color.r) {
			_h = (60 * (_color.g - _color.b) / sub + 360) % 360;
		} else if(max == _color.g) {
			_h = 60 * (_color.b - _color.r) / sub + 120;
		} else if(max == _color.b) {
			_h = 60 * (_color.r - _color.g) / sub + 240;
		}
		this.set_h(_h);
		this.set_s(max == 0 ? 0 : 1 - min / max);
		this.set_v(max);
		this.a = _color.a;
		return this;
	}
	,__class__: phoenix_ColorHSV
	,__properties__: $extend(phoenix_Color.prototype.__properties__,{set_v:"set_v",set_s:"set_s",set_h:"set_h"})
});
var phoenix_MatrixTransform = function(p,r,s) {
	this.pos = p;
	this.rotation = r;
	this.scale = s;
};
$hxClasses["phoenix.MatrixTransform"] = phoenix_MatrixTransform;
phoenix_MatrixTransform.__name__ = ["phoenix","MatrixTransform"];
phoenix_MatrixTransform.prototype = {
	__class__: phoenix_MatrixTransform
};
var phoenix_Matrix = function(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44) {
	if(n44 == null) {
		n44 = 1;
	}
	if(n43 == null) {
		n43 = 0;
	}
	if(n42 == null) {
		n42 = 0;
	}
	if(n41 == null) {
		n41 = 0;
	}
	if(n34 == null) {
		n34 = 0;
	}
	if(n33 == null) {
		n33 = 1;
	}
	if(n32 == null) {
		n32 = 0;
	}
	if(n31 == null) {
		n31 = 0;
	}
	if(n24 == null) {
		n24 = 0;
	}
	if(n23 == null) {
		n23 = 0;
	}
	if(n22 == null) {
		n22 = 1;
	}
	if(n21 == null) {
		n21 = 0;
	}
	if(n14 == null) {
		n14 = 0;
	}
	if(n13 == null) {
		n13 = 0;
	}
	if(n12 == null) {
		n12 = 0;
	}
	if(n11 == null) {
		n11 = 1;
	}
	this.elements = [];
	var i = 0;
	while(i++ < 16) this.elements.push(0.0);
	var e = this.elements;
	e[0] = n11;
	e[4] = n12;
	e[8] = n13;
	e[12] = n14;
	e[1] = n21;
	e[5] = n22;
	e[9] = n23;
	e[13] = n24;
	e[2] = n31;
	e[6] = n32;
	e[10] = n33;
	e[14] = n34;
	e[3] = n41;
	e[7] = n42;
	e[11] = n43;
	e[15] = n44;
	this._float32array = new Float32Array(this.elements);
};
$hxClasses["phoenix.Matrix"] = phoenix_Matrix;
phoenix_Matrix.__name__ = ["phoenix","Matrix"];
phoenix_Matrix.prototype = {
	__class__: phoenix_Matrix
};
var phoenix_Quaternion = function(_x,_y,_z,_w) {
	if(_w == null) {
		_w = 1;
	}
	if(_z == null) {
		_z = 0;
	}
	if(_y == null) {
		_y = 0;
	}
	if(_x == null) {
		_x = 0;
	}
	this.ignore_euler = false;
	this._construct = false;
	this.ignore_listeners = false;
	this.w = 0.0;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this._construct = true;
	this.x = _x;
	if(!this._construct) {
		if(!(this.euler == null || this.ignore_euler || this._construct)) {
			var _this = this.euler;
			var sqx = this.x * this.x;
			var sqy = this.y * this.y;
			var sqz = this.z * this.z;
			var sqw = this.w * this.w;
			var _x1 = _this.x;
			var _y1 = _this.y;
			var _z1 = _this.z;
			_x1 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw - sqx - sqy + sqz);
			var value = 2 * (this.x * this.z + this.y * this.w);
			_y1 = Math.asin(value < -1 ? -1 : value > 1 ? 1 : value);
			_z1 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw + sqx - sqy - sqz);
			var prev = _this.ignore_listeners;
			_this.ignore_listeners = true;
			_this.x = _x1;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x1);
				}
			}
			_this.y = _y1;
			if(!_this._construct) {
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(_y1);
				}
			}
			_this.z = _z1;
			if(!_this._construct) {
				if(_this.listen_z != null && !_this.ignore_listeners) {
					_this.listen_z(_z1);
				}
			}
			_this.ignore_listeners = prev;
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_this.x);
			}
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_this.y);
			}
			if(_this.listen_z != null && !_this.ignore_listeners) {
				_this.listen_z(_this.z);
			}
		}
		if(this.listen_x != null && !this.ignore_listeners) {
			this.listen_x(this.x);
		}
	}
	this.y = _y;
	if(!this._construct) {
		if(!(this.euler == null || this.ignore_euler || this._construct)) {
			var _this1 = this.euler;
			var sqx1 = this.x * this.x;
			var sqy1 = this.y * this.y;
			var sqz1 = this.z * this.z;
			var sqw1 = this.w * this.w;
			var _x2 = _this1.x;
			var _y2 = _this1.y;
			var _z2 = _this1.z;
			_x2 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw1 - sqx1 - sqy1 + sqz1);
			var value1 = 2 * (this.x * this.z + this.y * this.w);
			_y2 = Math.asin(value1 < -1 ? -1 : value1 > 1 ? 1 : value1);
			_z2 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw1 + sqx1 - sqy1 - sqz1);
			var prev1 = _this1.ignore_listeners;
			_this1.ignore_listeners = true;
			_this1.x = _x2;
			if(!_this1._construct) {
				if(_this1.listen_x != null && !_this1.ignore_listeners) {
					_this1.listen_x(_x2);
				}
			}
			_this1.y = _y2;
			if(!_this1._construct) {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_y2);
				}
			}
			_this1.z = _z2;
			if(!_this1._construct) {
				if(_this1.listen_z != null && !_this1.ignore_listeners) {
					_this1.listen_z(_z2);
				}
			}
			_this1.ignore_listeners = prev1;
			if(_this1.listen_x != null && !_this1.ignore_listeners) {
				_this1.listen_x(_this1.x);
			}
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(_this1.y);
			}
			if(_this1.listen_z != null && !_this1.ignore_listeners) {
				_this1.listen_z(_this1.z);
			}
		}
		if(this.listen_y != null && !this.ignore_listeners) {
			this.listen_y(this.y);
		}
	}
	this.z = _z;
	if(!this._construct) {
		if(!(this.euler == null || this.ignore_euler || this._construct)) {
			var _this2 = this.euler;
			var sqx2 = this.x * this.x;
			var sqy2 = this.y * this.y;
			var sqz2 = this.z * this.z;
			var sqw2 = this.w * this.w;
			var _x3 = _this2.x;
			var _y3 = _this2.y;
			var _z3 = _this2.z;
			_x3 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw2 - sqx2 - sqy2 + sqz2);
			var value2 = 2 * (this.x * this.z + this.y * this.w);
			_y3 = Math.asin(value2 < -1 ? -1 : value2 > 1 ? 1 : value2);
			_z3 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw2 + sqx2 - sqy2 - sqz2);
			var prev2 = _this2.ignore_listeners;
			_this2.ignore_listeners = true;
			_this2.x = _x3;
			if(!_this2._construct) {
				if(_this2.listen_x != null && !_this2.ignore_listeners) {
					_this2.listen_x(_x3);
				}
			}
			_this2.y = _y3;
			if(!_this2._construct) {
				if(_this2.listen_y != null && !_this2.ignore_listeners) {
					_this2.listen_y(_y3);
				}
			}
			_this2.z = _z3;
			if(!_this2._construct) {
				if(_this2.listen_z != null && !_this2.ignore_listeners) {
					_this2.listen_z(_z3);
				}
			}
			_this2.ignore_listeners = prev2;
			if(_this2.listen_x != null && !_this2.ignore_listeners) {
				_this2.listen_x(_this2.x);
			}
			if(_this2.listen_y != null && !_this2.ignore_listeners) {
				_this2.listen_y(_this2.y);
			}
			if(_this2.listen_z != null && !_this2.ignore_listeners) {
				_this2.listen_z(_this2.z);
			}
		}
		if(this.listen_z != null && !this.ignore_listeners) {
			this.listen_z(this.z);
		}
	}
	this.w = _w;
	if(!this._construct) {
		if(!(this.euler == null || this.ignore_euler || this._construct)) {
			var _this3 = this.euler;
			var sqx3 = this.x * this.x;
			var sqy3 = this.y * this.y;
			var sqz3 = this.z * this.z;
			var sqw3 = this.w * this.w;
			var _x4 = _this3.x;
			var _y4 = _this3.y;
			var _z4 = _this3.z;
			_x4 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw3 - sqx3 - sqy3 + sqz3);
			var value3 = 2 * (this.x * this.z + this.y * this.w);
			_y4 = Math.asin(value3 < -1 ? -1 : value3 > 1 ? 1 : value3);
			_z4 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw3 + sqx3 - sqy3 - sqz3);
			var prev3 = _this3.ignore_listeners;
			_this3.ignore_listeners = true;
			_this3.x = _x4;
			if(!_this3._construct) {
				if(_this3.listen_x != null && !_this3.ignore_listeners) {
					_this3.listen_x(_x4);
				}
			}
			_this3.y = _y4;
			if(!_this3._construct) {
				if(_this3.listen_y != null && !_this3.ignore_listeners) {
					_this3.listen_y(_y4);
				}
			}
			_this3.z = _z4;
			if(!_this3._construct) {
				if(_this3.listen_z != null && !_this3.ignore_listeners) {
					_this3.listen_z(_z4);
				}
			}
			_this3.ignore_listeners = prev3;
			if(_this3.listen_x != null && !_this3.ignore_listeners) {
				_this3.listen_x(_this3.x);
			}
			if(_this3.listen_y != null && !_this3.ignore_listeners) {
				_this3.listen_y(_this3.y);
			}
			if(_this3.listen_z != null && !_this3.ignore_listeners) {
				_this3.listen_z(_this3.z);
			}
		}
		if(this.listen_w != null && !this.ignore_listeners) {
			this.listen_w(this.w);
		}
	}
	this.euler = new phoenix_Vector();
	this._construct = false;
};
$hxClasses["phoenix.Quaternion"] = phoenix_Quaternion;
phoenix_Quaternion.__name__ = ["phoenix","Quaternion"];
phoenix_Quaternion.prototype = {
	copy: function(_quaternion) {
		var _y = _quaternion.y;
		var _z = _quaternion.z;
		var _w = _quaternion.w;
		this.ignore_euler = true;
		this.x = _quaternion.x;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this = this.euler;
				var sqx = this.x * this.x;
				var sqy = this.y * this.y;
				var sqz = this.z * this.z;
				var sqw = this.w * this.w;
				var _x = _this.x;
				var _y1 = _this.y;
				var _z1 = _this.z;
				_x = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw - sqx - sqy + sqz);
				var value = 2 * (this.x * this.z + this.y * this.w);
				_y1 = Math.asin(value < -1 ? -1 : value > 1 ? 1 : value);
				_z1 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw + sqx - sqy - sqz);
				var prev = _this.ignore_listeners;
				_this.ignore_listeners = true;
				_this.x = _x;
				if(!_this._construct) {
					if(_this.listen_x != null && !_this.ignore_listeners) {
						_this.listen_x(_x);
					}
				}
				_this.y = _y1;
				if(!_this._construct) {
					if(_this.listen_y != null && !_this.ignore_listeners) {
						_this.listen_y(_y1);
					}
				}
				_this.z = _z1;
				if(!_this._construct) {
					if(_this.listen_z != null && !_this.ignore_listeners) {
						_this.listen_z(_z1);
					}
				}
				_this.ignore_listeners = prev;
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_this.x);
				}
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(_this.y);
				}
				if(_this.listen_z != null && !_this.ignore_listeners) {
					_this.listen_z(_this.z);
				}
			}
			if(this.listen_x != null && !this.ignore_listeners) {
				this.listen_x(this.x);
			}
		}
		this.y = _y;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this1 = this.euler;
				var sqx1 = this.x * this.x;
				var sqy1 = this.y * this.y;
				var sqz1 = this.z * this.z;
				var sqw1 = this.w * this.w;
				var _x1 = _this1.x;
				var _y2 = _this1.y;
				var _z2 = _this1.z;
				_x1 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw1 - sqx1 - sqy1 + sqz1);
				var value1 = 2 * (this.x * this.z + this.y * this.w);
				_y2 = Math.asin(value1 < -1 ? -1 : value1 > 1 ? 1 : value1);
				_z2 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw1 + sqx1 - sqy1 - sqz1);
				var prev1 = _this1.ignore_listeners;
				_this1.ignore_listeners = true;
				_this1.x = _x1;
				if(!_this1._construct) {
					if(_this1.listen_x != null && !_this1.ignore_listeners) {
						_this1.listen_x(_x1);
					}
				}
				_this1.y = _y2;
				if(!_this1._construct) {
					if(_this1.listen_y != null && !_this1.ignore_listeners) {
						_this1.listen_y(_y2);
					}
				}
				_this1.z = _z2;
				if(!_this1._construct) {
					if(_this1.listen_z != null && !_this1.ignore_listeners) {
						_this1.listen_z(_z2);
					}
				}
				_this1.ignore_listeners = prev1;
				if(_this1.listen_x != null && !_this1.ignore_listeners) {
					_this1.listen_x(_this1.x);
				}
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_this1.y);
				}
				if(_this1.listen_z != null && !_this1.ignore_listeners) {
					_this1.listen_z(_this1.z);
				}
			}
			if(this.listen_y != null && !this.ignore_listeners) {
				this.listen_y(this.y);
			}
		}
		this.z = _z;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this2 = this.euler;
				var sqx2 = this.x * this.x;
				var sqy2 = this.y * this.y;
				var sqz2 = this.z * this.z;
				var sqw2 = this.w * this.w;
				var _x2 = _this2.x;
				var _y3 = _this2.y;
				var _z3 = _this2.z;
				_x2 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw2 - sqx2 - sqy2 + sqz2);
				var value2 = 2 * (this.x * this.z + this.y * this.w);
				_y3 = Math.asin(value2 < -1 ? -1 : value2 > 1 ? 1 : value2);
				_z3 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw2 + sqx2 - sqy2 - sqz2);
				var prev2 = _this2.ignore_listeners;
				_this2.ignore_listeners = true;
				_this2.x = _x2;
				if(!_this2._construct) {
					if(_this2.listen_x != null && !_this2.ignore_listeners) {
						_this2.listen_x(_x2);
					}
				}
				_this2.y = _y3;
				if(!_this2._construct) {
					if(_this2.listen_y != null && !_this2.ignore_listeners) {
						_this2.listen_y(_y3);
					}
				}
				_this2.z = _z3;
				if(!_this2._construct) {
					if(_this2.listen_z != null && !_this2.ignore_listeners) {
						_this2.listen_z(_z3);
					}
				}
				_this2.ignore_listeners = prev2;
				if(_this2.listen_x != null && !_this2.ignore_listeners) {
					_this2.listen_x(_this2.x);
				}
				if(_this2.listen_y != null && !_this2.ignore_listeners) {
					_this2.listen_y(_this2.y);
				}
				if(_this2.listen_z != null && !_this2.ignore_listeners) {
					_this2.listen_z(_this2.z);
				}
			}
			if(this.listen_z != null && !this.ignore_listeners) {
				this.listen_z(this.z);
			}
		}
		this.w = _w;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this3 = this.euler;
				var sqx3 = this.x * this.x;
				var sqy3 = this.y * this.y;
				var sqz3 = this.z * this.z;
				var sqw3 = this.w * this.w;
				var _x3 = _this3.x;
				var _y4 = _this3.y;
				var _z4 = _this3.z;
				_x3 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw3 - sqx3 - sqy3 + sqz3);
				var value3 = 2 * (this.x * this.z + this.y * this.w);
				_y4 = Math.asin(value3 < -1 ? -1 : value3 > 1 ? 1 : value3);
				_z4 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw3 + sqx3 - sqy3 - sqz3);
				var prev3 = _this3.ignore_listeners;
				_this3.ignore_listeners = true;
				_this3.x = _x3;
				if(!_this3._construct) {
					if(_this3.listen_x != null && !_this3.ignore_listeners) {
						_this3.listen_x(_x3);
					}
				}
				_this3.y = _y4;
				if(!_this3._construct) {
					if(_this3.listen_y != null && !_this3.ignore_listeners) {
						_this3.listen_y(_y4);
					}
				}
				_this3.z = _z4;
				if(!_this3._construct) {
					if(_this3.listen_z != null && !_this3.ignore_listeners) {
						_this3.listen_z(_z4);
					}
				}
				_this3.ignore_listeners = prev3;
				if(_this3.listen_x != null && !_this3.ignore_listeners) {
					_this3.listen_x(_this3.x);
				}
				if(_this3.listen_y != null && !_this3.ignore_listeners) {
					_this3.listen_y(_this3.y);
				}
				if(_this3.listen_z != null && !_this3.ignore_listeners) {
					_this3.listen_z(_this3.z);
				}
			}
			if(this.listen_w != null && !this.ignore_listeners) {
				this.listen_w(this.w);
			}
		}
		this.ignore_euler = false;
		if(!(this.euler == null || this.ignore_euler || this._construct)) {
			var _this4 = this.euler;
			var sqx4 = this.x * this.x;
			var sqy4 = this.y * this.y;
			var sqz4 = this.z * this.z;
			var sqw4 = this.w * this.w;
			var _x4 = _this4.x;
			var _y5 = _this4.y;
			var _z5 = _this4.z;
			_x4 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw4 - sqx4 - sqy4 + sqz4);
			var value4 = 2 * (this.x * this.z + this.y * this.w);
			_y5 = Math.asin(value4 < -1 ? -1 : value4 > 1 ? 1 : value4);
			_z5 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw4 + sqx4 - sqy4 - sqz4);
			var prev4 = _this4.ignore_listeners;
			_this4.ignore_listeners = true;
			_this4.x = _x4;
			if(!_this4._construct) {
				if(_this4.listen_x != null && !_this4.ignore_listeners) {
					_this4.listen_x(_x4);
				}
			}
			_this4.y = _y5;
			if(!_this4._construct) {
				if(_this4.listen_y != null && !_this4.ignore_listeners) {
					_this4.listen_y(_y5);
				}
			}
			_this4.z = _z5;
			if(!_this4._construct) {
				if(_this4.listen_z != null && !_this4.ignore_listeners) {
					_this4.listen_z(_z5);
				}
			}
			_this4.ignore_listeners = prev4;
			if(_this4.listen_x != null && !_this4.ignore_listeners) {
				_this4.listen_x(_this4.x);
			}
			if(_this4.listen_y != null && !_this4.ignore_listeners) {
				_this4.listen_y(_this4.y);
			}
			if(_this4.listen_z != null && !_this4.ignore_listeners) {
				_this4.listen_z(_this4.z);
			}
		}
		if(this.listen_x != null && !this.ignore_listeners) {
			this.listen_x(this.x);
		}
		if(this.listen_y != null && !this.ignore_listeners) {
			this.listen_y(this.y);
		}
		if(this.listen_z != null && !this.ignore_listeners) {
			this.listen_z(this.z);
		}
		if(this.listen_w != null && !this.ignore_listeners) {
			this.listen_w(this.w);
		}
		return this;
	}
	,setFromEuler: function(_euler,_order) {
		if(_order == null) {
			_order = 0;
		}
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		var _w = this.w;
		var c1 = Math.cos(_euler.x / 2);
		var c2 = Math.cos(_euler.y / 2);
		var c3 = Math.cos(_euler.z / 2);
		var s1 = Math.sin(_euler.x / 2);
		var s2 = Math.sin(_euler.y / 2);
		var s3 = Math.sin(_euler.z / 2);
		if(_order == 0) {
			_x = s1 * c2 * c3 + c1 * s2 * s3;
			_y = c1 * s2 * c3 - s1 * c2 * s3;
			_z = c1 * c2 * s3 + s1 * s2 * c3;
			_w = c1 * c2 * c3 - s1 * s2 * s3;
		} else if(_order == 1) {
			_x = s1 * c2 * c3 + c1 * s2 * s3;
			_y = c1 * s2 * c3 - s1 * c2 * s3;
			_z = c1 * c2 * s3 - s1 * s2 * c3;
			_w = c1 * c2 * c3 + s1 * s2 * s3;
		} else if(_order == 2) {
			_x = s1 * c2 * c3 - c1 * s2 * s3;
			_y = c1 * s2 * c3 + s1 * c2 * s3;
			_z = c1 * c2 * s3 + s1 * s2 * c3;
			_w = c1 * c2 * c3 - s1 * s2 * s3;
		} else if(_order == 3) {
			_x = s1 * c2 * c3 - c1 * s2 * s3;
			_y = c1 * s2 * c3 + s1 * c2 * s3;
			_z = c1 * c2 * s3 - s1 * s2 * c3;
			_w = c1 * c2 * c3 + s1 * s2 * s3;
		} else if(_order == 4) {
			_x = s1 * c2 * c3 + c1 * s2 * s3;
			_y = c1 * s2 * c3 + s1 * c2 * s3;
			_z = c1 * c2 * s3 - s1 * s2 * c3;
			_w = c1 * c2 * c3 - s1 * s2 * s3;
		} else if(_order == 5) {
			_x = s1 * c2 * c3 - c1 * s2 * s3;
			_y = c1 * s2 * c3 - s1 * c2 * s3;
			_z = c1 * c2 * s3 + s1 * s2 * c3;
			_w = c1 * c2 * c3 + s1 * s2 * s3;
		}
		this.ignore_euler = true;
		this.x = _x;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this = this.euler;
				var sqx = this.x * this.x;
				var sqy = this.y * this.y;
				var sqz = this.z * this.z;
				var sqw = this.w * this.w;
				var _x1 = _this.x;
				var _y1 = _this.y;
				var _z1 = _this.z;
				_x1 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw - sqx - sqy + sqz);
				var value = 2 * (this.x * this.z + this.y * this.w);
				_y1 = Math.asin(value < -1 ? -1 : value > 1 ? 1 : value);
				_z1 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw + sqx - sqy - sqz);
				var prev = _this.ignore_listeners;
				_this.ignore_listeners = true;
				_this.x = _x1;
				if(!_this._construct) {
					if(_this.listen_x != null && !_this.ignore_listeners) {
						_this.listen_x(_x1);
					}
				}
				_this.y = _y1;
				if(!_this._construct) {
					if(_this.listen_y != null && !_this.ignore_listeners) {
						_this.listen_y(_y1);
					}
				}
				_this.z = _z1;
				if(!_this._construct) {
					if(_this.listen_z != null && !_this.ignore_listeners) {
						_this.listen_z(_z1);
					}
				}
				_this.ignore_listeners = prev;
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_this.x);
				}
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(_this.y);
				}
				if(_this.listen_z != null && !_this.ignore_listeners) {
					_this.listen_z(_this.z);
				}
			}
			if(this.listen_x != null && !this.ignore_listeners) {
				this.listen_x(this.x);
			}
		}
		this.y = _y;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this1 = this.euler;
				var sqx1 = this.x * this.x;
				var sqy1 = this.y * this.y;
				var sqz1 = this.z * this.z;
				var sqw1 = this.w * this.w;
				var _x2 = _this1.x;
				var _y2 = _this1.y;
				var _z2 = _this1.z;
				_x2 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw1 - sqx1 - sqy1 + sqz1);
				var value1 = 2 * (this.x * this.z + this.y * this.w);
				_y2 = Math.asin(value1 < -1 ? -1 : value1 > 1 ? 1 : value1);
				_z2 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw1 + sqx1 - sqy1 - sqz1);
				var prev1 = _this1.ignore_listeners;
				_this1.ignore_listeners = true;
				_this1.x = _x2;
				if(!_this1._construct) {
					if(_this1.listen_x != null && !_this1.ignore_listeners) {
						_this1.listen_x(_x2);
					}
				}
				_this1.y = _y2;
				if(!_this1._construct) {
					if(_this1.listen_y != null && !_this1.ignore_listeners) {
						_this1.listen_y(_y2);
					}
				}
				_this1.z = _z2;
				if(!_this1._construct) {
					if(_this1.listen_z != null && !_this1.ignore_listeners) {
						_this1.listen_z(_z2);
					}
				}
				_this1.ignore_listeners = prev1;
				if(_this1.listen_x != null && !_this1.ignore_listeners) {
					_this1.listen_x(_this1.x);
				}
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_this1.y);
				}
				if(_this1.listen_z != null && !_this1.ignore_listeners) {
					_this1.listen_z(_this1.z);
				}
			}
			if(this.listen_y != null && !this.ignore_listeners) {
				this.listen_y(this.y);
			}
		}
		this.z = _z;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this2 = this.euler;
				var sqx2 = this.x * this.x;
				var sqy2 = this.y * this.y;
				var sqz2 = this.z * this.z;
				var sqw2 = this.w * this.w;
				var _x3 = _this2.x;
				var _y3 = _this2.y;
				var _z3 = _this2.z;
				_x3 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw2 - sqx2 - sqy2 + sqz2);
				var value2 = 2 * (this.x * this.z + this.y * this.w);
				_y3 = Math.asin(value2 < -1 ? -1 : value2 > 1 ? 1 : value2);
				_z3 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw2 + sqx2 - sqy2 - sqz2);
				var prev2 = _this2.ignore_listeners;
				_this2.ignore_listeners = true;
				_this2.x = _x3;
				if(!_this2._construct) {
					if(_this2.listen_x != null && !_this2.ignore_listeners) {
						_this2.listen_x(_x3);
					}
				}
				_this2.y = _y3;
				if(!_this2._construct) {
					if(_this2.listen_y != null && !_this2.ignore_listeners) {
						_this2.listen_y(_y3);
					}
				}
				_this2.z = _z3;
				if(!_this2._construct) {
					if(_this2.listen_z != null && !_this2.ignore_listeners) {
						_this2.listen_z(_z3);
					}
				}
				_this2.ignore_listeners = prev2;
				if(_this2.listen_x != null && !_this2.ignore_listeners) {
					_this2.listen_x(_this2.x);
				}
				if(_this2.listen_y != null && !_this2.ignore_listeners) {
					_this2.listen_y(_this2.y);
				}
				if(_this2.listen_z != null && !_this2.ignore_listeners) {
					_this2.listen_z(_this2.z);
				}
			}
			if(this.listen_z != null && !this.ignore_listeners) {
				this.listen_z(this.z);
			}
		}
		this.w = _w;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this3 = this.euler;
				var sqx3 = this.x * this.x;
				var sqy3 = this.y * this.y;
				var sqz3 = this.z * this.z;
				var sqw3 = this.w * this.w;
				var _x4 = _this3.x;
				var _y4 = _this3.y;
				var _z4 = _this3.z;
				_x4 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw3 - sqx3 - sqy3 + sqz3);
				var value3 = 2 * (this.x * this.z + this.y * this.w);
				_y4 = Math.asin(value3 < -1 ? -1 : value3 > 1 ? 1 : value3);
				_z4 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw3 + sqx3 - sqy3 - sqz3);
				var prev3 = _this3.ignore_listeners;
				_this3.ignore_listeners = true;
				_this3.x = _x4;
				if(!_this3._construct) {
					if(_this3.listen_x != null && !_this3.ignore_listeners) {
						_this3.listen_x(_x4);
					}
				}
				_this3.y = _y4;
				if(!_this3._construct) {
					if(_this3.listen_y != null && !_this3.ignore_listeners) {
						_this3.listen_y(_y4);
					}
				}
				_this3.z = _z4;
				if(!_this3._construct) {
					if(_this3.listen_z != null && !_this3.ignore_listeners) {
						_this3.listen_z(_z4);
					}
				}
				_this3.ignore_listeners = prev3;
				if(_this3.listen_x != null && !_this3.ignore_listeners) {
					_this3.listen_x(_this3.x);
				}
				if(_this3.listen_y != null && !_this3.ignore_listeners) {
					_this3.listen_y(_this3.y);
				}
				if(_this3.listen_z != null && !_this3.ignore_listeners) {
					_this3.listen_z(_this3.z);
				}
			}
			if(this.listen_w != null && !this.ignore_listeners) {
				this.listen_w(this.w);
			}
		}
		this.ignore_euler = false;
		if(!(this.euler == null || this.ignore_euler || this._construct)) {
			var _this4 = this.euler;
			var sqx4 = this.x * this.x;
			var sqy4 = this.y * this.y;
			var sqz4 = this.z * this.z;
			var sqw4 = this.w * this.w;
			var _x5 = _this4.x;
			var _y5 = _this4.y;
			var _z5 = _this4.z;
			_x5 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw4 - sqx4 - sqy4 + sqz4);
			var value4 = 2 * (this.x * this.z + this.y * this.w);
			_y5 = Math.asin(value4 < -1 ? -1 : value4 > 1 ? 1 : value4);
			_z5 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw4 + sqx4 - sqy4 - sqz4);
			var prev4 = _this4.ignore_listeners;
			_this4.ignore_listeners = true;
			_this4.x = _x5;
			if(!_this4._construct) {
				if(_this4.listen_x != null && !_this4.ignore_listeners) {
					_this4.listen_x(_x5);
				}
			}
			_this4.y = _y5;
			if(!_this4._construct) {
				if(_this4.listen_y != null && !_this4.ignore_listeners) {
					_this4.listen_y(_y5);
				}
			}
			_this4.z = _z5;
			if(!_this4._construct) {
				if(_this4.listen_z != null && !_this4.ignore_listeners) {
					_this4.listen_z(_z5);
				}
			}
			_this4.ignore_listeners = prev4;
			if(_this4.listen_x != null && !_this4.ignore_listeners) {
				_this4.listen_x(_this4.x);
			}
			if(_this4.listen_y != null && !_this4.ignore_listeners) {
				_this4.listen_y(_this4.y);
			}
			if(_this4.listen_z != null && !_this4.ignore_listeners) {
				_this4.listen_z(_this4.z);
			}
		}
		if(this.listen_x != null && !this.ignore_listeners) {
			this.listen_x(this.x);
		}
		if(this.listen_y != null && !this.ignore_listeners) {
			this.listen_y(this.y);
		}
		if(this.listen_z != null && !this.ignore_listeners) {
			this.listen_z(this.z);
		}
		if(this.listen_w != null && !this.ignore_listeners) {
			this.listen_w(this.w);
		}
		return this;
	}
	,setFromRotationMatrix: function(_m) {
		var te = _m.elements;
		var m11 = te[0];
		var m12 = te[4];
		var m13 = te[8];
		var m21 = te[1];
		var m22 = te[5];
		var m23 = te[9];
		var m31 = te[2];
		var m32 = te[6];
		var m33 = te[10];
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		var _w = this.w;
		var tr = m11 + m22 + m33;
		var s;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			_w = 0.25 / s;
			_x = (m32 - m23) * s;
			_y = (m13 - m31) * s;
			_z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			_w = (m32 - m23) / s;
			_x = 0.25 * s;
			_y = (m12 + m21) / s;
			_z = (m13 + m31) / s;
		} else if(m22 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			_w = (m13 - m31) / s;
			_x = (m12 + m21) / s;
			_y = 0.25 * s;
			_z = (m23 + m32) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			_w = (m21 - m12) / s;
			_x = (m13 + m31) / s;
			_y = (m23 + m32) / s;
			_z = 0.25 * s;
		}
		this.ignore_euler = true;
		this.x = _x;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this = this.euler;
				var sqx = this.x * this.x;
				var sqy = this.y * this.y;
				var sqz = this.z * this.z;
				var sqw = this.w * this.w;
				var _x1 = _this.x;
				var _y1 = _this.y;
				var _z1 = _this.z;
				_x1 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw - sqx - sqy + sqz);
				var value = 2 * (this.x * this.z + this.y * this.w);
				_y1 = Math.asin(value < -1 ? -1 : value > 1 ? 1 : value);
				_z1 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw + sqx - sqy - sqz);
				var prev = _this.ignore_listeners;
				_this.ignore_listeners = true;
				_this.x = _x1;
				if(!_this._construct) {
					if(_this.listen_x != null && !_this.ignore_listeners) {
						_this.listen_x(_x1);
					}
				}
				_this.y = _y1;
				if(!_this._construct) {
					if(_this.listen_y != null && !_this.ignore_listeners) {
						_this.listen_y(_y1);
					}
				}
				_this.z = _z1;
				if(!_this._construct) {
					if(_this.listen_z != null && !_this.ignore_listeners) {
						_this.listen_z(_z1);
					}
				}
				_this.ignore_listeners = prev;
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_this.x);
				}
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(_this.y);
				}
				if(_this.listen_z != null && !_this.ignore_listeners) {
					_this.listen_z(_this.z);
				}
			}
			if(this.listen_x != null && !this.ignore_listeners) {
				this.listen_x(this.x);
			}
		}
		this.y = _y;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this1 = this.euler;
				var sqx1 = this.x * this.x;
				var sqy1 = this.y * this.y;
				var sqz1 = this.z * this.z;
				var sqw1 = this.w * this.w;
				var _x2 = _this1.x;
				var _y2 = _this1.y;
				var _z2 = _this1.z;
				_x2 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw1 - sqx1 - sqy1 + sqz1);
				var value1 = 2 * (this.x * this.z + this.y * this.w);
				_y2 = Math.asin(value1 < -1 ? -1 : value1 > 1 ? 1 : value1);
				_z2 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw1 + sqx1 - sqy1 - sqz1);
				var prev1 = _this1.ignore_listeners;
				_this1.ignore_listeners = true;
				_this1.x = _x2;
				if(!_this1._construct) {
					if(_this1.listen_x != null && !_this1.ignore_listeners) {
						_this1.listen_x(_x2);
					}
				}
				_this1.y = _y2;
				if(!_this1._construct) {
					if(_this1.listen_y != null && !_this1.ignore_listeners) {
						_this1.listen_y(_y2);
					}
				}
				_this1.z = _z2;
				if(!_this1._construct) {
					if(_this1.listen_z != null && !_this1.ignore_listeners) {
						_this1.listen_z(_z2);
					}
				}
				_this1.ignore_listeners = prev1;
				if(_this1.listen_x != null && !_this1.ignore_listeners) {
					_this1.listen_x(_this1.x);
				}
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_this1.y);
				}
				if(_this1.listen_z != null && !_this1.ignore_listeners) {
					_this1.listen_z(_this1.z);
				}
			}
			if(this.listen_y != null && !this.ignore_listeners) {
				this.listen_y(this.y);
			}
		}
		this.z = _z;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this2 = this.euler;
				var sqx2 = this.x * this.x;
				var sqy2 = this.y * this.y;
				var sqz2 = this.z * this.z;
				var sqw2 = this.w * this.w;
				var _x3 = _this2.x;
				var _y3 = _this2.y;
				var _z3 = _this2.z;
				_x3 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw2 - sqx2 - sqy2 + sqz2);
				var value2 = 2 * (this.x * this.z + this.y * this.w);
				_y3 = Math.asin(value2 < -1 ? -1 : value2 > 1 ? 1 : value2);
				_z3 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw2 + sqx2 - sqy2 - sqz2);
				var prev2 = _this2.ignore_listeners;
				_this2.ignore_listeners = true;
				_this2.x = _x3;
				if(!_this2._construct) {
					if(_this2.listen_x != null && !_this2.ignore_listeners) {
						_this2.listen_x(_x3);
					}
				}
				_this2.y = _y3;
				if(!_this2._construct) {
					if(_this2.listen_y != null && !_this2.ignore_listeners) {
						_this2.listen_y(_y3);
					}
				}
				_this2.z = _z3;
				if(!_this2._construct) {
					if(_this2.listen_z != null && !_this2.ignore_listeners) {
						_this2.listen_z(_z3);
					}
				}
				_this2.ignore_listeners = prev2;
				if(_this2.listen_x != null && !_this2.ignore_listeners) {
					_this2.listen_x(_this2.x);
				}
				if(_this2.listen_y != null && !_this2.ignore_listeners) {
					_this2.listen_y(_this2.y);
				}
				if(_this2.listen_z != null && !_this2.ignore_listeners) {
					_this2.listen_z(_this2.z);
				}
			}
			if(this.listen_z != null && !this.ignore_listeners) {
				this.listen_z(this.z);
			}
		}
		this.w = _w;
		if(!this._construct) {
			if(!(this.euler == null || this.ignore_euler || this._construct)) {
				var _this3 = this.euler;
				var sqx3 = this.x * this.x;
				var sqy3 = this.y * this.y;
				var sqz3 = this.z * this.z;
				var sqw3 = this.w * this.w;
				var _x4 = _this3.x;
				var _y4 = _this3.y;
				var _z4 = _this3.z;
				_x4 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw3 - sqx3 - sqy3 + sqz3);
				var value3 = 2 * (this.x * this.z + this.y * this.w);
				_y4 = Math.asin(value3 < -1 ? -1 : value3 > 1 ? 1 : value3);
				_z4 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw3 + sqx3 - sqy3 - sqz3);
				var prev3 = _this3.ignore_listeners;
				_this3.ignore_listeners = true;
				_this3.x = _x4;
				if(!_this3._construct) {
					if(_this3.listen_x != null && !_this3.ignore_listeners) {
						_this3.listen_x(_x4);
					}
				}
				_this3.y = _y4;
				if(!_this3._construct) {
					if(_this3.listen_y != null && !_this3.ignore_listeners) {
						_this3.listen_y(_y4);
					}
				}
				_this3.z = _z4;
				if(!_this3._construct) {
					if(_this3.listen_z != null && !_this3.ignore_listeners) {
						_this3.listen_z(_z4);
					}
				}
				_this3.ignore_listeners = prev3;
				if(_this3.listen_x != null && !_this3.ignore_listeners) {
					_this3.listen_x(_this3.x);
				}
				if(_this3.listen_y != null && !_this3.ignore_listeners) {
					_this3.listen_y(_this3.y);
				}
				if(_this3.listen_z != null && !_this3.ignore_listeners) {
					_this3.listen_z(_this3.z);
				}
			}
			if(this.listen_w != null && !this.ignore_listeners) {
				this.listen_w(this.w);
			}
		}
		this.ignore_euler = false;
		if(!(this.euler == null || this.ignore_euler || this._construct)) {
			var _this4 = this.euler;
			var sqx4 = this.x * this.x;
			var sqy4 = this.y * this.y;
			var sqz4 = this.z * this.z;
			var sqw4 = this.w * this.w;
			var _x5 = _this4.x;
			var _y5 = _this4.y;
			var _z5 = _this4.z;
			_x5 = Math.atan2(2 * (this.x * this.w - this.y * this.z),sqw4 - sqx4 - sqy4 + sqz4);
			var value4 = 2 * (this.x * this.z + this.y * this.w);
			_y5 = Math.asin(value4 < -1 ? -1 : value4 > 1 ? 1 : value4);
			_z5 = Math.atan2(2 * (this.z * this.w - this.x * this.y),sqw4 + sqx4 - sqy4 - sqz4);
			var prev4 = _this4.ignore_listeners;
			_this4.ignore_listeners = true;
			_this4.x = _x5;
			if(!_this4._construct) {
				if(_this4.listen_x != null && !_this4.ignore_listeners) {
					_this4.listen_x(_x5);
				}
			}
			_this4.y = _y5;
			if(!_this4._construct) {
				if(_this4.listen_y != null && !_this4.ignore_listeners) {
					_this4.listen_y(_y5);
				}
			}
			_this4.z = _z5;
			if(!_this4._construct) {
				if(_this4.listen_z != null && !_this4.ignore_listeners) {
					_this4.listen_z(_z5);
				}
			}
			_this4.ignore_listeners = prev4;
			if(_this4.listen_x != null && !_this4.ignore_listeners) {
				_this4.listen_x(_this4.x);
			}
			if(_this4.listen_y != null && !_this4.ignore_listeners) {
				_this4.listen_y(_this4.y);
			}
			if(_this4.listen_z != null && !_this4.ignore_listeners) {
				_this4.listen_z(_this4.z);
			}
		}
		if(this.listen_x != null && !this.ignore_listeners) {
			this.listen_x(this.x);
		}
		if(this.listen_y != null && !this.ignore_listeners) {
			this.listen_y(this.y);
		}
		if(this.listen_z != null && !this.ignore_listeners) {
			this.listen_z(this.z);
		}
		if(this.listen_w != null && !this.ignore_listeners) {
			this.listen_w(this.w);
		}
		return this;
	}
	,clone: function() {
		return new phoenix_Quaternion(this.x,this.y,this.z,this.w);
	}
	,__class__: phoenix_Quaternion
};
var phoenix_Rectangle = function(_x,_y,_w,_h) {
	if(_h == null) {
		_h = 0;
	}
	if(_w == null) {
		_w = 0;
	}
	if(_y == null) {
		_y = 0;
	}
	if(_x == null) {
		_x = 0;
	}
	this.ignore_listeners = false;
	this.h = 0;
	this.w = 0;
	this.y = 0;
	this.x = 0;
	this.set_x(_x);
	this.set_y(_y);
	this.set_w(_w);
	this.set_h(_h);
};
$hxClasses["phoenix.Rectangle"] = phoenix_Rectangle;
phoenix_Rectangle.__name__ = ["phoenix","Rectangle"];
phoenix_Rectangle.listen = function(_r,listener) {
	_r.listen_x = listener;
	_r.listen_y = listener;
	_r.listen_w = listener;
	_r.listen_h = listener;
};
phoenix_Rectangle.prototype = {
	equal: function(_other) {
		if(_other == null) {
			return false;
		}
		if(this.x == _other.x && this.y == _other.y && this.w == _other.w) {
			return this.h == _other.h;
		} else {
			return false;
		}
	}
	,set: function(_x,_y,_w,_h) {
		var _setx = this.x;
		var _sety = this.y;
		var _setw = this.w;
		var _seth = this.h;
		if(_x != null) {
			_setx = _x;
		}
		if(_y != null) {
			_sety = _y;
		}
		if(_w != null) {
			_setw = _w;
		}
		if(_h != null) {
			_seth = _h;
		}
		this.set_x(_setx);
		this.set_y(_sety);
		this.set_w(_setw);
		this.set_h(_seth);
		return this;
	}
	,set_x: function(_x) {
		this.x = _x;
		if(this.listen_x != null && !this.ignore_listeners) {
			this.listen_x(_x);
		}
		return this.x;
	}
	,set_y: function(_y) {
		this.y = _y;
		if(this.listen_y != null && !this.ignore_listeners) {
			this.listen_y(_y);
		}
		return this.y;
	}
	,set_w: function(_w) {
		this.w = _w;
		if(this.listen_w != null && !this.ignore_listeners) {
			this.listen_w(_w);
		}
		return this.w;
	}
	,set_h: function(_h) {
		this.h = _h;
		if(this.listen_h != null && !this.ignore_listeners) {
			this.listen_h(_h);
		}
		return this.h;
	}
	,__class__: phoenix_Rectangle
	,__properties__: {set_h:"set_h",set_w:"set_w",set_y:"set_y",set_x:"set_x"}
};
var phoenix_RenderPath = function(_renderer) {
	this.renderer = _renderer;
};
$hxClasses["phoenix.RenderPath"] = phoenix_RenderPath;
phoenix_RenderPath.__name__ = ["phoenix","RenderPath"];
phoenix_RenderPath.prototype = {
	render: function(_batchers,_stats) {
		var c = _batchers.length;
		var i = 0;
		while(i < c) {
			var batch = _batchers[i];
			if(batch.enabled) {
				if(batch.name != "") {
					Luxe.debug.start(batch.name);
				}
				batch.draw_calls = 0;
				batch.vert_count = 0;
				batch.emitter.emit(1,batch);
				batch.view.process();
				batch.renderer.state.viewport(batch.view.viewport.x,batch.view.viewport.y,batch.view.viewport.w,batch.view.viewport.h);
				batch.batch(false);
				batch.emitter.emit(2,batch);
				var _stats1 = batch.renderer.stats;
				var _node = batch.geometry.root;
				_stats1.geometry_count += (_node == null ? 0 : _node.nodecount) * batch.show_stats;
				_stats1.dynamic_batched_count += batch.dynamic_batched_count * batch.show_stats;
				_stats1.static_batched_count += batch.static_batched_count * batch.show_stats;
				_stats1.visible_count += batch.visible_count * batch.show_stats;
				_stats1.draw_calls += batch.draw_calls * batch.show_stats;
				_stats1.vert_count += batch.vert_count * batch.show_stats;
				if(batch.name != "") {
					Luxe.debug.end(batch.name);
				}
			}
			batch = null;
			++i;
		}
	}
	,__class__: phoenix_RenderPath
};
var phoenix_RenderState = function(_renderer) {
	this._active_texture = -1;
	this._used_program = null;
	this.current_renderbuffer = null;
	this.current_framebuffer = null;
	this.depth_func = -1;
	this.depth_test = false;
	this.cull_face = false;
	this.renderer = _renderer;
	this._viewport = new phoenix_Rectangle(0,0,0,0);
};
$hxClasses["phoenix.RenderState"] = phoenix_RenderState;
phoenix_RenderState.__name__ = ["phoenix","RenderState"];
phoenix_RenderState.prototype = {
	enable: function(what) {
		switch(what) {
		case 2884:
			if(!this.cull_face) {
				this.cull_face = true;
				snow_modules_opengl_web_GL.gl.enable(2884);
			}
			break;
		case 2929:
			if(Luxe.core.app.config.render.depth > 0) {
				if(!this.depth_test) {
					this.depth_test = true;
					snow_modules_opengl_web_GL.gl.enable(2929);
				}
			}
			break;
		}
	}
	,disable: function(what) {
		switch(what) {
		case 2884:
			if(this.cull_face) {
				this.cull_face = false;
				snow_modules_opengl_web_GL.gl.disable(2884);
			}
			break;
		case 2929:
			if(Luxe.core.app.config.render.depth > 0) {
				if(this.depth_test) {
					this.depth_test = false;
					snow_modules_opengl_web_GL.gl.disable(2929);
				}
			}
			break;
		}
	}
	,depth_function: function(what) {
		if(this.depth_func != what) {
			snow_modules_opengl_web_GL.gl.depthFunc(what);
			this.depth_func = what;
		}
	}
	,scissor: function(x,y,w,h) {
		var _target_scale = this.renderer.get_target().viewport_scale;
		x *= _target_scale;
		y *= _target_scale;
		w *= _target_scale;
		h *= _target_scale;
		snow_modules_opengl_web_GL.gl.scissor(x | 0,this.renderer.get_target().height - (y + h) | 0,w | 0,h | 0);
	}
	,viewport: function(x,y,w,h) {
		var _target_scale = this.renderer.get_target().viewport_scale;
		x *= _target_scale;
		y *= _target_scale;
		w *= _target_scale;
		h *= _target_scale;
		snow_modules_opengl_web_GL.gl.viewport(x | 0,this.renderer.get_target().height - (y + h) | 0,w | 0,h | 0);
	}
	,bindFramebuffer: function(buffer) {
		if(this.current_framebuffer != buffer) {
			if(buffer == null) {
				buffer = this.renderer.default_framebuffer;
			}
			snow_modules_opengl_web_GL.gl.bindFramebuffer(36160,buffer);
			this.current_framebuffer = buffer;
		}
	}
	,bindRenderbuffer: function(buffer) {
		if(this.current_renderbuffer != buffer) {
			if(buffer == null) {
				buffer = this.renderer.default_renderbuffer;
			}
			snow_modules_opengl_web_GL.gl.bindRenderbuffer(36161,buffer);
			this.current_renderbuffer = buffer;
		}
	}
	,useProgram: function(program) {
		if(this._used_program != program) {
			this._used_program = program;
			snow_modules_opengl_web_GL.gl.useProgram(program);
		}
	}
	,activeTexture: function(val) {
		if(this._active_texture != val) {
			snow_modules_opengl_web_GL.gl.activeTexture(val);
			this._active_texture = val;
		}
	}
	,bindTexture2D: function(tex) {
		if(phoenix_RenderState.bound_texture_2D != tex) {
			phoenix_RenderState.bound_texture_2D = tex;
			snow_modules_opengl_web_GL.gl.bindTexture(3553,tex);
		}
	}
	,bindTextureCube: function(tex) {
		if(phoenix_RenderState.bound_texture_cube != tex) {
			phoenix_RenderState.bound_texture_cube = tex;
			snow_modules_opengl_web_GL.gl.bindTexture(34067,tex);
		}
	}
	,__class__: phoenix_RenderState
};
var phoenix_Texture = function(_options) {
	this.load_premultiply_alpha = false;
	this.height = -1;
	this.width = -1;
	this.height_actual = -1;
	this.width_actual = -1;
	this.compressed = false;
	this.border = 0;
	this.slot = 0;
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null" + (" ( " + "Texture create requires non-null options" + " )")));
	}
	if(_options.resource_type == null) {
		_options.resource_type = 4;
	}
	luxe_resource_Resource.call(this,_options);
	if(_options.texture == null) {
		_options.texture = this.create_texture_id();
	}
	this.texture = _options.texture;
	this.bind();
	this.apply_default_options(_options);
	if(_options.pixels != null) {
		if(_options.width == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options.width was null" + (" ( " + "Texture create with pixels requires both width and height" + " )")));
		}
		if(_options.height == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options.height was null" + (" ( " + "Texture create with pixels requires both width and height" + " )")));
		}
	}
	if(_options.width != null || _options.height != null) {
		if(_options.height == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options.height was null" + (" ( " + "Texture requires both width and height, only width was given in construct options" + " )")));
		}
		if(_options.width == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options.width was null" + (" ( " + "Texture requires both width and height, only height was given in construct options" + " )")));
		}
		this.width = this.width_actual = _options.width;
		this.height = this.height_actual = _options.height;
		if(_options.pixels != null) {
			this.submit(_options.pixels);
		}
	}
};
$hxClasses["phoenix.Texture"] = phoenix_Texture;
phoenix_Texture.__name__ = ["phoenix","Texture"];
phoenix_Texture.max_size = function() {
	return snow_modules_opengl_web_GL.gl.getParameter(3379);
};
phoenix_Texture.__super__ = luxe_resource_Resource;
phoenix_Texture.prototype = $extend(luxe_resource_Resource.prototype,{
	memory_use: function() {
		return this.width_actual * this.height_actual * 4;
	}
	,submit: function(_pixels,_target,_level) {
		if(_level == null) {
			_level = 0;
		}
		if(_level < 0) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("_level >= 0" + (" ( " + "Texture submit level cannot be negative" + " )")));
		}
		var _max = phoenix_Texture.max_size();
		if(this.width_actual > _max) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("width_actual <= _max" + (" ( " + ("Texture actual width bigger than maximum hardware size (width:" + this.width_actual + ", max:" + _max + ")") + " )")));
		}
		if(this.height_actual > _max) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("height_actual <= _max" + (" ( " + ("Texture actual height bigger than maximum hardware size (height:" + this.height_actual + ", max:" + _max + ")") + " )")));
		}
		this.bind();
		if(_target == null) {
			_target = 3553;
		}
		if(this.type == 3553) {
			if(this.compressed) {
				snow_modules_opengl_web_GL.gl.compressedTexImage2D(_target,_level,this.format,this.width_actual,this.height_actual,this.border,_pixels);
			} else {
				snow_modules_opengl_web_GL.gl.texImage2D(_target,_level,this.format,this.width_actual,this.height_actual,this.border,this.format,this.data_type,_pixels);
			}
		}
	}
	,bind: function() {
		Luxe.renderer.state.activeTexture(33984 + this.slot);
		var _this = Luxe.renderer.state;
		var tex = this.texture;
		switch(this.type) {
		case 3553:
			_this.bindTexture2D(tex);
			break;
		case 34067:
			_this.bindTextureCube(tex);
			break;
		}
	}
	,reload: function() {
		var _gthis = this;
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed" + (" ( " + "Resource cannot reload when already destroyed" + " )")));
		}
		this.clear();
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.set_state(2);
			var get = snow_systems_assets_AssetImage.load(Luxe.core.app.assets,_gthis.id);
			get.then(function(_asset) {
				_gthis.texture = _gthis.create_texture_id();
				_gthis.from_asset(_asset);
				_gthis.set_state(3);
				resolve(_gthis);
			});
			get.error(function(_error) {
				_gthis.set_state(4);
				reject(_error);
			});
		});
	}
	,from_asset: function(_asset,_clear_asset) {
		if(_clear_asset == null) {
			_clear_asset = true;
		}
		this.width = _asset.image.width;
		this.height = _asset.image.height;
		this.width_actual = _asset.image.width_actual;
		this.height_actual = _asset.image.height_actual;
		if(this.load_premultiply_alpha) {
			Luxe.utils.premultiply_alpha(_asset.image.pixels);
		}
		this.submit(_asset.image.pixels);
		if(_clear_asset) {
			_asset.image.pixels = null;
			_asset = null;
		}
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10241,this.filter_min);
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10240,this.filter_mag);
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10242,this.clamp_s);
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10243,this.clamp_t);
	}
	,clear: function() {
		if(this.texture != null) {
			snow_modules_opengl_web_GL.gl.deleteTexture(this.texture);
		}
	}
	,create_texture_id: function() {
		return snow_modules_opengl_web_GL.gl.createTexture();
	}
	,apply_default_options: function(_options) {
		if(_options.load_premultiply_alpha == null) {
			_options.load_premultiply_alpha = false;
		}
		this.load_premultiply_alpha = _options.load_premultiply_alpha;
		if(_options.compressed == null) {
			_options.compressed = false;
		}
		this.compressed = _options.compressed;
		if(_options.format == null) {
			_options.format = 6408;
		}
		this.format = _options.format;
		if(_options.type == null) {
			_options.type = 3553;
		}
		this.type = _options.type;
		if(_options.data_type == null) {
			_options.data_type = 5121;
		}
		this.data_type = _options.data_type;
		if(_options.filter_min == null) {
			_options.filter_min = phoenix_Texture.default_filter;
		}
		this.set_filter_min(_options.filter_min);
		if(_options.filter_mag == null) {
			_options.filter_mag = phoenix_Texture.default_filter;
		}
		this.set_filter_mag(_options.filter_mag);
		if(_options.clamp_s == null) {
			_options.clamp_s = phoenix_Texture.default_clamp;
		}
		this.set_clamp_s(_options.clamp_s);
		if(_options.clamp_t == null) {
			_options.clamp_t = phoenix_Texture.default_clamp;
		}
		this.set_clamp_t(_options.clamp_t);
	}
	,set_clamp_s: function(_clamp) {
		this.bind();
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10242,_clamp);
		return this.clamp_s = _clamp;
	}
	,set_clamp_t: function(_clamp) {
		this.bind();
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10243,_clamp);
		return this.clamp_t = _clamp;
	}
	,set_filter_min: function(_filter) {
		this.bind();
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10241,_filter);
		return this.filter_min = _filter;
	}
	,set_filter_mag: function(_filter) {
		this.bind();
		snow_modules_opengl_web_GL.gl.texParameteri(this.type,10240,_filter);
		return this.filter_mag = _filter;
	}
	,__class__: phoenix_Texture
	,__properties__: $extend(luxe_resource_Resource.prototype.__properties__,{set_clamp_t:"set_clamp_t",set_clamp_s:"set_clamp_s",set_filter_mag:"set_filter_mag",set_filter_min:"set_filter_min"})
});
var phoenix_RenderTarget = function() { };
$hxClasses["phoenix.RenderTarget"] = phoenix_RenderTarget;
phoenix_RenderTarget.__name__ = ["phoenix","RenderTarget"];
phoenix_RenderTarget.prototype = {
	__class__: phoenix_RenderTarget
};
var phoenix_Backbuffer = function(_render_w,_render_h,_render_scale,_fb,_rb) {
	this.width = _render_w;
	this.height = _render_h;
	this.viewport_scale = _render_scale;
	this.framebuffer = _fb;
	this.renderbuffer = _rb;
};
$hxClasses["phoenix.Backbuffer"] = phoenix_Backbuffer;
phoenix_Backbuffer.__name__ = ["phoenix","Backbuffer"];
phoenix_Backbuffer.__interfaces__ = [phoenix_RenderTarget];
phoenix_Backbuffer.prototype = {
	__class__: phoenix_Backbuffer
};
var phoenix_Renderer = function(_core,_asset) {
	this.should_clear = true;
	this.core = _core;
	this.font_asset = _asset;
	this.default_framebuffer = snow_modules_opengl_web_GL.gl.getParameter(36006);
	this.default_renderbuffer = snow_modules_opengl_web_GL.gl.getParameter(36007);
	this.backbuffer = new phoenix_Backbuffer(this.core.app.runtime.window.width,this.core.app.runtime.window.height,window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio,this.default_framebuffer,this.default_renderbuffer);
};
$hxClasses["phoenix.Renderer"] = phoenix_Renderer;
phoenix_Renderer.__name__ = ["phoenix","Renderer"];
phoenix_Renderer.prototype = {
	init: function() {
		haxe_Log.trace(" i / renderer / " + ("opengl " + snow_modules_opengl_web_GL.versionString()),{ fileName : "Renderer.hx", lineNumber : 137, className : "phoenix.Renderer", methodName : "init"});
		this.state = new phoenix_RenderState(this);
		this.clear_color = new phoenix_Color().rgb(1710618);
		this.stats = new phoenix_RendererStats();
		this.set_target(this.default_target = this.backbuffer);
		this.batchers = [];
		this.camera = new phoenix_Camera();
		this.default_render_path = new phoenix_RenderPath(this);
		this.render_path = this.default_render_path;
		this.create_default_shaders();
		this.batcher = new phoenix_Batcher(this,"default batcher");
		var _this = this.batcher;
		_this.layer = 1;
		_this.renderer.batchers.sort(($_=_this.renderer,$bind($_,$_.sort_batchers)));
		this.add_batch(this.batcher);
		this.create_default_font();
		if(Luxe.core.app.config.render.depth > 0) {
			this.state.enable(2929);
			this.state.depth_function(515);
			snow_modules_opengl_web_GL.gl.clearDepth(1.0);
		}
		snow_modules_opengl_web_GL.gl.enable(3042);
		snow_modules_opengl_web_GL.gl.blendFunc(770,771);
		snow_modules_opengl_web_GL.gl.pixelStorei(37441,0);
	}
	,destroy: function() {
		this.clear(new phoenix_Color().rgb(16729099));
	}
	,sort_batchers: function(a,b) {
		if(a.layer < b.layer) {
			return -1;
		}
		if(a.layer > b.layer) {
			return 1;
		}
		if(a.sequence < b.sequence) {
			return -1;
		}
		if(a.sequence > b.sequence) {
			return 1;
		}
		return 1;
	}
	,add_batch: function(batch) {
		this.batchers.push(batch);
		this.batchers.sort($bind(this,this.sort_batchers));
	}
	,create_batcher: function(options) {
		if(options != null) {
			if(options.name == null) {
				options.name = "batcher";
			}
			if(options.layer == null) {
				options.layer = 2;
			}
			if(options.camera == null) {
				options.camera = new phoenix_Camera();
			}
			if(options.max_verts == null) {
				options.max_verts = 16384;
			}
		} else {
			options = { name : "batcher", camera : new phoenix_Camera(), layer : 2, max_verts : 16384};
		}
		var _batcher = new phoenix_Batcher(this,options.name,options.max_verts);
		_batcher.view = options.camera;
		_batcher.layer = options.layer;
		_batcher.renderer.batchers.sort(($_=_batcher.renderer,$bind($_,$_.sort_batchers)));
		if(options.no_add == null || options.no_add == false) {
			this.add_batch(_batcher);
		}
		return _batcher;
	}
	,clear: function(_color) {
		if(_color == null) {
			_color = this.clear_color;
		}
		snow_modules_opengl_web_GL.gl.clearColor(_color.r,_color.g,_color.b,_color.a);
		if(Luxe.core.app.config.render.depth > 0) {
			snow_modules_opengl_web_GL.gl.clear(16640);
			snow_modules_opengl_web_GL.gl.clearDepth(1.0);
		} else {
			snow_modules_opengl_web_GL.gl.clear(16384);
		}
	}
	,internal_resized: function(_w,_h) {
		this.backbuffer.width = _w;
		this.backbuffer.height = _h;
		this.backbuffer.viewport_scale = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
	}
	,process: function() {
		if(this.should_clear) {
			this.clear(this.clear_color);
		}
		this.render_path.render(this.batchers,this.stats);
	}
	,prerender: function() {
		this.stats.reset();
	}
	,get_target: function() {
		return this.target;
	}
	,set_target: function(_target) {
		if(_target == null) {
			_target = this.default_target;
		}
		this.state.bindFramebuffer(_target.framebuffer);
		this.state.bindRenderbuffer(_target.renderbuffer);
		return this.target = _target;
	}
	,create_default_shaders: function() {
		var vert = null;
		var frag = null;
		var frag_textured = null;
		var frag_bitmapfont = null;
		if(vert == null) {
			vert = haxe_Resource.getString("default.vert.glsl");
			frag = haxe_Resource.getString("default.frag.glsl");
			frag_textured = haxe_Resource.getString("default.frag.textured.glsl");
			frag_bitmapfont = haxe_Resource.getString("default.frag.bitmapfont.glsl");
		}
		snow_modules_opengl_web_GL.gl.getExtension("OES_standard_derivatives");
		frag = "precision mediump float;\n" + frag;
		frag_textured = "precision mediump float;\n" + frag_textured;
		frag_bitmapfont = "#extension GL_OES_standard_derivatives : enable\n#extension OES_standard_derivatives : enable\nprecision mediump float;\n" + frag_bitmapfont;
		var _plain = new phoenix_Shader({ id : "luxe.shader", frag_id : "default", vert_id : "default"});
		var _textured = new phoenix_Shader({ id : "luxe.shader_textured", frag_id : "textured", vert_id : "default"});
		var _font = new phoenix_Shader({ id : "luxe.shader_bitmapfont", frag_id : "bitmapfont", vert_id : "default"});
		var _ok = true;
		_ok = _plain.from_string(vert,frag);
		if(_ok) {
			_ok = _textured.from_string(vert,frag_textured);
		} else {
			_ok = false;
		}
		if(_ok) {
			_ok = _font.from_string(vert,frag_bitmapfont);
		} else {
			_ok = false;
		}
		if(!_ok) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("_ok" + (" ( " + "Default shaders failed to compile or link. See log for errors" + " )")));
		}
		this.shaders = { plain : { shader : _plain, source : { vert : vert, frag : frag}}, textured : { shader : _textured, source : { vert : vert, frag : frag_textured}}, bitmapfont : { shader : _font, source : { vert : vert, frag : frag_bitmapfont}}};
	}
	,create_default_font: function() {
		if(this.font_asset == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("font_asset was null" + (" ( " + "Renderer / failed to create the default font" + " )")));
		}
		var _font_texture = new phoenix_Texture({ id : "luxe.font.png", width : this.font_asset.image.width_actual, height : this.font_asset.image.height_actual, pixels : this.font_asset.image.pixels});
		if(_font_texture == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_font_texture was null" + (" ( " + "Renderer / failed to create the default font... font_texture was null." + " )")));
		}
		this.font = new phoenix_BitmapFont({ id : "luxe.font", font_data : haxe_Resource.getString("default.fnt"), pages : [_font_texture]});
	}
	,__class__: phoenix_Renderer
	,__properties__: {set_target:"set_target",get_target:"get_target"}
};
var phoenix_RendererStats = function() {
	this.vert_count = 0;
	this.draw_calls = 0;
	this.visible_count = 0;
	this.static_batched_count = 0;
	this.dynamic_batched_count = 0;
	this.geometry_count = 0;
	this.batchers = 0;
};
$hxClasses["phoenix.RendererStats"] = phoenix_RendererStats;
phoenix_RendererStats.__name__ = ["phoenix","RendererStats"];
phoenix_RendererStats.prototype = {
	reset: function() {
		this.geometry_count = 0;
		this.dynamic_batched_count = 0;
		this.static_batched_count = 0;
		this.visible_count = 0;
		this.draw_calls = 0;
		this.vert_count = 0;
	}
	,toString: function() {
		return "Renderer Statistics\n" + "\tbatcher count : " + this.batchers + "\n" + "\ttotal geometry : " + this.geometry_count + "\n" + "\tvisible geometry : " + this.visible_count + "\n" + "\tdynamic batched geometry : " + this.dynamic_batched_count + "\n" + "\tstatic batched geometry : " + this.static_batched_count + "\n" + "\ttotal draw calls : " + this.draw_calls + "\n" + "\ttotal vertices : " + this.vert_count;
	}
	,__class__: phoenix_RendererStats
};
var phoenix_Uniforms = function() {
	this.clear();
};
$hxClasses["phoenix.Uniforms"] = phoenix_Uniforms;
phoenix_Uniforms.__name__ = ["phoenix","Uniforms"];
phoenix_Uniforms.prototype = {
	destroy: function() {
		this.ints = null;
		this.floats = null;
		this.vector2s = null;
		this.vector2arrs = null;
		this.vector3s = null;
		this.vector3arrs = null;
		this.vector4s = null;
		this.vector4arrs = null;
		this.matrix4s = null;
		this.matrix4arrs = null;
		this.colors = null;
		this.textures = null;
		this.dirty_ints = null;
		this.dirty_floats = null;
		this.dirty_vector2s = null;
		this.dirty_vector2arrs = null;
		this.dirty_vector3s = null;
		this.dirty_vector3arrs = null;
		this.dirty_vector4s = null;
		this.dirty_vector4arrs = null;
		this.dirty_matrix4s = null;
		this.dirty_matrix4arrs = null;
		this.dirty_colors = null;
		this.dirty_textures = null;
	}
	,clear: function() {
		this.destroy();
		this.ints = new haxe_ds_StringMap();
		this.floats = new haxe_ds_StringMap();
		this.vector2s = new haxe_ds_StringMap();
		this.vector2arrs = new haxe_ds_StringMap();
		this.vector3s = new haxe_ds_StringMap();
		this.vector3arrs = new haxe_ds_StringMap();
		this.vector4s = new haxe_ds_StringMap();
		this.vector4arrs = new haxe_ds_StringMap();
		this.matrix4s = new haxe_ds_StringMap();
		this.matrix4arrs = new haxe_ds_StringMap();
		this.colors = new haxe_ds_StringMap();
		this.textures = new haxe_ds_StringMap();
		this.dirty_ints = [];
		this.dirty_floats = [];
		this.dirty_vector2s = [];
		this.dirty_vector2arrs = [];
		this.dirty_vector3s = [];
		this.dirty_vector3arrs = [];
		this.dirty_vector4s = [];
		this.dirty_vector4arrs = [];
		this.dirty_matrix4s = [];
		this.dirty_matrix4arrs = [];
		this.dirty_colors = [];
		this.dirty_textures = [];
	}
	,apply: function() {
		while(this.dirty_ints.length > 0) {
			var uf = this.dirty_ints.pop();
			snow_modules_opengl_web_GL.gl.uniform1i(uf.location,uf.value);
		}
		while(this.dirty_floats.length > 0) {
			var uf1 = this.dirty_floats.pop();
			snow_modules_opengl_web_GL.gl.uniform1f(uf1.location,uf1.value);
		}
		while(this.dirty_vector2s.length > 0) {
			var uf2 = this.dirty_vector2s.pop();
			snow_modules_opengl_web_GL.gl.uniform2f(uf2.location,uf2.value.x,uf2.value.y);
		}
		while(this.dirty_vector2arrs.length > 0) {
			var uf3 = this.dirty_vector2arrs.pop();
			snow_modules_opengl_web_GL.gl.uniform2fv(uf3.location,uf3.value);
		}
		while(this.dirty_vector3s.length > 0) {
			var uf4 = this.dirty_vector3s.pop();
			snow_modules_opengl_web_GL.gl.uniform3f(uf4.location,uf4.value.x,uf4.value.y,uf4.value.z);
		}
		while(this.dirty_vector3arrs.length > 0) {
			var uf5 = this.dirty_vector3arrs.pop();
			snow_modules_opengl_web_GL.gl.uniform3fv(uf5.location,uf5.value);
		}
		while(this.dirty_vector4s.length > 0) {
			var uf6 = this.dirty_vector4s.pop();
			snow_modules_opengl_web_GL.gl.uniform4f(uf6.location,uf6.value.x,uf6.value.y,uf6.value.z,uf6.value.w);
		}
		while(this.dirty_vector4arrs.length > 0) {
			var uf7 = this.dirty_vector4arrs.pop();
			snow_modules_opengl_web_GL.gl.uniform4fv(uf7.location,uf7.value);
		}
		while(this.dirty_colors.length > 0) {
			var uf8 = this.dirty_colors.pop();
			snow_modules_opengl_web_GL.gl.uniform4f(uf8.location,uf8.value.r,uf8.value.g,uf8.value.b,uf8.value.a);
		}
		while(this.dirty_textures.length > 0) {
			var uf9 = this.dirty_textures.pop();
			snow_modules_opengl_web_GL.gl.uniform1i(uf9.location,uf9.value.slot);
			uf9.value.bind();
		}
		while(this.dirty_matrix4s.length > 0) {
			var uf10 = this.dirty_matrix4s.pop();
			var location = uf10.location;
			var _this = uf10.value;
			var i = 0;
			while(i < 16) {
				_this._float32array[i] = _this.elements[i];
				++i;
			}
			snow_modules_opengl_web_GL.gl.uniformMatrix4fv(location,false,_this._float32array);
		}
		while(this.dirty_matrix4arrs.length > 0) {
			var uf11 = this.dirty_matrix4arrs.pop();
			snow_modules_opengl_web_GL.gl.uniformMatrix4fv(uf11.location,false,uf11.value);
		}
	}
	,__class__: phoenix_Uniforms
};
var phoenix_Shader = function(_options) {
	this.no_default_uniforms = false;
	this.frag_id = "";
	this.vert_id = "";
	this.log = "";
	if(_options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("_options was null"));
	}
	_options.resource_type = 7;
	luxe_resource_Resource.call(this,_options);
	this.frag_id = _options.frag_id;
	this.vert_id = _options.vert_id;
	if(_options.no_default_uniforms == null) {
		_options.no_default_uniforms = false;
	}
	this.no_default_uniforms = _options.no_default_uniforms;
	this.uniforms = new phoenix_Uniforms();
};
$hxClasses["phoenix.Shader"] = phoenix_Shader;
phoenix_Shader.__name__ = ["phoenix","Shader"];
phoenix_Shader.__super__ = luxe_resource_Resource;
phoenix_Shader.prototype = $extend(luxe_resource_Resource.prototype,{
	'use': function() {
		if(this.program != null) {
			Luxe.renderer.state.useProgram(this.program);
		}
	}
	,compile: function(_type,_source) {
		var _shader = snow_modules_opengl_web_GL.gl.createShader(_type);
		snow_modules_opengl_web_GL.gl.shaderSource(_shader,_source);
		snow_modules_opengl_web_GL.gl.compileShader(_shader);
		var _compile_log = snow_modules_opengl_web_GL.gl.getShaderInfoLog(_shader);
		var _log = "";
		if(_compile_log.length > 0) {
			var _is_frag = _type == 35632;
			_log = "" + ("\n\t// start -- (" + (_is_frag ? "frag" : "vert") + " / " + (_is_frag ? this.frag_id : this.vert_id) + ") compile log --\n");
			var _items = _compile_log.split("\n");
			_items = _items.filter(function(s) {
				return StringTools.trim(s) != "";
			});
			_items = _items.map(function(s1) {
				return "\t\t" + StringTools.trim(s1);
			});
			_log += _items.join("\n");
			_log += "\n\t// end --\n";
		}
		if(snow_modules_opengl_web_GL.gl.getShaderParameter(_shader,35713) == 0) {
			this.log += "\tFailed to compile shader `" + this.id + "`:\n";
			var _log1;
			if(_log.length == 0) {
				var _items1 = snow_modules_opengl_web_GL.gl.getShaderInfoLog(_shader).split("\n");
				_items1 = _items1.filter(function(s2) {
					return StringTools.trim(s2) != "";
				});
				_items1 = _items1.map(function(s3) {
					return "\t\t" + StringTools.trim(s3);
				});
				_log1 = _items1.join("\n");
			} else {
				_log1 = _log;
			}
			this.log += _log1;
			snow_modules_opengl_web_GL.gl.deleteShader(_shader);
			return null;
		}
		return _shader;
	}
	,link: function() {
		this.program = snow_modules_opengl_web_GL.gl.createProgram();
		snow_modules_opengl_web_GL.gl.attachShader(this.program,this.vert_shader);
		snow_modules_opengl_web_GL.gl.attachShader(this.program,this.frag_shader);
		snow_modules_opengl_web_GL.gl.bindAttribLocation(this.program,0,"vertexPosition");
		snow_modules_opengl_web_GL.gl.bindAttribLocation(this.program,1,"vertexTCoord");
		snow_modules_opengl_web_GL.gl.bindAttribLocation(this.program,2,"vertexColor");
		snow_modules_opengl_web_GL.gl.bindAttribLocation(this.program,3,"vertexNormal");
		snow_modules_opengl_web_GL.gl.linkProgram(this.program);
		if(snow_modules_opengl_web_GL.gl.getProgramParameter(this.program,35714) == 0) {
			this.log += "\tFailed to link shader program:";
			var _items = snow_modules_opengl_web_GL.gl.getProgramInfoLog(this.program).split("\n");
			_items = _items.filter(function(s) {
				return StringTools.trim(s) != "";
			});
			_items = _items.map(function(s1) {
				return "\t\t" + StringTools.trim(s1);
			});
			var _log = _items.join("\n");
			this.log += _log;
			snow_modules_opengl_web_GL.gl.deleteProgram(this.program);
			this.program = null;
			return false;
		}
		this["use"]();
		if(!this.no_default_uniforms) {
			this.proj_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"projectionMatrix");
			this.view_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"modelViewMatrix");
			var _tex0_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex0");
			var _tex1_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex1");
			var _tex2_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex2");
			var _tex3_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex3");
			var _tex4_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex4");
			var _tex5_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex5");
			var _tex6_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex6");
			var _tex7_attribute = snow_modules_opengl_web_GL.gl.getUniformLocation(this.program,"tex7");
			if(_tex0_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex0_attribute,0);
			}
			if(_tex1_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex1_attribute,1);
			}
			if(_tex2_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex2_attribute,2);
			}
			if(_tex3_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex3_attribute,3);
			}
			if(_tex4_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex4_attribute,4);
			}
			if(_tex5_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex5_attribute,5);
			}
			if(_tex6_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex6_attribute,6);
			}
			if(_tex7_attribute != null) {
				snow_modules_opengl_web_GL.gl.uniform1i(_tex7_attribute,7);
			}
		}
		return true;
	}
	,clear: function() {
		if(this.vert_shader != null) {
			snow_modules_opengl_web_GL.gl.deleteShader(this.vert_shader);
		}
		if(this.frag_shader != null) {
			snow_modules_opengl_web_GL.gl.deleteShader(this.frag_shader);
		}
		if(this.program != null) {
			snow_modules_opengl_web_GL.gl.deleteProgram(this.program);
		}
		this.vert_source = null;
		this.frag_source = null;
		this.uniforms.clear();
	}
	,reload: function() {
		var _gthis = this;
		if(this.state == 6) {
			throw new js__$Boot_HaxeError(luxe_DebugError.assertion("state != ResourceState.destroyed"));
		}
		this.clear();
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.set_state(2);
			switch(_gthis.frag_id) {
			case "default":
				_gthis.frag_source = Luxe.renderer.shaders.plain.source.frag;
				break;
			case "textured":
				_gthis.frag_source = Luxe.renderer.shaders.textured.source.frag;
				break;
			}
			if(_gthis.vert_id == "default") {
				_gthis.vert_source = Luxe.renderer.shaders.plain.source.vert;
			}
			var _onfail = function(_err) {
				_gthis.set_state(4);
				reject(_err);
			};
			var _wait = [snow_api_Promise.resolve()];
			if(_gthis.frag_source == null) {
				var _frag = snow_systems_assets_AssetText.load(Luxe.core.app.assets,_gthis.frag_id);
				_frag.then(function(_asset) {
					_gthis.frag_source = _asset.text;
				});
				_wait.push(_frag);
			}
			if(_gthis.vert_source == null) {
				var _vert = snow_systems_assets_AssetText.load(Luxe.core.app.assets,_gthis.vert_id);
				_vert.then(function(_asset1) {
					_gthis.vert_source = _asset1.text;
				});
				_wait.push(_vert);
			}
			snow_api_Promise.all(_wait).then(function() {
				if(_gthis.from_string(_gthis.vert_source,_gthis.frag_source)) {
					_gthis.set_state(3);
					resolve(_gthis);
				} else {
					_onfail(snow_types_Error.error("`" + _gthis.id + "` failed to create :\n\n" + _gthis.log));
				}
			}).error(function(err) {
				_onfail(snow_types_Error.error("`" + _gthis.id + "` failed to create :\n\t\t" + err + "\n"));
			});
		});
	}
	,from_string: function(_vert_source,_fragment_source) {
		var _gthis = this;
		this.clear();
		this.frag_source = _fragment_source;
		this.vert_source = _vert_source;
		this.vert_shader = this.compile(35633,this.vert_source);
		this.frag_shader = this.compile(35632,this.frag_source);
		if(this.vert_shader == null || this.frag_shader == null) {
			if(_gthis.log.length > 0) {
				haxe_Log.trace("   i / shader / " + _gthis.log,{ fileName : "Shader.hx", lineNumber : 680, className : "phoenix.Shader", methodName : "from_string"});
			}
			return false;
		}
		if(!this.link()) {
			if(_gthis.log.length > 0) {
				haxe_Log.trace("   i / shader / " + _gthis.log,{ fileName : "Shader.hx", lineNumber : 680, className : "phoenix.Shader", methodName : "from_string"});
			}
			return false;
		}
		return true;
	}
	,__class__: phoenix_Shader
});
var phoenix_Transform = function() {
	this._destroying = false;
	this._cleaning = false;
	this._setup = true;
	this.manual_update = false;
	this.dirty = true;
	luxe_ID.call(this,"transform");
	var l = new phoenix_Spatial();
	if(l != null) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(this);
				}
			}
		}
		l.pos_changed = $bind(this,this.on_local_pos_change);
		l.rotation_changed = $bind(this,this.on_local_rotation_change);
		l.scale_changed = $bind(this,this.on_local_scale_change);
	}
	this.local = l;
	var w = new phoenix_Spatial();
	if(w == null) {
		this.world = w;
	} else {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g2 = 0;
			var _g11 = this._dirty_handlers;
			while(_g2 < _g11.length) {
				var _handler1 = _g11[_g2];
				++_g2;
				if(_handler1 != null) {
					_handler1(this);
				}
			}
		}
		this.world = w;
	}
	this._origin_undo_matrix = new phoenix_Matrix();
	this._pos_matrix = new phoenix_Matrix();
	this._rotation_matrix = new phoenix_Matrix();
	var o = new phoenix_Vector();
	this.dirty = true;
	if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
		var _g3 = 0;
		var _g12 = this._dirty_handlers;
		while(_g3 < _g12.length) {
			var _handler2 = _g12[_g3];
			++_g3;
			if(_handler2 != null) {
				_handler2(this);
			}
		}
	}
	this.origin = o;
	if(this._origin_handlers != null && this._origin_handlers.length > 0) {
		var _origin = this.origin;
		var _g4 = 0;
		var _g13 = this._origin_handlers;
		while(_g4 < _g13.length) {
			var _handler3 = _g13[_g4];
			++_g4;
			if(_handler3 != null) {
				_handler3(_origin);
			}
		}
	}
	this.local.pos_changed = $bind(this,this.on_local_pos_change);
	this.local.rotation_changed = $bind(this,this.on_local_rotation_change);
	this.local.scale_changed = $bind(this,this.on_local_scale_change);
	this._setup = false;
};
$hxClasses["phoenix.Transform"] = phoenix_Transform;
phoenix_Transform.__name__ = ["phoenix","Transform"];
phoenix_Transform.__super__ = luxe_ID;
phoenix_Transform.prototype = $extend(luxe_ID.prototype,{
	destroy: function() {
		this._destroying = true;
		if(this.parent != null) {
			var _this = this.parent;
			if(_this._clean_handlers != null) {
				HxOverrides.remove(_this._clean_handlers,$bind(this,this.on_parent_cleaned));
			}
		}
		this._clean_handlers = null;
		this._dirty_handlers = null;
		this._pos_handlers = null;
		this._rotation_handlers = null;
		this._scale_handlers = null;
		this._origin_handlers = null;
		this._parent_handlers = null;
		var _this1 = this.local;
		_this1.matrix = null;
		_this1.floats = null;
		_this1.pos = null;
		_this1.rotation = null;
		_this1.scale = null;
		if(!this._destroying) {
			if(this.parent != null && this.parent.dirty) {
				this.parent.clean_check();
			}
			if(this.dirty && !this._cleaning && !this.manual_update) {
				this.clean();
			}
		}
		var _this2 = this.world;
		_this2.matrix = null;
		_this2.floats = null;
		_this2.pos = null;
		_this2.rotation = null;
		_this2.scale = null;
		this.local = null;
		this.world = null;
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(this);
				}
			}
		}
		this.origin = null;
		if(this._origin_handlers != null && this._origin_handlers.length > 0) {
			var _origin = this.origin;
			var _g2 = 0;
			var _g11 = this._origin_handlers;
			while(_g2 < _g11.length) {
				var _handler1 = _g11[_g2];
				++_g2;
				if(_handler1 != null) {
					_handler1(_origin);
				}
			}
		}
		this._origin_undo_matrix = null;
		this._pos_matrix = null;
		this._rotation_matrix = null;
	}
	,on_local_pos_change: function(v) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(this);
				}
			}
		}
		if(this._pos_handlers != null && this._pos_handlers.length > 0) {
			var _g2 = 0;
			var _g11 = this._pos_handlers;
			while(_g2 < _g11.length) {
				var _handler1 = _g11[_g2];
				++_g2;
				if(_handler1 != null) {
					_handler1(v);
				}
			}
		}
	}
	,on_local_rotation_change: function(r) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(this);
				}
			}
		}
		if(this._rotation_handlers != null && this._rotation_handlers.length > 0) {
			var _g2 = 0;
			var _g11 = this._rotation_handlers;
			while(_g2 < _g11.length) {
				var _handler1 = _g11[_g2];
				++_g2;
				if(_handler1 != null) {
					_handler1(r);
				}
			}
		}
	}
	,on_local_scale_change: function(s) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(this);
				}
			}
		}
		if(this._scale_handlers != null && this._scale_handlers.length > 0) {
			var _g2 = 0;
			var _g11 = this._scale_handlers;
			while(_g2 < _g11.length) {
				var _handler1 = _g11[_g2];
				++_g2;
				if(_handler1 != null) {
					_handler1(s);
				}
			}
		}
	}
	,on_parent_cleaned: function(p) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(this);
				}
			}
		}
	}
	,get_world: function() {
		if(!this._destroying) {
			if(this.parent != null && this.parent.dirty) {
				this.parent.clean_check();
			}
			if(this.dirty && !this._cleaning && !this.manual_update) {
				this.clean();
			}
		}
		return this.world;
	}
	,clean_check: function() {
		if(this.parent != null && this.parent.dirty) {
			this.parent.clean_check();
		}
		if(this.dirty && !this._cleaning && !this.manual_update) {
			this.clean();
		}
	}
	,clean: function() {
		if(!this.dirty) {
			return;
		}
		this._cleaning = true;
		var e = this._pos_matrix.elements;
		e[0] = 1;
		e[4] = 0;
		e[8] = 0;
		e[12] = this.local.pos.x;
		e[1] = 0;
		e[5] = 1;
		e[9] = 0;
		e[13] = this.local.pos.y;
		e[2] = 0;
		e[6] = 0;
		e[10] = 1;
		e[14] = this.local.pos.z;
		e[3] = 0;
		e[7] = 0;
		e[11] = 0;
		e[15] = 1;
		var q = this.local.rotation;
		var te = this._rotation_matrix.elements;
		var x2 = q.x + q.x;
		var y2 = q.y + q.y;
		var z2 = q.z + q.z;
		var xx = q.x * x2;
		var xy = q.x * y2;
		var xz = q.x * z2;
		var yy = q.y * y2;
		var yz = q.y * z2;
		var zz = q.z * z2;
		var wx = q.w * x2;
		var wy = q.w * y2;
		var wz = q.w * z2;
		te[0] = 1 - (yy + zz);
		te[4] = xy - wz;
		te[8] = xz + wy;
		te[1] = xy + wz;
		te[5] = 1 - (xx + zz);
		te[9] = yz - wx;
		te[2] = xz - wy;
		te[6] = yz + wx;
		te[10] = 1 - (xx + yy);
		te[3] = 0;
		te[7] = 0;
		te[11] = 0;
		te[12] = 0;
		te[13] = 0;
		te[14] = 0;
		te[15] = 1;
		var e1 = this._origin_undo_matrix.elements;
		e1[0] = 1;
		e1[4] = 0;
		e1[8] = 0;
		e1[12] = -this.origin.x;
		e1[1] = 0;
		e1[5] = 1;
		e1[9] = 0;
		e1[13] = -this.origin.y;
		e1[2] = 0;
		e1[6] = 0;
		e1[10] = 1;
		e1[14] = -this.origin.z;
		e1[3] = 0;
		e1[7] = 0;
		e1[11] = 0;
		e1[15] = 1;
		var e2 = this.local.matrix.elements;
		e2[0] = 1;
		e2[4] = 0;
		e2[8] = 0;
		e2[12] = this.origin.x;
		e2[1] = 0;
		e2[5] = 1;
		e2[9] = 0;
		e2[13] = this.origin.y;
		e2[2] = 0;
		e2[6] = 0;
		e2[10] = 1;
		e2[14] = this.origin.z;
		e2[3] = 0;
		e2[7] = 0;
		e2[11] = 0;
		e2[15] = 1;
		var _this = this.local.matrix;
		var ae = _this.elements;
		var be = this._rotation_matrix.elements;
		var te1 = _this.elements;
		var a11 = ae[0];
		var a12 = ae[4];
		var a13 = ae[8];
		var a14 = ae[12];
		var a21 = ae[1];
		var a22 = ae[5];
		var a23 = ae[9];
		var a24 = ae[13];
		var a31 = ae[2];
		var a32 = ae[6];
		var a33 = ae[10];
		var a34 = ae[14];
		var a41 = ae[3];
		var a42 = ae[7];
		var a43 = ae[11];
		var a44 = ae[15];
		var b11 = be[0];
		var b12 = be[4];
		var b13 = be[8];
		var b14 = be[12];
		var b21 = be[1];
		var b22 = be[5];
		var b23 = be[9];
		var b24 = be[13];
		var b31 = be[2];
		var b32 = be[6];
		var b33 = be[10];
		var b34 = be[14];
		var b41 = be[3];
		var b42 = be[7];
		var b43 = be[11];
		var b44 = be[15];
		te1[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te1[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te1[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te1[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		te1[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te1[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te1[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te1[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		te1[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te1[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te1[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te1[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		te1[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te1[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te1[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te1[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
		var _v = this.local.scale;
		var te2 = this.local.matrix.elements;
		var _x = _v.x;
		var _y = _v.y;
		var _z = _v.z;
		te2[0] *= _x;
		te2[4] *= _y;
		te2[8] *= _z;
		te2[1] *= _x;
		te2[5] *= _y;
		te2[9] *= _z;
		te2[2] *= _x;
		te2[6] *= _y;
		te2[10] *= _z;
		te2[3] *= _x;
		te2[7] *= _y;
		te2[11] *= _z;
		var _v1 = this.local.pos;
		var te3 = this.local.matrix.elements;
		te3[12] = _v1.x;
		te3[13] = _v1.y;
		te3[14] = _v1.z;
		var _this1 = this.local.matrix;
		var ae1 = _this1.elements;
		var be1 = this._origin_undo_matrix.elements;
		var te4 = _this1.elements;
		var a111 = ae1[0];
		var a121 = ae1[4];
		var a131 = ae1[8];
		var a141 = ae1[12];
		var a211 = ae1[1];
		var a221 = ae1[5];
		var a231 = ae1[9];
		var a241 = ae1[13];
		var a311 = ae1[2];
		var a321 = ae1[6];
		var a331 = ae1[10];
		var a341 = ae1[14];
		var a411 = ae1[3];
		var a421 = ae1[7];
		var a431 = ae1[11];
		var a441 = ae1[15];
		var b111 = be1[0];
		var b121 = be1[4];
		var b131 = be1[8];
		var b141 = be1[12];
		var b211 = be1[1];
		var b221 = be1[5];
		var b231 = be1[9];
		var b241 = be1[13];
		var b311 = be1[2];
		var b321 = be1[6];
		var b331 = be1[10];
		var b341 = be1[14];
		var b411 = be1[3];
		var b421 = be1[7];
		var b431 = be1[11];
		var b441 = be1[15];
		te4[0] = a111 * b111 + a121 * b211 + a131 * b311 + a141 * b411;
		te4[4] = a111 * b121 + a121 * b221 + a131 * b321 + a141 * b421;
		te4[8] = a111 * b131 + a121 * b231 + a131 * b331 + a141 * b431;
		te4[12] = a111 * b141 + a121 * b241 + a131 * b341 + a141 * b441;
		te4[1] = a211 * b111 + a221 * b211 + a231 * b311 + a241 * b411;
		te4[5] = a211 * b121 + a221 * b221 + a231 * b321 + a241 * b421;
		te4[9] = a211 * b131 + a221 * b231 + a231 * b331 + a241 * b431;
		te4[13] = a211 * b141 + a221 * b241 + a231 * b341 + a241 * b441;
		te4[2] = a311 * b111 + a321 * b211 + a331 * b311 + a341 * b411;
		te4[6] = a311 * b121 + a321 * b221 + a331 * b321 + a341 * b421;
		te4[10] = a311 * b131 + a321 * b231 + a331 * b331 + a341 * b431;
		te4[14] = a311 * b141 + a321 * b241 + a331 * b341 + a341 * b441;
		te4[3] = a411 * b111 + a421 * b211 + a431 * b311 + a441 * b411;
		te4[7] = a411 * b121 + a421 * b221 + a431 * b321 + a441 * b421;
		te4[11] = a411 * b131 + a421 * b231 + a431 * b331 + a441 * b431;
		te4[15] = a411 * b141 + a421 * b241 + a431 * b341 + a441 * b441;
		if(this.parent != null) {
			var _this2 = this.get_world();
			var _this3 = this.get_world().matrix;
			var ae2 = this.parent.get_world().matrix.elements;
			var be2 = this.local.matrix.elements;
			var te5 = _this3.elements;
			var a112 = ae2[0];
			var a122 = ae2[4];
			var a132 = ae2[8];
			var a142 = ae2[12];
			var a212 = ae2[1];
			var a222 = ae2[5];
			var a232 = ae2[9];
			var a242 = ae2[13];
			var a312 = ae2[2];
			var a322 = ae2[6];
			var a332 = ae2[10];
			var a342 = ae2[14];
			var a412 = ae2[3];
			var a422 = ae2[7];
			var a432 = ae2[11];
			var a442 = ae2[15];
			var b112 = be2[0];
			var b122 = be2[4];
			var b132 = be2[8];
			var b142 = be2[12];
			var b212 = be2[1];
			var b222 = be2[5];
			var b232 = be2[9];
			var b242 = be2[13];
			var b312 = be2[2];
			var b322 = be2[6];
			var b332 = be2[10];
			var b342 = be2[14];
			var b412 = be2[3];
			var b422 = be2[7];
			var b432 = be2[11];
			var b442 = be2[15];
			te5[0] = a112 * b112 + a122 * b212 + a132 * b312 + a142 * b412;
			te5[4] = a112 * b122 + a122 * b222 + a132 * b322 + a142 * b422;
			te5[8] = a112 * b132 + a122 * b232 + a132 * b332 + a142 * b432;
			te5[12] = a112 * b142 + a122 * b242 + a132 * b342 + a142 * b442;
			te5[1] = a212 * b112 + a222 * b212 + a232 * b312 + a242 * b412;
			te5[5] = a212 * b122 + a222 * b222 + a232 * b322 + a242 * b422;
			te5[9] = a212 * b132 + a222 * b232 + a232 * b332 + a242 * b432;
			te5[13] = a212 * b142 + a222 * b242 + a232 * b342 + a242 * b442;
			te5[2] = a312 * b112 + a322 * b212 + a332 * b312 + a342 * b412;
			te5[6] = a312 * b122 + a322 * b222 + a332 * b322 + a342 * b422;
			te5[10] = a312 * b132 + a322 * b232 + a332 * b332 + a342 * b432;
			te5[14] = a312 * b142 + a322 * b242 + a332 * b342 + a342 * b442;
			te5[3] = a412 * b112 + a422 * b212 + a432 * b312 + a442 * b412;
			te5[7] = a412 * b122 + a422 * b222 + a432 * b322 + a442 * b422;
			te5[11] = a412 * b132 + a422 * b232 + a432 * b332 + a442 * b432;
			te5[15] = a412 * b142 + a422 * b242 + a432 * b342 + a442 * b442;
			_this2.matrix = _this3;
			if(_this3 != null) {
				var _this4 = _this2.matrix;
				var i = 0;
				while(i < 16) {
					_this4._float32array[i] = _this4.elements[i];
					++i;
				}
				_this2.floats = _this4._float32array;
			}
		} else {
			var _this5 = this.get_world().matrix;
			var me = this.local.matrix.elements;
			var e3 = _this5.elements;
			e3[0] = me[0];
			e3[4] = me[4];
			e3[8] = me[8];
			e3[12] = me[12];
			e3[1] = me[1];
			e3[5] = me[5];
			e3[9] = me[9];
			e3[13] = me[13];
			e3[2] = me[2];
			e3[6] = me[6];
			e3[10] = me[10];
			e3[14] = me[14];
			e3[3] = me[3];
			e3[7] = me[7];
			e3[11] = me[11];
			e3[15] = me[15];
		}
		var _this6 = this.get_world();
		if(_this6.auto_decompose) {
			var _this7 = _this6.matrix;
			var _position = null;
			var _quaternion = null;
			var _scale = null;
			var te6 = _this7.elements;
			var matrix = new phoenix_Matrix();
			var _ax_x = te6[0];
			var _ax_y = te6[1];
			var _ax_z = te6[2];
			var _ay_x = te6[4];
			var _ay_y = te6[5];
			var _ay_z = te6[6];
			var _az_x = te6[8];
			var _az_y = te6[9];
			var _az_z = te6[10];
			var _ax_length = Math.sqrt(_ax_x * _ax_x + _ax_y * _ax_y + _ax_z * _ax_z);
			var _ay_length = Math.sqrt(_ay_x * _ay_x + _ay_y * _ay_y + _ay_z * _ay_z);
			var _az_length = Math.sqrt(_az_x * _az_x + _az_y * _az_y + _az_z * _az_z);
			if(_quaternion == null) {
				_quaternion = new phoenix_Quaternion();
			}
			if(_position == null) {
				_position = new phoenix_Vector(te6[12],te6[13],te6[14]);
			} else {
				var _x1 = te6[12];
				_position.x = _x1;
				if(!_position._construct) {
					if(_position.listen_x != null && !_position.ignore_listeners) {
						_position.listen_x(_x1);
					}
				}
				var _y1 = te6[13];
				_position.y = _y1;
				if(!_position._construct) {
					if(_position.listen_y != null && !_position.ignore_listeners) {
						_position.listen_y(_y1);
					}
				}
				var _z1 = te6[14];
				_position.z = _z1;
				if(!_position._construct) {
					if(_position.listen_z != null && !_position.ignore_listeners) {
						_position.listen_z(_z1);
					}
				}
			}
			if(_scale == null) {
				_scale = new phoenix_Vector(_ax_length,_ay_length,_az_length);
			} else {
				_scale.x = _ax_length;
				if(!_scale._construct) {
					if(_scale.listen_x != null && !_scale.ignore_listeners) {
						_scale.listen_x(_ax_length);
					}
				}
				_scale.y = _ay_length;
				if(!_scale._construct) {
					if(_scale.listen_y != null && !_scale.ignore_listeners) {
						_scale.listen_y(_ay_length);
					}
				}
				_scale.z = _az_length;
				if(!_scale._construct) {
					if(_scale.listen_z != null && !_scale.ignore_listeners) {
						_scale.listen_z(_az_length);
					}
				}
			}
			matrix.elements = _this7.elements.concat([]);
			var me1 = matrix.elements;
			me1[0] /= _ax_length;
			me1[1] /= _ax_length;
			me1[2] /= _ax_length;
			me1[4] /= _ay_length;
			me1[5] /= _ay_length;
			me1[6] /= _ay_length;
			me1[8] /= _az_length;
			me1[9] /= _az_length;
			me1[10] /= _az_length;
			_quaternion.setFromRotationMatrix(matrix);
			if(_this7._transform == null) {
				_this7._transform = new phoenix_MatrixTransform(_position,_quaternion,_scale);
			} else {
				_this7._transform.pos = _position;
				_this7._transform.rotation = _quaternion;
				_this7._transform.scale = _scale;
			}
			var _transform = _this7._transform;
			var _p = _transform.pos;
			_this6.pos = _p;
			if(_p != null) {
				var _v2 = _this6.pos;
				var listener = $bind(_this6,_this6._pos_change);
				_v2.listen_x = listener;
				_v2.listen_y = listener;
				_v2.listen_z = listener;
				if(_this6.pos_changed != null && !_this6.ignore_listeners) {
					_this6.pos_changed(_this6.pos);
				}
			}
			var _r = _transform.rotation;
			_this6.rotation = _r;
			if(_r != null) {
				var _q = _this6.rotation;
				var listener1 = $bind(_this6,_this6._rotation_change);
				_q.listen_x = listener1;
				_q.listen_y = listener1;
				_q.listen_z = listener1;
				_q.listen_w = listener1;
				if(_this6.rotation_changed != null && !_this6.ignore_listeners) {
					_this6.rotation_changed(_this6.rotation);
				}
			}
			var _s = _transform.scale;
			_this6.scale = _s;
			if(_s != null) {
				var _v3 = _this6.scale;
				var listener2 = $bind(_this6,_this6._scale_change);
				_v3.listen_x = listener2;
				_v3.listen_y = listener2;
				_v3.listen_z = listener2;
				if(_this6.scale_changed != null && !_this6.ignore_listeners) {
					_this6.scale_changed(_this6.scale);
				}
			}
		}
		this.dirty = false;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) {
			var _g = 0;
			var _g1 = this._dirty_handlers;
			while(_g < _g1.length) {
				var _handler = _g1[_g];
				++_g;
				if(_handler != null) {
					_handler(this);
				}
			}
		}
		this._cleaning = false;
		if(this._clean_handlers != null && this._clean_handlers.length > 0) {
			var _g2 = 0;
			var _g11 = this._clean_handlers;
			while(_g2 < _g11.length) {
				var _handler1 = _g11[_g2];
				++_g2;
				if(_handler1 != null) {
					_handler1(this);
				}
			}
		}
	}
	,__class__: phoenix_Transform
	,__properties__: {get_world:"get_world"}
});
var phoenix_Spatial = function() {
	this._setup = true;
	this.auto_decompose = false;
	this.ignore_listeners = false;
	var _m = new phoenix_Matrix();
	this.matrix = _m;
	if(_m != null) {
		var _this = this.matrix;
		var i = 0;
		while(i < 16) {
			_this._float32array[i] = _this.elements[i];
			++i;
		}
		this.floats = _this._float32array;
	}
	var _this1 = this.matrix;
	var i1 = 0;
	while(i1 < 16) {
		_this1._float32array[i1] = _this1.elements[i1];
		++i1;
	}
	this.floats = _this1._float32array;
	var _p = new phoenix_Vector();
	this.pos = _p;
	if(_p != null) {
		var _v = this.pos;
		var listener = $bind(this,this._pos_change);
		_v.listen_x = listener;
		_v.listen_y = listener;
		_v.listen_z = listener;
		if(this.pos_changed != null && !this.ignore_listeners) {
			this.pos_changed(this.pos);
		}
	}
	var _r = new phoenix_Quaternion();
	this.rotation = _r;
	if(_r != null) {
		var _q = this.rotation;
		var listener1 = $bind(this,this._rotation_change);
		_q.listen_x = listener1;
		_q.listen_y = listener1;
		_q.listen_z = listener1;
		_q.listen_w = listener1;
		if(this.rotation_changed != null && !this.ignore_listeners) {
			this.rotation_changed(this.rotation);
		}
	}
	var _s = new phoenix_Vector(1,1,1);
	this.scale = _s;
	if(_s != null) {
		var _v1 = this.scale;
		var listener2 = $bind(this,this._scale_change);
		_v1.listen_x = listener2;
		_v1.listen_y = listener2;
		_v1.listen_z = listener2;
		if(this.scale_changed != null && !this.ignore_listeners) {
			this.scale_changed(this.scale);
		}
	}
	this._setup = false;
};
$hxClasses["phoenix.Spatial"] = phoenix_Spatial;
phoenix_Spatial.__name__ = ["phoenix","Spatial"];
phoenix_Spatial.prototype = {
	set_pos: function(_p) {
		this.pos = _p;
		if(_p != null) {
			var _v = this.pos;
			var listener = $bind(this,this._pos_change);
			_v.listen_x = listener;
			_v.listen_y = listener;
			_v.listen_z = listener;
			if(this.pos_changed != null && !this.ignore_listeners) {
				this.pos_changed(this.pos);
			}
		}
		return this.pos;
	}
	,set_rotation: function(_r) {
		this.rotation = _r;
		if(_r != null) {
			var _q = this.rotation;
			var listener = $bind(this,this._rotation_change);
			_q.listen_x = listener;
			_q.listen_y = listener;
			_q.listen_z = listener;
			_q.listen_w = listener;
			if(this.rotation_changed != null && !this.ignore_listeners) {
				this.rotation_changed(this.rotation);
			}
		}
		return this.rotation;
	}
	,set_scale: function(_s) {
		this.scale = _s;
		if(_s != null) {
			var _v = this.scale;
			var listener = $bind(this,this._scale_change);
			_v.listen_x = listener;
			_v.listen_y = listener;
			_v.listen_z = listener;
			if(this.scale_changed != null && !this.ignore_listeners) {
				this.scale_changed(this.scale);
			}
		}
		return this.scale;
	}
	,_pos_change: function(_v) {
		this.set_pos(this.pos);
	}
	,_scale_change: function(_v) {
		this.set_scale(this.scale);
	}
	,_rotation_change: function(_v) {
		this.set_rotation(this.rotation);
	}
	,__class__: phoenix_Spatial
	,__properties__: {set_scale:"set_scale",set_rotation:"set_rotation",set_pos:"set_pos"}
};
var phoenix__$Shader_Uniform_$Float = function(_name,_value,_location) {
	this.name = _name;
	this.value = _value;
	this.location = _location;
};
$hxClasses["phoenix._Shader.Uniform_Float"] = phoenix__$Shader_Uniform_$Float;
phoenix__$Shader_Uniform_$Float.__name__ = ["phoenix","_Shader","Uniform_Float"];
phoenix__$Shader_Uniform_$Float.prototype = {
	__class__: phoenix__$Shader_Uniform_$Float
};
var phoenix__$Shader_Uniform_$Int = function() { };
$hxClasses["phoenix._Shader.Uniform_Int"] = phoenix__$Shader_Uniform_$Int;
phoenix__$Shader_Uniform_$Int.__name__ = ["phoenix","_Shader","Uniform_Int"];
phoenix__$Shader_Uniform_$Int.prototype = {
	__class__: phoenix__$Shader_Uniform_$Int
};
var phoenix__$Shader_Uniform_$phoenix_$Color = function(_name,_value,_location) {
	this.name = _name;
	this.value = _value;
	this.location = _location;
};
$hxClasses["phoenix._Shader.Uniform_phoenix_Color"] = phoenix__$Shader_Uniform_$phoenix_$Color;
phoenix__$Shader_Uniform_$phoenix_$Color.__name__ = ["phoenix","_Shader","Uniform_phoenix_Color"];
phoenix__$Shader_Uniform_$phoenix_$Color.prototype = {
	__class__: phoenix__$Shader_Uniform_$phoenix_$Color
};
var phoenix__$Shader_Uniform_$phoenix_$Matrix = function() { };
$hxClasses["phoenix._Shader.Uniform_phoenix_Matrix"] = phoenix__$Shader_Uniform_$phoenix_$Matrix;
phoenix__$Shader_Uniform_$phoenix_$Matrix.__name__ = ["phoenix","_Shader","Uniform_phoenix_Matrix"];
phoenix__$Shader_Uniform_$phoenix_$Matrix.prototype = {
	__class__: phoenix__$Shader_Uniform_$phoenix_$Matrix
};
var phoenix__$Shader_Uniform_$phoenix_$Texture = function() { };
$hxClasses["phoenix._Shader.Uniform_phoenix_Texture"] = phoenix__$Shader_Uniform_$phoenix_$Texture;
phoenix__$Shader_Uniform_$phoenix_$Texture.__name__ = ["phoenix","_Shader","Uniform_phoenix_Texture"];
phoenix__$Shader_Uniform_$phoenix_$Texture.prototype = {
	__class__: phoenix__$Shader_Uniform_$phoenix_$Texture
};
var phoenix__$Shader_Uniform_$phoenix_$Vector = function() { };
$hxClasses["phoenix._Shader.Uniform_phoenix_Vector"] = phoenix__$Shader_Uniform_$phoenix_$Vector;
phoenix__$Shader_Uniform_$phoenix_$Vector.__name__ = ["phoenix","_Shader","Uniform_phoenix_Vector"];
phoenix__$Shader_Uniform_$phoenix_$Vector.prototype = {
	__class__: phoenix__$Shader_Uniform_$phoenix_$Vector
};
var phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array = function(_name,_value,_location) {
	this.name = _name;
	this.value = _value;
	this.location = _location;
};
$hxClasses["phoenix._Shader.Uniform_snow_api_buffers_Float32Array"] = phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array;
phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array.__name__ = ["phoenix","_Shader","Uniform_snow_api_buffers_Float32Array"];
phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array.prototype = {
	__class__: phoenix__$Shader_Uniform_$snow_$api_$buffers_$Float32Array
};
var phoenix_geometry_Geometry = function(_options) {
	this._prev_count = 0;
	this.dirty_based = true;
	this.dirty = false;
	this.locked = false;
	this.immediate = false;
	this.visible = true;
	this.dirty_blend = false;
	this.dirty_clip = false;
	this.dirty_depth = false;
	this.dirty_shader = false;
	this.dirty_texture = false;
	this.dirty_primitive_type = false;
	this.shadow_blend_dest_rgb = 771;
	this.shadow_blend_dest_alpha = 771;
	this.shadow_blend_src_rgb = 770;
	this.shadow_blend_src_alpha = 770;
	this.shadow_clip = false;
	this.shadow_depth = 0.0;
	this.id = "";
	this.uuid = "";
	this.dropped = false;
	this.added = false;
	this.buffer_type = 35048;
	this.buffer_based = false;
	this.object_space = false;
	this.uuid = Luxe.utils.uniqueid();
	this.id = this.uuid;
	this.state = new phoenix_geometry_GeometryState();
	this.vertices = [];
	this.batchers = [];
	this.transform = new phoenix_Transform();
	this._final_vert_position = new phoenix_Vector();
	this.set_clip_rect(null);
	this.set_clip(false);
	var _do_add = true;
	if(_options.id == null) {
		_options.id = this.uuid;
	}
	this.id = _options.id;
	if(_options.color == null) {
		_options.color = new phoenix_Color();
	}
	this.set_color(_options.color);
	if(_options.visible == null) {
		_options.visible = true;
	}
	this.set_visible(_options.visible);
	if(_options.immediate == null) {
		_options.immediate = false;
	}
	this.immediate = _options.immediate;
	if(_options.buffer_based == null) {
		_options.buffer_based = false;
	}
	this.buffer_based = _options.buffer_based;
	if(_options.object_space == null) {
		_options.object_space = false;
	}
	this.object_space = _options.object_space;
	if(_options.depth == null) {
		_options.depth = this.state.depth;
	}
	this.state.depth = _options.depth;
	var _this = this.state;
	if(_options.texture == null) {
		_options.texture = this.state.texture;
	}
	_this.dirty = true;
	_this.texture = _options.texture;
	var _this1 = this.state;
	if(_options.primitive_type == null) {
		_options.primitive_type = this.state.primitive_type;
	}
	_this1.dirty = true;
	_this1.primitive_type = _options.primitive_type;
	var _this2 = this.state;
	if(_options.shader == null) {
		_options.shader = this.state.shader;
	}
	_this2.dirty = true;
	_this2.shader = _options.shader;
	if(_options.clip_rect != null) {
		var _r = _options.clip_rect;
		var _this3 = this.state;
		_this3.dirty = true;
		_this3.clip_x = _r.x;
		var _this4 = this.state;
		_this4.dirty = true;
		_this4.clip_y = _r.y;
		var _this5 = this.state;
		_this5.dirty = true;
		_this5.clip_w = _r.w;
		var _this6 = this.state;
		_this6.dirty = true;
		_this6.clip_h = _r.h;
	}
	if(_options.pos == null) {
		_options.pos = this.transform.local.pos;
	}
	var value = _options.pos;
	var _this7 = this.transform.local;
	_this7.pos = value;
	if(value != null) {
		var _v = _this7.pos;
		var listener = $bind(_this7,_this7._pos_change);
		_v.listen_x = listener;
		_v.listen_y = listener;
		_v.listen_z = listener;
		if(_this7.pos_changed != null && !_this7.ignore_listeners) {
			_this7.pos_changed(_this7.pos);
		}
	}
	if(_options.rotation == null) {
		_options.rotation = this.transform.local.rotation;
	}
	var value1 = _options.rotation;
	var _this8 = this.transform.local;
	_this8.rotation = value1;
	if(value1 != null) {
		var _q = _this8.rotation;
		var listener1 = $bind(_this8,_this8._rotation_change);
		_q.listen_x = listener1;
		_q.listen_y = listener1;
		_q.listen_z = listener1;
		_q.listen_w = listener1;
		if(_this8.rotation_changed != null && !_this8.ignore_listeners) {
			_this8.rotation_changed(_this8.rotation);
		}
	}
	if(_options.scale == null) {
		_options.scale = this.transform.local.scale;
	}
	var value2 = _options.scale;
	var _this9 = this.transform.local;
	_this9.scale = value2;
	if(value2 != null) {
		var _v1 = _this9.scale;
		var listener2 = $bind(_this9,_this9._scale_change);
		_v1.listen_x = listener2;
		_v1.listen_y = listener2;
		_v1.listen_z = listener2;
		if(_this9.scale_changed != null && !_this9.ignore_listeners) {
			_this9.scale_changed(_this9.scale);
		}
	}
	var _this10 = this.transform;
	if(_options.origin == null) {
		_options.origin = this.transform.origin;
	}
	var o = _options.origin;
	_this10.dirty = true;
	if(_this10.dirty && !_this10._setup && _this10._dirty_handlers != null && _this10._dirty_handlers.length > 0) {
		var _g = 0;
		var _g1 = _this10._dirty_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) {
				_handler(_this10);
			}
		}
	}
	_this10.origin = o;
	if(_this10._origin_handlers != null && _this10._origin_handlers.length > 0) {
		var _origin = _this10.origin;
		var _g2 = 0;
		var _g11 = _this10._origin_handlers;
		while(_g2 < _g11.length) {
			var _handler1 = _g11[_g2];
			++_g2;
			if(_handler1 != null) {
				_handler1(_origin);
			}
		}
	}
	if(_options.no_batcher_add != null && _options.no_batcher_add == true) {
		_do_add = false;
	}
	phoenix_geometry_Geometry._sequence_key++;
	this.key = new phoenix_geometry_GeometryKey();
	this.key.uuid = this.uuid;
	var tmp = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
	this.key.timestamp = tmp;
	this.key.sequence = phoenix_geometry_Geometry._sequence_key;
	this.key.primitive_type = this.state.primitive_type;
	this.key.texture = this.state.texture;
	this.key.shader = this.state.shader;
	this.key.depth = this.state.depth;
	this.key.clip = this.state.clip;
	this.key.blend_src_alpha = this.state.blend_src_alpha;
	this.key.blend_src_rgb = this.state.blend_src_rgb;
	this.key.blend_dest_alpha = this.state.blend_dest_alpha;
	this.key.blend_dest_rgb = this.state.blend_dest_rgb;
	this.transform.id = this.uuid;
	this.transform.name = this.id;
	if(_options.batcher != null && _do_add) {
		_options.batcher.add(this);
	}
	if(this.buffer_based) {
		if(this.vb_pos == null) {
			this.vb_pos = snow_modules_opengl_web_GL.gl.createBuffer();
			this.vb_tcoords = snow_modules_opengl_web_GL.gl.createBuffer();
			this.vb_colors = snow_modules_opengl_web_GL.gl.createBuffer();
			this.set_dirty(true);
		}
	}
	this.uniforms = new phoenix_Uniforms();
};
$hxClasses["phoenix.geometry.Geometry"] = phoenix_geometry_Geometry;
phoenix_geometry_Geometry.__name__ = ["phoenix","geometry","Geometry"];
phoenix_geometry_Geometry.prototype = {
	refresh_key: function() {
		this.key.uuid = this.uuid;
		var tmp = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
		this.key.timestamp = tmp;
		this.key.primitive_type = this.state.primitive_type;
		this.key.texture = this.state.texture;
		this.key.shader = this.state.shader;
		this.key.depth = this.state.depth;
		this.key.clip = this.state.clip;
		this.key.blend_src_alpha = this.state.blend_src_alpha;
		this.key.blend_src_rgb = this.state.blend_src_rgb;
		this.key.blend_dest_alpha = this.state.blend_dest_alpha;
		this.key.blend_dest_rgb = this.state.blend_dest_rgb;
	}
	,drop: function(remove) {
		if(remove == null) {
			remove = true;
		}
		if(remove && this.added) {
			var _g = 0;
			var _g1 = this.batchers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				b.remove(this,true);
			}
		}
		this.key = null;
		this.set_color(null);
		this.state = null;
		this._final_vert_position = null;
		this.batchers = null;
		this.uuid = null;
		this.id = null;
		this.shadow_texture = null;
		this.shadow_shader = null;
		this.vertices = null;
		if(this.transform != null) {
			this.transform.destroy();
			this.transform = null;
		}
		if(this.uniforms != null) {
			this.uniforms.destroy();
			this.uniforms = null;
		}
		this.destroy_vbos();
		if(this.buffer_pos != null) {
			this.buffer_pos = null;
			this.buffer_tcoords = null;
			this.buffer_colors = null;
			this.buffer_normals = null;
		}
		this.dropped = true;
	}
	,add: function(v) {
		this.vertices.push(v);
	}
	,destroy_vbos: function() {
		if(this.vb_pos == null) {
			return;
		}
		snow_modules_opengl_web_GL.gl.deleteBuffer(this.vb_pos);
		snow_modules_opengl_web_GL.gl.deleteBuffer(this.vb_tcoords);
		snow_modules_opengl_web_GL.gl.deleteBuffer(this.vb_colors);
	}
	,update_buffers: function() {
		if(!this.dirty && this.dirty_based) {
			return false;
		}
		if(this.vertices.length != this._prev_count || this.buffer_pos == null) {
			var _length = this.vertices.length * 4;
			this.buffer_pos = null;
			this.buffer_normals = null;
			this.buffer_colors = null;
			this.buffer_tcoords = null;
			this.buffer_pos = new Float32Array(_length);
			this.buffer_tcoords = new Float32Array(_length);
			this.buffer_colors = new Float32Array(_length);
		}
		if(this.object_space) {
			var vert_index = 0;
			var tcoord_index = 0;
			var color_index = 0;
			var vertlist = this.buffer_pos;
			var tcoordlist = this.buffer_tcoords;
			var colorlist = this.buffer_colors;
			var _g = 0;
			var _g1 = this.vertices;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				var _vpos = v.pos;
				var _vuv = v.uv.uv0;
				var _vcol = v.color;
				vertlist[vert_index] = _vpos.x;
				vertlist[vert_index + 1] = _vpos.y;
				vertlist[vert_index + 2] = _vpos.z;
				vertlist[vert_index + 3] = _vpos.w;
				vert_index += 4;
				tcoordlist[tcoord_index] = _vuv.u;
				tcoordlist[tcoord_index + 1] = _vuv.v;
				tcoordlist[tcoord_index + 2] = _vuv.w;
				tcoordlist[tcoord_index + 3] = _vuv.t;
				tcoord_index += 4;
				colorlist[color_index] = _vcol.r;
				colorlist[color_index + 1] = _vcol.g;
				colorlist[color_index + 2] = _vcol.b;
				colorlist[color_index + 3] = _vcol.a;
				color_index += 4;
			}
		} else {
			var vert_index1 = 0;
			var tcoord_index1 = 0;
			var color_index1 = 0;
			var vertlist1 = this.buffer_pos;
			var tcoordlist1 = this.buffer_tcoords;
			var colorlist1 = this.buffer_colors;
			var _this = this.transform;
			if(!_this._destroying) {
				if(_this.parent != null && _this.parent.dirty) {
					_this.parent.clean_check();
				}
				if(_this.dirty && !_this._cleaning && !_this.manual_update) {
					_this.clean();
				}
			}
			var _el = _this.world.matrix.elements;
			var _count = this.vertices.length;
			var _idx = 0;
			while(_idx < _count) {
				var v1 = this.vertices[_idx];
				var _vx = v1.pos.x;
				var _vy = v1.pos.y;
				var _vz = v1.pos.z;
				var _tvy = _el[1] * _vx + _el[5] * _vy + _el[9] * _vz + _el[13];
				var _tvz = _el[2] * _vx + _el[6] * _vy + _el[10] * _vz + _el[14];
				vertlist1[vert_index1] = _el[0] * _vx + _el[4] * _vy + _el[8] * _vz + _el[12];
				vertlist1[vert_index1 + 1] = _tvy;
				vertlist1[vert_index1 + 2] = _tvz;
				vertlist1[vert_index1 + 3] = v1.pos.w;
				vert_index1 += 4;
				var _vuv1 = v1.uv.uv0;
				tcoordlist1[tcoord_index1] = _vuv1.u;
				tcoordlist1[tcoord_index1 + 1] = _vuv1.v;
				tcoordlist1[tcoord_index1 + 2] = _vuv1.w;
				tcoordlist1[tcoord_index1 + 3] = _vuv1.t;
				tcoord_index1 += 4;
				colorlist1[color_index1] = v1.color.r;
				colorlist1[color_index1 + 1] = v1.color.g;
				colorlist1[color_index1 + 2] = v1.color.b;
				colorlist1[color_index1 + 3] = v1.color.a;
				color_index1 += 4;
				++_idx;
			}
		}
		this.set_dirty(false);
		return true;
	}
	,set_locked: function(_locked) {
		this.buffer_type = _locked ? 35044 : 35048;
		if(_locked && this.vb_pos == null) {
			if(this.vb_pos == null) {
				this.vb_pos = snow_modules_opengl_web_GL.gl.createBuffer();
				this.vb_tcoords = snow_modules_opengl_web_GL.gl.createBuffer();
				this.vb_colors = snow_modules_opengl_web_GL.gl.createBuffer();
				this.set_dirty(true);
			}
		}
		if(!_locked && this.vb_pos != null) {
			this.destroy_vbos();
		}
		return this.locked = _locked;
	}
	,set_dirty: function(_dirty) {
		return this.dirty = _dirty;
	}
	,refresh: function() {
		var _g = 0;
		var _g1 = this.batchers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.remove(this,false);
		}
		if(this.dirty_primitive_type) {
			this.dirty_primitive_type = false;
			var _this = this.state;
			_this.dirty = true;
			_this.primitive_type = this.shadow_primitive_type;
		}
		if(this.dirty_texture) {
			this.dirty_texture = false;
			var _this1 = this.state;
			_this1.dirty = true;
			_this1.texture = this.shadow_texture;
		}
		if(this.dirty_shader) {
			this.dirty_shader = false;
			var _this2 = this.state;
			_this2.dirty = true;
			_this2.shader = this.shadow_shader;
		}
		if(this.dirty_depth) {
			this.dirty_depth = false;
			this.state.depth = this.shadow_depth;
		}
		if(this.dirty_clip) {
			this.dirty_clip = false;
			var _this3 = this.state;
			_this3.dirty = true;
			_this3.clip = this.shadow_clip;
		}
		if(this.dirty_blend) {
			this.dirty_blend = false;
			var _this4 = this.state;
			_this4.dirty = true;
			_this4.blend_src_alpha = this.shadow_blend_src_alpha;
			var _this5 = this.state;
			_this5.dirty = true;
			_this5.blend_src_rgb = this.shadow_blend_src_rgb;
			var _this6 = this.state;
			_this6.dirty = true;
			_this6.blend_dest_alpha = this.shadow_blend_dest_alpha;
			var _this7 = this.state;
			_this7.dirty = true;
			_this7.blend_dest_rgb = this.shadow_blend_dest_rgb;
		}
		this.refresh_key();
		var _g2 = 0;
		var _g11 = this.batchers;
		while(_g2 < _g11.length) {
			var b1 = _g11[_g2];
			++_g2;
			b1.add(this,false);
		}
	}
	,set_primitive_type: function(val) {
		if(this.state.primitive_type != val) {
			this.shadow_primitive_type = val;
			this.dirty_primitive_type = true;
			this.refresh();
		}
		return this.primitive_type = val;
	}
	,set_texture: function(val) {
		if(this.state.texture != val) {
			this.shadow_texture = val;
			this.dirty_texture = true;
			this.refresh();
		}
		return this.texture = val;
	}
	,set_visible: function(val) {
		return this.visible = val;
	}
	,set_color: function(val) {
		if(this.vertices != null && this.vertices.length > 0) {
			var _g = 0;
			var _g1 = this.vertices;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				v.color = val;
			}
		}
		return this.color = val;
	}
	,set_shader: function(val) {
		if(this.state.shader != val) {
			this.shadow_shader = val;
			this.dirty_shader = true;
			this.refresh();
		}
		return this.shader = val;
	}
	,set_depth: function(val) {
		if(this.state.depth != val) {
			this.shadow_depth = val;
			this.dirty_depth = true;
			this.refresh();
		}
		return this.depth = val;
	}
	,set_clip: function(val) {
		if(this.state.clip != val) {
			this.shadow_clip = val;
			this.dirty_clip = true;
			this.refresh();
		}
		return this.clip = val;
	}
	,set_clip_rect: function(val) {
		if(val == null) {
			this.set_clip(false);
		} else {
			this.set_clip(true);
			var _this = this.state;
			_this.dirty = true;
			_this.clip_x = val.x;
			var _this1 = this.state;
			_this1.dirty = true;
			_this1.clip_y = val.y;
			var _this2 = this.state;
			_this2.dirty = true;
			_this2.clip_w = val.w;
			var _this3 = this.state;
			_this3.dirty = true;
			_this3.clip_h = val.h;
		}
		return this.clip_rect = val;
	}
	,__class__: phoenix_geometry_Geometry
	,__properties__: {set_clip:"set_clip",set_color:"set_color",set_dirty:"set_dirty",set_locked:"set_locked",set_visible:"set_visible",set_clip_rect:"set_clip_rect",set_depth:"set_depth",set_shader:"set_shader",set_texture:"set_texture",set_primitive_type:"set_primitive_type"}
};
var phoenix_geometry_RingGeometry = function(_options) {
	_options.primitive_type = 1;
	phoenix_geometry_Geometry.call(this,_options);
	var _radius_x = 32.0;
	var _radius_y = 32.0;
	if(_options.end_angle == null) {
		_options.end_angle = 360;
	}
	if(_options.start_angle == null) {
		_options.start_angle = 0;
	}
	if(_options.r != null) {
		_radius_x = _options.r;
		_radius_y = _options.r;
	}
	if(_options.rx != null) {
		_radius_x = _options.rx;
	}
	if(_options.ry != null) {
		_radius_y = _options.ry;
	}
	if(_options.steps == null) {
		if(_options.smooth == null) {
			_options.steps = Luxe.utils.geometry.segments_for_smooth_circle(Math.max(_radius_x,_radius_y));
		} else {
			_options.steps = Luxe.utils.geometry.segments_for_smooth_circle(Math.max(_radius_x,_radius_y),_options.smooth);
		}
	}
	this.set(_options.x,_options.y,_radius_x,_radius_y,_options.steps,_options.start_angle,_options.end_angle);
};
$hxClasses["phoenix.geometry.RingGeometry"] = phoenix_geometry_RingGeometry;
phoenix_geometry_RingGeometry.__name__ = ["phoenix","geometry","RingGeometry"];
phoenix_geometry_RingGeometry.__super__ = phoenix_geometry_Geometry;
phoenix_geometry_RingGeometry.prototype = $extend(phoenix_geometry_Geometry.prototype,{
	set: function(_x,_y,_rx,_ry,_steps,_start_angle_degrees,_end_angle_degrees) {
		if(_end_angle_degrees == null) {
			_end_angle_degrees = 360;
		}
		if(_start_angle_degrees == null) {
			_start_angle_degrees = 0;
		}
		var _start_angle_rad = _start_angle_degrees * 0.017453292519943278;
		var theta = (_end_angle_degrees * 0.017453292519943278 - _start_angle_rad) / _steps;
		var tangential_factor = Math.tan(theta);
		var radial_factor = Math.cos(theta);
		var x = _rx * Math.cos(_start_angle_rad);
		var y = _rx * Math.sin(_start_angle_rad);
		var radial_ratio = _rx / _ry;
		if(radial_ratio == 0) {
			radial_ratio = 0.000000001;
		}
		var _index = 0;
		var _segment_pos = [];
		var _g1 = 0;
		while(_g1 < _steps) {
			++_g1;
			var _seg = new phoenix_Vector(x,y / radial_ratio);
			_segment_pos.push(_seg);
			this.add(new phoenix_geometry_Vertex(_seg,this.color));
			if(_index > 0) {
				var prevvert = _segment_pos[_index];
				this.add(new phoenix_geometry_Vertex(new phoenix_Vector(prevvert.x,prevvert.y,prevvert.z,prevvert.w),this.color));
			}
			var ty = x;
			x += -y * tangential_factor;
			y += ty * tangential_factor;
			x *= radial_factor;
			y *= radial_factor;
			++_index;
		}
		if(_segment_pos.length > 0) {
			var _this = _segment_pos[0];
			this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_this.x,_this.y,_this.z,_this.w),this.color));
		}
		var _this1 = this.transform;
		var value = new phoenix_Vector(_x,_y);
		var _this2 = _this1.local;
		_this2.pos = value;
		if(value != null) {
			var _v = _this2.pos;
			var listener = $bind(_this2,_this2._pos_change);
			_v.listen_x = listener;
			_v.listen_y = listener;
			_v.listen_z = listener;
			if(_this2.pos_changed != null && !_this2.ignore_listeners) {
				_this2.pos_changed(_this2.pos);
			}
		}
	}
	,__class__: phoenix_geometry_RingGeometry
});
var phoenix_geometry_ArcGeometry = function(_options) {
	phoenix_geometry_RingGeometry.call(this,_options);
	this.vertices.pop();
	this.vertices.pop();
};
$hxClasses["phoenix.geometry.ArcGeometry"] = phoenix_geometry_ArcGeometry;
phoenix_geometry_ArcGeometry.__name__ = ["phoenix","geometry","ArcGeometry"];
phoenix_geometry_ArcGeometry.__super__ = phoenix_geometry_RingGeometry;
phoenix_geometry_ArcGeometry.prototype = $extend(phoenix_geometry_RingGeometry.prototype,{
	__class__: phoenix_geometry_ArcGeometry
});
var phoenix_geometry_GeometryKey = function() {
	this.blend_dest_rgb = 0;
	this.blend_dest_alpha = 0;
	this.blend_src_rgb = 0;
	this.blend_src_alpha = 0;
	this.clip = false;
	this.depth = 0;
	this.uuid = "";
	this.sequence = 0;
	this.timestamp = 0;
};
$hxClasses["phoenix.geometry.GeometryKey"] = phoenix_geometry_GeometryKey;
phoenix_geometry_GeometryKey.__name__ = ["phoenix","geometry","GeometryKey"];
phoenix_geometry_GeometryKey.prototype = {
	__class__: phoenix_geometry_GeometryKey
};
var phoenix_geometry_GeometryState = function() {
	this.blend_dest_rgb = 771;
	this.blend_dest_alpha = 771;
	this.blend_src_rgb = 770;
	this.blend_src_alpha = 770;
	this.clip_h = 0;
	this.clip_w = 0;
	this.clip_y = 0;
	this.clip_x = 0;
	this.clip = false;
	this.depth = 0.0;
	this.ignore_blend = true;
	this.dirty = false;
	this.dirty = true;
	this.texture = null;
	this.dirty = true;
	this.shader = null;
	this.dirty = true;
	this.primitive_type = 0;
};
$hxClasses["phoenix.geometry.GeometryState"] = phoenix_geometry_GeometryState;
phoenix_geometry_GeometryState.__name__ = ["phoenix","geometry","GeometryState"];
phoenix_geometry_GeometryState.prototype = {
	__class__: phoenix_geometry_GeometryState
};
var phoenix_geometry_QuadGeometry = function(_options) {
	this._uv_h = 1;
	this._uv_w = 1;
	this._uv_y = 0;
	this._uv_x = 0;
	this.uv_angle = 0;
	this.flipy = false;
	this.flipx = false;
	_options.primitive_type = 4;
	phoenix_geometry_Geometry.call(this,_options);
	if(_options.flipx != null) {
		this.set_flipx(_options.flipx);
	}
	if(_options.flipy != null) {
		this.set_flipy(_options.flipy);
	}
	var _x = _options.x;
	var _y = _options.y;
	var _w = _options.w;
	var _h = _options.h;
	if(_options.rect != null) {
		_x = _options.rect.x;
		_y = _options.rect.y;
		_w = _options.rect.w;
		_h = _options.rect.h;
	}
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(0,0),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_w,0),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_w,_h),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(0,_h),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(0,0),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_w,_h),this.color));
	var _this = this.transform;
	var _this1 = this.transform.local.pos;
	var prev = _this1.ignore_listeners;
	_this1.ignore_listeners = true;
	_this1.x = _x;
	if(!_this1._construct) {
		if(_this1.listen_x != null && !_this1.ignore_listeners) {
			_this1.listen_x(_x);
		}
	}
	_this1.y = _y;
	if(!_this1._construct) {
		if(_this1.listen_y != null && !_this1.ignore_listeners) {
			_this1.listen_y(_y);
		}
	}
	_this1.ignore_listeners = prev;
	if(_this1.listen_x != null && !_this1.ignore_listeners) {
		_this1.listen_x(_this1.x);
	}
	if(_this1.listen_y != null && !_this1.ignore_listeners) {
		_this1.listen_y(_this1.y);
	}
	var _this2 = _this.local;
	_this2.pos = _this1;
	if(_this1 != null) {
		var _v = _this2.pos;
		var listener = $bind(_this2,_this2._pos_change);
		_v.listen_x = listener;
		_v.listen_y = listener;
		_v.listen_z = listener;
		if(_this2.pos_changed != null && !_this2.ignore_listeners) {
			_this2.pos_changed(_this2.pos);
		}
	}
	if(_options.uv != null) {
		var _rect = _options.uv;
		if(this.state.texture == null) {
			throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("texture was null" + (" ( " + "QuadGeometry; Calling UV on a geometry with null texture." + " )")));
		}
		var tlx = _rect.x / this.state.texture.width_actual;
		var tly = _rect.y / this.state.texture.height_actual;
		var szx = _rect.w / this.state.texture.width_actual;
		var szy = _rect.h / this.state.texture.height_actual;
		if(this.vertices.length != 0) {
			var tl_x = tlx;
			var tl_y = tly;
			this._uv_x = tlx;
			this._uv_y = tly;
			this._uv_w = szx;
			this._uv_h = szy;
			var tr_x = tlx + szx;
			var tr_y = tly;
			var br_x = tlx + szx;
			var br_y = tly + szy;
			var bl_x = tlx;
			var bl_y = tly + szy;
			var tmp_x = 0.0;
			var tmp_y = 0.0;
			var rotations = this.uv_angle / 90 | 0;
			rotations -= 4 * Math.floor(rotations / 4);
			var _g1 = 0;
			var _g = rotations;
			while(_g1 < _g) {
				++_g1;
				tmp_x = tl_x;
				tl_x = bl_x;
				bl_x = br_x;
				br_x = tr_x;
				tr_x = tmp_x;
				tmp_y = tl_y;
				tl_y = bl_y;
				bl_y = br_y;
				br_y = tr_y;
				tr_y = tmp_y;
			}
			if(this.flipy) {
				tmp_y = bl_y;
				bl_y = tl_y;
				tl_y = tmp_y;
				tmp_x = bl_x;
				bl_x = tl_x;
				tl_x = tmp_x;
				tmp_y = br_y;
				br_y = tr_y;
				tr_y = tmp_y;
				tmp_x = br_x;
				br_x = tr_x;
				tr_x = tmp_x;
			}
			if(this.flipx) {
				tmp_x = tr_x;
				tr_x = tl_x;
				tl_x = tmp_x;
				tmp_y = tr_y;
				tr_y = tl_y;
				tl_y = tmp_y;
				tmp_x = br_x;
				br_x = bl_x;
				bl_x = tmp_x;
				tmp_y = br_y;
				br_y = bl_y;
				bl_y = tmp_y;
			}
			var _this3 = this.vertices[0].uv.uv0;
			_this3.u = tl_x;
			_this3.v = tl_y;
			var _this4 = this.vertices[1].uv.uv0;
			_this4.u = tr_x;
			_this4.v = tr_y;
			var _this5 = this.vertices[2].uv.uv0;
			_this5.u = br_x;
			_this5.v = br_y;
			var _this6 = this.vertices[3].uv.uv0;
			_this6.u = bl_x;
			_this6.v = bl_y;
			var _this7 = this.vertices[4].uv.uv0;
			_this7.u = tl_x;
			_this7.v = tl_y;
			var _this8 = this.vertices[5].uv.uv0;
			_this8.u = br_x;
			_this8.v = br_y;
			this.set_dirty(true);
		}
	} else if(this.vertices.length != 0) {
		var sz_x = 1;
		var sz_y = 1;
		var tl_x1 = 0;
		var tl_y1 = 0;
		this._uv_x = tl_x1;
		this._uv_y = tl_y1;
		this._uv_w = sz_x;
		this._uv_h = sz_y;
		var tr_x1 = tl_x1 + sz_x;
		var tr_y1 = tl_y1;
		var br_x1 = tl_x1 + sz_x;
		var br_y1 = tl_y1 + sz_y;
		var bl_x1 = tl_x1;
		var bl_y1 = tl_y1 + sz_y;
		var tmp_x1 = 0.0;
		var tmp_y1 = 0.0;
		var rotations1 = this.uv_angle / 90 | 0;
		rotations1 -= 4 * Math.floor(rotations1 / 4);
		var _g11 = 0;
		var _g2 = rotations1;
		while(_g11 < _g2) {
			++_g11;
			tmp_x1 = tl_x1;
			tl_x1 = bl_x1;
			bl_x1 = br_x1;
			br_x1 = tr_x1;
			tr_x1 = tmp_x1;
			tmp_y1 = tl_y1;
			tl_y1 = bl_y1;
			bl_y1 = br_y1;
			br_y1 = tr_y1;
			tr_y1 = tmp_y1;
		}
		if(this.flipy) {
			tmp_y1 = bl_y1;
			bl_y1 = tl_y1;
			tl_y1 = tmp_y1;
			tmp_x1 = bl_x1;
			bl_x1 = tl_x1;
			tl_x1 = tmp_x1;
			tmp_y1 = br_y1;
			br_y1 = tr_y1;
			tr_y1 = tmp_y1;
			tmp_x1 = br_x1;
			br_x1 = tr_x1;
			tr_x1 = tmp_x1;
		}
		if(this.flipx) {
			tmp_x1 = tr_x1;
			tr_x1 = tl_x1;
			tl_x1 = tmp_x1;
			tmp_y1 = tr_y1;
			tr_y1 = tl_y1;
			tl_y1 = tmp_y1;
			tmp_x1 = br_x1;
			br_x1 = bl_x1;
			bl_x1 = tmp_x1;
			tmp_y1 = br_y1;
			br_y1 = bl_y1;
			bl_y1 = tmp_y1;
		}
		var _this9 = this.vertices[0].uv.uv0;
		_this9.u = tl_x1;
		_this9.v = tl_y1;
		var _this10 = this.vertices[1].uv.uv0;
		_this10.u = tr_x1;
		_this10.v = tr_y1;
		var _this11 = this.vertices[2].uv.uv0;
		_this11.u = br_x1;
		_this11.v = br_y1;
		var _this12 = this.vertices[3].uv.uv0;
		_this12.u = bl_x1;
		_this12.v = bl_y1;
		var _this13 = this.vertices[4].uv.uv0;
		_this13.u = tl_x1;
		_this13.v = tl_y1;
		var _this14 = this.vertices[5].uv.uv0;
		_this14.u = br_x1;
		_this14.v = br_y1;
		this.set_dirty(true);
	}
};
$hxClasses["phoenix.geometry.QuadGeometry"] = phoenix_geometry_QuadGeometry;
phoenix_geometry_QuadGeometry.__name__ = ["phoenix","geometry","QuadGeometry"];
phoenix_geometry_QuadGeometry.__super__ = phoenix_geometry_Geometry;
phoenix_geometry_QuadGeometry.prototype = $extend(phoenix_geometry_Geometry.prototype,{
	resize_xy: function(_x,_y) {
		if(this.vertices.length == 0) {
			return;
		}
		var _this = this.vertices[0].pos;
		var prev = _this.ignore_listeners;
		_this.ignore_listeners = true;
		_this.x = 0;
		if(!_this._construct) {
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(0);
			}
		}
		_this.y = 0;
		if(!_this._construct) {
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(0);
			}
		}
		_this.ignore_listeners = prev;
		if(_this.listen_x != null && !_this.ignore_listeners) {
			_this.listen_x(_this.x);
		}
		if(_this.listen_y != null && !_this.ignore_listeners) {
			_this.listen_y(_this.y);
		}
		var _this1 = this.vertices[1].pos;
		var prev1 = _this1.ignore_listeners;
		_this1.ignore_listeners = true;
		_this1.x = _x;
		if(!_this1._construct) {
			if(_this1.listen_x != null && !_this1.ignore_listeners) {
				_this1.listen_x(_x);
			}
		}
		_this1.y = 0;
		if(!_this1._construct) {
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(0);
			}
		}
		_this1.ignore_listeners = prev1;
		if(_this1.listen_x != null && !_this1.ignore_listeners) {
			_this1.listen_x(_this1.x);
		}
		if(_this1.listen_y != null && !_this1.ignore_listeners) {
			_this1.listen_y(_this1.y);
		}
		var _this2 = this.vertices[2].pos;
		var prev2 = _this2.ignore_listeners;
		_this2.ignore_listeners = true;
		_this2.x = _x;
		if(!_this2._construct) {
			if(_this2.listen_x != null && !_this2.ignore_listeners) {
				_this2.listen_x(_x);
			}
		}
		_this2.y = _y;
		if(!_this2._construct) {
			if(_this2.listen_y != null && !_this2.ignore_listeners) {
				_this2.listen_y(_y);
			}
		}
		_this2.ignore_listeners = prev2;
		if(_this2.listen_x != null && !_this2.ignore_listeners) {
			_this2.listen_x(_this2.x);
		}
		if(_this2.listen_y != null && !_this2.ignore_listeners) {
			_this2.listen_y(_this2.y);
		}
		var _this3 = this.vertices[3].pos;
		var prev3 = _this3.ignore_listeners;
		_this3.ignore_listeners = true;
		_this3.x = 0;
		if(!_this3._construct) {
			if(_this3.listen_x != null && !_this3.ignore_listeners) {
				_this3.listen_x(0);
			}
		}
		_this3.y = _y;
		if(!_this3._construct) {
			if(_this3.listen_y != null && !_this3.ignore_listeners) {
				_this3.listen_y(_y);
			}
		}
		_this3.ignore_listeners = prev3;
		if(_this3.listen_x != null && !_this3.ignore_listeners) {
			_this3.listen_x(_this3.x);
		}
		if(_this3.listen_y != null && !_this3.ignore_listeners) {
			_this3.listen_y(_this3.y);
		}
		var _this4 = this.vertices[4].pos;
		var prev4 = _this4.ignore_listeners;
		_this4.ignore_listeners = true;
		_this4.x = 0;
		if(!_this4._construct) {
			if(_this4.listen_x != null && !_this4.ignore_listeners) {
				_this4.listen_x(0);
			}
		}
		_this4.y = 0;
		if(!_this4._construct) {
			if(_this4.listen_y != null && !_this4.ignore_listeners) {
				_this4.listen_y(0);
			}
		}
		_this4.ignore_listeners = prev4;
		if(_this4.listen_x != null && !_this4.ignore_listeners) {
			_this4.listen_x(_this4.x);
		}
		if(_this4.listen_y != null && !_this4.ignore_listeners) {
			_this4.listen_y(_this4.y);
		}
		var _this5 = this.vertices[5].pos;
		var prev5 = _this5.ignore_listeners;
		_this5.ignore_listeners = true;
		_this5.x = _x;
		if(!_this5._construct) {
			if(_this5.listen_x != null && !_this5.ignore_listeners) {
				_this5.listen_x(_x);
			}
		}
		_this5.y = _y;
		if(!_this5._construct) {
			if(_this5.listen_y != null && !_this5.ignore_listeners) {
				_this5.listen_y(_y);
			}
		}
		_this5.ignore_listeners = prev5;
		if(_this5.listen_x != null && !_this5.ignore_listeners) {
			_this5.listen_x(_this5.x);
		}
		if(_this5.listen_y != null && !_this5.ignore_listeners) {
			_this5.listen_y(_this5.y);
		}
	}
	,set_flipx: function(_val) {
		this.flipx = _val;
		var _rect_x = this._uv_x;
		var _rect_y = this._uv_y;
		var _rect_w = this._uv_w;
		var _rect_h = this._uv_h;
		if(this.vertices.length != 0) {
			var tl_x = _rect_x;
			var tl_y = _rect_y;
			this._uv_x = _rect_x;
			this._uv_y = _rect_y;
			this._uv_w = _rect_w;
			this._uv_h = _rect_h;
			var tr_x = _rect_x + _rect_w;
			var tr_y = _rect_y;
			var br_x = _rect_x + _rect_w;
			var br_y = _rect_y + _rect_h;
			var bl_x = _rect_x;
			var bl_y = _rect_y + _rect_h;
			var tmp_x = 0.0;
			var tmp_y = 0.0;
			var rotations = this.uv_angle / 90 | 0;
			rotations -= 4 * Math.floor(rotations / 4);
			var _g1 = 0;
			var _g = rotations;
			while(_g1 < _g) {
				++_g1;
				tmp_x = tl_x;
				tl_x = bl_x;
				bl_x = br_x;
				br_x = tr_x;
				tr_x = tmp_x;
				tmp_y = tl_y;
				tl_y = bl_y;
				bl_y = br_y;
				br_y = tr_y;
				tr_y = tmp_y;
			}
			if(this.flipy) {
				tmp_y = bl_y;
				bl_y = tl_y;
				tl_y = tmp_y;
				tmp_x = bl_x;
				bl_x = tl_x;
				tl_x = tmp_x;
				tmp_y = br_y;
				br_y = tr_y;
				tr_y = tmp_y;
				tmp_x = br_x;
				br_x = tr_x;
				tr_x = tmp_x;
			}
			if(this.flipx) {
				tmp_x = tr_x;
				tr_x = tl_x;
				tl_x = tmp_x;
				tmp_y = tr_y;
				tr_y = tl_y;
				tl_y = tmp_y;
				tmp_x = br_x;
				br_x = bl_x;
				bl_x = tmp_x;
				tmp_y = br_y;
				br_y = bl_y;
				bl_y = tmp_y;
			}
			var _this = this.vertices[0].uv.uv0;
			_this.u = tl_x;
			_this.v = tl_y;
			var _this1 = this.vertices[1].uv.uv0;
			_this1.u = tr_x;
			_this1.v = tr_y;
			var _this2 = this.vertices[2].uv.uv0;
			_this2.u = br_x;
			_this2.v = br_y;
			var _this3 = this.vertices[3].uv.uv0;
			_this3.u = bl_x;
			_this3.v = bl_y;
			var _this4 = this.vertices[4].uv.uv0;
			_this4.u = tl_x;
			_this4.v = tl_y;
			var _this5 = this.vertices[5].uv.uv0;
			_this5.u = br_x;
			_this5.v = br_y;
			this.set_dirty(true);
		}
		return this.flipx;
	}
	,set_flipy: function(_val) {
		this.flipy = _val;
		var _rect_x = this._uv_x;
		var _rect_y = this._uv_y;
		var _rect_w = this._uv_w;
		var _rect_h = this._uv_h;
		if(this.vertices.length != 0) {
			var tl_x = _rect_x;
			var tl_y = _rect_y;
			this._uv_x = _rect_x;
			this._uv_y = _rect_y;
			this._uv_w = _rect_w;
			this._uv_h = _rect_h;
			var tr_x = _rect_x + _rect_w;
			var tr_y = _rect_y;
			var br_x = _rect_x + _rect_w;
			var br_y = _rect_y + _rect_h;
			var bl_x = _rect_x;
			var bl_y = _rect_y + _rect_h;
			var tmp_x = 0.0;
			var tmp_y = 0.0;
			var rotations = this.uv_angle / 90 | 0;
			rotations -= 4 * Math.floor(rotations / 4);
			var _g1 = 0;
			var _g = rotations;
			while(_g1 < _g) {
				++_g1;
				tmp_x = tl_x;
				tl_x = bl_x;
				bl_x = br_x;
				br_x = tr_x;
				tr_x = tmp_x;
				tmp_y = tl_y;
				tl_y = bl_y;
				bl_y = br_y;
				br_y = tr_y;
				tr_y = tmp_y;
			}
			if(this.flipy) {
				tmp_y = bl_y;
				bl_y = tl_y;
				tl_y = tmp_y;
				tmp_x = bl_x;
				bl_x = tl_x;
				tl_x = tmp_x;
				tmp_y = br_y;
				br_y = tr_y;
				tr_y = tmp_y;
				tmp_x = br_x;
				br_x = tr_x;
				tr_x = tmp_x;
			}
			if(this.flipx) {
				tmp_x = tr_x;
				tr_x = tl_x;
				tl_x = tmp_x;
				tmp_y = tr_y;
				tr_y = tl_y;
				tl_y = tmp_y;
				tmp_x = br_x;
				br_x = bl_x;
				bl_x = tmp_x;
				tmp_y = br_y;
				br_y = bl_y;
				bl_y = tmp_y;
			}
			var _this = this.vertices[0].uv.uv0;
			_this.u = tl_x;
			_this.v = tl_y;
			var _this1 = this.vertices[1].uv.uv0;
			_this1.u = tr_x;
			_this1.v = tr_y;
			var _this2 = this.vertices[2].uv.uv0;
			_this2.u = br_x;
			_this2.v = br_y;
			var _this3 = this.vertices[3].uv.uv0;
			_this3.u = bl_x;
			_this3.v = bl_y;
			var _this4 = this.vertices[4].uv.uv0;
			_this4.u = tl_x;
			_this4.v = tl_y;
			var _this5 = this.vertices[5].uv.uv0;
			_this5.u = br_x;
			_this5.v = br_y;
			this.set_dirty(true);
		}
		return this.flipy;
	}
	,__class__: phoenix_geometry_QuadGeometry
	,__properties__: $extend(phoenix_geometry_Geometry.prototype.__properties__,{set_flipy:"set_flipy",set_flipx:"set_flipx"})
});
var phoenix_geometry_RectangleGeometry = function(_options) {
	_options.primitive_type = 1;
	phoenix_geometry_Geometry.call(this,_options);
	var _x = _options.x;
	var _y = _options.y;
	var _w = _options.w;
	var _h = _options.h;
	if(_options.rect != null) {
		_x = _options.rect.x;
		_y = _options.rect.y;
		_w = _options.rect.w;
		_h = _options.rect.h;
	}
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(0,0),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_w,0),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_w,0),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_w,_h),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(_w,_h),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(0,_h),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(0,_h),this.color));
	this.add(new phoenix_geometry_Vertex(new phoenix_Vector(0,0),this.color));
	var _this = this.transform;
	var _this1 = this.transform.local.pos;
	var prev = _this1.ignore_listeners;
	_this1.ignore_listeners = true;
	_this1.x = _x;
	if(!_this1._construct) {
		if(_this1.listen_x != null && !_this1.ignore_listeners) {
			_this1.listen_x(_x);
		}
	}
	_this1.y = _y;
	if(!_this1._construct) {
		if(_this1.listen_y != null && !_this1.ignore_listeners) {
			_this1.listen_y(_y);
		}
	}
	_this1.ignore_listeners = prev;
	if(_this1.listen_x != null && !_this1.ignore_listeners) {
		_this1.listen_x(_this1.x);
	}
	if(_this1.listen_y != null && !_this1.ignore_listeners) {
		_this1.listen_y(_this1.y);
	}
	var _this2 = _this.local;
	_this2.pos = _this1;
	if(_this1 != null) {
		var _v = _this2.pos;
		var listener = $bind(_this2,_this2._pos_change);
		_v.listen_x = listener;
		_v.listen_y = listener;
		_v.listen_z = listener;
		if(_this2.pos_changed != null && !_this2.ignore_listeners) {
			_this2.pos_changed(_this2.pos);
		}
	}
};
$hxClasses["phoenix.geometry.RectangleGeometry"] = phoenix_geometry_RectangleGeometry;
phoenix_geometry_RectangleGeometry.__name__ = ["phoenix","geometry","RectangleGeometry"];
phoenix_geometry_RectangleGeometry.__super__ = phoenix_geometry_Geometry;
phoenix_geometry_RectangleGeometry.prototype = $extend(phoenix_geometry_Geometry.prototype,{
	__class__: phoenix_geometry_RectangleGeometry
});
var phoenix_geometry_TextGeometry = function(_options) {
	this.setup_ = true;
	this.dirty_align = true;
	this.dirty_sizing = true;
	this.point_ratio = 1;
	this.text_h_h = 0;
	this.text_h_w = 0;
	this.text_height = 0;
	this.text_width = 0;
	this.glow_amount = 0;
	this.glow_threshold = 0;
	this.outline = 0;
	this.thickness = 0.5;
	this.smoothness = 0.75;
	this.unique = false;
	this.sdf = false;
	this.bounds_wrap = false;
	this.letter_snapping = false;
	this.letter_spacing = 0.0;
	this.line_spacing = 0.0;
	this.point_size = 32.0;
	this.text = "";
	this.options = _options;
	this.emitter = new luxe_Emitter();
	if(this.options == null) {
		throw new js__$Boot_HaxeError(luxe_DebugError.null_assertion("options was null" + (" ( " + "TextGeometry requires non-null options" + " )")));
	}
	if(this.options.sdf != null) {
		this.sdf = this.options.sdf;
	}
	if(this.options.font == null) {
		this.options.font = Luxe.renderer.font;
	}
	this.set_font(this.options.font);
	if(this.font == Luxe.renderer.font) {
		this.sdf = true;
	}
	if(this.options.shader == null) {
		if(this.sdf) {
			this.options.shader = Luxe.renderer.shaders.bitmapfont.shader;
		} else {
			this.options.shader = Luxe.renderer.shaders.textured.shader;
		}
	} else if(this.options.shader != Luxe.renderer.shaders.bitmapfont.shader) {
		this.unique = true;
	}
	this.options.primitive_type = 4;
	phoenix_geometry_Geometry.call(this,this.options);
	this.cache = [];
	this.line_widths = [];
	this.line_offsets = [[],[]];
	this.lines = [];
	this.set_outline_color(new phoenix_Color());
	this.set_glow_color(new phoenix_Color());
	this.default_options();
	this.setup_ = false;
};
$hxClasses["phoenix.geometry.TextGeometry"] = phoenix_geometry_TextGeometry;
phoenix_geometry_TextGeometry.__name__ = ["phoenix","geometry","TextGeometry"];
phoenix_geometry_TextGeometry.__super__ = phoenix_geometry_Geometry;
phoenix_geometry_TextGeometry.prototype = $extend(phoenix_geometry_Geometry.prototype,{
	drop: function(remove) {
		if(remove == null) {
			remove = true;
		}
		this.set_text(null);
		this.set_font(null);
		this.set_bounds(null);
		this.set_outline_color(null);
		this.set_glow_color(null);
		if(this.line_widths != null) {
			this.line_widths.splice(0,this.line_widths.length);
			this.line_widths = null;
		}
		if(this.line_offsets != null) {
			this.line_offsets.splice(0,this.line_offsets.length);
			this.line_offsets = null;
		}
		if(this.lines != null) {
			this.lines.splice(0,this.lines.length);
			this.lines = null;
		}
		this.emitter = null;
		this.options = null;
		if(this.cache != null) {
			while(this.cache.length > 0) {
				var c = this.cache.pop();
				while(c.length > 0) {
					var v = c.pop();
					v.pos = null;
					v.color = null;
					v.normal = null;
					var _this = v.uv;
					_this.uv0 = null;
					_this.uv1 = null;
					_this.uv2 = null;
					_this.uv3 = null;
					_this.uv4 = null;
					_this.uv5 = null;
					_this.uv6 = null;
					_this.uv7 = null;
					v.uv = null;
					v = null;
				}
				c = null;
			}
			this.cache = null;
		}
		phoenix_geometry_Geometry.prototype.drop.call(this,remove);
	}
	,default_options: function() {
		this.set_texture(this.font.pages.h[0]);
		if(this.options.letter_snapping != null) {
			this.set_letter_snapping(this.options.letter_snapping);
		}
		if(this.options.letter_spacing != null) {
			this.set_letter_spacing(this.options.letter_spacing);
		}
		if(this.options.line_spacing != null) {
			this.set_line_spacing(this.options.line_spacing);
		}
		if(this.options.point_size != null) {
			this.set_point_size(this.options.point_size);
		}
		if(this.options.bounds != null) {
			this.set_bounds(this.options.bounds);
		}
		if(this.options.bounds_wrap != null) {
			this.set_bounds_wrap(this.options.bounds_wrap);
		}
		if(this.options.align == null) {
			this.options.align = 0;
		}
		if(this.options.align_vertical == null) {
			this.options.align_vertical = 3;
		}
		this.set_align(this.options.align);
		this.set_align_vertical(this.options.align_vertical);
		if(this.options.thickness != null) {
			this.set_thickness(this.options.thickness);
		}
		if(this.options.smoothness != null) {
			this.set_smoothness(this.options.smoothness);
		}
		if(this.options.outline != null) {
			this.set_outline(this.options.outline);
		}
		if(this.options.outline_color != null) {
			this.set_outline_color(this.options.outline_color);
		}
		if(this.options.glow_threshold != null) {
			this.set_glow_threshold(this.options.glow_threshold);
		}
		if(this.options.glow_amount != null) {
			this.set_glow_amount(this.options.glow_amount);
		}
		if(this.options.glow_color != null) {
			this.set_glow_color(this.options.glow_color);
		}
		if(this.sdf) {
			this.flush_uniforms();
		}
		if(this.options.text != null) {
			this.set_text(this.options.text);
		}
	}
	,set_text: function(_text) {
		if(_text == null) {
			_text = "";
		}
		if(this.text != _text) {
			this.text = _text;
			if(this.text != "") {
				this.set_dirty_sizing(true);
				this.update_text();
			} else {
				this.vertices.splice(0,this.vertices.length);
			}
		}
		return this.text;
	}
	,update_sizes: function() {
		if(!this.dirty_sizing) {
			return false;
		}
		var drawn_text = this.text.replace(phoenix_geometry_TextGeometry.tab_regex.r,"    ");
		if(this.bounds_wrap && this.bounds != null) {
			drawn_text = this.font.wrap_string_to_bounds(drawn_text,this.bounds,this.point_size,this.letter_spacing);
		}
		this.lines.splice(0,this.lines.length);
		this.lines = drawn_text.split("\n");
		this.line_widths.splice(0,this.line_widths.length);
		var _this = this.font;
		var _point_size = this.point_size;
		var _letter_spc = this.letter_spacing;
		var _line_widths = this.line_widths;
		var _max_w = 0.0;
		var _push_widths = _line_widths != null;
		var _lines = luxe_utils_unifill_Unifill.uSplit(drawn_text,"\n");
		var _g = 0;
		while(_g < _lines.length) {
			var _line = _lines[_g];
			++_g;
			var _cur_w = _this.width_of_line(_line,_point_size,_letter_spc);
			_max_w = Math.max(_max_w,_cur_w);
			if(_push_widths) {
				_line_widths.push(_cur_w);
			}
		}
		this.text_width = _max_w;
		var _this1 = this.font;
		this.text_height = this.lines.length * ((_this1.info.line_height + this.line_spacing) * (this.point_size / _this1.info.point_size));
		this.text_h_w = this.text_width / 2;
		this.text_h_h = this.text_height / 2;
		this.point_ratio = this.point_size / this.font.info.point_size;
		this.set_dirty_sizing(false);
		return true;
	}
	,update_text: function() {
		var _gthis = this;
		var _pos_x = 0.0;
		var _pos_y = 0.0;
		var _bounds_based = this.bounds != null;
		if(_bounds_based) {
			var _this = this.transform.local.pos;
			_pos_x = this.bounds.x;
			var _x = _pos_x;
			_this.x = _x;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x);
				}
			}
			var _this1 = this.transform.local.pos;
			_pos_y = this.bounds.y;
			var _y = _pos_y;
			_this1.y = _y;
			if(!_this1._construct) {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_y);
				}
			}
		}
		var _cur_x = 0.0;
		var _cur_y = 0.0;
		var _line_idx = 0;
		var _total_idx = 0;
		var _is_char = true;
		this.update_sizes();
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var _line = _g1[_g];
			++_g;
			var _line_x_offset = 0.0;
			var _line_y_offset = 0.0;
			if(this.dirty_align) {
				if(!_bounds_based) {
					switch(this.align) {
					case 1:
						_line_x_offset = -this.line_widths[_line_idx];
						break;
					case 2:
						_line_x_offset = -(this.line_widths[_line_idx] / 2.0);
						break;
					default:
						_line_x_offset = 0.0;
					}
					switch(this.align_vertical) {
					case 2:
						_line_y_offset = -this.text_h_h;
						break;
					case 4:
						_line_y_offset = -this.text_height;
						break;
					default:
						_line_y_offset = 0.0;
					}
				} else {
					switch(this.align) {
					case 1:
						_line_x_offset = -this.line_widths[_line_idx] + this.bounds.w;
						break;
					case 2:
						_line_x_offset = -(this.line_widths[_line_idx] / 2.0) + this.bounds.w / 2;
						break;
					default:
						_line_x_offset = 0.0;
					}
					switch(this.align_vertical) {
					case 2:
						_line_y_offset = this.bounds.h / 2 - this.text_h_h;
						break;
					case 4:
						_line_y_offset = this.bounds.h - this.text_height;
						break;
					default:
						_line_y_offset = 0.0;
					}
				}
				this.line_offsets[0][_line_idx] = _line_x_offset;
				this.line_offsets[1][_line_idx] = _line_y_offset;
			} else {
				_line_x_offset = this.line_offsets[0][_line_idx];
				_line_y_offset = this.line_offsets[1][_line_idx];
			}
			if(_line_idx != 0) {
				_cur_y += (_gthis.font.info.line_height + _gthis.line_spacing) * _gthis.point_ratio;
				_cur_x = 0;
			}
			var _idx = 0;
			var _g2_index;
			var _g2_i;
			var _g2_endIndex;
			_g2_i = 0;
			_g2_index = 0;
			_g2_endIndex = _line.length;
			while(_g2_index < _g2_endIndex) {
				_g2_i = _g2_index;
				var c = _line.charCodeAt(_g2_index);
				_g2_index += !(55296 <= c && c <= 56319) ? 1 : 2;
				var _index = luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointAt(_line,_g2_i);
				var _char = this.font.info.chars.h[_index];
				if(_char != null) {
					_is_char = _index > 32;
				} else {
					_is_char = false;
				}
				if(!_is_char) {
					_char = this.font.space_char;
				}
				if(_is_char) {
					var _quad_x = _line_x_offset + _cur_x + _char.xoffset * this.point_ratio;
					var _quad_y = _line_y_offset + _cur_y + _char.yoffset * this.point_ratio;
					if(this.letter_snapping) {
						_quad_x = Math.floor(_quad_x);
						_quad_y = Math.floor(_quad_y);
					}
					var _page = this.font.pages.h[_char.page];
					this.update_char(_total_idx,_quad_x,_quad_y,_char.width * this.point_ratio,_char.height * this.point_ratio,_char.x / _page.width_actual,_char.y / _page.height_actual,(_char.x + _char.width) / _page.width_actual,(_char.y + _char.height) / _page.height_actual,this.color);
					++_total_idx;
				}
				var _x_inc = _char.xadvance;
				if(_idx < _line.length - 1) {
					var _this2 = this.font;
					var index = _idx + 1;
					var s = _line;
					var i;
					if(index >= 0) {
						var index1 = 0;
						var len = s.length;
						var i1 = 0;
						while(i1 < index && index1 < len) {
							var c1 = s.charCodeAt(index1);
							index1 += !(55296 <= c1 && c1 <= 56319) ? 1 : 2;
							++i1;
						}
						i = index1;
					} else {
						i = 0;
					}
					var _second = luxe_utils_unifill__$Utf16_Utf16_$Impl_$.codePointAt(_line,i);
					var _map = _this2.info.kernings.get(_index);
					_x_inc += _map != null && _map.h.hasOwnProperty(_second) ? _map.h[_second] : 0;
					if(_index >= 32) {
						_x_inc += this.letter_spacing;
					}
				}
				_x_inc *= this.point_ratio;
				_cur_x += _x_inc;
				++_idx;
			}
			++_line_idx;
		}
		var _diff = (this.vertices.length / 6 | 0) - _total_idx;
		if(_diff > 0) {
			this.vertices.splice(_total_idx * 6,_diff * 6);
		}
		this.dirty_align = false;
		this.emitter.emit(1);
	}
	,update_char: function(_letteridx,_x,_y,_w,_h,_u,_v,_u2,_v2,_color) {
		var vert0;
		var vert1;
		var vert2;
		var vert3;
		var vert4;
		var vert5;
		var quad = this.cache[_letteridx];
		if(quad == null) {
			vert0 = new phoenix_geometry_Vertex(new phoenix_Vector(_x,_y),_color);
			vert1 = new phoenix_geometry_Vertex(new phoenix_Vector(_x + _w,_y),_color);
			vert2 = new phoenix_geometry_Vertex(new phoenix_Vector(_x + _w,_y + _h),_color);
			vert3 = new phoenix_geometry_Vertex(new phoenix_Vector(_x,_y + _h),_color);
			vert4 = new phoenix_geometry_Vertex(new phoenix_Vector(_x,_y),_color);
			vert5 = new phoenix_geometry_Vertex(new phoenix_Vector(_x + _w,_y + _h),_color);
			quad = [vert0,vert1,vert2,vert3,vert4,vert5];
			this.cache[_letteridx] = quad;
		} else {
			vert0 = quad[0];
			vert1 = quad[1];
			vert2 = quad[2];
			vert3 = quad[3];
			vert4 = quad[4];
			vert5 = quad[5];
			var _this = vert0.pos;
			var prev = _this.ignore_listeners;
			_this.ignore_listeners = true;
			_this.x = _x;
			if(!_this._construct) {
				if(_this.listen_x != null && !_this.ignore_listeners) {
					_this.listen_x(_x);
				}
			}
			_this.y = _y;
			if(!_this._construct) {
				if(_this.listen_y != null && !_this.ignore_listeners) {
					_this.listen_y(_y);
				}
			}
			_this.ignore_listeners = prev;
			if(_this.listen_x != null && !_this.ignore_listeners) {
				_this.listen_x(_this.x);
			}
			if(_this.listen_y != null && !_this.ignore_listeners) {
				_this.listen_y(_this.y);
			}
			var _this1 = vert1.pos;
			var _x1 = _x + _w;
			var prev1 = _this1.ignore_listeners;
			_this1.ignore_listeners = true;
			_this1.x = _x1;
			if(!_this1._construct) {
				if(_this1.listen_x != null && !_this1.ignore_listeners) {
					_this1.listen_x(_x1);
				}
			}
			_this1.y = _y;
			if(!_this1._construct) {
				if(_this1.listen_y != null && !_this1.ignore_listeners) {
					_this1.listen_y(_y);
				}
			}
			_this1.ignore_listeners = prev1;
			if(_this1.listen_x != null && !_this1.ignore_listeners) {
				_this1.listen_x(_this1.x);
			}
			if(_this1.listen_y != null && !_this1.ignore_listeners) {
				_this1.listen_y(_this1.y);
			}
			var _this2 = vert2.pos;
			var _x2 = _x + _w;
			var _y1 = _y + _h;
			var prev2 = _this2.ignore_listeners;
			_this2.ignore_listeners = true;
			_this2.x = _x2;
			if(!_this2._construct) {
				if(_this2.listen_x != null && !_this2.ignore_listeners) {
					_this2.listen_x(_x2);
				}
			}
			_this2.y = _y1;
			if(!_this2._construct) {
				if(_this2.listen_y != null && !_this2.ignore_listeners) {
					_this2.listen_y(_y1);
				}
			}
			_this2.ignore_listeners = prev2;
			if(_this2.listen_x != null && !_this2.ignore_listeners) {
				_this2.listen_x(_this2.x);
			}
			if(_this2.listen_y != null && !_this2.ignore_listeners) {
				_this2.listen_y(_this2.y);
			}
			var _this3 = vert3.pos;
			var _y2 = _y + _h;
			var prev3 = _this3.ignore_listeners;
			_this3.ignore_listeners = true;
			_this3.x = _x;
			if(!_this3._construct) {
				if(_this3.listen_x != null && !_this3.ignore_listeners) {
					_this3.listen_x(_x);
				}
			}
			_this3.y = _y2;
			if(!_this3._construct) {
				if(_this3.listen_y != null && !_this3.ignore_listeners) {
					_this3.listen_y(_y2);
				}
			}
			_this3.ignore_listeners = prev3;
			if(_this3.listen_x != null && !_this3.ignore_listeners) {
				_this3.listen_x(_this3.x);
			}
			if(_this3.listen_y != null && !_this3.ignore_listeners) {
				_this3.listen_y(_this3.y);
			}
			var _this4 = vert4.pos;
			var prev4 = _this4.ignore_listeners;
			_this4.ignore_listeners = true;
			_this4.x = _x;
			if(!_this4._construct) {
				if(_this4.listen_x != null && !_this4.ignore_listeners) {
					_this4.listen_x(_x);
				}
			}
			_this4.y = _y;
			if(!_this4._construct) {
				if(_this4.listen_y != null && !_this4.ignore_listeners) {
					_this4.listen_y(_y);
				}
			}
			_this4.ignore_listeners = prev4;
			if(_this4.listen_x != null && !_this4.ignore_listeners) {
				_this4.listen_x(_this4.x);
			}
			if(_this4.listen_y != null && !_this4.ignore_listeners) {
				_this4.listen_y(_this4.y);
			}
			var _this5 = vert5.pos;
			var _x3 = _x + _w;
			var _y3 = _y + _h;
			var prev5 = _this5.ignore_listeners;
			_this5.ignore_listeners = true;
			_this5.x = _x3;
			if(!_this5._construct) {
				if(_this5.listen_x != null && !_this5.ignore_listeners) {
					_this5.listen_x(_x3);
				}
			}
			_this5.y = _y3;
			if(!_this5._construct) {
				if(_this5.listen_y != null && !_this5.ignore_listeners) {
					_this5.listen_y(_y3);
				}
			}
			_this5.ignore_listeners = prev5;
			if(_this5.listen_x != null && !_this5.ignore_listeners) {
				_this5.listen_x(_this5.x);
			}
			if(_this5.listen_y != null && !_this5.ignore_listeners) {
				_this5.listen_y(_this5.y);
			}
		}
		var _this6 = vert0.uv.uv0;
		_this6.u = _u;
		_this6.v = _v;
		var _this7 = vert1.uv.uv0;
		_this7.u = _u2;
		_this7.v = _v;
		var _this8 = vert2.uv.uv0;
		_this8.u = _u2;
		_this8.v = _v2;
		var _this9 = vert3.uv.uv0;
		_this9.u = _u;
		_this9.v = _v2;
		var _this10 = vert4.uv.uv0;
		_this10.u = _u;
		_this10.v = _v;
		var _this11 = vert5.uv.uv0;
		_this11.u = _u2;
		_this11.v = _v2;
		if(Math.floor(this.vertices.length / 6) <= _letteridx) {
			this.add(vert0);
			this.add(vert1);
			this.add(vert2);
			this.add(vert3);
			this.add(vert4);
			this.add(vert5);
		}
	}
	,set_dirty_sizing: function(_b) {
		this.dirty_align = true;
		return this.dirty_sizing = _b;
	}
	,set_bounds: function(_bounds) {
		this.bounds = _bounds;
		if(this.bounds == null) {
			return this.bounds;
		}
		this.set_dirty_sizing(true);
		this.update_text();
		return this.bounds;
	}
	,set_bounds_wrap: function(_wrap) {
		this.bounds_wrap = _wrap;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.bounds_wrap;
	}
	,set_letter_snapping: function(_snap) {
		this.letter_snapping = _snap;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.letter_snapping;
	}
	,set_line_spacing: function(_line_spacing) {
		this.line_spacing = _line_spacing;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.line_spacing;
	}
	,set_letter_spacing: function(_letter_spacing) {
		this.letter_spacing = _letter_spacing;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.letter_spacing;
	}
	,set_align: function(_align) {
		this.align = _align;
		this.dirty_align = true;
		this.update_text();
		return this.align;
	}
	,set_align_vertical: function(_align_vertical) {
		this.align_vertical = _align_vertical;
		this.dirty_align = true;
		this.update_text();
		return this.align_vertical;
	}
	,set_point_size: function(s) {
		if(s < 0) {
			s = 0;
		}
		this.point_size = s;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.point_size;
	}
	,set_font: function(_font) {
		this.font = _font;
		if(!this.setup_ && _font != null) {
			this.set_texture(this.font.pages.h[0]);
			this.set_dirty_sizing(true);
			this.dirty_align = true;
			this.update_text();
		}
		return this.font;
	}
	,set_smoothness: function(s) {
		if(s < 0) {
			s = 0;
		}
		if(this.state.shader != null && this.sdf && this.unique) {
			var _this = this.state.shader;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"smoothness");
			var _float = _this1.floats.get("smoothness");
			if(_float != null) {
				_float.value = s;
			} else {
				_float = new phoenix__$Shader_Uniform_$Float("smoothness",s,_location);
				_this1.floats.set("smoothness",_float);
			}
			_this1.dirty_floats.push(_float);
		}
		return this.smoothness = s;
	}
	,set_thickness: function(s) {
		if(s < 0) {
			s = 0;
		}
		if(this.state.shader != null && this.sdf && this.unique) {
			var _this = this.state.shader;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"thickness");
			var _float = _this1.floats.get("thickness");
			if(_float != null) {
				_float.value = s;
			} else {
				_float = new phoenix__$Shader_Uniform_$Float("thickness",s,_location);
				_this1.floats.set("thickness",_float);
			}
			_this1.dirty_floats.push(_float);
		}
		return this.thickness = s;
	}
	,set_outline: function(s) {
		if(s < 0.0) {
			s = 0.0;
		} else if(s > 1.0) {
			s = 1.0;
		} else {
			s = s;
		}
		if(this.state.shader != null && this.sdf && this.unique) {
			var _this = this.state.shader;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"outline");
			var _float = _this1.floats.get("outline");
			if(_float != null) {
				_float.value = s;
			} else {
				_float = new phoenix__$Shader_Uniform_$Float("outline",s,_location);
				_this1.floats.set("outline",_float);
			}
			_this1.dirty_floats.push(_float);
		}
		return this.outline = s;
	}
	,set_glow_threshold: function(s) {
		if(s < 0) {
			s = 0;
		}
		if(this.state.shader != null && this.sdf && this.unique) {
			var _this = this.state.shader;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"glow_threshold");
			var _float = _this1.floats.get("glow_threshold");
			if(_float != null) {
				_float.value = s;
			} else {
				_float = new phoenix__$Shader_Uniform_$Float("glow_threshold",s,_location);
				_this1.floats.set("glow_threshold",_float);
			}
			_this1.dirty_floats.push(_float);
		}
		return this.glow_threshold = s;
	}
	,set_glow_amount: function(s) {
		if(s < 0) {
			s = 0;
		}
		if(this.state.shader != null && this.sdf && this.unique) {
			var _this = this.state.shader;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"glow_amount");
			var _float = _this1.floats.get("glow_amount");
			if(_float != null) {
				_float.value = s;
			} else {
				_float = new phoenix__$Shader_Uniform_$Float("glow_amount",s,_location);
				_this1.floats.set("glow_amount",_float);
			}
			_this1.dirty_floats.push(_float);
		}
		return this.glow_amount = s;
	}
	,set_outline_color: function(c) {
		if(c == null) {
			return this.outline_color = c;
		}
		if(this.state.shader != null && this.sdf && this.unique) {
			var _this = this.state.shader;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"outline_color");
			var _color = _this1.colors.get("outline_color");
			if(_color != null) {
				_color.value = c;
			} else {
				_color = new phoenix__$Shader_Uniform_$phoenix_$Color("outline_color",c,_location);
				_this1.colors.set("outline_color",_color);
			}
			_this1.dirty_colors.push(_color);
		}
		return this.outline_color = c;
	}
	,set_glow_color: function(c) {
		if(c == null) {
			return this.glow_color = c;
		}
		if(this.state.shader != null && this.sdf && this.unique) {
			var _this = this.state.shader;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"glow_color");
			var _color = _this1.colors.get("glow_color");
			if(_color != null) {
				_color.value = c;
			} else {
				_color = new phoenix__$Shader_Uniform_$phoenix_$Color("glow_color",c,_location);
				_this1.colors.set("glow_color",_color);
			}
			_this1.dirty_colors.push(_color);
		}
		return this.glow_color = c;
	}
	,flush_uniforms: function() {
		if(this.state.shader != null && this.sdf) {
			var _this = this.state.shader;
			var _value = this.smoothness;
			var _this1 = _this.uniforms;
			var _location = snow_modules_opengl_web_GL.gl.getUniformLocation(_this.program,"smoothness");
			var _float = _this1.floats.get("smoothness");
			if(_float != null) {
				_float.value = _value;
			} else {
				_float = new phoenix__$Shader_Uniform_$Float("smoothness",_value,_location);
				_this1.floats.set("smoothness",_float);
			}
			_this1.dirty_floats.push(_float);
			var _this2 = this.state.shader;
			var _value1 = this.thickness;
			var _this3 = _this2.uniforms;
			var _location1 = snow_modules_opengl_web_GL.gl.getUniformLocation(_this2.program,"thickness");
			var _float1 = _this3.floats.get("thickness");
			if(_float1 != null) {
				_float1.value = _value1;
			} else {
				_float1 = new phoenix__$Shader_Uniform_$Float("thickness",_value1,_location1);
				_this3.floats.set("thickness",_float1);
			}
			_this3.dirty_floats.push(_float1);
			var _this4 = this.state.shader;
			var _value2 = this.outline;
			var _this5 = _this4.uniforms;
			var _location2 = snow_modules_opengl_web_GL.gl.getUniformLocation(_this4.program,"outline");
			var _float2 = _this5.floats.get("outline");
			if(_float2 != null) {
				_float2.value = _value2;
			} else {
				_float2 = new phoenix__$Shader_Uniform_$Float("outline",_value2,_location2);
				_this5.floats.set("outline",_float2);
			}
			_this5.dirty_floats.push(_float2);
			var _this6 = this.state.shader;
			var _value3 = this.glow_threshold;
			var _this7 = _this6.uniforms;
			var _location3 = snow_modules_opengl_web_GL.gl.getUniformLocation(_this6.program,"glow_threshold");
			var _float3 = _this7.floats.get("glow_threshold");
			if(_float3 != null) {
				_float3.value = _value3;
			} else {
				_float3 = new phoenix__$Shader_Uniform_$Float("glow_threshold",_value3,_location3);
				_this7.floats.set("glow_threshold",_float3);
			}
			_this7.dirty_floats.push(_float3);
			var _this8 = this.state.shader;
			var _value4 = this.glow_amount;
			var _this9 = _this8.uniforms;
			var _location4 = snow_modules_opengl_web_GL.gl.getUniformLocation(_this8.program,"glow_amount");
			var _float4 = _this9.floats.get("glow_amount");
			if(_float4 != null) {
				_float4.value = _value4;
			} else {
				_float4 = new phoenix__$Shader_Uniform_$Float("glow_amount",_value4,_location4);
				_this9.floats.set("glow_amount",_float4);
			}
			_this9.dirty_floats.push(_float4);
			var _this10 = this.state.shader;
			var _value5 = this.outline_color;
			var _this11 = _this10.uniforms;
			var _location5 = snow_modules_opengl_web_GL.gl.getUniformLocation(_this10.program,"outline_color");
			var _color = _this11.colors.get("outline_color");
			if(_color != null) {
				_color.value = _value5;
			} else {
				_color = new phoenix__$Shader_Uniform_$phoenix_$Color("outline_color",_value5,_location5);
				_this11.colors.set("outline_color",_color);
			}
			_this11.dirty_colors.push(_color);
			var _this12 = this.state.shader;
			var _value6 = this.glow_color;
			var _this13 = _this12.uniforms;
			var _location6 = snow_modules_opengl_web_GL.gl.getUniformLocation(_this12.program,"glow_color");
			var _color1 = _this13.colors.get("glow_color");
			if(_color1 != null) {
				_color1.value = _value6;
			} else {
				_color1 = new phoenix__$Shader_Uniform_$phoenix_$Color("glow_color",_value6,_location6);
				_this13.colors.set("glow_color",_color1);
			}
			_this13.dirty_colors.push(_color1);
		}
	}
	,__class__: phoenix_geometry_TextGeometry
	,__properties__: $extend(phoenix_geometry_Geometry.prototype.__properties__,{set_dirty_sizing:"set_dirty_sizing",set_glow_color:"set_glow_color",set_glow_amount:"set_glow_amount",set_glow_threshold:"set_glow_threshold",set_outline_color:"set_outline_color",set_outline:"set_outline",set_thickness:"set_thickness",set_smoothness:"set_smoothness",set_align_vertical:"set_align_vertical",set_align:"set_align",set_bounds_wrap:"set_bounds_wrap",set_bounds:"set_bounds",set_letter_snapping:"set_letter_snapping",set_letter_spacing:"set_letter_spacing",set_line_spacing:"set_line_spacing",set_point_size:"set_point_size",set_font:"set_font",set_text:"set_text"})
});
var phoenix_geometry_TextureCoordSet = function() {
	this.uv0 = new phoenix_geometry_TextureCoord();
	this.uv1 = new phoenix_geometry_TextureCoord();
	this.uv2 = new phoenix_geometry_TextureCoord();
	this.uv3 = new phoenix_geometry_TextureCoord();
	this.uv4 = new phoenix_geometry_TextureCoord();
	this.uv5 = new phoenix_geometry_TextureCoord();
	this.uv6 = new phoenix_geometry_TextureCoord();
	this.uv7 = new phoenix_geometry_TextureCoord();
};
$hxClasses["phoenix.geometry.TextureCoordSet"] = phoenix_geometry_TextureCoordSet;
phoenix_geometry_TextureCoordSet.__name__ = ["phoenix","geometry","TextureCoordSet"];
phoenix_geometry_TextureCoordSet.prototype = {
	__class__: phoenix_geometry_TextureCoordSet
};
var phoenix_geometry_TextureCoord = function(_u,_v,_w,_t) {
	if(_t == null) {
		_t = 0.0;
	}
	if(_w == null) {
		_w = 0.0;
	}
	if(_v == null) {
		_v = 0.0;
	}
	if(_u == null) {
		_u = 0.0;
	}
	this.t = 0.0;
	this.w = 0.0;
	this.v = 0.0;
	this.u = 0.0;
	this.u = _u;
	this.v = _v;
	this.w = _w;
	this.t = _t;
};
$hxClasses["phoenix.geometry.TextureCoord"] = phoenix_geometry_TextureCoord;
phoenix_geometry_TextureCoord.__name__ = ["phoenix","geometry","TextureCoord"];
phoenix_geometry_TextureCoord.prototype = {
	__class__: phoenix_geometry_TextureCoord
};
var phoenix_geometry_Vertex = function(_pos,_color,_normal) {
	this.uv = new phoenix_geometry_TextureCoordSet();
	this.pos = _pos;
	this.color = _color == null ? new phoenix_Color() : _color;
	this.normal = _normal == null ? new phoenix_Vector() : _normal;
};
$hxClasses["phoenix.geometry.Vertex"] = phoenix_geometry_Vertex;
phoenix_geometry_Vertex.__name__ = ["phoenix","geometry","Vertex"];
phoenix_geometry_Vertex.prototype = {
	__class__: phoenix_geometry_Vertex
};
var snow_Snow = function(_host) {
	this.had_ready_event = false;
	this.i = 0;
	this.immediate_shutdown = false;
	this.has_shutdown = false;
	this.shutting_down = false;
	this.debug = false;
	this.platform = "unknown";
	this.ready = false;
	this.freeze = false;
	if(_host == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_host was null" + (" ( " + "snow App instance was null!" + " )")));
	}
	this.host = _host;
	this.host.app = this;
	this.config = this.default_config();
	this.sys_event = new snow_types_SystemEvent();
	this.win_event = new snow_types_WindowEvent();
	this.io = new snow_systems_io_IO(this);
	this.input = new snow_systems_input_Input(this);
	this.audio = new snow_systems_audio_Audio(this);
	this.assets = new snow_systems_assets_Assets(this);
	this.extensions = [];
	var _g = 0;
	var _g1 = snow_types_Config.extensions;
	while(_g < _g1.length) {
		var _ext_type = _g1[_g];
		++_g;
		var _class = Type.resolveClass(_ext_type);
		if(_class == null) {
			throw new js__$Boot_HaxeError(snow_types_Error.error("Extension `" + _ext_type + "`: Type not found via Type.resolveClass!"));
		}
		var _instance = Type.createInstance(_class,null);
		if(_instance == null) {
			throw new js__$Boot_HaxeError(snow_types_Error.error("Extension `" + _ext_type + "`: Instance was null on calling new()!"));
		}
		this.extensions.push(_instance);
	}
	this.runtime = new snow_core_web_Runtime(this);
	if(this.os == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("os was null" + (" ( " + "init - Runtime didn't set the app.os value!" + " )")));
	}
	if(this.platform == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("platform was null" + (" ( " + "init - Runtime didn't set the app.platform value!" + " )")));
	}
	this.dispatch_event(1);
	this.host.internal_init();
	snow_api_Promises.step();
	while(snow_Snow.next_queue.length > 0) {
		var count = snow_Snow.next_queue.length;
		var i = 0;
		while(i < count) {
			(snow_Snow.next_queue.shift())();
			++i;
		}
	}
	while(snow_Snow.defer_queue.length > 0) {
		var count1 = snow_Snow.defer_queue.length;
		var i1 = 0;
		while(i1 < count1) {
			(snow_Snow.defer_queue.shift())();
			++i1;
		}
	}
	this.dispatch_event(2);
	snow_api_Promises.step();
	while(snow_Snow.next_queue.length > 0) {
		var count2 = snow_Snow.next_queue.length;
		var i2 = 0;
		while(i2 < count2) {
			(snow_Snow.next_queue.shift())();
			++i2;
		}
	}
	while(snow_Snow.defer_queue.length > 0) {
		var count3 = snow_Snow.defer_queue.length;
		var i3 = 0;
		while(i3 < count3) {
			(snow_Snow.defer_queue.shift())();
			++i3;
		}
	}
	if(this.runtime.run() && !(this.has_shutdown || this.shutting_down)) {
		this.shutdown();
	}
};
$hxClasses["snow.Snow"] = snow_Snow;
snow_Snow.__name__ = ["snow","Snow"];
snow_Snow.prototype = {
	shutdown: function() {
		if(this.shutting_down) {
			haxe_Log.trace("     i / snow / " + "shutdown / called again, already shutting down - ignoring",{ fileName : "Snow.hx", lineNumber : 158, className : "snow.Snow", methodName : "shutdown"});
			return;
		}
		if(this.has_shutdown != false) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("has_shutdown == false" + (" ( " + "snow - calling shutdown more than once is disallowed" + " )")));
		}
		this.shutting_down = true;
		this.host.ondestroy();
		this.dispatch_event(7);
		this.io.shutdown();
		this.audio.shutdown();
		this.assets.shutdown();
		this.runtime.shutdown(this.immediate_shutdown);
		this.has_shutdown = true;
	}
	,dispatch_event: function(_type) {
		var _this = this.sys_event;
		_this.type = _type;
		_this.window = null;
		_this.input = null;
		this.onevent(this.sys_event);
	}
	,dispatch_window_event: function(_type,_timestamp,_window_id,_x,_y) {
		var _this = this.win_event;
		_this.type = _type;
		_this.timestamp = _timestamp;
		_this.window_id = _window_id;
		_this.x = _x;
		_this.y = _y;
		var _this1 = this.sys_event;
		_this1.type = 8;
		_this1.window = this.win_event;
		_this1.input = null;
		this.onevent(this.sys_event);
	}
	,dispatch_input_event: function(_event) {
		var _this = this.sys_event;
		_this.type = 9;
		_this.window = null;
		_this.input = _event;
		this.onevent(this.sys_event);
	}
	,onevent: function(_event) {
		this.audio.onevent(_event);
		this.input.onevent(_event);
		this.host.onevent(_event);
		this.i = 0;
		while(this.i < this.extensions.length) {
			this.extensions[this.i].onevent(_event);
			++this.i;
		}
		switch(_event.type) {
		case 2:
			var _gthis = this;
			if(this.had_ready_event != false) {
				throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("had_ready_event == false" + (" ( " + "snow; the ready event should not be fired repeatedly" + " )")));
			}
			this.had_ready_event = true;
			this.setup_configs().then(function(_) {
				_gthis.runtime.ready();
				_gthis.host.ready();
				_gthis.ready = true;
			}).error(function(e) {
				throw new js__$Boot_HaxeError(snow_types_Error.init("snow / cannot recover from error: " + e));
			});
			snow_api_Promises.step();
			while(snow_Snow.next_queue.length > 0) {
				var count = snow_Snow.next_queue.length;
				var i = 0;
				while(i < count) {
					(snow_Snow.next_queue.shift())();
					++i;
				}
			}
			while(snow_Snow.defer_queue.length > 0) {
				var count1 = snow_Snow.defer_queue.length;
				var i1 = 0;
				while(i1 < count1) {
					(snow_Snow.defer_queue.shift())();
					++i1;
				}
			}
			break;
		case 3:
			if(!this.freeze) {
				snow_api_Timer.update();
				snow_api_Promises.step();
				var count2 = snow_Snow.next_queue.length;
				var i2 = 0;
				while(i2 < count2) {
					(snow_Snow.next_queue.shift())();
					++i2;
				}
				if(!this.shutting_down && this.ready) {
					this.host.internal_tick();
				}
				var count3 = snow_Snow.defer_queue.length;
				var i3 = 0;
				while(i3 < count3) {
					(snow_Snow.defer_queue.shift())();
					++i3;
				}
			}
			break;
		case 7:
			haxe_Log.trace("     i / snow / " + "goodbye.",{ fileName : "Snow.hx", lineNumber : 248, className : "snow.Snow", methodName : "onevent"});
			break;
		case 10:
			this.shutdown();
			break;
		case 11:
			this.immediate_shutdown = true;
			this.shutdown();
			break;
		default:
		}
	}
	,setup_configs: function() {
		var _gthis = this;
		if(snow_types_Config.app_config == null || snow_types_Config.app_config == "") {
			this.config = this.host.config(this.config);
			return snow_api_Promise.resolve();
		}
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.default_user_config().then(function(_user_conf) {
				_gthis.config.user = _user_conf;
			}).error(function(error) {
				throw new js__$Boot_HaxeError(snow_types_Error.init("config / failed / default user config JSON failed to parse. Cannot recover. " + error));
			}).then(function() {
				_gthis.config = _gthis.host.config(_gthis.config);
				resolve();
			});
		});
	}
	,default_user_config: function() {
		var _gthis = this;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.io.data_flow(haxe_io_Path.join([_gthis.assets.root,snow_types_Config.app_config]),snow_systems_assets_AssetJSON.processor).then(resolve).error(function(error) {
				if(error[1] == 2) {
					reject(error);
				} else {
					haxe_Log.trace("     i / snow / " + ("config / user config will be null! / " + Std.string(error)),{ fileName : "Snow.hx", lineNumber : 395, className : "snow.Snow", methodName : "default_user_config"});
					resolve(null);
				}
			});
		});
	}
	,default_config: function() {
		return { user : null, window : this.default_window_config(), render : this.default_render_config(), runtime : null};
	}
	,default_render_config: function() {
		return { depth : 0, stencil : 0, antialiasing : 0, red_bits : 8, green_bits : 8, blue_bits : 8, alpha_bits : 8, default_clear : { r : 0, g : 0, b : 0, a : 1}, opengl : { major : 0, minor : 0, profile : 0}, webgl : { version : 1}};
	}
	,default_window_config: function() {
		return { true_fullscreen : false, fullscreen : false, borderless : false, resizable : true, x : 536805376, y : 536805376, width : 960, height : 640, title : "snow app", no_input : false, background_sleep : 0.066666666666666666};
	}
	,__class__: snow_Snow
};
var snow_api_DebugError = { __ename__ : true, __constructs__ : ["assertion","null_assertion"] };
snow_api_DebugError.assertion = function(expr) { var $x = ["assertion",0,expr]; $x.__enum__ = snow_api_DebugError; $x.toString = $estr; return $x; };
snow_api_DebugError.null_assertion = function(expr) { var $x = ["null_assertion",1,expr]; $x.__enum__ = snow_api_DebugError; $x.toString = $estr; return $x; };
var snow_api_Emitter = function() {
	this._checking = false;
	this._to_remove = new List();
	this.connected = new List();
	this.bindings = new haxe_ds_IntMap();
};
$hxClasses["snow.api.Emitter"] = snow_api_Emitter;
snow_api_Emitter.__name__ = ["snow","api","Emitter"];
snow_api_Emitter.prototype = {
	emit: function(event,data) {
		this._check();
		var list = this.bindings.h[event];
		if(list != null && list.length > 0) {
			var _g = 0;
			while(_g < list.length) {
				var handler = list[_g];
				++_g;
				handler(data);
			}
		}
		this._check();
	}
	,_check: function() {
		if(this._checking) {
			return;
		}
		this._checking = true;
		if(this._to_remove.length > 0) {
			var _g_head = this._to_remove.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var list = this.bindings.h[val.event];
				HxOverrides.remove(list,val.handler);
				if(list.length == 0) {
					this.bindings.remove(val.event);
				}
			}
			this._to_remove = null;
			this._to_remove = new List();
		}
		this._checking = false;
	}
	,__class__: snow_api_Emitter
};
var snow_api_Promise = function(func) {
	this.was_caught = false;
	var _gthis = this;
	this.state = 0;
	this.reject_reactions = [];
	this.fulfill_reactions = [];
	this.settle_reactions = [];
	snow_api_Promises.queue(function() {
		func($bind(_gthis,_gthis.onfulfill),$bind(_gthis,_gthis.onreject));
		snow_api_Promises.defer(snow_api_Promises.next);
	});
};
$hxClasses["snow.api.Promise"] = snow_api_Promise;
snow_api_Promise.__name__ = ["snow","api","Promise"];
snow_api_Promise.all = function(list) {
	return new snow_api_Promise(function(ok,no) {
		var current = 0;
		var total = list.length;
		var fulfill_result = [];
		var reject_result = null;
		var all_state = 0;
		var single_ok = function(index,val) {
			if(all_state != 0) {
				return;
			}
			current += 1;
			fulfill_result[index] = val;
			if(total == current) {
				all_state = 1;
				ok(fulfill_result);
			}
		};
		var single_err = function(val1) {
			if(all_state != 0) {
				return;
			}
			all_state = 2;
			reject_result = val1;
			no(reject_result);
		};
		var index1 = 0;
		var _g = 0;
		while(_g < list.length) {
			var promise = list[_g];
			++_g;
			promise.then((function(a1,f) {
				return function(a2) {
					f[0](a1[0],a2);
				};
			})([index1],[single_ok])).error(single_err);
			++index1;
		}
	});
};
snow_api_Promise.reject = function(reason) {
	return new snow_api_Promise(function(ok,no) {
		no(reason);
	});
};
snow_api_Promise.resolve = function(val) {
	return new snow_api_Promise(function(ok,no) {
		ok(val);
	});
};
snow_api_Promise.prototype = {
	then: function(on_fulfilled,on_rejected) {
		switch(this.state) {
		case 0:
			this.add_fulfill(on_fulfilled);
			this.add_reject(on_rejected);
			return this.new_linked_promise();
		case 1:
			snow_api_Promises.defer(on_fulfilled,this.result);
			return snow_api_Promise.resolve(this.result);
		case 2:
			snow_api_Promises.defer(on_rejected,this.result);
			return snow_api_Promise.reject(this.result);
		}
	}
	,error: function(on_rejected) {
		switch(this.state) {
		case 0:
			this.add_reject(on_rejected);
			return this.new_linked_resolve_empty();
		case 1:
			return snow_api_Promise.resolve(this.result);
		case 2:
			snow_api_Promises.defer(on_rejected,this.result);
			return snow_api_Promise.reject(this.result);
		}
	}
	,add_settle: function(f) {
		if(this.state == 0) {
			this.settle_reactions.push(f);
		} else {
			snow_api_Promises.defer(f,this.result);
		}
	}
	,new_linked_promise: function() {
		var _gthis = this;
		return new snow_api_Promise(function(f,r) {
			_gthis.add_settle(function(_) {
				if(_gthis.state == 1) {
					f(_gthis.result);
				} else {
					r(_gthis.result);
				}
			});
		});
	}
	,new_linked_resolve_empty: function() {
		var _gthis = this;
		return new snow_api_Promise(function(f,r) {
			_gthis.add_settle(function(_) {
				f();
			});
		});
	}
	,add_fulfill: function(f) {
		if(f != null) {
			this.fulfill_reactions.push(f);
		}
	}
	,add_reject: function(f) {
		if(f != null) {
			this.was_caught = true;
			this.reject_reactions.push(f);
		}
	}
	,onfulfill: function(val) {
		this.state = 1;
		this.result = val;
		while(this.fulfill_reactions.length > 0) this.fulfill_reactions.shift()(this.result);
		this.onsettle();
	}
	,onreject: function(reason) {
		this.state = 2;
		this.result = reason;
		while(this.reject_reactions.length > 0) this.reject_reactions.shift()(this.result);
		this.onsettle();
	}
	,onsettle: function() {
		while(this.settle_reactions.length > 0) this.settle_reactions.shift()(this.result);
	}
	,__class__: snow_api_Promise
};
var snow_api_Promises = function() { };
$hxClasses["snow.api.Promises"] = snow_api_Promises;
snow_api_Promises.__name__ = ["snow","api","Promises"];
snow_api_Promises.step = function() {
	snow_api_Promises.next();
	while(snow_api_Promises.defers.length > 0) {
		var defer = snow_api_Promises.defers.shift();
		defer.f(defer.a);
	}
};
snow_api_Promises.next = function() {
	if(snow_api_Promises.calls.length > 0) {
		(snow_api_Promises.calls.shift())();
	}
};
snow_api_Promises.defer = function(f,a) {
	if(f == null) {
		return;
	}
	snow_api_Promises.defers.push({ f : f, a : a});
};
snow_api_Promises.queue = function(f) {
	if(f == null) {
		return;
	}
	snow_api_Promises.calls.push(f);
};
var snow_api_Timer = function(_time) {
	this.time = _time;
	snow_api_Timer.running_timers.push(this);
	this.fire_at = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start + this.time;
	this.running = true;
};
$hxClasses["snow.api.Timer"] = snow_api_Timer;
snow_api_Timer.__name__ = ["snow","api","Timer"];
snow_api_Timer.update = function() {
	var now = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
	var _g = 0;
	var _g1 = snow_api_Timer.running_timers;
	while(_g < _g1.length) {
		var timer = _g1[_g];
		++_g;
		if(timer.running) {
			if(timer.fire_at < now) {
				timer.fire_at += timer.time;
				timer.run();
			}
		}
	}
};
snow_api_Timer.prototype = {
	run: function() {
	}
	,stop: function() {
		if(this.running) {
			this.running = false;
			HxOverrides.remove(snow_api_Timer.running_timers,this);
		}
	}
	,__class__: snow_api_Timer
};
var snow_modules_interfaces_Audio = function() { };
$hxClasses["snow.modules.interfaces.Audio"] = snow_modules_interfaces_Audio;
snow_modules_interfaces_Audio.__name__ = ["snow","modules","interfaces","Audio"];
var snow_core_Extension = function() { };
$hxClasses["snow.core.Extension"] = snow_core_Extension;
snow_core_Extension.__name__ = ["snow","core","Extension"];
snow_core_Extension.prototype = {
	__class__: snow_core_Extension
};
var snow_core_Runtime = function() { };
$hxClasses["snow.core.Runtime"] = snow_core_Runtime;
snow_core_Runtime.__name__ = ["snow","core","Runtime"];
var snow_core_web_Runtime = function(_app) {
	this.p_body_margin = "0";
	this.p_body_overflow = "0";
	this.p_height = 0;
	this.p_width = 0;
	this.p_s_height = "";
	this.p_s_width = "";
	this.p_margin = "0";
	this.p_padding = "0";
	this.gamepads_supported = false;
	this.window_dpr = 1.0;
	this.window_h = 0;
	this.window_w = 0;
	this.window_y = 0;
	this.window_x = 0;
	this.name = "web";
	this.app = _app;
	this.app.platform = "web";
	this.app.os = this.guess_os();
	snow_core_web_Runtime.timestamp_start = window.performance.now() / 1000.0;
	this.app.config.runtime = { window_id : "app", window_parent : window.document.body, prevent_default_context_menu : true, prevent_default_mouse_wheel : true, prevent_default_touches : true, prevent_default_keys : [1073741904,1073741903,1073741906,1073741905,8,9,127,32]};
	var _list = ($_=window.navigator,$bind($_,$_.getGamepads)) != null ? window.navigator.getGamepads() : window.navigator.webkitGetGamepads != null ? window.navigator.webkitGetGamepads() : null;
	if(_list != null) {
		this.gamepads_supported = true;
		this.gamepad_btns_cache = [];
		var _g = 0;
		while(_g < _list.length) {
			var _gamepad = _list[_g];
			++_g;
			if(_gamepad != null) {
				this.gamepad_btns_cache[_gamepad.index] = [];
				var _g1 = 0;
				var _g2 = _gamepad.buttons.length;
				while(_g1 < _g2) {
					++_g1;
					this.gamepad_btns_cache[_gamepad.index].push(0);
				}
			}
		}
	} else {
		haxe_Log.trace("  i / runtime / " + "Gamepads are not supported in this browser :(",{ fileName : "Runtime.hx", lineNumber : 861, className : "snow.core.web.Runtime", methodName : "gamepads_init"});
	}
	haxe_Log.trace("  i / runtime / " + "web / init ok",{ fileName : "Runtime.hx", lineNumber : 67, className : "snow.core.web.Runtime", methodName : "new"});
};
$hxClasses["snow.core.web.Runtime"] = snow_core_web_Runtime;
snow_core_web_Runtime.__name__ = ["snow","core","web","Runtime"];
snow_core_web_Runtime.__interfaces__ = [snow_core_Runtime];
snow_core_web_Runtime.timestamp = function() {
	return window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
};
snow_core_web_Runtime.prototype = {
	window_device_pixel_ratio: function() {
		if(window.devicePixelRatio == null) {
			return 1.0;
		} else {
			return window.devicePixelRatio;
		}
	}
	,window_width: function() {
		return this.window.width;
	}
	,window_height: function() {
		return this.window.height;
	}
	,window_grab: function(enable) {
		if(enable) {
			if(($_=this.window,$bind($_,$_.requestPointerLock)) != null) {
				this.window.requestPointerLock();
			} else if(this.window.webkitRequestPointerLock != null) {
				this.window.webkitRequestPointerLock();
			} else if(this.window.mozRequestPointerLock != null) {
				this.window.mozRequestPointerLock();
			} else {
				return false;
			}
		} else if(($_=window.document,$bind($_,$_.exitPointerLock)) != null) {
			window.document.exitPointerLock();
		} else if(window.document.webkitExitPointerLock != null) {
			window.document.webkitExitPointerLock();
		} else if(window.document.mozExitPointerLock != null) {
			window.document.mozExitPointerLock();
		} else {
			return false;
		}
		return true;
	}
	,onresize_handler: function(_) {
		this.window.style.width = "" + Std.string(window.innerWidth) + "px";
		this.window.style.height = "" + Std.string(window.innerHeight) + "px";
	}
	,window_fullscreen: function(enable,true_fullscreen) {
		if(true_fullscreen == null) {
			true_fullscreen = false;
		}
		var _result = true;
		if(enable) {
			this.p_padding = this.window.style.padding;
			this.p_margin = this.window.style.margin;
			this.p_s_width = this.window.style.width;
			this.p_s_height = this.window.style.height;
			this.p_width = this.window.width;
			this.p_height = this.window.height;
			this.p_body_margin = window.document.body.style.margin;
			this.p_body_overflow = window.document.body.style.overflow;
			this.window.style.margin = "0";
			this.window.style.padding = "0";
			this.window.style.width = Std.string(window.innerWidth) + "px";
			this.window.style.height = Std.string(window.innerHeight) + "px";
			this.window_dpr = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
			this.window.width = Math.floor(window.innerWidth * this.window_dpr);
			this.window.height = Math.floor(window.innerHeight * this.window_dpr);
			window.document.body.style.margin = "0";
			window.document.body.style.overflow = "hidden";
			if(true_fullscreen) {
				if(($_=this.window,$bind($_,$_.requestFullscreen)) != null) {
					this.window.requestFullscreen();
				} else if(this.window.requestFullScreen != null) {
					this.window.requestFullScreen(null);
				} else if(this.window.webkitRequestFullscreen != null) {
					this.window.webkitRequestFullscreen();
				} else if(this.window.mozRequestFullScreen != null) {
					this.window.mozRequestFullScreen();
				} else {
					_result = false;
				}
			}
			window.addEventListener("resize",$bind(this,this.onresize_handler));
		} else {
			window.removeEventListener("resize",$bind(this,this.onresize_handler));
			this.window.style.padding = this.p_padding;
			this.window.style.margin = this.p_margin;
			this.window.style.width = this.p_s_width;
			this.window.style.height = this.p_s_height;
			this.window.width = this.p_width;
			this.window.height = this.p_height;
			window.document.body.style.margin = this.p_body_margin;
			window.document.body.style.overflow = this.p_body_overflow;
			if(true_fullscreen) {
				if(($_=window.document,$bind($_,$_.exitFullscreen)) != null) {
					window.document.exitFullscreen();
				} else if(window.document.webkitExitFullscreen != null) {
					window.document.webkitExitFullscreen();
				} else if(window.document.mozCancelFullScreen != null) {
					window.document.mozCancelFullScreen();
				} else {
					_result = false;
				}
			}
		}
		return _result;
	}
	,shutdown: function(_immediate) {
		if(_immediate == null) {
			_immediate = false;
		}
		haxe_Log.trace("  i / runtime / " + "runtime / web / shutdown",{ fileName : "Runtime.hx", lineNumber : 230, className : "snow.core.web.Runtime", methodName : "shutdown"});
		window.document.removeEventListener("visibilitychange",$bind(this,this.on_visibilitychange));
		window.document.removeEventListener("keydown",$bind(this,this.on_keydown));
		window.document.removeEventListener("keyup",$bind(this,this.on_keyup));
		window.document.removeEventListener("keypress",$bind(this,this.on_keypress));
		window.removeEventListener("gamepadconnected",$bind(this,this.on_gamepadconnected));
		window.removeEventListener("gamepaddisconnected",$bind(this,this.on_gamepaddisconnected));
		this.window.remove();
		this.window = null;
		snow_modules_opengl_web_GL.gl = null;
	}
	,run: function() {
		haxe_Log.trace("  i / runtime / " + "web / run",{ fileName : "Runtime.hx", lineNumber : 248, className : "snow.core.web.Runtime", methodName : "run"});
		this.loop_pre_ready();
		return false;
	}
	,ready: function() {
		haxe_Log.trace("  i / runtime / " + "web / ready",{ fileName : "Runtime.hx", lineNumber : 258, className : "snow.core.web.Runtime", methodName : "ready"});
		this.create_window();
	}
	,dispatch_window_ev: function(_type,_x,_y) {
		this.app.dispatch_window_event(_type,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1,_x,_y);
	}
	,setup_events: function() {
		var _gthis = this;
		this.window.addEventListener("mouseleave",function(_ev) {
			_gthis.dispatch_window_ev(11,null,null);
		});
		this.window.addEventListener("mouseenter",function(_ev1) {
			_gthis.dispatch_window_ev(10,null,null);
		});
		window.document.addEventListener("visibilitychange",$bind(this,this.on_visibilitychange));
		window.document.addEventListener("keydown",$bind(this,this.on_keydown));
		window.document.addEventListener("keyup",$bind(this,this.on_keyup));
		window.document.addEventListener("keypress",$bind(this,this.on_keypress));
		this.window.addEventListener("contextmenu",function(_ev2) {
			if(_gthis.app.config.runtime.prevent_default_context_menu) {
				_ev2.preventDefault();
			}
		});
		this.window.addEventListener("mousedown",function(_ev3) {
			_gthis.app.input.dispatch_mouse_down_event(Math.floor(_gthis.window_dpr * (_ev3.pageX - _gthis.window_x)),Math.floor(_gthis.window_dpr * (_ev3.pageY - _gthis.window_y)),_ev3.button + 1,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1);
		});
		this.window.addEventListener("mouseup",function(_ev4) {
			_gthis.app.input.dispatch_mouse_up_event(Math.floor(_gthis.window_dpr * (_ev4.pageX - _gthis.window_x)),Math.floor(_gthis.window_dpr * (_ev4.pageY - _gthis.window_y)),_ev4.button + 1,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1);
		});
		this.window.addEventListener("mousemove",function(_ev5) {
			var _movement_x = _ev5.movementX == null ? 0 : _ev5.movementX;
			var _movement_y = _ev5.movementY == null ? 0 : _ev5.movementY;
			_movement_x = Math.floor(_movement_x * _gthis.window_dpr);
			_movement_y = Math.floor(_movement_y * _gthis.window_dpr);
			_gthis.app.input.dispatch_mouse_move_event(Math.floor(_gthis.window_dpr * (_ev5.pageX - _gthis.window_x)),Math.floor(_gthis.window_dpr * (_ev5.pageY - _gthis.window_y)),_movement_x,_movement_y,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1);
		});
		this.window.addEventListener("wheel",function(_ev6) {
			if(_gthis.app.config.runtime.prevent_default_mouse_wheel) {
				_ev6.preventDefault();
			}
			_gthis.app.input.dispatch_mouse_wheel_event(_ev6.deltaX,_ev6.deltaY,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1);
		});
		this.window.addEventListener("touchstart",function(_ev7) {
			if(_gthis.app.config.runtime.prevent_default_touches) {
				_ev7.preventDefault();
			}
			var _bound = _gthis.window.getBoundingClientRect();
			var _g = 0;
			var _g1 = _ev7.changedTouches;
			while(_g < _g1.length) {
				var touch = _g1[_g];
				++_g;
				var _x = touch.clientX - _bound.left;
				var _y = touch.clientY - _bound.top;
				_x /= _bound.width;
				_y /= _bound.height;
				_gthis.app.input.dispatch_touch_down_event(_x,_y,0,0,touch.identifier,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
			}
		});
		this.window.addEventListener("touchend",function(_ev8) {
			if(_gthis.app.config.runtime.prevent_default_touches) {
				_ev8.preventDefault();
			}
			var _bound1 = _gthis.window.getBoundingClientRect();
			var _g2 = 0;
			var _g11 = _ev8.changedTouches;
			while(_g2 < _g11.length) {
				var touch1 = _g11[_g2];
				++_g2;
				var _x1 = touch1.clientX - _bound1.left;
				var _y1 = touch1.clientY - _bound1.top;
				_x1 /= _bound1.width;
				_y1 /= _bound1.height;
				_gthis.app.input.dispatch_touch_up_event(_x1,_y1,0,0,touch1.identifier,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
			}
		});
		this.window.addEventListener("touchmove",function(_ev9) {
			if(_gthis.app.config.runtime.prevent_default_touches) {
				_ev9.preventDefault();
			}
			var _bound2 = _gthis.window.getBoundingClientRect();
			var _g3 = 0;
			var _g12 = _ev9.changedTouches;
			while(_g3 < _g12.length) {
				var touch2 = _g12[_g3];
				++_g3;
				var _x2 = touch2.clientX - _bound2.left;
				var _y2 = touch2.clientY - _bound2.top;
				_x2 /= _bound2.width;
				_y2 /= _bound2.height;
				_gthis.app.input.dispatch_touch_move_event(_x2,_y2,0,0,touch2.identifier,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
			}
		});
		window.addEventListener("gamepadconnected",$bind(this,this.on_gamepadconnected));
		window.addEventListener("gamepaddisconnected",$bind(this,this.on_gamepaddisconnected));
	}
	,on_visibilitychange: function(_) {
		if(window.document.hidden) {
			this.app.dispatch_window_event(2,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1,null,null);
			this.app.dispatch_window_event(7,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1,null,null);
			this.app.dispatch_window_event(13,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1,null,null);
		} else {
			this.app.dispatch_window_event(1,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1,null,null);
			this.app.dispatch_window_event(9,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1,null,null);
			this.app.dispatch_window_event(12,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1,null,null);
		}
	}
	,on_keydown: function(_ev) {
		var dom_keycode = _ev.keyCode;
		var _keycode = dom_keycode >= 65 && dom_keycode <= 90 ? dom_keycode + 32 : snow_core_web__$Runtime_DOMKeys.dom_key_to_keycode(dom_keycode);
		var _scancode = snow_systems_input_Keycodes.to_scan(_keycode);
		this.app.input.mod_state.none = !_ev.altKey && !_ev.ctrlKey && !_ev.metaKey && !_ev.shiftKey;
		this.app.input.mod_state.lshift = _ev.shiftKey;
		this.app.input.mod_state.rshift = _ev.shiftKey;
		this.app.input.mod_state.lctrl = _ev.ctrlKey;
		this.app.input.mod_state.rctrl = _ev.ctrlKey;
		this.app.input.mod_state.lalt = _ev.altKey;
		this.app.input.mod_state.ralt = _ev.altKey;
		this.app.input.mod_state.lmeta = _ev.metaKey;
		this.app.input.mod_state.rmeta = _ev.metaKey;
		this.app.input.mod_state.num = false;
		this.app.input.mod_state.caps = false;
		this.app.input.mod_state.mode = false;
		this.app.input.mod_state.ctrl = _ev.ctrlKey;
		this.app.input.mod_state.shift = _ev.shiftKey;
		this.app.input.mod_state.alt = _ev.altKey;
		this.app.input.mod_state.meta = _ev.metaKey;
		var _mod_state = this.app.input.mod_state;
		if(this.app.config.runtime.prevent_default_keys.indexOf(_keycode) != -1) {
			_ev.preventDefault();
		}
		this.app.input.dispatch_key_down_event(_keycode,_scancode,_ev.repeat,_mod_state,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1);
	}
	,on_keyup: function(_ev) {
		var dom_keycode = _ev.keyCode;
		var _keycode = dom_keycode >= 65 && dom_keycode <= 90 ? dom_keycode + 32 : snow_core_web__$Runtime_DOMKeys.dom_key_to_keycode(dom_keycode);
		var _scancode = snow_systems_input_Keycodes.to_scan(_keycode);
		this.app.input.mod_state.none = !_ev.altKey && !_ev.ctrlKey && !_ev.metaKey && !_ev.shiftKey;
		this.app.input.mod_state.lshift = _ev.shiftKey;
		this.app.input.mod_state.rshift = _ev.shiftKey;
		this.app.input.mod_state.lctrl = _ev.ctrlKey;
		this.app.input.mod_state.rctrl = _ev.ctrlKey;
		this.app.input.mod_state.lalt = _ev.altKey;
		this.app.input.mod_state.ralt = _ev.altKey;
		this.app.input.mod_state.lmeta = _ev.metaKey;
		this.app.input.mod_state.rmeta = _ev.metaKey;
		this.app.input.mod_state.num = false;
		this.app.input.mod_state.caps = false;
		this.app.input.mod_state.mode = false;
		this.app.input.mod_state.ctrl = _ev.ctrlKey;
		this.app.input.mod_state.shift = _ev.shiftKey;
		this.app.input.mod_state.alt = _ev.altKey;
		this.app.input.mod_state.meta = _ev.metaKey;
		var _mod_state = this.app.input.mod_state;
		if(this.app.config.runtime.prevent_default_keys.indexOf(_keycode) != -1) {
			_ev.preventDefault();
		}
		this.app.input.dispatch_key_up_event(_keycode,_scancode,_ev.repeat,_mod_state,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1);
	}
	,on_keypress: function(_ev) {
		if(_ev.which != 0 && snow_core_web_Runtime.key_press_ignored.indexOf(_ev.keyCode) == -1) {
			var _text = String.fromCharCode(_ev.charCode);
			this.app.input.dispatch_text_event(_text,0,_text.length,2,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start,1);
		}
	}
	,on_gamepadconnected: function(_ev) {
		var _gamepad = _ev.gamepad;
		this.gamepad_btns_cache[_gamepad.index] = [];
		var _g1 = 0;
		var _g = _gamepad.buttons.length;
		while(_g1 < _g) {
			++_g1;
			this.gamepad_btns_cache[_gamepad.index].push(0);
		}
		this.app.input.dispatch_gamepad_device_event(_ev.gamepad.index,_ev.gamepad.id,1,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
	}
	,on_gamepaddisconnected: function(_ev) {
		this.gamepad_btns_cache[_ev.gamepad.index] = null;
		this.app.input.dispatch_gamepad_device_event(_ev.gamepad.index,_ev.gamepad.id,2,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
	}
	,create_window: function() {
		var config = this.app.config.window;
		this.window = window.document.createElement("canvas");
		this.window_dpr = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
		this.window.width = Math.floor(config.width * this.window_dpr);
		this.window.height = Math.floor(config.height * this.window_dpr);
		this.window_w = config.width;
		this.window_h = config.height;
		this.window.style.width = config.width + "px";
		this.window.style.height = config.height + "px";
		this.window.style.background = "#000";
		this.window.id = this.app.config.runtime.window_id;
		this.app.config.runtime.window_parent.appendChild(this.window);
		if(config.title != null) {
			window.document.title = config.title;
		}
		if(!this.create_render_context(this.window)) {
			this.create_render_context_failed();
			return;
		}
		this.post_render_context(this.window);
		this.setup_events();
		if(config.fullscreen) {
			this.window_fullscreen(true,config.true_fullscreen);
			this.window_dpr = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
			var _bounds = this.window.getBoundingClientRect();
			var _x = Math.round(_bounds.left + window.pageXOffset - window.document.body.clientTop);
			var _y = Math.round(_bounds.top + window.pageYOffset - window.document.body.clientLeft);
			var _w = Math.round(_bounds.width);
			var _h = Math.round(_bounds.height);
			if(_x != this.window_x || _y != this.window_y) {
				this.window_x = _x;
				this.window_y = _y;
				this.dispatch_window_ev(4,this.window_x,this.window_y);
			}
			if(_w != this.window_w || _h != this.window_h) {
				this.window_w = _w;
				this.window_h = _h;
				this.window.width = Math.floor(this.window_w * this.window_dpr);
				this.window.height = Math.floor(this.window_h * this.window_dpr);
				this.dispatch_window_ev(6,this.window.width,this.window.height);
			}
		}
	}
	,post_render_context: function(window) {
		var color = this.app.config.render.default_clear;
		snow_modules_opengl_web_GL.gl.clearDepth(1.0);
		snow_modules_opengl_web_GL.gl.clearStencil(0);
		snow_modules_opengl_web_GL.gl.clearColor(color.r,color.g,color.b,color.a);
		snow_modules_opengl_web_GL.gl.clear(17664);
	}
	,create_render_context: function(_window) {
		var config = this.app.config.render;
		var attr = config.webgl;
		attr = this.apply_GL_attr(config,attr);
		var _gl = null;
		if(config.webgl.version != 1) {
			_gl = this.window.getContext("webgl" + config.webgl.version);
			if(_gl == null) {
				_gl = this.window.getContext("experimental-webgl" + config.webgl.version);
			}
		} else {
			_gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.window,attr);
		}
		snow_modules_opengl_web_GL.gl = _gl;
		haxe_Log.trace("  i / runtime / " + ("web / GL / context(" + Std.string(_gl != null) + ")"),{ fileName : "Runtime.hx", lineNumber : 652, className : "snow.core.web.Runtime", methodName : "create_render_context"});
		return _gl != null;
	}
	,apply_GL_attr: function(render,attr) {
		if(attr.alpha == null) {
			attr.alpha = false;
		}
		attr.alpha = attr.alpha;
		if(attr.premultipliedAlpha == null) {
			attr.premultipliedAlpha = false;
		}
		attr.premultipliedAlpha = attr.premultipliedAlpha;
		if(attr.antialias == null) {
			attr.antialias = this.app.config.render.antialiasing > 0;
		}
		attr.antialias = attr.antialias;
		if(attr.depth == null) {
			attr.depth = this.app.config.render.depth > 0;
		}
		attr.depth = attr.depth;
		if(attr.stencil == null) {
			attr.stencil = this.app.config.render.stencil > 0;
		}
		attr.stencil = attr.stencil;
		return attr;
	}
	,create_render_context_failed: function() {
		var msg = "WebGL is required to run this!<br/><br/>";
		msg += "visit <a style=\"color:#06b4fb; text-decoration:none;\" href=\"http://get.webgl.org/\">get.webgl.com</a> for info<br/>";
		msg += "and contact the developer of this app";
		var text_el;
		var overlay_el;
		text_el = window.document.createElement("div");
		overlay_el = window.document.createElement("div");
		text_el.style.marginLeft = "auto";
		text_el.style.marginRight = "auto";
		text_el.style.color = "#d3d3d3";
		text_el.style.marginTop = "5em";
		text_el.style.fontSize = "1.4em";
		text_el.style.fontFamily = "helvetica,sans-serif";
		text_el.innerHTML = msg;
		overlay_el.style.top = "0";
		overlay_el.style.left = "0";
		overlay_el.style.width = "100%";
		overlay_el.style.height = "100%";
		overlay_el.style.display = "block";
		overlay_el.style.minWidth = "100%";
		overlay_el.style.minHeight = "100%";
		overlay_el.style.textAlign = "center";
		overlay_el.style.position = "absolute";
		overlay_el.style.background = "rgba(1,1,1,0.90)";
		overlay_el.appendChild(text_el);
		window.document.body.appendChild(overlay_el);
		throw new js__$Boot_HaxeError(snow_types_Error.error("runtime / web / failed to create render context, unable to recover"));
	}
	,request_frame: function() {
		window.requestAnimationFrame($bind(this,this.loop));
	}
	,loop: function(_t) {
		if(_t == null) {
			_t = 0.016;
		}
		if(this.app.has_shutdown) {
			return false;
		}
		if(this.gamepads_supported) {
			var list = ($_=window.navigator,$bind($_,$_.getGamepads)) != null ? window.navigator.getGamepads() : window.navigator.webkitGetGamepads != null ? window.navigator.webkitGetGamepads() : null;
			if(list == null) {
				throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("list was null" + (" ( " + "gamepad list not found, but they were previously?" + " )")));
			}
			var _count = list.length;
			var _idx = 0;
			while(_idx < _count) {
				var _gamepad = list[_idx];
				if(_gamepad == null) {
					++_idx;
					continue;
				}
				var _g1 = 0;
				var _g = _gamepad.axes.length;
				while(_g1 < _g) {
					var _axis_idx = _g1++;
					var _axis = _gamepad.axes[_axis_idx];
					if(_axis != 0) {
						this.app.input.dispatch_gamepad_axis_event(_gamepad.index,_axis_idx,_axis,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
					}
				}
				var _prev_btn = this.gamepad_btns_cache[_gamepad.index];
				var _g11 = 0;
				var _g2 = _gamepad.buttons.length;
				while(_g11 < _g2) {
					var _btn_idx = _g11++;
					var _btn = _gamepad.buttons[_btn_idx];
					if(_btn.value != _prev_btn[_btn_idx]) {
						if(_btn.pressed) {
							this.app.input.dispatch_gamepad_button_down_event(_gamepad.index,_btn_idx,_btn.value,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
						} else {
							this.app.input.dispatch_gamepad_button_up_event(_gamepad.index,_btn_idx,_btn.value,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
						}
						_prev_btn[_btn_idx] = _btn.value;
					}
				}
				++_idx;
			}
		}
		this.window_dpr = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
		var _bounds = this.window.getBoundingClientRect();
		var _x = Math.round(_bounds.left + window.pageXOffset - window.document.body.clientTop);
		var _y = Math.round(_bounds.top + window.pageYOffset - window.document.body.clientLeft);
		var _w = Math.round(_bounds.width);
		var _h = Math.round(_bounds.height);
		if(_x != this.window_x || _y != this.window_y) {
			this.window_x = _x;
			this.window_y = _y;
			this.dispatch_window_ev(4,this.window_x,this.window_y);
		}
		if(_w != this.window_w || _h != this.window_h) {
			this.window_w = _w;
			this.window_h = _h;
			this.window.width = Math.floor(this.window_w * this.window_dpr);
			this.window.height = Math.floor(this.window_h * this.window_dpr);
			this.dispatch_window_ev(6,this.window.width,this.window.height);
		}
		this.app.dispatch_event(3);
		if(!this.app.shutting_down) {
			window.requestAnimationFrame($bind(this,this.loop));
		}
		return true;
	}
	,loop_pre_ready: function(_t) {
		if(_t == null) {
			_t = 0.016;
		}
		this.app.dispatch_event(3);
		if(!this.app.shutting_down) {
			if(!this.app.ready) {
				window.requestAnimationFrame($bind(this,this.loop_pre_ready));
			} else {
				window.requestAnimationFrame($bind(this,this.loop));
			}
		}
		return true;
	}
	,mod_state_from_event: function(_key_event) {
		this.app.input.mod_state.none = !_key_event.altKey && !_key_event.ctrlKey && !_key_event.metaKey && !_key_event.shiftKey;
		this.app.input.mod_state.lshift = _key_event.shiftKey;
		this.app.input.mod_state.rshift = _key_event.shiftKey;
		this.app.input.mod_state.lctrl = _key_event.ctrlKey;
		this.app.input.mod_state.rctrl = _key_event.ctrlKey;
		this.app.input.mod_state.lalt = _key_event.altKey;
		this.app.input.mod_state.ralt = _key_event.altKey;
		this.app.input.mod_state.lmeta = _key_event.metaKey;
		this.app.input.mod_state.rmeta = _key_event.metaKey;
		this.app.input.mod_state.num = false;
		this.app.input.mod_state.caps = false;
		this.app.input.mod_state.mode = false;
		this.app.input.mod_state.ctrl = _key_event.ctrlKey;
		this.app.input.mod_state.shift = _key_event.shiftKey;
		this.app.input.mod_state.alt = _key_event.altKey;
		this.app.input.mod_state.meta = _key_event.metaKey;
		return this.app.input.mod_state;
	}
	,convert_keycode: function(dom_keycode) {
		if(dom_keycode >= 65 && dom_keycode <= 90) {
			return dom_keycode + 32;
		}
		return snow_core_web__$Runtime_DOMKeys.dom_key_to_keycode(dom_keycode);
	}
	,get_window_x: function(_bounds) {
		return Math.round(_bounds.left + window.pageXOffset - window.document.body.clientTop);
	}
	,get_window_y: function(_bounds) {
		return Math.round(_bounds.top + window.pageYOffset - window.document.body.clientLeft);
	}
	,update_window_bounds: function() {
		this.window_dpr = window.devicePixelRatio == null ? 1.0 : window.devicePixelRatio;
		var _bounds = this.window.getBoundingClientRect();
		var _x = Math.round(_bounds.left + window.pageXOffset - window.document.body.clientTop);
		var _y = Math.round(_bounds.top + window.pageYOffset - window.document.body.clientLeft);
		var _w = Math.round(_bounds.width);
		var _h = Math.round(_bounds.height);
		if(_x != this.window_x || _y != this.window_y) {
			this.window_x = _x;
			this.window_y = _y;
			this.dispatch_window_ev(4,this.window_x,this.window_y);
		}
		if(_w != this.window_w || _h != this.window_h) {
			this.window_w = _w;
			this.window_h = _h;
			this.window.width = Math.floor(this.window_w * this.window_dpr);
			this.window.height = Math.floor(this.window_h * this.window_dpr);
			this.dispatch_window_ev(6,this.window.width,this.window.height);
		}
	}
	,gamepads_init_cache: function(_gamepad) {
		this.gamepad_btns_cache[_gamepad.index] = [];
		var _g1 = 0;
		var _g = _gamepad.buttons.length;
		while(_g1 < _g) {
			++_g1;
			this.gamepad_btns_cache[_gamepad.index].push(0);
		}
	}
	,gamepads_init: function() {
		var _list = ($_=window.navigator,$bind($_,$_.getGamepads)) != null ? window.navigator.getGamepads() : window.navigator.webkitGetGamepads != null ? window.navigator.webkitGetGamepads() : null;
		if(_list != null) {
			this.gamepads_supported = true;
			this.gamepad_btns_cache = [];
			var _g = 0;
			while(_g < _list.length) {
				var _gamepad = _list[_g];
				++_g;
				if(_gamepad != null) {
					this.gamepad_btns_cache[_gamepad.index] = [];
					var _g1 = 0;
					var _g2 = _gamepad.buttons.length;
					while(_g1 < _g2) {
						_g1++;
						this.gamepad_btns_cache[_gamepad.index].push(0);
					}
				}
			}
		} else {
			haxe_Log.trace("  i / runtime / " + "Gamepads are not supported in this browser :(",{ fileName : "Runtime.hx", lineNumber : 861, className : "snow.core.web.Runtime", methodName : "gamepads_init"});
		}
	}
	,gamepads_poll: function() {
		var list = ($_=window.navigator,$bind($_,$_.getGamepads)) != null ? window.navigator.getGamepads() : window.navigator.webkitGetGamepads != null ? window.navigator.webkitGetGamepads() : null;
		if(list == null) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("list was null" + (" ( " + "gamepad list not found, but they were previously?" + " )")));
		}
		var _count = list.length;
		var _idx = 0;
		while(_idx < _count) {
			var _gamepad = list[_idx];
			if(_gamepad == null) {
				++_idx;
				continue;
			}
			var _g1 = 0;
			var _g = _gamepad.axes.length;
			while(_g1 < _g) {
				var _axis_idx = _g1++;
				var _axis = _gamepad.axes[_axis_idx];
				if(_axis != 0) {
					this.app.input.dispatch_gamepad_axis_event(_gamepad.index,_axis_idx,_axis,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
				}
			}
			var _prev_btn = this.gamepad_btns_cache[_gamepad.index];
			var _g11 = 0;
			var _g2 = _gamepad.buttons.length;
			while(_g11 < _g2) {
				var _btn_idx = _g11++;
				var _btn = _gamepad.buttons[_btn_idx];
				if(_btn.value != _prev_btn[_btn_idx]) {
					if(_btn.pressed) {
						this.app.input.dispatch_gamepad_button_down_event(_gamepad.index,_btn_idx,_btn.value,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
					} else {
						this.app.input.dispatch_gamepad_button_up_event(_gamepad.index,_btn_idx,_btn.value,window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start);
					}
					_prev_btn[_btn_idx] = _btn.value;
				}
			}
			++_idx;
		}
	}
	,gamepads_get_list: function() {
		if(($_=window.navigator,$bind($_,$_.getGamepads)) != null) {
			return window.navigator.getGamepads();
		}
		if(window.navigator.webkitGetGamepads != null) {
			return window.navigator.webkitGetGamepads();
		}
		return null;
	}
	,guess_os: function() {
		var _ver = window.navigator.appVersion;
		var _agent = window.navigator.userAgent;
		if(new EReg("mac","gi").match(_ver)) {
			return "mac";
		}
		if(new EReg("win","gi").match(_ver)) {
			return "windows";
		}
		if(new EReg("x11","gi").match(_ver)) {
			return "linux";
		}
		if(new EReg("linux","gi").match(_ver)) {
			return "linux";
		}
		if(new EReg("android","gi").match(_ver)) {
			return "android";
		}
		if(new EReg("ipad","gi").match(_agent)) {
			return "ios";
		}
		if(new EReg("iphone","gi").match(_agent)) {
			return "ios";
		}
		if(new EReg("ipod","gi").match(_agent)) {
			return "ios";
		}
		return "unknown";
	}
	,__class__: snow_core_web_Runtime
};
var snow_core_web__$Runtime_DOMKeys = function() { };
$hxClasses["snow.core.web._Runtime.DOMKeys"] = snow_core_web__$Runtime_DOMKeys;
snow_core_web__$Runtime_DOMKeys.__name__ = ["snow","core","web","_Runtime","DOMKeys"];
snow_core_web__$Runtime_DOMKeys.dom_key_to_keycode = function(_keycode) {
	switch(_keycode) {
	case 16:
		return 1073742049;
	case 17:
		return 1073742048;
	case 18:
		return 1073742050;
	case 20:
		return 1073741881;
	case 33:
		return 1073741899;
	case 34:
		return 1073741902;
	case 35:
		return 1073741901;
	case 36:
		return 1073741898;
	case 37:
		return 1073741904;
	case 38:
		return 1073741906;
	case 39:
		return 1073741903;
	case 40:
		return 1073741905;
	case 44:
		return 1073741894;
	case 45:
		return 1073741897;
	case 46:
		return 127;
	case 91:
		return 1073742051;
	case 93:
		return 1073742055;
	case 96:
		return 1073741922;
	case 97:
		return 1073741913;
	case 98:
		return 1073741914;
	case 99:
		return 1073741915;
	case 100:
		return 1073741916;
	case 101:
		return 1073741917;
	case 102:
		return 1073741918;
	case 103:
		return 1073741919;
	case 104:
		return 1073741920;
	case 105:
		return 1073741921;
	case 106:
		return 1073741909;
	case 107:
		return 1073741911;
	case 109:
		return 1073741910;
	case 110:
		return 1073742044;
	case 111:
		return 1073741908;
	case 112:
		return 1073741882;
	case 113:
		return 1073741883;
	case 114:
		return 1073741884;
	case 115:
		return 1073741885;
	case 116:
		return 1073741886;
	case 117:
		return 1073741887;
	case 118:
		return 1073741888;
	case 119:
		return 1073741889;
	case 120:
		return 1073741890;
	case 121:
		return 1073741891;
	case 122:
		return 1073741892;
	case 123:
		return 1073741893;
	case 124:
		return 1073741928;
	case 125:
		return 1073741929;
	case 126:
		return 1073741930;
	case 127:
		return 1073741931;
	case 128:
		return 1073741932;
	case 129:
		return 1073741933;
	case 130:
		return 1073741934;
	case 131:
		return 1073741935;
	case 132:
		return 1073741936;
	case 133:
		return 1073741937;
	case 134:
		return 1073741938;
	case 135:
		return 1073741939;
	case 144:
		return 1073741907;
	case 160:
		return 94;
	case 161:
		return 33;
	case 162:
		return 34;
	case 163:
		return 35;
	case 164:
		return 36;
	case 165:
		return 37;
	case 166:
		return 38;
	case 167:
		return 95;
	case 168:
		return 40;
	case 169:
		return 41;
	case 170:
		return 42;
	case 171:
		return 43;
	case 172:
		return 92;
	case 173:
		return 45;
	case 174:
		return 91;
	case 175:
		return 93;
	case 176:
		return 96;
	case 181:
		return 1073742086;
	case 182:
		return 1073741953;
	case 183:
		return 1073741952;
	case 188:
		return 44;
	case 190:
		return 46;
	case 191:
		return 47;
	case 192:
		return 96;
	case 219:
		return 91;
	case 220:
		return 92;
	case 221:
		return 93;
	case 222:
		return 39;
	case 224:
		return 1073742051;
	}
	return _keycode;
};
var snow_modules_interfaces_Assets = function() { };
$hxClasses["snow.modules.interfaces.Assets"] = snow_modules_interfaces_Assets;
snow_modules_interfaces_Assets.__name__ = ["snow","modules","interfaces","Assets"];
var snow_core_web_assets_Assets = function(_app) {
	this.app = _app;
};
$hxClasses["snow.core.web.assets.Assets"] = snow_core_web_assets_Assets;
snow_core_web_assets_Assets.__name__ = ["snow","core","web","assets","Assets"];
snow_core_web_assets_Assets.__interfaces__ = [snow_modules_interfaces_Assets];
snow_core_web_assets_Assets.prototype = {
	onevent: function(event) {
	}
	,shutdown: function() {
	}
	,image_info_from_load: function(_id,_components) {
		if(_components == null) {
			_components = 4;
		}
		return this.app.io.data_flow(_id,snow_systems_assets_AssetImage.processor);
	}
	,image_info_from_element: function(_id,_elem) {
		var width_pot = this.nearest_power_of_two(_elem.width);
		var height_pot = this.nearest_power_of_two(_elem.height);
		var image_bytes = this.POT_bytes_from_element(_elem.width,_elem.height,width_pot,height_pot,_elem);
		var info = new snow_types_ImageData(this.app,{ id : _id, bpp : 4, width : _elem.width, height : _elem.height, width_actual : width_pot, height_actual : height_pot, bpp_source : 4, pixels : image_bytes});
		image_bytes = null;
		return info;
	}
	,image_info_from_pixels: function(_id,_width,_height,_pixels,_bpp) {
		if(_bpp == null) {
			_bpp = 4;
		}
		return new snow_types_ImageData(this.app,{ id : _id, bpp : 4, width : _width, height : _height, width_actual : _width, height_actual : _height, bpp_source : 4, pixels : _pixels});
	}
	,image_info_from_bytes: function(_id,_bytes,_components) {
		if(_components == null) {
			_components = 4;
		}
		var _gthis = this;
		if(_id == null) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
		}
		if(_bytes == null) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_bytes was null"));
		}
		if(_bytes.length == 0) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("_bytes.length != 0"));
		}
		var ext = haxe_io_Path.extension(_id);
		return new snow_api_Promise(function(resolve,reject) {
			var str = "";
			var i = 0;
			var len = _bytes.length;
			while(i < len) str += String.fromCharCode(_bytes[i++] & 255);
			var b64 = window.btoa(str);
			var src = "data:image/" + ext + ";base64," + b64;
			var _img = new Image();
			_img.onload = function(_) {
				var info = _gthis.image_info_from_element(_id,_img);
				resolve(info);
			};
			_img.onerror = function(e) {
				reject(snow_types_Error.error("failed to load image from bytes, on error: " + e));
			};
			_img.src = src;
		});
	}
	,POT_bytes_from_pixels: function(_width,_height,_width_pot,_height_pot,_source) {
		var tmp_canvas = window.document.createElement("canvas");
		tmp_canvas.width = _width_pot;
		tmp_canvas.height = _height_pot;
		var tmp_context = tmp_canvas.getContext("2d",null);
		tmp_context.clearRect(0,0,tmp_canvas.width,tmp_canvas.height);
		var image_bytes = null;
		var _pixels = new Uint8ClampedArray(_source.buffer);
		var _imgdata = tmp_context.createImageData(_width,_height);
		_imgdata.data.set(_pixels);
		try {
			tmp_context.putImageData(_imgdata,0,0);
			image_bytes = tmp_context.getImageData(0,0,tmp_canvas.width,tmp_canvas.height);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			haxe_Log.trace("   i / assets / " + tips,{ fileName : "Assets.hx", lineNumber : 183, className : "snow.core.web.assets.Assets", methodName : "POT_bytes_from_pixels"});
			throw js__$Boot_HaxeError.wrap(e);
		}
		tmp_canvas = null;
		tmp_context = null;
		_imgdata = null;
		return new Uint8Array(image_bytes.data);
	}
	,POT_bytes_from_element: function(_width,_height,_width_pot,_height_pot,_source) {
		var tmp_canvas = window.document.createElement("canvas");
		tmp_canvas.width = _width_pot;
		tmp_canvas.height = _height_pot;
		var tmp_context = tmp_canvas.getContext("2d",null);
		tmp_context.clearRect(0,0,tmp_canvas.width,tmp_canvas.height);
		tmp_context.drawImage(_source,0,0,_width,_height);
		var image_bytes = null;
		try {
			image_bytes = tmp_context.getImageData(0,0,tmp_canvas.width,tmp_canvas.height);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			haxe_Log.trace("   i / assets / " + tips,{ fileName : "Assets.hx", lineNumber : 221, className : "snow.core.web.assets.Assets", methodName : "POT_bytes_from_element"});
			throw js__$Boot_HaxeError.wrap(e);
		}
		tmp_canvas = null;
		tmp_context = null;
		return new Uint8Array(image_bytes.data);
	}
	,nearest_power_of_two: function(_value) {
		if(!snow_core_web_assets_Assets.POT) {
			return _value;
		}
		--_value;
		_value |= _value >> 1;
		_value |= _value >> 2;
		_value |= _value >> 4;
		_value |= _value >> 8;
		_value |= _value >> 16;
		return ++_value;
	}
	,__class__: snow_core_web_assets_Assets
};
var snow_modules_interfaces_IO = function() { };
$hxClasses["snow.modules.interfaces.IO"] = snow_modules_interfaces_IO;
snow_modules_interfaces_IO.__name__ = ["snow","modules","interfaces","IO"];
var snow_core_web_io_IO = function(_app) {
	this.app = _app;
};
$hxClasses["snow.core.web.io.IO"] = snow_core_web_io_IO;
snow_core_web_io_IO.__name__ = ["snow","core","web","io","IO"];
snow_core_web_io_IO.__interfaces__ = [snow_modules_interfaces_IO];
snow_core_web_io_IO.prototype = {
	shutdown: function() {
	}
	,onevent: function(_event) {
	}
	,app_path: function() {
		return "./";
	}
	,app_path_prefs: function() {
		return "./";
	}
	,url_open: function(_url) {
		if(_url != null && _url.length > 0) {
			window.open(_url,"_blank");
		}
	}
	,data_load: function(_path,_options) {
		return new snow_api_Promise(function(resolve,reject) {
			var _binary = true;
			if(_options != null) {
				if(_options.binary != null) {
					_binary = _options.binary;
				}
			}
			var request = new XMLHttpRequest();
			request.open("GET",_path,true);
			if(_binary) {
				request.overrideMimeType("text/plain; charset=x-user-defined");
			} else {
				request.overrideMimeType("text/plain; charset=UTF-8");
			}
			request.responseType = "arraybuffer";
			request.onload = function(data) {
				if(request.status == 200) {
					var this1 = new Uint8Array(request.response);
					resolve(this1);
				} else {
					reject(snow_types_Error.error("request status was " + request.status + " / " + request.statusText));
				}
			};
			request.send();
		});
	}
	,data_save: function(_path,_data,_options) {
		return false;
	}
	,string_save_path: function(_slot) {
		if(_slot == null) {
			_slot = 0;
		}
		var _parts = snow_types_Config.app_ident.split(".");
		var _appname = _parts.pop();
		return haxe_io_Path.normalize(haxe_io_Path.join(["<localstorage>","" + _parts.join(".") + "/" + _appname + "/" + this.app.io.string_save_prefix + "." + _slot]));
	}
	,string_slot_id: function(_slot) {
		if(_slot == null) {
			_slot = 0;
		}
		var _parts = snow_types_Config.app_ident.split(".");
		var _appname = _parts.pop();
		return "" + _parts.join(".") + "/" + _appname + "/" + this.app.io.string_save_prefix + "." + _slot;
	}
	,string_slot_destroy: function(_slot) {
		if(_slot == null) {
			_slot = 0;
		}
		var storage = window.localStorage;
		if(storage == null) {
			haxe_Log.trace("       i / io / " + "localStorage isnt supported in this browser?!",{ fileName : "IO.hx", lineNumber : 119, className : "snow.core.web.io.IO", methodName : "string_slot_destroy"});
			return false;
		}
		var _parts = snow_types_Config.app_ident.split(".");
		var _appname = _parts.pop();
		storage.removeItem("" + _parts.join(".") + "/" + _appname + "/" + this.app.io.string_save_prefix + "." + _slot);
		return false;
	}
	,string_slot_save: function(_slot,_contents) {
		if(_slot == null) {
			_slot = 0;
		}
		var storage = window.localStorage;
		if(storage == null) {
			haxe_Log.trace("       i / io / " + "localStorage isnt supported in this browser?!",{ fileName : "IO.hx", lineNumber : 136, className : "snow.core.web.io.IO", methodName : "string_slot_save"});
			return false;
		}
		var _parts = snow_types_Config.app_ident.split(".");
		var _appname = _parts.pop();
		storage.setItem("" + _parts.join(".") + "/" + _appname + "/" + this.app.io.string_save_prefix + "." + _slot,_contents);
		return true;
	}
	,string_slot_load: function(_slot) {
		if(_slot == null) {
			_slot = 0;
		}
		var storage = window.localStorage;
		if(storage == null) {
			haxe_Log.trace("       i / io / " + "localStorage isnt supported in this browser?!",{ fileName : "IO.hx", lineNumber : 154, className : "snow.core.web.io.IO", methodName : "string_slot_load"});
			return null;
		}
		var _parts = snow_types_Config.app_ident.split(".");
		var _appname = _parts.pop();
		return storage.getItem("" + _parts.join(".") + "/" + _appname + "/" + this.app.io.string_save_prefix + "." + _slot);
	}
	,string_slot_encode: function(_string) {
		return window.btoa(_string);
	}
	,string_slot_decode: function(_string) {
		return window.atob(_string);
	}
	,__class__: snow_core_web_io_IO
};
var snow_modules_opengl_web_GL = function() { };
$hxClasses["snow.modules.opengl.web.GL"] = snow_modules_opengl_web_GL;
snow_modules_opengl_web_GL.__name__ = ["snow","modules","opengl","web","GL"];
snow_modules_opengl_web_GL.versionString = function() {
	return "/ " + snow_modules_opengl_web_GL.gl.getParameter(7938) + " / " + snow_modules_opengl_web_GL.gl.getParameter(35724) + " / " + snow_modules_opengl_web_GL.gl.getParameter(7937) + " / " + snow_modules_opengl_web_GL.gl.getParameter(7936) + " /";
};
var snow_modules_webaudio_Audio = function(_app) {
	this.active = false;
	this.handle_seq = 0;
	this.app = _app;
	this.instances = new haxe_ds_IntMap();
	try {
		this.context = new AudioContext();
	} catch( err ) {
		try {
			this.context = new window.webkitAudioContext();
		} catch( err1 ) {
			haxe_Log.trace("    i / audio / " + "WebAudio: no AudioContext could be created! No audio loading or playback will be available.",{ fileName : "Audio.hx", lineNumber : 59, className : "snow.modules.webaudio.Audio", methodName : "new"});
			return;
		}
	}
	if(this.context == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("context was null" + (" ( " + "Audio / webaudio / no AudioContext could be created, is the Web Audio API supported?" + " )")));
	}
	var info = "channelCount: " + this.context.destination.channelCount + ", " + ("channelCountMode: \"" + this.context.destination.channelCountMode + "\", ") + ("channelInterpretation: \"" + this.context.destination.channelInterpretation + "\", ") + ("maxChannelCount: " + this.context.destination.maxChannelCount + ", ") + ("numberOfInputs: " + this.context.destination.numberOfInputs + ", ") + ("numberOfOutputs: " + this.context.destination.numberOfOutputs);
	haxe_Log.trace("    i / audio / " + ("webaudio: " + Std.string(this.context) + " / sampleRate: " + this.context.sampleRate + " / destination: " + info),{ fileName : "Audio.hx", lineNumber : 74, className : "snow.modules.webaudio.Audio", methodName : "new"});
	this.active = true;
};
$hxClasses["snow.modules.webaudio.Audio"] = snow_modules_webaudio_Audio;
snow_modules_webaudio_Audio.__name__ = ["snow","modules","webaudio","Audio"];
snow_modules_webaudio_Audio.__interfaces__ = [snow_modules_interfaces_Audio];
snow_modules_webaudio_Audio.prototype = {
	shutdown: function() {
		this.context.close();
	}
	,onevent: function(event) {
	}
	,snd_of: function(_handle) {
		return this.instances.h[_handle];
	}
	,play_buffer: function(_data) {
		var _node = this.context.createBufferSource();
		_node.buffer = _data.buffer;
		return _node;
	}
	,play_buffer_again: function(_handle,_snd,_start_time) {
		_snd.buffer_node = this.play_buffer(_snd.source.data);
		_snd.buffer_node.connect(_snd.pan_node);
		_snd.buffer_node.loop = _snd.loop;
		_snd.pan_node.connect(_snd.gain_node);
		_snd.gain_node.connect(this.context.destination);
		_snd.buffer_node.start(0,_start_time);
		var f = $bind(this,this.destroy_snd);
		var a1 = _snd;
		var tmp = function() {
			f(a1);
		};
		_snd.buffer_node.onended = tmp;
	}
	,play_instance: function(_handle,_source,_inst,_data,_buffer_node,_volume,_loop) {
		var _gthis = this;
		var _gain = this.context.createGain();
		var _pan = this.context.createPanner();
		var _node = null;
		_gain.gain.value = _volume;
		_pan.panningModel = "equalpower";
		_pan.setPosition(Math.cos(-1.5707),0,Math.sin(1.5707));
		if(_buffer_node != null) {
			_node = _buffer_node;
			_buffer_node.loop = _loop;
		}
		if(_data.media_node != null) {
			_node = _data.media_node;
			_data.media_elem.loop = _loop;
		}
		_node.connect(_pan);
		_pan.connect(_gain);
		_gain.connect(this.context.destination);
		var _data1 = _data.media_node;
		var _data2 = _data.media_elem;
		var _snd = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start;
		var _snd1 = { handle : _handle, source : _source, instance : _inst, buffer_node : _buffer_node, media_node : _data1, media_elem : _data2, gain_node : _gain, pan_node : _pan, state : 1, time_start : _snd, loop : _loop, pan : 0};
		this.instances.h[_handle] = _snd1;
		if(_buffer_node != null) {
			_buffer_node.start(0);
			var f = $bind(this,this.destroy_snd);
			var a1 = _snd1;
			_buffer_node.onended = function() {
				f(a1);
			};
		}
		if(_data.media_node != null) {
			_data.media_elem.play();
			_data.media_node.addEventListener("ended",function() {
				_gthis.app.audio.emit_Int(0,_handle);
				_snd1.state = 2;
			});
		}
	}
	,play: function(_source,_volume,_paused) {
		var _data = _source.data;
		var _handle = this.handle_seq;
		var _inst = _source.instance(_handle);
		if(_source.data.is_stream) {
			_data.media_elem.play();
			_data.media_elem.volume = 1.0;
			this.play_instance(_handle,_source,_inst,_data,null,_volume,false);
		} else {
			this.play_instance(_handle,_source,_inst,_data,this.play_buffer(_data),_volume,false);
		}
		this.handle_seq++;
		return _handle;
	}
	,loop: function(_source,_volume,_paused) {
		var _data = _source.data;
		var _handle = this.handle_seq;
		var _inst = _source.instance(_handle);
		if(_source.data.is_stream) {
			_data.media_elem.play();
			_data.media_elem.volume = 1.0;
			this.play_instance(_handle,_source,_inst,_data,null,_volume,true);
		} else {
			this.play_instance(_handle,_source,_inst,_data,this.play_buffer(_data),_volume,true);
		}
		this.handle_seq++;
		return _handle;
	}
	,stop_buffer: function(_snd) {
		_snd.buffer_node.stop();
		_snd.buffer_node.disconnect();
		_snd.gain_node.disconnect();
		_snd.pan_node.disconnect();
		_snd.buffer_node = null;
	}
	,pause: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return;
		}
		_snd.time_pause = window.performance.now() / 1000.0 - snow_core_web_Runtime.timestamp_start - _snd.time_start;
		_snd.state = 0;
		if(_snd.buffer_node != null) {
			this.stop_buffer(_snd);
		} else if(_snd.media_node != null) {
			_snd.media_elem.pause();
		}
	}
	,unpause: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return;
		}
		if(_snd.state != 0) {
			return;
		}
		if(_snd.media_node == null) {
			this.play_buffer_again(_handle,_snd,_snd.time_pause);
		} else {
			_snd.media_elem.play();
		}
		_snd.state = 1;
	}
	,destroy_snd: function(_snd) {
		if(_snd.buffer_node != null) {
			_snd.buffer_node.stop();
			_snd.buffer_node.disconnect();
			_snd.buffer_node = null;
		}
		if(_snd.media_node != null) {
			_snd.media_elem.pause();
			_snd.media_elem.currentTime = 0;
			_snd.media_node.disconnect();
			_snd.media_elem = null;
			_snd.media_node = null;
		}
		if(_snd.gain_node != null) {
			_snd.gain_node.disconnect();
			_snd.gain_node = null;
		}
		if(_snd.pan_node != null) {
			_snd.pan_node.disconnect();
			_snd.pan_node = null;
		}
		this.instances.remove(_snd.handle);
		_snd = null;
	}
	,stop: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return;
		}
		if(_snd.buffer_node != null) {
			_snd.buffer_node.stop();
			_snd.buffer_node.disconnect();
			_snd.buffer_node = null;
		}
		if(_snd.media_node != null) {
			_snd.media_elem.pause();
			_snd.media_elem.currentTime = 0;
			_snd.media_node.disconnect();
			_snd.media_elem = null;
			_snd.media_node = null;
		}
		if(_snd.gain_node != null) {
			_snd.gain_node.disconnect();
			_snd.gain_node = null;
		}
		if(_snd.pan_node != null) {
			_snd.pan_node.disconnect();
			_snd.pan_node = null;
		}
		this.instances.remove(_snd.handle);
		_snd.state = 2;
	}
	,volume: function(_handle,_volume) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return;
		}
		_snd.gain_node.gain.value = _volume;
	}
	,pan: function(_handle,_pan) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return;
		}
		_snd.pan = _pan;
		_snd.pan_node.setPosition(Math.cos((_pan - 1) * 1.5707),0,Math.sin((_pan + 1) * 1.5707));
	}
	,pitch: function(_handle,_pitch) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return;
		}
		if(_snd.buffer_node != null) {
			_snd.buffer_node.playbackRate.value = _pitch;
		} else if(_snd.media_node != null) {
			_snd.media_elem.playbackRate = _pitch;
		}
	}
	,position: function(_handle,_time) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return;
		}
		if(_snd.buffer_node != null) {
			this.stop_buffer(_snd);
			this.play_buffer_again(_handle,_snd,_time);
		} else {
			_snd.media_elem.currentTime = _time;
		}
	}
	,volume_of: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return 0.0;
		}
		return _snd.gain_node.gain.value;
	}
	,pan_of: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return 0.0;
		}
		return _snd.pan;
	}
	,pitch_of: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return 0.0;
		}
		var _result = 1.0;
		if(_snd.buffer_node != null) {
			_result = _snd.buffer_node.playbackRate.value;
		} else if(_snd.media_node != null) {
			_result = _snd.media_elem.playbackRate;
		}
		return _result;
	}
	,position_of: function(_handle) {
		if(this.instances.get(_handle) == null) {
			return 0.0;
		}
		return 0.0;
	}
	,state_of: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return -1;
		}
		return _snd.state;
	}
	,loop_of: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return false;
		}
		return _snd.loop;
	}
	,instance_of: function(_handle) {
		var _snd = this.instances.get(_handle);
		if(_snd == null) {
			return null;
		}
		return _snd.instance;
	}
	,suspend: function() {
		this.context.suspend();
	}
	,resume: function() {
		this.context.resume();
	}
	,data_from_load: function(_path,_is_stream,_format) {
		if(_is_stream == null) {
			_is_stream = false;
		}
		if(!this.active) {
			return snow_api_Promise.reject("WebAudio context unavailable");
		}
		if(_format == null) {
			switch(haxe_io_Path.extension(_path)) {
			case "ogg":
				_format = 2;
				break;
			case "pcm":
				_format = 4;
				break;
			case "wav":
				_format = 3;
				break;
			default:
				_format = 0;
			}
		}
		if(_is_stream) {
			return this.data_from_load_stream(_path,_format);
		}
		return this.data_from_load_sound(_path,_format);
	}
	,data_from_bytes: function(_id,_bytes,_format) {
		var _gthis = this;
		if(!this.active) {
			return snow_api_Promise.reject("WebAudio context unavailable");
		}
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.data_from_bytes_direct(_id,_bytes,_format,resolve,reject);
		});
	}
	,data_from_bytes_direct: function(_id,_bytes,_format,resolve,reject) {
		var _gthis = this;
		this.context.decodeAudioData(_bytes.buffer,function(_buffer) {
			var _data = new snow_modules_webaudio__$Audio_AudioDataWebAudio(_gthis.app,_buffer,null,null,{ id : _id, is_stream : false, format : _format, samples : null, length : _buffer.length, channels : _buffer.numberOfChannels, rate : _buffer.sampleRate | 0});
			resolve(_data);
			return;
		},function() {
			reject("failed to decode audio for `" + _id + "`");
			return;
		});
	}
	,data_from_load_sound: function(_path,_format) {
		var _gthis = this;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.app.io.module.data_load(_path,null).then(function(_bytes) {
				_gthis.data_from_bytes_direct(_path,_bytes,_format,resolve,reject);
			});
		});
	}
	,data_from_load_stream: function(_path,_format) {
		var _gthis = this;
		return new snow_api_Promise(function(resolve,reject) {
			var _element = new Audio(_path);
			_element.autoplay = false;
			_element.controls = false;
			_element.preload = "auto";
			_element.onerror = function(err) {
				var _error;
				switch(_element.error.code) {
				case 1:
					_error = "MEDIA_ERR_ABORTED";
					break;
				case 2:
					_error = "MEDIA_ERR_NETWORK";
					break;
				case 3:
					_error = "MEDIA_ERR_DECODE";
					break;
				case 4:
					_error = "MEDIA_ERR_SRC_NOT_SUPPORTED";
					break;
				case 5:
					_error = "MEDIA_ERR_ENCRYPTED";
					break;
				default:
					_error = "unknown error";
				}
				return reject("failed to load `" + _path + "` as stream : `" + _error + "`");
			};
			_element.onloadedmetadata = function(_) {
				var _node = _gthis.context.createMediaElementSource(_element);
				var _rate = _gthis.context.sampleRate | 0;
				var _channels = _node.channelCount;
				var _data = new snow_modules_webaudio__$Audio_AudioDataWebAudio(_gthis.app,null,_node,_element,{ id : _path, is_stream : true, format : _format, samples : null, length : _element.duration * (_rate * _channels * 2) | 0, channels : _channels, rate : _rate});
				return resolve(_data);
			};
		});
	}
	,__class__: snow_modules_webaudio_Audio
};
var snow_types_AudioData = function(_app,_options) {
	this.is_stream = false;
	this.format = 0;
	this.bits_per_sample = 16;
	this.channels = 1;
	this.length = 0;
	this.rate = 44100;
	this.id = "AudioData";
	this.app = _app;
	if(_options.id == null) {
		_options.id = this.id;
	}
	this.id = _options.id;
	if(_options.rate == null) {
		_options.rate = this.rate;
	}
	this.rate = _options.rate;
	if(_options.length == null) {
		_options.length = this.length;
	}
	this.length = _options.length;
	if(_options.format == null) {
		_options.format = this.format;
	}
	this.format = _options.format;
	if(_options.channels == null) {
		_options.channels = this.channels;
	}
	this.channels = _options.channels;
	if(_options.bits_per_sample == null) {
		_options.bits_per_sample = this.bits_per_sample;
	}
	this.bits_per_sample = _options.bits_per_sample;
	if(_options.is_stream == null) {
		_options.is_stream = this.is_stream;
	}
	this.is_stream = _options.is_stream;
	if(_options.samples == null) {
		_options.samples = this.samples;
	}
	this.samples = _options.samples;
	_options = null;
};
$hxClasses["snow.types.AudioData"] = snow_types_AudioData;
snow_types_AudioData.__name__ = ["snow","types","AudioData"];
snow_types_AudioData.prototype = {
	destroy: function() {
		this.id = null;
		this.samples = null;
	}
	,__class__: snow_types_AudioData
};
var snow_modules_webaudio__$Audio_AudioDataWebAudio = function(_app,_buffer,_media_node,_media_elem,_opt) {
	this.buffer = _buffer;
	this.media_node = _media_node;
	this.media_elem = _media_elem;
	snow_types_AudioData.call(this,_app,_opt);
};
$hxClasses["snow.modules.webaudio._Audio.AudioDataWebAudio"] = snow_modules_webaudio__$Audio_AudioDataWebAudio;
snow_modules_webaudio__$Audio_AudioDataWebAudio.__name__ = ["snow","modules","webaudio","_Audio","AudioDataWebAudio"];
snow_modules_webaudio__$Audio_AudioDataWebAudio.__super__ = snow_types_AudioData;
snow_modules_webaudio__$Audio_AudioDataWebAudio.prototype = $extend(snow_types_AudioData.prototype,{
	destroy: function() {
		this.buffer = null;
		this.media_node = null;
		this.media_elem = null;
	}
	,__class__: snow_modules_webaudio__$Audio_AudioDataWebAudio
});
var snow_systems_assets_Asset = function(_system,_id,_type) {
	if(_type == null) {
		_type = 0;
	}
	this.loaded = false;
	if(_id == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	}
	if(_system == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	}
	this.system = _system;
	this.type = _type;
	this.id = _id;
};
$hxClasses["snow.systems.assets.Asset"] = snow_systems_assets_Asset;
snow_systems_assets_Asset.__name__ = ["snow","systems","assets","Asset"];
snow_systems_assets_Asset.prototype = {
	__class__: snow_systems_assets_Asset
};
var snow_systems_assets_AssetImage = function(_system,_id,_image) {
	snow_systems_assets_Asset.call(this,_system,_id,4);
	this.set_image(_image);
};
$hxClasses["snow.systems.assets.AssetImage"] = snow_systems_assets_AssetImage;
snow_systems_assets_AssetImage.__name__ = ["snow","systems","assets","AssetImage"];
snow_systems_assets_AssetImage.load = function(_system,_id) {
	if(_id == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	}
	if(_system == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	}
	return new snow_systems_assets_AssetImage(_system,_id,null).reload();
};
snow_systems_assets_AssetImage.load_from_bytes = function(_system,_id,_bytes) {
	if(_id == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	}
	if(_bytes == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_bytes was null"));
	}
	if(_system == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	}
	return new snow_systems_assets_AssetImage(_system,_id,null).reload_from_bytes(_bytes);
};
snow_systems_assets_AssetImage.provider = function(_app,_path) {
	return _app.assets.module.image_info_from_load(_path);
};
snow_systems_assets_AssetImage.processor = function(_app,_id,_data) {
	if(_data == null) {
		return snow_api_Promise.reject(snow_types_Error.error("AssetImage processor: data was null"));
	}
	return _app.assets.module.image_info_from_bytes(_id,_data);
};
snow_systems_assets_AssetImage.__super__ = snow_systems_assets_Asset;
snow_systems_assets_AssetImage.prototype = $extend(snow_systems_assets_Asset.prototype,{
	reload: function() {
		var _gthis = this;
		this.loaded = false;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.system.app.io.data_flow(haxe_io_Path.join([_gthis.system.root,_gthis.id]),null,snow_systems_assets_AssetImage.provider).then(function(_image) {
				_gthis.set_image(_image);
				resolve(_gthis);
			}).error(reject);
		});
	}
	,reload_from_bytes: function(_bytes) {
		var _gthis = this;
		this.loaded = false;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.system.module.image_info_from_bytes(_gthis.id,_bytes).then(function(_image) {
				_gthis.set_image(_image);
				resolve(_gthis);
			}).error(reject);
		});
	}
	,set_image: function(_image) {
		this.loaded = _image != null;
		return this.image = _image;
	}
	,__class__: snow_systems_assets_AssetImage
	,__properties__: {set_image:"set_image"}
});
var snow_systems_assets_AssetAudio = function(_system,_id,_audio) {
	snow_systems_assets_Asset.call(this,_system,_id,5);
	this.set_audio(_audio);
};
$hxClasses["snow.systems.assets.AssetAudio"] = snow_systems_assets_AssetAudio;
snow_systems_assets_AssetAudio.__name__ = ["snow","systems","assets","AssetAudio"];
snow_systems_assets_AssetAudio.load = function(_system,_id,_is_stream) {
	if(_is_stream == null) {
		_is_stream = false;
	}
	if(_id == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	}
	if(_system == null) {
		throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	}
	return new snow_systems_assets_AssetAudio(_system,_id,null).reload(_is_stream);
};
snow_systems_assets_AssetAudio.__super__ = snow_systems_assets_Asset;
snow_systems_assets_AssetAudio.prototype = $extend(snow_systems_assets_Asset.prototype,{
	reload: function(_is_stream) {
		if(_is_stream == null) {
			_is_stream = false;
		}
		var _gthis = this;
		this.loaded = false;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.system.app.audio.module.data_from_load(haxe_io_Path.join([_gthis.system.root,_gthis.id]),_is_stream).then(function(_audio) {
				_gthis.set_audio(_audio);
				resolve(_gthis);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.audio.destroy();
		this.set_audio(null);
	}
	,set_audio: function(_audio) {
		this.loaded = _audio != null;
		return this.audio = _audio;
	}
	,__class__: snow_systems_assets_AssetAudio
	,__properties__: {set_audio:"set_audio"}
});
var snow_systems_assets_AssetBytes = function(_system,_id,_bytes) {
	snow_systems_assets_Asset.call(this,_system,_id,1);
	this.set_bytes(_bytes);
};
$hxClasses["snow.systems.assets.AssetBytes"] = snow_systems_assets_AssetBytes;
snow_systems_assets_AssetBytes.__name__ = ["snow","systems","assets","AssetBytes"];
snow_systems_assets_AssetBytes.load = function(_system,_id) {
	return new snow_systems_assets_AssetBytes(_system,_id,null).reload();
};
snow_systems_assets_AssetBytes.__super__ = snow_systems_assets_Asset;
snow_systems_assets_AssetBytes.prototype = $extend(snow_systems_assets_Asset.prototype,{
	reload: function() {
		var _gthis = this;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.system.app.io.data_flow(haxe_io_Path.join([_gthis.system.root,_gthis.id])).then(function(_bytes) {
				_gthis.set_bytes(_bytes);
				resolve(_gthis);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.set_bytes(null);
	}
	,set_bytes: function(_bytes) {
		this.loaded = _bytes != null;
		return this.bytes = _bytes;
	}
	,__class__: snow_systems_assets_AssetBytes
	,__properties__: {set_bytes:"set_bytes"}
});
var snow_systems_assets_AssetText = function(_system,_id,_text) {
	snow_systems_assets_Asset.call(this,_system,_id,2);
	this.set_text(_text);
};
$hxClasses["snow.systems.assets.AssetText"] = snow_systems_assets_AssetText;
snow_systems_assets_AssetText.__name__ = ["snow","systems","assets","AssetText"];
snow_systems_assets_AssetText.load = function(_system,_id) {
	return new snow_systems_assets_AssetText(_system,_id,null).reload();
};
snow_systems_assets_AssetText.processor = function(_app,_id,_data) {
	if(_data == null) {
		return snow_api_Promise.reject(snow_types_Error.error("AssetText processor: data was null"));
	}
	var _string = new haxe_io_Bytes(new Uint8Array(_data.buffer)).toString();
	_data = null;
	return snow_api_Promise.resolve(_string);
};
snow_systems_assets_AssetText.__super__ = snow_systems_assets_Asset;
snow_systems_assets_AssetText.prototype = $extend(snow_systems_assets_Asset.prototype,{
	reload: function() {
		var _gthis = this;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.system.app.io.data_flow(haxe_io_Path.join([_gthis.system.root,_gthis.id]),snow_systems_assets_AssetText.processor).then(function(_text) {
				_gthis.set_text(_text);
				resolve(_gthis);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.set_text(null);
	}
	,set_text: function(_text) {
		this.loaded = _text != null;
		return this.text = _text;
	}
	,__class__: snow_systems_assets_AssetText
	,__properties__: {set_text:"set_text"}
});
var snow_systems_assets_AssetJSON = function(_system,_id,_json) {
	snow_systems_assets_Asset.call(this,_system,_id,3);
	this.set_json(_json);
};
$hxClasses["snow.systems.assets.AssetJSON"] = snow_systems_assets_AssetJSON;
snow_systems_assets_AssetJSON.__name__ = ["snow","systems","assets","AssetJSON"];
snow_systems_assets_AssetJSON.load = function(_system,_id) {
	return new snow_systems_assets_AssetJSON(_system,_id,null).reload();
};
snow_systems_assets_AssetJSON.processor = function(_app,_id,_data) {
	if(_data == null) {
		return snow_api_Promise.reject(snow_types_Error.error("AssetJSON: data was null"));
	}
	return new snow_api_Promise(function(resolve,reject) {
		var _data_json = null;
		try {
			_data_json = JSON.parse(new haxe_io_Bytes(new Uint8Array(_data.buffer)).toString());
			_data = null;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			_data = null;
			return reject(snow_types_Error.parse(e));
		}
		return resolve(_data_json);
	});
};
snow_systems_assets_AssetJSON.__super__ = snow_systems_assets_Asset;
snow_systems_assets_AssetJSON.prototype = $extend(snow_systems_assets_Asset.prototype,{
	reload: function() {
		var _gthis = this;
		return new snow_api_Promise(function(resolve,reject) {
			_gthis.system.app.io.data_flow(haxe_io_Path.join([_gthis.system.root,_gthis.id]),snow_systems_assets_AssetJSON.processor).then(function(_json) {
				_gthis.set_json(_json);
				resolve(_gthis);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.set_json(null);
	}
	,set_json: function(_json) {
		this.loaded = _json != null;
		return this.json = _json;
	}
	,__class__: snow_systems_assets_AssetJSON
	,__properties__: {set_json:"set_json"}
});
var snow_systems_assets_Assets = function(_app) {
	this.root = "";
	this.app = _app;
	this.module = new snow_core_web_assets_Assets(this.app);
};
$hxClasses["snow.systems.assets.Assets"] = snow_systems_assets_Assets;
snow_systems_assets_Assets.__name__ = ["snow","systems","assets","Assets"];
snow_systems_assets_Assets.prototype = {
	shutdown: function() {
	}
	,__class__: snow_systems_assets_Assets
};
var snow_systems_audio_Audio = function(_app) {
	this.active = false;
	this.app = _app;
	this.module = new snow_modules_webaudio_Audio(this.app);
	this.emitter = new snow_api_Emitter();
	this.active = this.module.active;
};
$hxClasses["snow.systems.audio.Audio"] = snow_systems_audio_Audio;
snow_systems_audio_Audio.__name__ = ["snow","systems","audio","Audio"];
snow_systems_audio_Audio.prototype = {
	emit_Int: function(_event,_data) {
		this.emitter.emit(_event,_data);
	}
	,emit_snow_systems_audio_AudioSource: function(_event,_data) {
		this.emitter.emit(_event,_data);
	}
	,suspend: function() {
		if(!this.active) {
			return;
		}
		this.active = false;
		this.module.suspend();
	}
	,resume: function() {
		if(this.active || !this.module.active) {
			return;
		}
		this.active = true;
		this.module.resume();
	}
	,onevent: function(_event) {
		if(_event.type == 8) {
			switch(_event.window.type) {
			case 7:
				this.suspend();
				break;
			case 9:
				this.resume();
				break;
			default:
			}
		}
	}
	,shutdown: function() {
		this.active = false;
		this.module.shutdown();
	}
	,__class__: snow_systems_audio_Audio
};
var snow_systems_audio_AudioInstance = function(_source,_handle) {
	this.destroyed = false;
	this.source = _source;
	this.handle = _handle;
};
$hxClasses["snow.systems.audio.AudioInstance"] = snow_systems_audio_AudioInstance;
snow_systems_audio_AudioInstance.__name__ = ["snow","systems","audio","AudioInstance"];
snow_systems_audio_AudioInstance.prototype = {
	destroy: function() {
		if(this.destroyed != false) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("destroyed == false" + (" ( " + "snow / Audio / Instance being destroyed more than once" + " )")));
		}
		this.source.app.audio.emit_Int(1,this.handle);
		this.source.instance_killed(this);
		this.destroyed = true;
		this.source = null;
		this.handle = -1;
	}
	,__class__: snow_systems_audio_AudioInstance
};
var snow_systems_audio_AudioSource = function(_app,_data) {
	this.app = _app;
	this.data = _data;
	this.instances = [];
};
$hxClasses["snow.systems.audio.AudioSource"] = snow_systems_audio_AudioSource;
snow_systems_audio_AudioSource.__name__ = ["snow","systems","audio","AudioSource"];
snow_systems_audio_AudioSource.prototype = {
	instance: function(_handle) {
		var _instance = new snow_systems_audio_AudioInstance(this,_handle);
		if(this.instances.indexOf(_instance) == -1) {
			this.instances.push(_instance);
		}
		return _instance;
	}
	,bytes_to_seconds: function(_bytes) {
		return _bytes / (this.data.rate * this.data.channels * (this.data.bits_per_sample == 16 ? 2 : 1));
	}
	,duration: function() {
		return this.bytes_to_seconds(this.data.length);
	}
	,destroy: function() {
		var c = this.instances.length;
		var i = 0;
		haxe_Log.trace("i / audiosource / " + ("destroy " + this.data.id + ", stream=" + Std.string(this.data.is_stream) + ", instances=" + c),{ fileName : "AudioSource.hx", lineNumber : 79, className : "snow.systems.audio.AudioSource", methodName : "destroy"});
		this.app.audio.emit_snow_systems_audio_AudioSource(2,this);
		while(i < c) {
			var _instance = this.instances.pop();
			_instance.destroy();
			_instance = null;
			++i;
		}
		this.data.destroy();
		this.data = null;
		this.instances = null;
		this.app = null;
	}
	,instance_killed: function(_instance) {
		HxOverrides.remove(this.instances,_instance);
	}
	,__class__: snow_systems_audio_AudioSource
};
var snow_systems_input_Input = function(_app) {
	this.touch_count = 0;
	this.gamepad_init_count = 16;
	this.app = _app;
	this.event = new snow_types_InputEvent();
	this.key_event = new snow_types_KeyEvent();
	this.text_event = new snow_types_TextEvent();
	this.mouse_event = new snow_types_MouseEvent();
	this.touch_event = new snow_types_TouchEvent();
	this.gamepad_event = new snow_types_GamepadEvent();
	this.mod_state = new snow_types_ModState();
	this.mod_state.none = true;
	this.key_code_pressed = new haxe_ds_IntMap();
	this.key_code_down = new haxe_ds_IntMap();
	this.key_code_released = new haxe_ds_IntMap();
	this.scan_code_pressed = new haxe_ds_IntMap();
	this.scan_code_down = new haxe_ds_IntMap();
	this.scan_code_released = new haxe_ds_IntMap();
	this.mouse_button_pressed = new haxe_ds_IntMap();
	this.mouse_button_down = new haxe_ds_IntMap();
	this.mouse_button_released = new haxe_ds_IntMap();
	this.gamepad_button_pressed = new haxe_ds_IntMap();
	this.gamepad_button_down = new haxe_ds_IntMap();
	this.gamepad_button_released = new haxe_ds_IntMap();
	this.gamepad_axis_values = new haxe_ds_IntMap();
	var _g1 = 0;
	var _g = this.gamepad_init_count;
	while(_g1 < _g) {
		var i = _g1++;
		this.gamepad_button_pressed.h[i] = new haxe_ds_IntMap();
		this.gamepad_button_down.h[i] = new haxe_ds_IntMap();
		this.gamepad_button_released.h[i] = new haxe_ds_IntMap();
		this.gamepad_axis_values.h[i] = new haxe_ds_IntMap();
	}
	this.touches_down = new haxe_ds_IntMap();
};
$hxClasses["snow.systems.input.Input"] = snow_systems_input_Input;
snow_systems_input_Input.__name__ = ["snow","systems","input","Input"];
snow_systems_input_Input.prototype = {
	dispatch_key_down_event: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		if(!repeat) {
			this.key_code_pressed.h[keycode] = false;
			this.key_code_down.h[keycode] = true;
			this.scan_code_pressed.h[scancode] = false;
			this.scan_code_down.h[scancode] = true;
		}
		var _this = this.key_event;
		_this.type = 1;
		_this.keycode = keycode;
		_this.scancode = scancode;
		_this.repeat = repeat;
		_this.mod = mod;
		var _this1 = this.event;
		_this1.type = 1;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = window_id;
		_this1.timestamp = timestamp;
		_this1.key = this.key_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.onkeydown(keycode,scancode,repeat,mod,timestamp,window_id);
	}
	,dispatch_key_up_event: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		this.key_code_released.h[keycode] = false;
		this.key_code_down.remove(keycode);
		this.scan_code_released.h[scancode] = false;
		this.scan_code_down.remove(scancode);
		var _this = this.key_event;
		_this.type = 2;
		_this.keycode = keycode;
		_this.scancode = scancode;
		_this.repeat = repeat;
		_this.mod = mod;
		var _this1 = this.event;
		_this1.type = 1;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = window_id;
		_this1.timestamp = timestamp;
		_this1.key = this.key_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.onkeyup(keycode,scancode,repeat,mod,timestamp,window_id);
	}
	,dispatch_text_event: function(text,start,length,type,timestamp,window_id) {
		var _this = this.text_event;
		_this.type = type;
		_this.text = text;
		_this.start = start;
		_this.length = length;
		var _this1 = this.event;
		_this1.type = 2;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = window_id;
		_this1.timestamp = timestamp;
		_this1.text = this.text_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ontextinput(text,start,length,type,timestamp,window_id);
	}
	,dispatch_mouse_move_event: function(x,y,xrel,yrel,timestamp,window_id) {
		var _this = this.mouse_event;
		_this.type = 1;
		_this.x = x;
		_this.y = y;
		_this.x_rel = xrel;
		_this.y_rel = yrel;
		_this.button = 0;
		_this.wheel_x = 0;
		_this.wheel_y = 0;
		var _this1 = this.event;
		_this1.type = 3;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = window_id;
		_this1.timestamp = timestamp;
		_this1.mouse = this.mouse_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.onmousemove(x,y,xrel,yrel,timestamp,window_id);
	}
	,dispatch_mouse_down_event: function(x,y,button,timestamp,window_id) {
		this.mouse_button_pressed.h[button] = false;
		this.mouse_button_down.h[button] = true;
		var _this = this.mouse_event;
		_this.type = 2;
		_this.x = x;
		_this.y = y;
		_this.x_rel = 0;
		_this.y_rel = 0;
		_this.button = button;
		_this.wheel_x = 0;
		_this.wheel_y = 0;
		var _this1 = this.event;
		_this1.type = 3;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = window_id;
		_this1.timestamp = timestamp;
		_this1.mouse = this.mouse_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.onmousedown(x,y,button,timestamp,window_id);
	}
	,dispatch_mouse_up_event: function(x,y,button,timestamp,window_id) {
		this.mouse_button_released.h[button] = false;
		this.mouse_button_down.remove(button);
		var _this = this.mouse_event;
		_this.type = 3;
		_this.x = x;
		_this.y = y;
		_this.x_rel = 0;
		_this.y_rel = 0;
		_this.button = button;
		_this.wheel_x = 0;
		_this.wheel_y = 0;
		var _this1 = this.event;
		_this1.type = 3;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = window_id;
		_this1.timestamp = timestamp;
		_this1.mouse = this.mouse_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.onmouseup(x,y,button,timestamp,window_id);
	}
	,dispatch_mouse_wheel_event: function(x,y,timestamp,window_id) {
		var _this = this.mouse_event;
		_this.type = 4;
		_this.x = 0;
		_this.y = 0;
		_this.x_rel = 0;
		_this.y_rel = 0;
		_this.button = 0;
		_this.wheel_x = x;
		_this.wheel_y = y;
		var _this1 = this.event;
		_this1.type = 3;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = window_id;
		_this1.timestamp = timestamp;
		_this1.mouse = this.mouse_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.onmousewheel(x,y,timestamp,window_id);
	}
	,dispatch_touch_down_event: function(x,y,dx,dy,touch_id,timestamp) {
		if(!this.touches_down.h.hasOwnProperty(touch_id)) {
			this.touch_count++;
			this.touches_down.h[touch_id] = true;
		}
		var _this = this.touch_event;
		_this.type = 2;
		_this.touch_id = touch_id;
		_this.x = x;
		_this.y = y;
		_this.dx = dx;
		_this.dy = dy;
		var _this1 = this.event;
		_this1.type = 4;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = 0;
		_this1.timestamp = timestamp;
		_this1.touch = this.touch_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ontouchdown(x,y,dx,dy,touch_id,timestamp);
	}
	,dispatch_touch_up_event: function(x,y,dx,dy,touch_id,timestamp) {
		var _this = this.touch_event;
		_this.type = 3;
		_this.touch_id = touch_id;
		_this.x = x;
		_this.y = y;
		_this.dx = dx;
		_this.dy = dy;
		var _this1 = this.event;
		_this1.type = 4;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = 0;
		_this1.timestamp = timestamp;
		_this1.touch = this.touch_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ontouchup(x,y,dx,dy,touch_id,timestamp);
		if(this.touches_down.remove(touch_id)) {
			this.touch_count--;
		}
	}
	,dispatch_touch_move_event: function(x,y,dx,dy,touch_id,timestamp) {
		var _this = this.touch_event;
		_this.type = 1;
		_this.touch_id = touch_id;
		_this.x = x;
		_this.y = y;
		_this.dx = dx;
		_this.dy = dy;
		var _this1 = this.event;
		_this1.type = 4;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = 0;
		_this1.timestamp = timestamp;
		_this1.touch = this.touch_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ontouchmove(x,y,dx,dy,touch_id,timestamp);
	}
	,dispatch_gamepad_axis_event: function(gamepad,axis,value,timestamp) {
		if(!this.gamepad_axis_values.h.hasOwnProperty(gamepad)) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("gamepad_axis_values.exists(gamepad)" + (" ( " + ("gamepad with id " + gamepad + " not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?") + " )")));
		}
		this.gamepad_axis_values.h[gamepad].h[axis] = value;
		var _this = this.gamepad_event;
		_this.button = null;
		_this.device_id = null;
		_this.device_event = null;
		_this.axis = axis;
		_this.value = value;
		_this.type = 1;
		_this.gamepad = gamepad;
		var _this1 = this.event;
		_this1.type = 5;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = 0;
		_this1.timestamp = timestamp;
		_this1.gamepad = this.gamepad_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ongamepadaxis(gamepad,axis,value,timestamp);
	}
	,dispatch_gamepad_button_down_event: function(gamepad,button,value,timestamp) {
		if(!this.gamepad_button_pressed.h.hasOwnProperty(gamepad)) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("gamepad_button_pressed.exists(gamepad)" + (" ( " + ("gamepad with id " + gamepad + " not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?") + " )")));
		}
		if(!this.gamepad_button_down.h.hasOwnProperty(gamepad)) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("gamepad_button_down.exists(gamepad)" + (" ( " + ("gamepad with id " + gamepad + " not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?") + " )")));
		}
		this.gamepad_button_pressed.h[gamepad].h[button] = false;
		this.gamepad_button_down.h[gamepad].h[button] = true;
		var _this = this.gamepad_event;
		_this.axis = null;
		_this.device_id = null;
		_this.device_event = null;
		_this.type = 2;
		_this.value = value;
		_this.button = button;
		_this.gamepad = gamepad;
		var _this1 = this.event;
		_this1.type = 5;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = 0;
		_this1.timestamp = timestamp;
		_this1.gamepad = this.gamepad_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ongamepaddown(gamepad,button,value,timestamp);
	}
	,dispatch_gamepad_button_up_event: function(gamepad,button,value,timestamp) {
		if(!this.gamepad_button_released.h.hasOwnProperty(gamepad)) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("gamepad_button_released.exists(gamepad)" + (" ( " + ("gamepad with id " + gamepad + " not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?") + " )")));
		}
		if(!this.gamepad_button_down.h.hasOwnProperty(gamepad)) {
			throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("gamepad_button_down.exists(gamepad)" + (" ( " + ("gamepad with id " + gamepad + " not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?") + " )")));
		}
		this.gamepad_button_released.h[gamepad].h[button] = false;
		this.gamepad_button_down.h[gamepad].remove(button);
		var _this = this.gamepad_event;
		_this.axis = null;
		_this.device_id = null;
		_this.device_event = null;
		_this.type = 3;
		_this.value = value;
		_this.button = button;
		_this.gamepad = gamepad;
		var _this1 = this.event;
		_this1.type = 5;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = 0;
		_this1.timestamp = timestamp;
		_this1.gamepad = this.gamepad_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ongamepadup(gamepad,button,value,timestamp);
	}
	,dispatch_gamepad_device_event: function(gamepad,id,type,timestamp) {
		var _this = this.gamepad_event;
		_this.axis = null;
		_this.value = null;
		_this.button = null;
		_this.device_id = id;
		_this.device_event = type;
		_this.gamepad = gamepad;
		_this.type = 4;
		var _this1 = this.event;
		_this1.type = 5;
		_this1.key = null;
		_this1.text = null;
		_this1.mouse = null;
		_this1.touch = null;
		_this1.gamepad = null;
		_this1.window_id = 0;
		_this1.timestamp = timestamp;
		_this1.gamepad = this.gamepad_event;
		this.app.dispatch_input_event(this.event);
		this.app.host.ongamepaddevice(gamepad,id,type,timestamp);
	}
	,onevent: function(_event) {
		if(_event.type == 3) {
			this._update_keystate();
			this._update_gamepadstate();
			this._update_mousestate();
		}
	}
	,_update_mousestate: function() {
		var _code = this.mouse_button_pressed.keys();
		while(_code.hasNext()) {
			var _code1 = _code.next();
			if(this.mouse_button_pressed.h[_code1]) {
				this.mouse_button_pressed.remove(_code1);
			} else {
				this.mouse_button_pressed.h[_code1] = true;
			}
		}
		var _code2 = this.mouse_button_released.keys();
		while(_code2.hasNext()) {
			var _code3 = _code2.next();
			if(this.mouse_button_released.h[_code3]) {
				this.mouse_button_released.remove(_code3);
			} else {
				this.mouse_button_released.h[_code3] = true;
			}
		}
	}
	,_update_gamepadstate: function() {
		var _gamepad_pressed = this.gamepad_button_pressed.iterator();
		while(_gamepad_pressed.hasNext()) {
			var _gamepad_pressed1 = _gamepad_pressed.next();
			var _button = _gamepad_pressed1.keys();
			while(_button.hasNext()) {
				var _button1 = _button.next();
				if(_gamepad_pressed1.h[_button1]) {
					_gamepad_pressed1.remove(_button1);
				} else {
					_gamepad_pressed1.h[_button1] = true;
				}
			}
		}
		var _gamepad_released = this.gamepad_button_released.iterator();
		while(_gamepad_released.hasNext()) {
			var _gamepad_released1 = _gamepad_released.next();
			var _button2 = _gamepad_released1.keys();
			while(_button2.hasNext()) {
				var _button3 = _button2.next();
				if(_gamepad_released1.h[_button3]) {
					_gamepad_released1.remove(_button3);
				} else {
					_gamepad_released1.h[_button3] = true;
				}
			}
		}
	}
	,_update_keystate: function() {
		var _code = this.key_code_pressed.keys();
		while(_code.hasNext()) {
			var _code1 = _code.next();
			if(this.key_code_pressed.h[_code1]) {
				this.key_code_pressed.remove(_code1);
			} else {
				this.key_code_pressed.h[_code1] = true;
			}
		}
		var _code2 = this.key_code_released.keys();
		while(_code2.hasNext()) {
			var _code3 = _code2.next();
			if(this.key_code_released.h[_code3]) {
				this.key_code_released.remove(_code3);
			} else {
				this.key_code_released.h[_code3] = true;
			}
		}
		var _code4 = this.scan_code_pressed.keys();
		while(_code4.hasNext()) {
			var _code5 = _code4.next();
			if(this.scan_code_pressed.h[_code5]) {
				this.scan_code_pressed.remove(_code5);
			} else {
				this.scan_code_pressed.h[_code5] = true;
			}
		}
		var _code6 = this.scan_code_released.keys();
		while(_code6.hasNext()) {
			var _code7 = _code6.next();
			if(this.scan_code_released.h[_code7]) {
				this.scan_code_released.remove(_code7);
			} else {
				this.scan_code_released.h[_code7] = true;
			}
		}
	}
	,__class__: snow_systems_input_Input
};
var snow_systems_input_Keycodes = function() { };
$hxClasses["snow.systems.input.Keycodes"] = snow_systems_input_Keycodes;
snow_systems_input_Keycodes.__name__ = ["snow","systems","input","Keycodes"];
snow_systems_input_Keycodes.to_scan = function(keycode) {
	if((keycode & 1073741824) != 0) {
		return keycode & -1073741825;
	}
	switch(keycode) {
	case 8:
		return 42;
	case 9:
		return 43;
	case 13:
		return 40;
	case 27:
		return 41;
	case 32:
		return 44;
	case 47:
		return 56;
	case 48:
		return 39;
	case 49:
		return 30;
	case 50:
		return 31;
	case 51:
		return 32;
	case 52:
		return 33;
	case 53:
		return 34;
	case 54:
		return 35;
	case 55:
		return 36;
	case 56:
		return 37;
	case 57:
		return 38;
	case 59:
		return 51;
	case 61:
		return 46;
	case 91:
		return 47;
	case 92:
		return 49;
	case 93:
		return 48;
	case 96:
		return 53;
	case 97:
		return 4;
	case 98:
		return 5;
	case 99:
		return 6;
	case 100:
		return 7;
	case 101:
		return 8;
	case 102:
		return 9;
	case 103:
		return 10;
	case 104:
		return 11;
	case 105:
		return 12;
	case 106:
		return 13;
	case 107:
		return 14;
	case 108:
		return 15;
	case 109:
		return 16;
	case 110:
		return 17;
	case 111:
		return 18;
	case 112:
		return 19;
	case 113:
		return 20;
	case 114:
		return 21;
	case 115:
		return 22;
	case 116:
		return 23;
	case 117:
		return 24;
	case 118:
		return 25;
	case 119:
		return 26;
	case 120:
		return 27;
	case 121:
		return 28;
	case 122:
		return 29;
	}
	return 0;
};
var snow_systems_io_IO = function(_app) {
	this.string_save_prefix = "slot";
	this.app = _app;
	this.module = new snow_core_web_io_IO(this.app);
};
$hxClasses["snow.systems.io.IO"] = snow_systems_io_IO;
snow_systems_io_IO.__name__ = ["snow","systems","io","IO"];
snow_systems_io_IO.prototype = {
	data_flow: function(_id,_processor,_provider) {
		var _gthis = this;
		if(_provider == null) {
			_provider = $bind(this,this.default_provider);
		}
		return new snow_api_Promise(function(resolve,reject) {
			_provider(_gthis.app,_id).then(function(data) {
				if(_processor != null) {
					_processor(_gthis.app,_id,data).then(resolve,reject);
				} else {
					resolve(data);
				}
			}).error(reject);
		});
	}
	,default_provider: function(_app,_id) {
		return this.module.data_load(_id,null);
	}
	,shutdown: function() {
	}
	,__class__: snow_systems_io_IO
};
var snow_types_Config = function() { };
$hxClasses["snow.types.Config"] = snow_types_Config;
snow_types_Config.__name__ = ["snow","types","Config"];
var snow_types_Error = { __ename__ : true, __constructs__ : ["error","init","parse"] };
snow_types_Error.error = function(value) { var $x = ["error",0,value]; $x.__enum__ = snow_types_Error; $x.toString = $estr; return $x; };
snow_types_Error.init = function(value) { var $x = ["init",1,value]; $x.__enum__ = snow_types_Error; $x.toString = $estr; return $x; };
snow_types_Error.parse = function(value) { var $x = ["parse",2,value]; $x.__enum__ = snow_types_Error; $x.toString = $estr; return $x; };
var snow_types_ImageData = function(_app,_options) {
	this.bpp_source = 4;
	this.bpp = 4;
	this.height_actual = 0;
	this.width_actual = 0;
	this.height = 0;
	this.width = 0;
	this.id = "ImageData";
	this.app = _app;
	if(_options.id == null) {
		_options.id = this.id;
	}
	this.id = _options.id;
	this.width = _options.width;
	this.height = _options.height;
	this.width_actual = _options.width_actual;
	this.height_actual = _options.height_actual;
	this.bpp = _options.bpp;
	this.bpp_source = _options.bpp_source;
	if(_options.pixels == null) {
		_options.pixels = this.pixels;
	}
	this.pixels = _options.pixels;
	_options = null;
};
$hxClasses["snow.types.ImageData"] = snow_types_ImageData;
snow_types_ImageData.__name__ = ["snow","types","ImageData"];
snow_types_ImageData.prototype = {
	__class__: snow_types_ImageData
};
var snow_types_SystemEvent = function() {
};
$hxClasses["snow.types.SystemEvent"] = snow_types_SystemEvent;
snow_types_SystemEvent.__name__ = ["snow","types","SystemEvent"];
snow_types_SystemEvent.prototype = {
	__class__: snow_types_SystemEvent
};
var snow_types_WindowEvent = function() {
	this.window_id = -1;
	this.timestamp = 0.0;
	this.type = 0;
};
$hxClasses["snow.types.WindowEvent"] = snow_types_WindowEvent;
snow_types_WindowEvent.__name__ = ["snow","types","WindowEvent"];
snow_types_WindowEvent.prototype = {
	__class__: snow_types_WindowEvent
};
var snow_types_KeyEvent = function() {
};
$hxClasses["snow.types.KeyEvent"] = snow_types_KeyEvent;
snow_types_KeyEvent.__name__ = ["snow","types","KeyEvent"];
snow_types_KeyEvent.prototype = {
	__class__: snow_types_KeyEvent
};
var snow_types_TextEvent = function() {
};
$hxClasses["snow.types.TextEvent"] = snow_types_TextEvent;
snow_types_TextEvent.__name__ = ["snow","types","TextEvent"];
snow_types_TextEvent.prototype = {
	__class__: snow_types_TextEvent
};
var snow_types_MouseEvent = function() {
};
$hxClasses["snow.types.MouseEvent"] = snow_types_MouseEvent;
snow_types_MouseEvent.__name__ = ["snow","types","MouseEvent"];
snow_types_MouseEvent.prototype = {
	__class__: snow_types_MouseEvent
};
var snow_types_TouchEvent = function() {
};
$hxClasses["snow.types.TouchEvent"] = snow_types_TouchEvent;
snow_types_TouchEvent.__name__ = ["snow","types","TouchEvent"];
snow_types_TouchEvent.prototype = {
	__class__: snow_types_TouchEvent
};
var snow_types_GamepadEvent = function() {
};
$hxClasses["snow.types.GamepadEvent"] = snow_types_GamepadEvent;
snow_types_GamepadEvent.__name__ = ["snow","types","GamepadEvent"];
snow_types_GamepadEvent.prototype = {
	__class__: snow_types_GamepadEvent
};
var snow_types_InputEvent = function() {
	this.window_id = -1;
	this.timestamp = 0.0;
};
$hxClasses["snow.types.InputEvent"] = snow_types_InputEvent;
snow_types_InputEvent.__name__ = ["snow","types","InputEvent"];
snow_types_InputEvent.prototype = {
	__class__: snow_types_InputEvent
};
var snow_types_ModState = function() {
	this.meta = false;
	this.alt = false;
	this.shift = false;
	this.ctrl = false;
	this.mode = false;
	this.caps = false;
	this.num = false;
	this.rmeta = false;
	this.lmeta = false;
	this.ralt = false;
	this.lalt = false;
	this.rctrl = false;
	this.lctrl = false;
	this.rshift = false;
	this.lshift = false;
	this.none = false;
};
$hxClasses["snow.types.ModState"] = snow_types_ModState;
snow_types_ModState.__name__ = ["snow","types","ModState"];
snow_types_ModState.prototype = {
	__class__: snow_types_ModState
};
var spritesheet_Animation = function(frames,speed,loop,play) {
	if(play == null) {
		play = true;
	}
	if(loop == null) {
		loop = true;
	}
	this.index = 0;
	this.length = frames.length;
	this.time = .0;
	this.step = 1 / speed;
	this.loop = loop;
	this.playing = play;
	this.frames = frames;
};
$hxClasses["spritesheet.Animation"] = spritesheet_Animation;
spritesheet_Animation.__name__ = ["spritesheet","Animation"];
spritesheet_Animation.prototype = {
	update: function(dt) {
		if(this.playing) {
			this.time += dt;
			while(this.time >= this.step) {
				this.time -= this.step;
				if(++this.index >= this.length) {
					if(this.loop) {
						this.index = 0;
					} else {
						this.index = this.length - 1;
						this.playing = false;
						break;
					}
				}
			}
		}
	}
	,__class__: spritesheet_Animation
};
var spritesheet_SpriteSheet = function() {
	this.series = new haxe_ds_StringMap();
	this.frames = new haxe_ds_StringMap();
};
$hxClasses["spritesheet.SpriteSheet"] = spritesheet_SpriteSheet;
spritesheet_SpriteSheet.__name__ = ["spritesheet","SpriteSheet"];
spritesheet_SpriteSheet.parseSparrowXmlString = function(xml,result) {
	return spritesheet_SpriteSheet.parseSparrowXmlObject(Xml.parse(xml),result);
};
spritesheet_SpriteSheet.parseSparrowXmlObject = function(xml,result) {
	var result1 = result == null ? new spritesheet_SpriteSheet() : result;
	var _g_head = new haxe_xml_Fast(xml.firstElement()).nodes.resolve("SubTexture").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var data = new spritesheet_SpriteSheetFrameData();
		data.x = Std.parseInt(val.att.resolve("x"));
		data.y = Std.parseInt(val.att.resolve("y"));
		data.w = Std.parseInt(val.att.resolve("width"));
		data.h = Std.parseInt(val.att.resolve("height"));
		data.sx = val.has.resolve("frameX") ? -Std.parseInt(val.att.resolve("frameX")) : 0;
		data.sy = val.has.resolve("frameY") ? -Std.parseInt(val.att.resolve("frameY")) : 0;
		data.sw = val.has.resolve("frameWidth") ? Std.parseInt(val.att.resolve("frameWidth")) : data.w;
		data.sh = val.has.resolve("frameHeight") ? Std.parseInt(val.att.resolve("frameHeight")) : data.h;
		if(spritesheet_SpriteSheet.DEFAULT_NAME_EXTRACTOR.match(val.att.resolve("name"))) {
			spritesheet_SpriteSheet.addToResult(result1,spritesheet_SpriteSheet.DEFAULT_NAME_EXTRACTOR.matched(1),spritesheet_SpriteSheet.DEFAULT_NAME_EXTRACTOR.matched(2),data);
		}
	}
	return result1;
};
spritesheet_SpriteSheet.addToResult = function(result,name,num,data) {
	var _this = result.frames;
	var key = name + num;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,data);
	} else {
		_this.h[key] = data;
	}
	var _this1 = result.series;
	if(!(__map_reserved[name] != null ? _this1.existsReserved(name) : _this1.h.hasOwnProperty(name))) {
		var _this2 = result.series;
		var value = [];
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,value);
		} else {
			_this2.h[name] = value;
		}
	}
	var _this3 = result.series;
	(__map_reserved[name] != null ? _this3.getReserved(name) : _this3.h[name]).push(data);
};
spritesheet_SpriteSheet.prototype = {
	__class__: spritesheet_SpriteSheet
};
var spritesheet_SpriteSheetFrameData = function() {
};
$hxClasses["spritesheet.SpriteSheetFrameData"] = spritesheet_SpriteSheetFrameData;
spritesheet_SpriteSheetFrameData.__name__ = ["spritesheet","SpriteSheetFrameData"];
spritesheet_SpriteSheetFrameData.prototype = {
	__class__: spritesheet_SpriteSheetFrameData
};
var systems_Destroy = function() {
	echo_System.call(this);
	this.__id = 4;
};
$hxClasses["systems.Destroy"] = systems_Destroy;
systems_Destroy.__name__ = ["systems","Destroy"];
systems_Destroy.__super__ = echo_System;
systems_Destroy.prototype = $extend(echo_System.prototype,{
	update: function(dt) {
		var i = this.view.entities.length;
		while(--i > -1) {
			var _id_ = this.view.entities[i];
			var _this = this.echo;
			if(_this.entitiesMap.exists(_id_)) {
				var _g_head = _this.views.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					val.removeIfMatch(_id_);
				}
				_this.entitiesMap.remove(_id_);
				_this.entities.remove(_id_);
			}
			ComponentHolder_$nape_$phys_$Body.__MAP.remove(_id_);
			ComponentHolder_$luxe_$Sprite.__MAP.remove(_id_);
			ComponentHolder_$components_$Status.__MAP.remove(_id_);
			ComponentHolder_$components_$Vel.__MAP.remove(_id_);
			ComponentHolder_$components_$Kill.__MAP.remove(_id_);
		}
	}
	,activate: function(echo1) {
		if(!echo1.viewsMap.h.hasOwnProperty(4)) {
			echo1.addView(new View_$components_$Kill());
		}
		this.view = echo1.viewsMap.h[4];
		echo_System.prototype.activate.call(this,echo1);
	}
	,deactivate: function() {
		echo_System.prototype.deactivate.call(this);
	}
	,__class__: systems_Destroy
});
var systems_Gameplay = function(space) {
	echo_System.call(this);
	this.__id = 2;
	this.space = space;
};
$hxClasses["systems.Gameplay"] = systems_Gameplay;
systems_Gameplay.__name__ = ["systems","Gameplay"];
systems_Gameplay.__super__ = echo_System;
systems_Gameplay.prototype = $extend(echo_System.prototype,{
	onactivate: function() {
		var _this = this.space.zpp_inner.wrap_listeners;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj = new nape_callbacks_InteractionListener(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,Builder.Chicken,Builder.Monster,$bind(this,this.startInteract));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var _this1 = this.space.zpp_inner.wrap_listeners;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj1 = new nape_callbacks_InteractionListener(zpp_$nape_util_ZPP_$Flags.CbEvent_END,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,Builder.Chicken,Builder.Monster,$bind(this,this.stopInteract));
		if(_this1.zpp_inner.reverse_flag) {
			_this1.push(obj1);
		} else {
			_this1.unshift(obj1);
		}
	}
	,startInteract: function(cb) {
		var _this = cb.zpp_inner.int1.outer_i;
		if(_this.zpp_inner_i.userData == null) {
			_this.zpp_inner_i.userData = { };
		}
		var i1 = _this.zpp_inner_i.userData.id;
		var _this1 = cb.zpp_inner.int2.outer_i;
		if(_this1.zpp_inner_i.userData == null) {
			_this1.zpp_inner_i.userData = { };
		}
		var i2 = _this1.zpp_inner_i.userData.id;
		if(ComponentHolder_$components_$Status.__MAP.h.hasOwnProperty(i1)) {
			ComponentHolder_$components_$Status.__MAP.h[i1].interactingBodies.push(i2);
		}
		if(ComponentHolder_$components_$Status.__MAP.h.hasOwnProperty(i2)) {
			ComponentHolder_$components_$Status.__MAP.h[i2].interactingBodies.push(i1);
		}
	}
	,stopInteract: function(cb) {
		var _this = cb.zpp_inner.int1.outer_i;
		if(_this.zpp_inner_i.userData == null) {
			_this.zpp_inner_i.userData = { };
		}
		var i1 = _this.zpp_inner_i.userData.id;
		var _this1 = cb.zpp_inner.int2.outer_i;
		if(_this1.zpp_inner_i.userData == null) {
			_this1.zpp_inner_i.userData = { };
		}
		var i2 = _this1.zpp_inner_i.userData.id;
		if(ComponentHolder_$components_$Status.__MAP.h.hasOwnProperty(i1)) {
			HxOverrides.remove(ComponentHolder_$components_$Status.__MAP.h[i1].interactingBodies,i2);
		}
		if(ComponentHolder_$components_$Status.__MAP.h.hasOwnProperty(i2)) {
			HxOverrides.remove(ComponentHolder_$components_$Status.__MAP.h[i2].interactingBodies,i1);
		}
	}
	,update: function(dt) {
		var _g_vd;
		var _g_i;
		var list = this.view.entities;
		_g_i = -1;
		_g_vd = new ViewData_$components_$Status_$components_$Vel_$nape_$phys_$Body();
		while(++_g_i < list.length) {
			_g_vd.id = list[_g_i];
			_g_vd.b = ComponentHolder_$nape_$phys_$Body.__MAP.get(_g_vd.id);
			_g_vd.s = ComponentHolder_$components_$Status.__MAP.get(_g_vd.id);
			_g_vd.vel = ComponentHolder_$components_$Vel.__MAP.get(_g_vd.id);
			var _this = _g_vd.b;
			if(_this.zpp_inner.wrap_vel == null) {
				_this.zpp_inner.setupVelocity();
			}
			var _this1 = _this.zpp_inner.wrap_vel;
			var _this2 = _g_vd.vel;
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			var x = _this2.zpp_inner.x;
			var _this4 = _this1.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			if(_this1.zpp_inner.x != x) {
				_this1.zpp_inner.x = x;
				var _this5 = _this1.zpp_inner;
				if(_this5._invalidate != null) {
					_this5._invalidate(_this5);
				}
			}
			var _this6 = _this1.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			var _this7 = _g_vd.b;
			if(_this7.zpp_inner.wrap_vel == null) {
				_this7.zpp_inner.setupVelocity();
			}
			var _this8 = _this7.zpp_inner.wrap_vel;
			var _this9 = _g_vd.vel;
			var _this10 = _this9.zpp_inner;
			if(_this10._validate != null) {
				_this10._validate();
			}
			var y = _this9.zpp_inner.y;
			var _this11 = _this8.zpp_inner;
			if(_this11._validate != null) {
				_this11._validate();
			}
			if(_this8.zpp_inner.y != y) {
				_this8.zpp_inner.y = y;
				var _this12 = _this8.zpp_inner;
				if(_this12._invalidate != null) {
					_this12._invalidate(_this12);
				}
			}
			var _this13 = _this8.zpp_inner;
			if(_this13._validate != null) {
				_this13._validate();
			}
			var _this14 = _g_vd.b;
			if(_this14.zpp_inner.wrap_pos == null) {
				_this14.zpp_inner.setupPosition();
			}
			var _this15 = _this14.zpp_inner.wrap_pos;
			var _this16 = _this15.zpp_inner;
			if(_this16._validate != null) {
				_this16._validate();
			}
			if(_this15.zpp_inner.x > Luxe.core.screen.get_w()) {
				var _this17 = _g_vd.b;
				if(_this17.zpp_inner.wrap_pos == null) {
					_this17.zpp_inner.setupPosition();
				}
				var _g = _this17.zpp_inner.wrap_pos;
				var _this18 = _g.zpp_inner;
				if(_this18._validate != null) {
					_this18._validate();
				}
				var x1 = _g.zpp_inner.x - Luxe.core.screen.get_w();
				var _this19 = _g.zpp_inner;
				if(_this19._validate != null) {
					_this19._validate();
				}
				if(_g.zpp_inner.x != x1) {
					_g.zpp_inner.x = x1;
					var _this20 = _g.zpp_inner;
					if(_this20._invalidate != null) {
						_this20._invalidate(_this20);
					}
				}
				var _this21 = _g.zpp_inner;
				if(_this21._validate != null) {
					_this21._validate();
				}
			} else {
				var _this22 = _g_vd.b;
				if(_this22.zpp_inner.wrap_pos == null) {
					_this22.zpp_inner.setupPosition();
				}
				var _this23 = _this22.zpp_inner.wrap_pos;
				var _this24 = _this23.zpp_inner;
				if(_this24._validate != null) {
					_this24._validate();
				}
				if(_this23.zpp_inner.x < 0) {
					var _this25 = _g_vd.b;
					if(_this25.zpp_inner.wrap_pos == null) {
						_this25.zpp_inner.setupPosition();
					}
					var _g1 = _this25.zpp_inner.wrap_pos;
					var _this26 = _g1.zpp_inner;
					if(_this26._validate != null) {
						_this26._validate();
					}
					var x2 = _g1.zpp_inner.x + Luxe.core.screen.get_w();
					var _this27 = _g1.zpp_inner;
					if(_this27._validate != null) {
						_this27._validate();
					}
					if(_g1.zpp_inner.x != x2) {
						_g1.zpp_inner.x = x2;
						var _this28 = _g1.zpp_inner;
						if(_this28._invalidate != null) {
							_this28._invalidate(_this28);
						}
					}
					var _this29 = _g1.zpp_inner;
					if(_this29._validate != null) {
						_this29._validate();
					}
				}
			}
			var _this30 = _g_vd.b;
			if(_this30.zpp_inner.wrap_pos == null) {
				_this30.zpp_inner.setupPosition();
			}
			var _this31 = _this30.zpp_inner.wrap_pos;
			var _this32 = _this31.zpp_inner;
			if(_this32._validate != null) {
				_this32._validate();
			}
			if(_this31.zpp_inner.y > Luxe.core.screen.get_h()) {
				var _this33 = _g_vd.b;
				if(_this33.zpp_inner.wrap_pos == null) {
					_this33.zpp_inner.setupPosition();
				}
				var _g2 = _this33.zpp_inner.wrap_pos;
				var _this34 = _g2.zpp_inner;
				if(_this34._validate != null) {
					_this34._validate();
				}
				var y1 = _g2.zpp_inner.y - Luxe.core.screen.get_h();
				var _this35 = _g2.zpp_inner;
				if(_this35._validate != null) {
					_this35._validate();
				}
				if(_g2.zpp_inner.y != y1) {
					_g2.zpp_inner.y = y1;
					var _this36 = _g2.zpp_inner;
					if(_this36._invalidate != null) {
						_this36._invalidate(_this36);
					}
				}
				var _this37 = _g2.zpp_inner;
				if(_this37._validate != null) {
					_this37._validate();
				}
			} else {
				var _this38 = _g_vd.b;
				if(_this38.zpp_inner.wrap_pos == null) {
					_this38.zpp_inner.setupPosition();
				}
				var _this39 = _this38.zpp_inner.wrap_pos;
				var _this40 = _this39.zpp_inner;
				if(_this40._validate != null) {
					_this40._validate();
				}
				if(_this39.zpp_inner.y < 0) {
					var _this41 = _g_vd.b;
					if(_this41.zpp_inner.wrap_pos == null) {
						_this41.zpp_inner.setupPosition();
					}
					var _g3 = _this41.zpp_inner.wrap_pos;
					var _this42 = _g3.zpp_inner;
					if(_this42._validate != null) {
						_this42._validate();
					}
					var y2 = _g3.zpp_inner.y + Luxe.core.screen.get_h();
					var _this43 = _g3.zpp_inner;
					if(_this43._validate != null) {
						_this43._validate();
					}
					if(_g3.zpp_inner.y != y2) {
						_g3.zpp_inner.y = y2;
						var _this44 = _g3.zpp_inner;
						if(_this44._invalidate != null) {
							_this44._invalidate(_this44);
						}
					}
					var _this45 = _g3.zpp_inner;
					if(_this45._validate != null) {
						_this45._validate();
					}
				}
			}
		}
	}
	,activate: function(echo1) {
		if(!echo1.viewsMap.h.hasOwnProperty(2)) {
			echo1.addView(new View_$components_$Status_$components_$Vel_$nape_$phys_$Body());
		}
		this.view = echo1.viewsMap.h[2];
		echo_System.prototype.activate.call(this,echo1);
	}
	,deactivate: function() {
		echo_System.prototype.deactivate.call(this);
	}
	,__class__: systems_Gameplay
});
var systems_Nape = function(space) {
	echo_System.call(this);
	this.__id = 1;
	this.space = space == null ? new nape_space_Space() : space;
	if(space.zpp_inner.wrap_gravity == null) {
		space.zpp_inner.getgravity();
	}
	var _this = space.zpp_inner.wrap_gravity;
	var tmp;
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == .0) {
		var _this2 = _this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		tmp = _this.zpp_inner.y == .0;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = .0;
		_this.zpp_inner.y = .0;
		var _this3 = _this.zpp_inner;
		if(_this3._invalidate != null) {
			_this3._invalidate(_this3);
		}
	}
	space.zpp_inner.global_lin_drag = 8;
	space.zpp_inner.global_ang_drag = 32;
};
$hxClasses["systems.Nape"] = systems_Nape;
systems_Nape.__name__ = ["systems","Nape"];
systems_Nape.__super__ = echo_System;
systems_Nape.prototype = $extend(echo_System.prototype,{
	step: function(dt) {
		var _this = this.space.zpp_inner.wrap_bodies;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		Log.track("bodies",_this.zpp_inner.user_length);
	}
	,__ad: function(id) {
		var b = ComponentHolder_$nape_$phys_$Body.__MAP.h[id];
		if(b.zpp_inner_i.userData == null) {
			b.zpp_inner_i.userData = { };
		}
		b.zpp_inner_i.userData.id = id;
		var _this = this.space.zpp_inner.wrap_bodies;
		if(_this.zpp_inner.reverse_flag) {
			_this.push(b);
		} else {
			_this.unshift(b);
		}
	}
	,__rm: function(id) {
		var b = ComponentHolder_$nape_$phys_$Body.__MAP.h[id];
		if(b.zpp_inner_i.userData == null) {
			b.zpp_inner_i.userData = { };
		}
		b.zpp_inner_i.userData.id = null;
		this.space.zpp_inner.wrap_bodies.remove(b);
	}
	,update: function(dt) {
		this.step(dt);
	}
	,activate: function(echo1) {
		if(!echo1.viewsMap.h.hasOwnProperty(1)) {
			echo1.addView(new View_$nape_$phys_$Body());
		}
		this.view = echo1.viewsMap.h[1];
		this.view.onAdded.push($bind(this,this.__ad));
		var _g = 0;
		var _g1 = this.view.entities;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			this.__ad(i);
		}
		this.view.onRemoved.push($bind(this,this.__rm));
		echo_System.prototype.activate.call(this,echo1);
	}
	,deactivate: function() {
		echo_System.prototype.deactivate.call(this);
		var this1 = this.view.onAdded;
		var i = this1.indexOf($bind(this,this.__ad));
		if(i > -1) {
			this1[i] = null;
		}
		var this2 = this.view.onRemoved;
		var i1 = this2.indexOf($bind(this,this.__rm));
		if(i1 > -1) {
			this2[i1] = null;
		}
	}
	,__class__: systems_Nape
});
var systems_NapeDebugDraw = function(solidNonsensors) {
	if(solidNonsensors == null) {
		solidNonsensors = false;
	}
	echo_System.call(this);
	this.__id = 5;
	this.solidNonsensors = solidNonsensors;
	Luxe.physics.nape.set_draw(false);
	this.batcher = Luxe.renderer.create_batcher({ name : "napedebug", layer : 5});
};
$hxClasses["systems.NapeDebugDraw"] = systems_NapeDebugDraw;
systems_NapeDebugDraw.__name__ = ["systems","NapeDebugDraw"];
systems_NapeDebugDraw.__super__ = echo_System;
systems_NapeDebugDraw.prototype = $extend(echo_System.prototype,{
	update: function(dt) {
		var _g_vd;
		var _g_i;
		var list = this.view.entities;
		_g_i = -1;
		_g_vd = new ViewData_$nape_$phys_$Body();
		while(++_g_i < list.length) {
			_g_vd.id = list[_g_i];
			_g_vd.b = ComponentHolder_$nape_$phys_$Body.__MAP.get(_g_vd.id);
			var _this = _g_vd.b.zpp_inner.wrap_shapes;
			_this.zpp_inner.valmod();
			var _g = nape_shape_ShapeIterator.get(_this);
			while(true) {
				_g.zpp_inner.zpp_inner.valmod();
				var _this1 = _g.zpp_inner;
				_this1.zpp_inner.valmod();
				if(_this1.zpp_inner.zip_length) {
					_this1.zpp_inner.zip_length = false;
					_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
				}
				_g.zpp_critical = true;
				var tmp;
				if(_g.zpp_i < _this1.zpp_inner.user_length) {
					tmp = true;
				} else {
					_g.zpp_next = nape_shape_ShapeIterator.zpp_pool;
					nape_shape_ShapeIterator.zpp_pool = _g;
					_g.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g.zpp_critical = false;
				var sh = _g.zpp_inner.at(_g.zpp_i++);
				var color = ComponentHolder_$components_$Status.__MAP.h.hasOwnProperty(_g_vd.id) && ComponentHolder_$components_$Status.__MAP.h[_g_vd.id].interactingBodies.length > 0 ? new phoenix_Color().rgb(15728640) : new phoenix_Color().rgb(15790320);
				if(sh.zpp_inner.type == 0) {
					lx_utils_NapeDrawer.cir(sh.zpp_inner.type == 0 ? sh.zpp_inner.circle.outer_zn : null,color,this.solidNonsensors && !sh.zpp_inner.sensorEnabled,this.batcher,true,false);
				} else {
					lx_utils_NapeDrawer.pol(sh.zpp_inner.type == 1 ? sh.zpp_inner.polygon.outer_zn : null,color,this.solidNonsensors && !sh.zpp_inner.sensorEnabled,this.batcher,true,false);
				}
			}
		}
	}
	,activate: function(echo1) {
		if(!echo1.viewsMap.h.hasOwnProperty(1)) {
			echo1.addView(new View_$nape_$phys_$Body());
		}
		this.view = echo1.viewsMap.h[1];
		echo_System.prototype.activate.call(this,echo1);
	}
	,deactivate: function() {
		echo_System.prototype.deactivate.call(this);
	}
	,__class__: systems_NapeDebugDraw
});
var systems_Render = function() {
	echo_System.call(this);
	this.__id = 3;
};
$hxClasses["systems.Render"] = systems_Render;
systems_Render.__name__ = ["systems","Render"];
systems_Render.__super__ = echo_System;
systems_Render.prototype = $extend(echo_System.prototype,{
	render: function(b,s) {
		var tmp;
		if(s.flipx) {
			if(b.zpp_inner.wrap_vel == null) {
				b.zpp_inner.setupVelocity();
			}
			var _this = b.zpp_inner.wrap_vel;
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.x > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			s.set_flipx(false);
		}
		var tmp1;
		if(!s.flipx) {
			if(b.zpp_inner.wrap_vel == null) {
				b.zpp_inner.setupVelocity();
			}
			var _this2 = b.zpp_inner.wrap_vel;
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			tmp1 = _this2.zpp_inner.x < 0;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			s.set_flipx(true);
		}
		var _this4 = s.get_pos();
		if(b.zpp_inner.wrap_pos == null) {
			b.zpp_inner.setupPosition();
		}
		var _this5 = b.zpp_inner.wrap_pos;
		var _this6 = _this5.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		var _x = _this5.zpp_inner.x;
		_this4.x = _x;
		if(!_this4._construct) {
			if(_this4.listen_x != null && !_this4.ignore_listeners) {
				_this4.listen_x(_x);
			}
		}
		var _this7 = s.get_pos();
		if(b.zpp_inner.wrap_pos == null) {
			b.zpp_inner.setupPosition();
		}
		var _this8 = b.zpp_inner.wrap_pos;
		var _this9 = _this8.zpp_inner;
		if(_this9._validate != null) {
			_this9._validate();
		}
		var _y = _this8.zpp_inner.y;
		_this7.y = _y;
		if(!_this7._construct) {
			if(_this7.listen_y != null && !_this7.ignore_listeners) {
				_this7.listen_y(_y);
			}
		}
		if(b.zpp_inner.wrap_pos == null) {
			b.zpp_inner.setupPosition();
		}
		var _this10 = b.zpp_inner.wrap_pos;
		var _this11 = _this10.zpp_inner;
		if(_this11._validate != null) {
			_this11._validate();
		}
		if((_this10.zpp_inner.y | 0) != (s.depth | 0)) {
			if(b.zpp_inner.wrap_pos == null) {
				b.zpp_inner.setupPosition();
			}
			var _this12 = b.zpp_inner.wrap_pos;
			var _this13 = _this12.zpp_inner;
			if(_this13._validate != null) {
				_this13._validate();
			}
			s.set_depth(_this12.zpp_inner.y);
		}
	}
	,__remove_sprite: function(id) {
		ComponentHolder_$luxe_$Sprite.__MAP.h[id].destroy();
	}
	,update: function(dt) {
		var _g_vd;
		var _g_i;
		var list = this.view_luxe_sprite_nape_phys_body.entities;
		_g_i = -1;
		_g_vd = new ViewData_$luxe_$Sprite_$nape_$phys_$Body();
		while(++_g_i < list.length) {
			_g_vd.id = list[_g_i];
			_g_vd.b = ComponentHolder_$nape_$phys_$Body.__MAP.get(_g_vd.id);
			_g_vd.s = ComponentHolder_$luxe_$Sprite.__MAP.get(_g_vd.id);
			this.render(_g_vd.b,_g_vd.s);
		}
	}
	,activate: function(echo1) {
		if(!echo1.viewsMap.h.hasOwnProperty(3)) {
			echo1.addView(new View_$luxe_$Sprite_$nape_$phys_$Body());
		}
		this.view_luxe_sprite_nape_phys_body = echo1.viewsMap.h[3];
		this.view_luxe_sprite_nape_phys_body.onRemoved.push($bind(this,this.__remove_sprite));
		echo_System.prototype.activate.call(this,echo1);
	}
	,deactivate: function() {
		echo_System.prototype.deactivate.call(this);
		var this1 = this.view_luxe_sprite_nape_phys_body.onRemoved;
		var i = this1.indexOf($bind(this,this.__remove_sprite));
		if(i > -1) {
			this1[i] = null;
		}
	}
	,__class__: systems_Render
});
var zpp_$nape_callbacks_ZPP_$Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
$hxClasses["zpp_nape.callbacks.ZPP_Callback"] = zpp_$nape_callbacks_ZPP_$Callback;
zpp_$nape_callbacks_ZPP_$Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_$nape_callbacks_ZPP_$Callback.prototype = {
	wrapper_body: function() {
		if(this.outer_body == null) {
			this.outer_body = new nape_callbacks_BodyCallback();
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			this.outer_con = new nape_callbacks_ConstraintCallback();
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			this.outer_int = new nape_callbacks_InteractionCallback();
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) {
			this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true);
		} else {
			this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		}
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,push: function(obj) {
		if(this.prev != null) {
			this.prev.next = obj;
		} else {
			this.next = obj;
		}
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) {
			this.prev = null;
		} else {
			this.next.prev = null;
		}
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Callback
};
var zpp_$nape_callbacks_ZPP_$CbSet = function() {
	this.constraints = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.id = zpp_$nape_ZPP_$ID.CbSet();
	this.cbpairs = new zpp_$nape_util_ZNPList_$ZPP_$CbSetPair();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSet"] = zpp_$nape_callbacks_ZPP_$CbSet;
zpp_$nape_callbacks_ZPP_$CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
zpp_$nape_callbacks_ZPP_$CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) {
			return true;
		}
		if(cb.id < ca.id) {
			return false;
		} else {
			i = i.next;
			j = j.next;
		}
	}
	if(j != null) {
		return i == null;
	} else {
		return false;
	}
};
zpp_$nape_callbacks_ZPP_$CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
		ret = new zpp_$nape_callbacks_ZPP_$CbSet();
	} else {
		ret = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSet.single_intersection = function(a,b,i) {
	var ret = null;
	var cx_ite = (a.cbpairs.length < b.cbpairs.length ? a.cbpairs : b.cbpairs).head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		var ret1;
		if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
			ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
		} else {
			ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.zip_listeners = true;
		if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
			ret1.a = a;
			ret1.b = b;
		} else {
			ret1.a = b;
			ret1.b = a;
		}
		ret = ret1;
		a.cbpairs.add(ret);
		if(b != a) {
			b.cbpairs.add(ret);
		}
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	var ite = ret.listeners.head;
	if(ite != null && ite.elt == i) {
		return ite.next == null;
	} else {
		return false;
	}
};
zpp_$nape_callbacks_ZPP_$CbSet.prototype = {
	invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			cx_ite.elt.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var npre = null;
			var nite = this.listeners.head;
			var cite = cx_ite.elt.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						if(cx.precedence <= b.precedence) {
							if(cx.precedence == b.precedence) {
								tmp = cx.id > b.id;
							} else {
								tmp = false;
							}
						} else {
							tmp = true;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						if(cx.space == this.manager.space) {
							var _this = this.listeners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this.head;
								_this.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this.pushmod = _this.modified = true;
							_this.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cx_ite.elt.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						if(cx.precedence <= b.precedence) {
							if(cx.precedence == b.precedence) {
								tmp = cx.id > b.id;
							} else {
								tmp = false;
							}
						} else {
							tmp = true;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var tmp1;
						var _this = cx.options;
						if(!_this.nonemptyintersection(this.cbTypes,_this.excludes)) {
							tmp1 = cx.space == this.manager.space;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							var _this1 = this.bodylisteners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this1.head;
								_this1.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this1.pushmod = _this1.modified = true;
							_this1.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cx_ite.elt.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						if(cx.precedence <= b.precedence) {
							if(cx.precedence == b.precedence) {
								tmp = cx.id > b.id;
							} else {
								tmp = false;
							}
						} else {
							tmp = true;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var tmp1;
						var _this = cx.options;
						if(!_this.nonemptyintersection(this.cbTypes,_this.excludes)) {
							tmp1 = cx.space == this.manager.space;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							var _this1 = this.conlisteners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this1.head;
								_this1.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this1.pushmod = _this1.modified = true;
							_this1.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSetPair"] = zpp_$nape_callbacks_ZPP_$CbSetPair;
zpp_$nape_callbacks_ZPP_$CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
zpp_$nape_callbacks_ZPP_$CbSetPair.setlt = function(x,y) {
	if(!zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.a,y.a)) {
		if(x.a == y.a) {
			return zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.b,y.b);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
zpp_$nape_callbacks_ZPP_$CbSetPair.prototype = {
	__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				var tmp;
				var tmp1;
				var _this = ax.options1;
				var xs = this.a.cbTypes;
				if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
					var _this1 = ax.options2;
					var xs1 = this.b.cbTypes;
					if(_this1.nonemptyintersection(xs1,_this1.includes)) {
						tmp1 = !_this1.nonemptyintersection(xs1,_this1.excludes);
					} else {
						tmp1 = false;
					}
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					var _this2 = ax.options2;
					var xs2 = this.a.cbTypes;
					if(_this2.nonemptyintersection(xs2,_this2.includes) && !_this2.nonemptyintersection(xs2,_this2.excludes)) {
						var _this3 = ax.options1;
						var xs3 = this.b.cbTypes;
						if(_this3.nonemptyintersection(xs3,_this3.includes)) {
							tmp = !_this3.nonemptyintersection(xs3,_this3.excludes);
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					this.listeners.add(ax);
				}
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) {
				aite = aite.next;
			} else {
				bite = bite.next;
			}
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSetPair
};
var zpp_$nape_util_ZPP_$Flags = function() { };
$hxClasses["zpp_nape.util.ZPP_Flags"] = zpp_$nape_util_ZPP_$Flags;
zpp_$nape_util_ZPP_$Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
var zpp_$nape_callbacks_ZPP_$Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.Listener();
};
$hxClasses["zpp_nape.callbacks.ZPP_Listener"] = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_$nape_callbacks_ZPP_$Listener.prototype = {
	addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Listener
};
var zpp_$nape_callbacks_ZPP_$BodyListener = function() {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
};
$hxClasses["zpp_nape.callbacks.ZPP_BodyListener"] = zpp_$nape_callbacks_ZPP_$BodyListener;
zpp_$nape_callbacks_ZPP_$BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_$nape_callbacks_ZPP_$BodyListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$BodyListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var pre = null;
			var cx_ite1 = cb.bodylisteners.head;
			while(cx_ite1 != null) {
				var j = cx_ite1.elt;
				if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
					break;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this = cb.bodylisteners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = this;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite2 = cb.cbsets.head;
			while(cx_ite2 != null) {
				cx_ite2.elt.zip_bodylisteners = true;
				cx_ite2 = cx_ite2.next;
			}
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				cx_ite1.elt.zip_bodylisteners = true;
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		var _this = this.options;
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = _this.includes.head;
				while(cx_ite != null) {
					if(cb.id < cx_ite.elt.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this1 = _this.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this1.head;
					_this1.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			} else {
				_this.includes.remove(cb);
			}
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = _this.excludes.head;
			while(cx_ite1 != null) {
				if(cb.id < cx_ite1.elt.id) {
					break;
				}
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this2 = _this.excludes;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = cb;
			var temp1 = ret1;
			if(pre1 == null) {
				temp1.next = _this2.head;
				_this2.head = temp1;
			} else {
				temp1.next = pre1.next;
				pre1.next = temp1;
			}
			_this2.pushmod = _this2.modified = true;
			_this2.length++;
		} else {
			_this.excludes.remove(cb);
		}
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$BodyListener
});
var zpp_$nape_callbacks_ZPP_$ConstraintListener = function() {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
};
$hxClasses["zpp_nape.callbacks.ZPP_ConstraintListener"] = zpp_$nape_callbacks_ZPP_$ConstraintListener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_$nape_callbacks_ZPP_$ConstraintListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var pre = null;
			var cx_ite1 = cb.conlisteners.head;
			while(cx_ite1 != null) {
				var j = cx_ite1.elt;
				if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
					break;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this = cb.conlisteners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = this;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite2 = cb.cbsets.head;
			while(cx_ite2 != null) {
				cx_ite2.elt.zip_conlisteners = true;
				cx_ite2 = cx_ite2.next;
			}
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				cx_ite1.elt.zip_conlisteners = true;
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		var _this = this.options;
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = _this.includes.head;
				while(cx_ite != null) {
					if(cb.id < cx_ite.elt.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this1 = _this.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this1.head;
					_this1.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			} else {
				_this.includes.remove(cb);
			}
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = _this.excludes.head;
			while(cx_ite1 != null) {
				if(cb.id < cx_ite1.elt.id) {
					break;
				}
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this2 = _this.excludes;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = cb;
			var temp1 = ret1;
			if(pre1 == null) {
				temp1.next = _this2.head;
				_this2.head = temp1;
			} else {
				temp1.next = pre1.next;
				pre1.next = temp1;
			}
			_this2.pushmod = _this2.modified = true;
			_this2.length++;
		} else {
			_this.excludes.remove(cb);
		}
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$ConstraintListener
});
var zpp_$nape_util_ZNPList_$ZPP_$CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbType"] = zpp_$nape_util_ZNPList_$ZPP_$CbType;
zpp_$nape_util_ZNPList_$ZPP_$CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
zpp_$nape_util_ZNPList_$ZPP_$CbType.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			if(cx_ite.elt == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbType
};
var zpp_$nape_callbacks_ZPP_$InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
$hxClasses["zpp_nape.callbacks.ZPP_InteractionListener"] = zpp_$nape_callbacks_ZPP_$InteractionListener;
zpp_$nape_callbacks_ZPP_$InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_$nape_callbacks_ZPP_$InteractionListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$InteractionListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	with_uniquesets: function(fresh) {
		var _gthis = this;
		var set;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
			set = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
		} else {
			set = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		set.lt = zpp_$nape_callbacks_ZPP_$CbSetPair.setlt;
		var B = this.options2.includes;
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType;
		var aite = this.options1.includes.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = a;
				var temp = ret;
				temp.next = W.head;
				W.head = temp;
				W.modified = true;
				W.length++;
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = a;
				var temp1 = ret1;
				temp1.next = U.head;
				U.head = temp1;
				U.modified = true;
				U.length++;
				aite = aite.next;
			} else {
				var ret2;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret2 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = b;
				var temp2 = ret2;
				temp2.next = V.head;
				V.head = temp2;
				V.modified = true;
				V.length++;
				bite = bite.next;
			}
		}
		while(aite != null) {
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = aite.elt;
			var temp3 = ret3;
			temp3.next = U.head;
			U.head = temp3;
			U.modified = true;
			U.length++;
			aite = aite.next;
		}
		while(bite != null) {
			var ret4;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret4 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = bite.elt;
			var temp4 = ret4;
			temp4.next = V.head;
			V.head = temp4;
			V.modified = true;
			V.length++;
			bite = bite.next;
		}
		while(U.head != null) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var B1 = cx_ite.elt.cbsets;
				var U1 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V1 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W1 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite1 = x.cbsets.head;
				var bite1 = B1.head;
				while(aite1 != null && bite1 != null) {
					var a1 = aite1.elt;
					var b1 = bite1.elt;
					if(a1 == b1) {
						var ret5;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret5 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.elt = a1;
						var temp5 = ret5;
						temp5.next = W1.head;
						W1.head = temp5;
						W1.modified = true;
						W1.length++;
						aite1 = aite1.next;
						bite1 = bite1.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a1,b1)) {
						var ret6;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret6 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.elt = a1;
						var temp6 = ret6;
						temp6.next = U1.head;
						U1.head = temp6;
						U1.modified = true;
						U1.length++;
						aite1 = aite1.next;
					} else {
						var ret7;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret7 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret7.next;
							ret7.next = null;
						}
						ret7.elt = b1;
						var temp7 = ret7;
						temp7.next = V1.head;
						V1.head = temp7;
						V1.modified = true;
						V1.length++;
						bite1 = bite1.next;
					}
				}
				while(aite1 != null) {
					var ret8;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret8 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret8 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret8.next;
						ret8.next = null;
					}
					ret8.elt = aite1.elt;
					var temp8 = ret8;
					temp8.next = U1.head;
					U1.head = temp8;
					U1.modified = true;
					U1.length++;
					aite1 = aite1.next;
				}
				while(bite1 != null) {
					var ret9;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret9 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret9 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret9.next;
						ret9.next = null;
					}
					ret9.elt = bite1.elt;
					var temp9 = ret9;
					temp9.next = V1.head;
					V1.head = temp9;
					V1.modified = true;
					V1.length++;
					bite1 = bite1.next;
				}
				while(U1.head != null) {
					var x1 = U1.pop_unsafe();
					var cx_ite1 = B1.head;
					while(cx_ite1 != null) {
						var y = cx_ite1.elt;
						x1.validate();
						y.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x1,y,_gthis)) {
							var ret10;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret10 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret10 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret10.next;
								ret10.next = null;
							}
							ret10.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x1,y)) {
								ret10.a = x1;
								ret10.b = y;
							} else {
								ret10.a = y;
								ret10.b = x1;
							}
							set.try_insert(ret10);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				while(V1.head != null) {
					var x2 = V1.pop_unsafe();
					var cx_ite2 = W1.head;
					while(cx_ite2 != null) {
						var y1 = cx_ite2.elt;
						x2.validate();
						y1.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x2,y1,_gthis)) {
							var ret11;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret11 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret11 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret11.next;
								ret11.next = null;
							}
							ret11.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x2,y1)) {
								ret11.a = x2;
								ret11.b = y1;
							} else {
								ret11.a = y1;
								ret11.b = x2;
							}
							set.try_insert(ret11);
						}
						cx_ite2 = cx_ite2.next;
					}
				}
				while(W1.head != null) {
					var x3 = W1.pop_unsafe();
					x3.validate();
					x3.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,x3,_gthis)) {
						var ret12;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret12 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret12 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret12.next;
							ret12.next = null;
						}
						ret12.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,x3)) {
							ret12.a = x3;
							ret12.b = x3;
						} else {
							ret12.a = x3;
							ret12.b = x3;
						}
						set.try_insert(ret12);
					}
					var cx_ite3 = W1.head;
					while(cx_ite3 != null) {
						var y2 = cx_ite3.elt;
						x3.validate();
						y2.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,y2,_gthis)) {
							var ret13;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret13 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret13 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret13.next;
								ret13.next = null;
							}
							ret13.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,y2)) {
								ret13.a = x3;
								ret13.b = y2;
							} else {
								ret13.a = y2;
								ret13.b = x3;
							}
							set.try_insert(ret13);
						}
						cx_ite3 = cx_ite3.next;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		while(V.head != null) {
			var x4 = V.pop_unsafe();
			var cx_ite4 = W.head;
			while(cx_ite4 != null) {
				var B2 = cx_ite4.elt.cbsets;
				var U2 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V2 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W2 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite2 = x4.cbsets.head;
				var bite2 = B2.head;
				while(aite2 != null && bite2 != null) {
					var a2 = aite2.elt;
					var b2 = bite2.elt;
					if(a2 == b2) {
						var ret14;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret14 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret14 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret14.next;
							ret14.next = null;
						}
						ret14.elt = a2;
						var temp10 = ret14;
						temp10.next = W2.head;
						W2.head = temp10;
						W2.modified = true;
						W2.length++;
						aite2 = aite2.next;
						bite2 = bite2.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a2,b2)) {
						var ret15;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret15 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret15 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret15.next;
							ret15.next = null;
						}
						ret15.elt = a2;
						var temp11 = ret15;
						temp11.next = U2.head;
						U2.head = temp11;
						U2.modified = true;
						U2.length++;
						aite2 = aite2.next;
					} else {
						var ret16;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret16 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret16 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret16.next;
							ret16.next = null;
						}
						ret16.elt = b2;
						var temp12 = ret16;
						temp12.next = V2.head;
						V2.head = temp12;
						V2.modified = true;
						V2.length++;
						bite2 = bite2.next;
					}
				}
				while(aite2 != null) {
					var ret17;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret17 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret17 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret17.next;
						ret17.next = null;
					}
					ret17.elt = aite2.elt;
					var temp13 = ret17;
					temp13.next = U2.head;
					U2.head = temp13;
					U2.modified = true;
					U2.length++;
					aite2 = aite2.next;
				}
				while(bite2 != null) {
					var ret18;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret18 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret18 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret18.next;
						ret18.next = null;
					}
					ret18.elt = bite2.elt;
					var temp14 = ret18;
					temp14.next = V2.head;
					V2.head = temp14;
					V2.modified = true;
					V2.length++;
					bite2 = bite2.next;
				}
				while(U2.head != null) {
					var x5 = U2.pop_unsafe();
					var cx_ite5 = B2.head;
					while(cx_ite5 != null) {
						var y3 = cx_ite5.elt;
						x5.validate();
						y3.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x5,y3,_gthis)) {
							var ret19;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret19 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret19 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret19.next;
								ret19.next = null;
							}
							ret19.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x5,y3)) {
								ret19.a = x5;
								ret19.b = y3;
							} else {
								ret19.a = y3;
								ret19.b = x5;
							}
							set.try_insert(ret19);
						}
						cx_ite5 = cx_ite5.next;
					}
				}
				while(V2.head != null) {
					var x6 = V2.pop_unsafe();
					var cx_ite6 = W2.head;
					while(cx_ite6 != null) {
						var y4 = cx_ite6.elt;
						x6.validate();
						y4.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x6,y4,_gthis)) {
							var ret20;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret20 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret20 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret20.next;
								ret20.next = null;
							}
							ret20.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x6,y4)) {
								ret20.a = x6;
								ret20.b = y4;
							} else {
								ret20.a = y4;
								ret20.b = x6;
							}
							set.try_insert(ret20);
						}
						cx_ite6 = cx_ite6.next;
					}
				}
				while(W2.head != null) {
					var x7 = W2.pop_unsafe();
					x7.validate();
					x7.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x7,x7,_gthis)) {
						var ret21;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret21 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret21 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret21.next;
							ret21.next = null;
						}
						ret21.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x7,x7)) {
							ret21.a = x7;
							ret21.b = x7;
						} else {
							ret21.a = x7;
							ret21.b = x7;
						}
						set.try_insert(ret21);
					}
					var cx_ite7 = W2.head;
					while(cx_ite7 != null) {
						var y5 = cx_ite7.elt;
						x7.validate();
						y5.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x7,y5,_gthis)) {
							var ret22;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret22 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret22 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret22.next;
								ret22.next = null;
							}
							ret22.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x7,y5)) {
								ret22.a = x7;
								ret22.b = y5;
							} else {
								ret22.a = y5;
								ret22.b = x7;
							}
							set.try_insert(ret22);
						}
						cx_ite7 = cx_ite7.next;
					}
				}
				cx_ite4 = cx_ite4.next;
			}
		}
		while(W.head != null) {
			var x8 = W.pop_unsafe();
			var B3 = x8.cbsets;
			var U3 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
			var V3 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
			var W3 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
			var aite3 = x8.cbsets.head;
			var bite3 = B3.head;
			while(aite3 != null && bite3 != null) {
				var a3 = aite3.elt;
				var b3 = bite3.elt;
				if(a3 == b3) {
					var ret23;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret23 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret23 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret23.next;
						ret23.next = null;
					}
					ret23.elt = a3;
					var temp15 = ret23;
					temp15.next = W3.head;
					W3.head = temp15;
					W3.modified = true;
					W3.length++;
					aite3 = aite3.next;
					bite3 = bite3.next;
				} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a3,b3)) {
					var ret24;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret24 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret24 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret24.next;
						ret24.next = null;
					}
					ret24.elt = a3;
					var temp16 = ret24;
					temp16.next = U3.head;
					U3.head = temp16;
					U3.modified = true;
					U3.length++;
					aite3 = aite3.next;
				} else {
					var ret25;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret25 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret25 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret25.next;
						ret25.next = null;
					}
					ret25.elt = b3;
					var temp17 = ret25;
					temp17.next = V3.head;
					V3.head = temp17;
					V3.modified = true;
					V3.length++;
					bite3 = bite3.next;
				}
			}
			while(aite3 != null) {
				var ret26;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
					ret26 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
				} else {
					ret26 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret26.next;
					ret26.next = null;
				}
				ret26.elt = aite3.elt;
				var temp18 = ret26;
				temp18.next = U3.head;
				U3.head = temp18;
				U3.modified = true;
				U3.length++;
				aite3 = aite3.next;
			}
			while(bite3 != null) {
				var ret27;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
					ret27 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
				} else {
					ret27 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret27.next;
					ret27.next = null;
				}
				ret27.elt = bite3.elt;
				var temp19 = ret27;
				temp19.next = V3.head;
				V3.head = temp19;
				V3.modified = true;
				V3.length++;
				bite3 = bite3.next;
			}
			while(U3.head != null) {
				var x9 = U3.pop_unsafe();
				var cx_ite8 = B3.head;
				while(cx_ite8 != null) {
					var y6 = cx_ite8.elt;
					x9.validate();
					y6.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x9,y6,_gthis)) {
						var ret28;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret28 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret28 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret28.next;
							ret28.next = null;
						}
						ret28.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x9,y6)) {
							ret28.a = x9;
							ret28.b = y6;
						} else {
							ret28.a = y6;
							ret28.b = x9;
						}
						set.try_insert(ret28);
					}
					cx_ite8 = cx_ite8.next;
				}
			}
			while(V3.head != null) {
				var x10 = V3.pop_unsafe();
				var cx_ite9 = W3.head;
				while(cx_ite9 != null) {
					var y7 = cx_ite9.elt;
					x10.validate();
					y7.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x10,y7,_gthis)) {
						var ret29;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret29 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret29 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret29.next;
							ret29.next = null;
						}
						ret29.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x10,y7)) {
							ret29.a = x10;
							ret29.b = y7;
						} else {
							ret29.a = y7;
							ret29.b = x10;
						}
						set.try_insert(ret29);
					}
					cx_ite9 = cx_ite9.next;
				}
			}
			while(W3.head != null) {
				var x11 = W3.pop_unsafe();
				x11.validate();
				x11.validate();
				if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x11,x11,_gthis)) {
					var ret30;
					if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
						ret30 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
					} else {
						ret30 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret30.next;
						ret30.next = null;
					}
					ret30.zip_listeners = true;
					if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x11,x11)) {
						ret30.a = x11;
						ret30.b = x11;
					} else {
						ret30.a = x11;
						ret30.b = x11;
					}
					set.try_insert(ret30);
				}
				var cx_ite10 = W3.head;
				while(cx_ite10 != null) {
					var y8 = cx_ite10.elt;
					x11.validate();
					y8.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x11,y8,_gthis)) {
						var ret31;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret31 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret31 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret31.next;
							ret31.next = null;
						}
						ret31.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x11,y8)) {
							ret31.a = x11;
							ret31.b = y8;
						} else {
							ret31.a = y8;
							ret31.b = x11;
						}
						set.try_insert(ret31);
					}
					cx_ite10 = cx_ite10.next;
				}
			}
			var cx_ite11 = W.head;
			while(cx_ite11 != null) {
				var B4 = cx_ite11.elt.cbsets;
				var U4 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V4 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W4 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite4 = x8.cbsets.head;
				var bite4 = B4.head;
				while(aite4 != null && bite4 != null) {
					var a4 = aite4.elt;
					var b4 = bite4.elt;
					if(a4 == b4) {
						var ret32;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret32 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret32 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret32.next;
							ret32.next = null;
						}
						ret32.elt = a4;
						var temp20 = ret32;
						temp20.next = W4.head;
						W4.head = temp20;
						W4.modified = true;
						W4.length++;
						aite4 = aite4.next;
						bite4 = bite4.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a4,b4)) {
						var ret33;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret33 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret33 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret33.next;
							ret33.next = null;
						}
						ret33.elt = a4;
						var temp21 = ret33;
						temp21.next = U4.head;
						U4.head = temp21;
						U4.modified = true;
						U4.length++;
						aite4 = aite4.next;
					} else {
						var ret34;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret34 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret34 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret34.next;
							ret34.next = null;
						}
						ret34.elt = b4;
						var temp22 = ret34;
						temp22.next = V4.head;
						V4.head = temp22;
						V4.modified = true;
						V4.length++;
						bite4 = bite4.next;
					}
				}
				while(aite4 != null) {
					var ret35;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret35 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret35 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret35.next;
						ret35.next = null;
					}
					ret35.elt = aite4.elt;
					var temp23 = ret35;
					temp23.next = U4.head;
					U4.head = temp23;
					U4.modified = true;
					U4.length++;
					aite4 = aite4.next;
				}
				while(bite4 != null) {
					var ret36;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret36 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret36 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret36.next;
						ret36.next = null;
					}
					ret36.elt = bite4.elt;
					var temp24 = ret36;
					temp24.next = V4.head;
					V4.head = temp24;
					V4.modified = true;
					V4.length++;
					bite4 = bite4.next;
				}
				while(U4.head != null) {
					var x12 = U4.pop_unsafe();
					var cx_ite12 = B4.head;
					while(cx_ite12 != null) {
						var y9 = cx_ite12.elt;
						x12.validate();
						y9.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x12,y9,_gthis)) {
							var ret37;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret37 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret37 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret37.next;
								ret37.next = null;
							}
							ret37.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x12,y9)) {
								ret37.a = x12;
								ret37.b = y9;
							} else {
								ret37.a = y9;
								ret37.b = x12;
							}
							set.try_insert(ret37);
						}
						cx_ite12 = cx_ite12.next;
					}
				}
				while(V4.head != null) {
					var x13 = V4.pop_unsafe();
					var cx_ite13 = W4.head;
					while(cx_ite13 != null) {
						var y10 = cx_ite13.elt;
						x13.validate();
						y10.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x13,y10,_gthis)) {
							var ret38;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret38 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret38 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret38.next;
								ret38.next = null;
							}
							ret38.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x13,y10)) {
								ret38.a = x13;
								ret38.b = y10;
							} else {
								ret38.a = y10;
								ret38.b = x13;
							}
							set.try_insert(ret38);
						}
						cx_ite13 = cx_ite13.next;
					}
				}
				while(W4.head != null) {
					var x14 = W4.pop_unsafe();
					x14.validate();
					x14.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x14,x14,_gthis)) {
						var ret39;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret39 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret39 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret39.next;
							ret39.next = null;
						}
						ret39.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x14,x14)) {
							ret39.a = x14;
							ret39.b = x14;
						} else {
							ret39.a = x14;
							ret39.b = x14;
						}
						set.try_insert(ret39);
					}
					var cx_ite14 = W4.head;
					while(cx_ite14 != null) {
						var y11 = cx_ite14.elt;
						x14.validate();
						y11.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x14,y11,_gthis)) {
							var ret40;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret40 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret40 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret40.next;
								ret40.next = null;
							}
							ret40.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x14,y11)) {
								ret40.a = x14;
								ret40.b = y11;
							} else {
								ret40.a = y11;
								ret40.b = x14;
							}
							set.try_insert(ret40);
						}
						cx_ite14 = cx_ite14.next;
					}
				}
				cx_ite11 = cx_ite11.next;
			}
		}
		if(set.parent != null) {
			var cur = set.parent;
			while(cur != null) if(cur.prev != null) {
				cur = cur.prev;
			} else if(cur.next != null) {
				cur = cur.next;
			} else {
				var pair = cur.data;
				if(fresh) {
					_gthis.space.freshListenerType(pair.a,pair.b);
				} else {
					_gthis.space.nullListenerType(pair.a,pair.b);
				}
				pair.a = pair.b = null;
				pair.listeners.clear();
				pair.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = pair;
				var ret41 = cur.parent;
				if(ret41 != null) {
					if(cur == ret41.prev) {
						ret41.prev = null;
					} else {
						ret41.next = null;
					}
					cur.parent = null;
				}
				var o = cur;
				o.data = null;
				o.lt = null;
				o.swapped = null;
				o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o;
				cur = ret41;
			}
			set.parent = null;
		}
		var o1 = set;
		o1.data = null;
		o1.lt = null;
		o1.swapped = null;
		o1.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o1;
	}
	,addedToSpace: function() {
		var _gthis = this;
		var pre = this.type == 3;
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				var pre1 = null;
				var cx_ite = cb1.listeners.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(_gthis.precedence > j.precedence || _gthis.precedence == j.precedence && _gthis.id > j.id) {
						break;
					}
					pre1 = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this = cb1.listeners;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = _gthis;
				var temp = ret;
				if(pre1 == null) {
					temp.next = _this.head;
					_this.head = temp;
				} else {
					temp.next = pre1.next;
					pre1.next = temp;
				}
				_this.pushmod = _this.modified = true;
				_this.length++;
				var cx_ite1 = cb1.cbsets.head;
				while(cx_ite1 != null) {
					var cb = cx_ite1.elt;
					cb.zip_listeners = true;
					cb.invalidate_pairs();
					cx_ite1 = cx_ite1.next;
				}
				if(pre) {
					var cx_ite2 = cb1.interactors.head;
					while(cx_ite2 != null) {
						cx_ite2.elt.wake();
						cx_ite2 = cx_ite2.next;
					}
				}
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				var pre2 = null;
				var cx_ite3 = cb1.listeners.head;
				while(cx_ite3 != null) {
					var j1 = cx_ite3.elt;
					if(_gthis.precedence > j1.precedence || _gthis.precedence == j1.precedence && _gthis.id > j1.id) {
						break;
					}
					pre2 = cx_ite3;
					cx_ite3 = cx_ite3.next;
				}
				var _this1 = cb1.listeners;
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = _gthis;
				var temp1 = ret1;
				if(pre2 == null) {
					temp1.next = _this1.head;
					_this1.head = temp1;
				} else {
					temp1.next = pre2.next;
					pre2.next = temp1;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
				var cx_ite4 = cb1.cbsets.head;
				while(cx_ite4 != null) {
					var cb3 = cx_ite4.elt;
					cb3.zip_listeners = true;
					cb3.invalidate_pairs();
					cx_ite4 = cx_ite4.next;
				}
				if(pre) {
					var cx_ite5 = cb1.interactors.head;
					while(cx_ite5 != null) {
						cx_ite5.elt.wake();
						cx_ite5 = cx_ite5.next;
					}
				}
				ite1 = ite1.next;
			} else {
				var pre3 = null;
				var cx_ite6 = cb2.listeners.head;
				while(cx_ite6 != null) {
					var j2 = cx_ite6.elt;
					if(_gthis.precedence > j2.precedence || _gthis.precedence == j2.precedence && _gthis.id > j2.id) {
						break;
					}
					pre3 = cx_ite6;
					cx_ite6 = cx_ite6.next;
				}
				var _this2 = cb2.listeners;
				var ret2;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret2 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = _gthis;
				var temp2 = ret2;
				if(pre3 == null) {
					temp2.next = _this2.head;
					_this2.head = temp2;
				} else {
					temp2.next = pre3.next;
					pre3.next = temp2;
				}
				_this2.pushmod = _this2.modified = true;
				_this2.length++;
				var cx_ite7 = cb2.cbsets.head;
				while(cx_ite7 != null) {
					var cb4 = cx_ite7.elt;
					cb4.zip_listeners = true;
					cb4.invalidate_pairs();
					cx_ite7 = cx_ite7.next;
				}
				if(pre) {
					var cx_ite8 = cb2.interactors.head;
					while(cx_ite8 != null) {
						cx_ite8.elt.wake();
						cx_ite8 = cx_ite8.next;
					}
				}
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			var cb5 = ite1.elt;
			var pre4 = null;
			var cx_ite9 = cb5.listeners.head;
			while(cx_ite9 != null) {
				var j3 = cx_ite9.elt;
				if(_gthis.precedence > j3.precedence || _gthis.precedence == j3.precedence && _gthis.id > j3.id) {
					break;
				}
				pre4 = cx_ite9;
				cx_ite9 = cx_ite9.next;
			}
			var _this3 = cb5.listeners;
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = _gthis;
			var temp3 = ret3;
			if(pre4 == null) {
				temp3.next = _this3.head;
				_this3.head = temp3;
			} else {
				temp3.next = pre4.next;
				pre4.next = temp3;
			}
			_this3.pushmod = _this3.modified = true;
			_this3.length++;
			var cx_ite10 = cb5.cbsets.head;
			while(cx_ite10 != null) {
				var cb6 = cx_ite10.elt;
				cb6.zip_listeners = true;
				cb6.invalidate_pairs();
				cx_ite10 = cx_ite10.next;
			}
			if(pre) {
				var cx_ite11 = cb5.interactors.head;
				while(cx_ite11 != null) {
					cx_ite11.elt.wake();
					cx_ite11 = cx_ite11.next;
				}
			}
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			var cb7 = ite2.elt;
			var pre5 = null;
			var cx_ite12 = cb7.listeners.head;
			while(cx_ite12 != null) {
				var j4 = cx_ite12.elt;
				if(_gthis.precedence > j4.precedence || _gthis.precedence == j4.precedence && _gthis.id > j4.id) {
					break;
				}
				pre5 = cx_ite12;
				cx_ite12 = cx_ite12.next;
			}
			var _this4 = cb7.listeners;
			var ret4;
			if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
				ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
			} else {
				ret4 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = _gthis;
			var temp4 = ret4;
			if(pre5 == null) {
				temp4.next = _this4.head;
				_this4.head = temp4;
			} else {
				temp4.next = pre5.next;
				pre5.next = temp4;
			}
			_this4.pushmod = _this4.modified = true;
			_this4.length++;
			var cx_ite13 = cb7.cbsets.head;
			while(cx_ite13 != null) {
				var cb8 = cx_ite13.elt;
				cb8.zip_listeners = true;
				cb8.invalidate_pairs();
				cx_ite13 = cx_ite13.next;
			}
			if(pre) {
				var cx_ite14 = cb7.interactors.head;
				while(cx_ite14 != null) {
					cx_ite14.elt.wake();
					cx_ite14 = cx_ite14.next;
				}
			}
			ite2 = ite2.next;
		}
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _gthis = this;
		this.with_uniquesets(false);
		var pre = this.type == 3;
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				cb1.listeners.remove(_gthis);
				var cx_ite = cb1.cbsets.head;
				while(cx_ite != null) {
					var cb = cx_ite.elt;
					cb.zip_listeners = true;
					cb.invalidate_pairs();
					cx_ite = cx_ite.next;
				}
				if(pre) {
					var cx_ite1 = cb1.interactors.head;
					while(cx_ite1 != null) {
						cx_ite1.elt.wake();
						cx_ite1 = cx_ite1.next;
					}
				}
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				cb1.listeners.remove(_gthis);
				var cx_ite2 = cb1.cbsets.head;
				while(cx_ite2 != null) {
					var cb3 = cx_ite2.elt;
					cb3.zip_listeners = true;
					cb3.invalidate_pairs();
					cx_ite2 = cx_ite2.next;
				}
				if(pre) {
					var cx_ite3 = cb1.interactors.head;
					while(cx_ite3 != null) {
						cx_ite3.elt.wake();
						cx_ite3 = cx_ite3.next;
					}
				}
				ite1 = ite1.next;
			} else {
				cb2.listeners.remove(_gthis);
				var cx_ite4 = cb2.cbsets.head;
				while(cx_ite4 != null) {
					var cb4 = cx_ite4.elt;
					cb4.zip_listeners = true;
					cb4.invalidate_pairs();
					cx_ite4 = cx_ite4.next;
				}
				if(pre) {
					var cx_ite5 = cb2.interactors.head;
					while(cx_ite5 != null) {
						cx_ite5.elt.wake();
						cx_ite5 = cx_ite5.next;
					}
				}
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			var cb5 = ite1.elt;
			cb5.listeners.remove(_gthis);
			var cx_ite6 = cb5.cbsets.head;
			while(cx_ite6 != null) {
				var cb6 = cx_ite6.elt;
				cb6.zip_listeners = true;
				cb6.invalidate_pairs();
				cx_ite6 = cx_ite6.next;
			}
			if(pre) {
				var cx_ite7 = cb5.interactors.head;
				while(cx_ite7 != null) {
					cx_ite7.elt.wake();
					cx_ite7 = cx_ite7.next;
				}
			}
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			var cb7 = ite2.elt;
			cb7.listeners.remove(_gthis);
			var cx_ite8 = cb7.cbsets.head;
			while(cx_ite8 != null) {
				var cb8 = cx_ite8.elt;
				cb8.zip_listeners = true;
				cb8.invalidate_pairs();
				cx_ite8 = cx_ite8.next;
			}
			if(pre) {
				var cx_ite9 = cb7.interactors.head;
				while(cx_ite9 != null) {
					cx_ite9.elt.wake();
					cx_ite9 = cx_ite9.next;
				}
			}
			ite2 = ite2.next;
		}
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		this.removedFromSpace();
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = options.includes.head;
				while(cx_ite != null) {
					if(cb.id < cx_ite.elt.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this = options.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this.head;
					_this.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this.pushmod = _this.modified = true;
				_this.length++;
			} else {
				options.includes.remove(cb);
			}
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = options.excludes.head;
			while(cx_ite1 != null) {
				if(cb.id < cx_ite1.elt.id) {
					break;
				}
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this1 = options.excludes;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = cb;
			var temp1 = ret1;
			if(pre1 == null) {
				temp1.next = _this1.head;
				_this1.head = temp1;
			} else {
				temp1.next = pre1.next;
				pre1.next = temp1;
			}
			_this1.pushmod = _this1.modified = true;
			_this1.length++;
		} else {
			options.excludes.remove(cb);
		}
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$InteractionListener
});
var zpp_$nape_callbacks_ZPP_$OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.excludes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.callbacks.ZPP_OptionType"] = zpp_$nape_callbacks_ZPP_$OptionType;
zpp_$nape_callbacks_ZPP_$OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
zpp_$nape_callbacks_ZPP_$OptionType.argument = function(val) {
	if(val == null) {
		return new nape_callbacks_OptionType();
	} else if(js_Boot.__instanceof(val,nape_callbacks_OptionType)) {
		return val;
	} else {
		return new nape_callbacks_OptionType().including(val);
	}
};
zpp_$nape_callbacks_ZPP_$OptionType.prototype = {
	setup_includes: function() {
		this.wrap_includes = zpp_$nape_util_ZPP_$CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_$nape_util_ZPP_$CbTypeList.get(this.excludes,true);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) {
				eite = eite.next;
			} else {
				xite = xite.next;
			}
		}
		return ret;
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) {
						this.handler(val,true,true);
					} else {
						var pre = null;
						var cx_ite = this.includes.head;
						while(cx_ite != null) {
							if(val.id < cx_ite.elt.id) {
								break;
							}
							pre = cx_ite;
							cx_ite = cx_ite.next;
						}
						var _this = this.includes;
						var ret;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
							ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
						} else {
							ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = val;
						var temp = ret;
						if(pre == null) {
							temp.next = _this.head;
							_this.head = temp;
						} else {
							temp.next = pre.next;
							pre.next = temp;
						}
						_this.pushmod = _this.modified = true;
						_this.length++;
					}
				} else if(this.handler != null) {
					this.handler(val,false,false);
				} else {
					this.excludes.remove(val);
				}
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) {
					this.handler(val,false,true);
				} else {
					var pre1 = null;
					var cx_ite1 = this.excludes.head;
					while(cx_ite1 != null) {
						if(val.id < cx_ite1.elt.id) {
							break;
						}
						pre1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
					}
					var _this1 = this.excludes;
					var ret1;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
						ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
					} else {
						ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
						ret1.next = null;
					}
					ret1.elt = val;
					var temp1 = ret1;
					if(pre1 == null) {
						temp1.next = _this1.head;
						_this1.head = temp1;
					} else {
						temp1.next = pre1.next;
						pre1.next = temp1;
					}
					_this1.pushmod = _this1.modified = true;
					_this1.length++;
				}
			} else if(this.handler != null) {
				this.handler(val,true,false);
			} else {
				this.includes.remove(val);
			}
		}
	}
	,append: function(list,val) {
		if(js_Boot.__instanceof(val,nape_callbacks_CbType)) {
			this.append_type(list,val.zpp_inner);
		} else if(js_Boot.__instanceof(val,nape_callbacks_CbTypeList)) {
			var cbs = val;
			cbs.zpp_inner.valmod();
			var _g = nape_callbacks_CbTypeIterator.get(cbs);
			while(true) {
				_g.zpp_inner.zpp_inner.valmod();
				var _this = _g.zpp_inner;
				_this.zpp_inner.valmod();
				if(_this.zpp_inner.zip_length) {
					_this.zpp_inner.zip_length = false;
					_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
				}
				_g.zpp_critical = true;
				var tmp;
				if(_g.zpp_i < _this.zpp_inner.user_length) {
					tmp = true;
				} else {
					_g.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
					nape_callbacks_CbTypeIterator.zpp_pool = _g;
					_g.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g.zpp_critical = false;
				this.append_type(list,_g.zpp_inner.at(_g.zpp_i++).zpp_inner);
			}
		} else if((val instanceof Array) && val.__enum__ == null) {
			var cbs1 = val;
			var _g1 = 0;
			while(_g1 < cbs1.length) {
				var cb = cbs1[_g1];
				++_g1;
				this.append_type(list,cb.zpp_inner);
			}
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$OptionType
};
var zpp_$nape_constraint_ZPP_$Constraint = function() {
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.outer = null;
};
$hxClasses["zpp_nape.constraint.ZPP_Constraint"] = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_$nape_constraint_ZPP_$Constraint.prototype = {
	alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.listeners.clear();
				o.zip_listeners = true;
				o.bodylisteners.clear();
				o.zip_bodylisteners = true;
				o.conlisteners.clear();
				o.zip_conlisteners = true;
				while(o.cbTypes.head != null) o.cbTypes.pop_unsafe().cbsets.remove(o);
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,addedToSpace: function() {
		if(this.active) {
			this.activeInSpace();
		}
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			cx_ite.elt.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) {
			this.inactiveOrOutSpace();
		}
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			cx_ite.elt.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$Constraint
};
var zpp_$nape_dynamics_ZPP_$Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.outer = null;
};
$hxClasses["zpp_nape.dynamics.ZPP_Arbiter"] = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_$nape_dynamics_ZPP_$Arbiter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = true;
			if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				this.colarb.outer_zn = new nape_dynamics_CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape_dynamics_FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else {
				this.outer = new nape_dynamics_Arbiter();
			}
			this.outer.zpp_inner = this;
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
		}
		return this.outer;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Arbiter
};
var zpp_$nape_dynamics_ZPP_$SensorArbiter = function() {
	this.next = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	this.sensorarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_SensorArbiter"] = zpp_$nape_dynamics_ZPP_$SensorArbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_$nape_dynamics_ZPP_$SensorArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$SensorArbiter
});
var zpp_$nape_dynamics_ZPP_$FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_FluidArbiter"] = zpp_$nape_dynamics_ZPP_$FluidArbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_$nape_dynamics_ZPP_$FluidArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$FluidArbiter
});
var zpp_$nape_dynamics_ZPP_$ColArbiter = function() {
	this.pre_dt = 0.0;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_$nape_dynamics_ZPP_$Contact();
	this.innards = new zpp_$nape_dynamics_ZPP_$IContact();
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	this.colarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_ColArbiter"] = zpp_$nape_dynamics_ZPP_$ColArbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_$nape_dynamics_ZPP_$ColArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$ColArbiter
});
var zpp_$nape_dynamics_ZPP_$Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$IContact();
};
$hxClasses["zpp_nape.dynamics.ZPP_Contact"] = zpp_$nape_dynamics_ZPP_$Contact;
zpp_$nape_dynamics_ZPP_$Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_$nape_dynamics_ZPP_$Contact.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Contact.internal = true;
			this.outer = new nape_dynamics_Contact();
			zpp_$nape_dynamics_ZPP_$Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Contact
};
var zpp_$nape_dynamics_ZPP_$IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_IContact"] = zpp_$nape_dynamics_ZPP_$IContact;
zpp_$nape_dynamics_ZPP_$IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_$nape_dynamics_ZPP_$IContact.prototype = {
	add: function(o) {
		o._inuse = true;
		o.next = this.next;
		this.next = o;
		this.modified = true;
		this.length++;
		return o;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$IContact
};
var zpp_$nape_dynamics_ZPP_$InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionFilter"] = zpp_$nape_dynamics_ZPP_$InteractionFilter;
zpp_$nape_dynamics_ZPP_$InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_$nape_dynamics_ZPP_$InteractionFilter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_dynamics_InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			cx_ite.elt.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionFilter
};
var zpp_$nape_dynamics_ZPP_$InteractionGroup = function() {
	this.depth = 0;
	this.interactors = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionGroup"] = zpp_$nape_dynamics_ZPP_$InteractionGroup;
zpp_$nape_dynamics_ZPP_$InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
zpp_$nape_dynamics_ZPP_$InteractionGroup.prototype = {
	__class__: zpp_$nape_dynamics_ZPP_$InteractionGroup
};
var zpp_$nape_geom_ZPP_$AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_AABB"] = zpp_$nape_geom_ZPP_$AABB;
zpp_$nape_geom_ZPP_$AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_$nape_geom_ZPP_$AABB.prototype = {
	toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$AABB
};
var zpp_$nape_util_ZNPList_$ZPP_$Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Vec2"] = zpp_$nape_util_ZNPList_$ZPP_$Vec2;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_$nape_util_ZNPList_$ZPP_$Vec2.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Collide = function() { };
$hxClasses["zpp_nape.geom.ZPP_Collide"] = zpp_$nape_geom_ZPP_$Collide;
zpp_$nape_geom_ZPP_$Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_$nape_geom_ZPP_$Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var max = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(min - ax.gprojection <= max) {
						break;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(min1 - ax1.gprojection <= max) {
							break;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) {
					return false;
				} else {
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape_Config.epsilon) {
						c0x += dvx * t;
						c0y += dvy * t;
					}
					var t1 = (-ax2.tp0 - d1) * den;
					if(t1 < -nape_Config.epsilon) {
						c1x += dvx * t1;
						c1y += dvy * t1;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t2 = scale;
					nx = ax2.gnormx * t2;
					ny = ax2.gnormy * t2;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					arb.ptype = arb.rev ? 1 : 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) {
						return false;
					} else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var px = c0x - ax2.gnormx * c0d * 0.5;
						var py = c0y - ax2.gnormy * c0d * 0.5;
						var hash = arb.rev ? 1 : 0;
						var c = null;
						var cx_ite5 = arb.contacts.next;
						while(cx_ite5 != null) {
							var cur = cx_ite5;
							if(hash == cur.hash) {
								c = cur;
								break;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = hash;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px;
						c.py = py;
						arb.nx = nx;
						arb.ny = ny;
						c.dist = c0d;
						c.stamp = arb.stamp;
						c.posOnly = c0d > 0;
						var con = c;
						c0x -= q2.body.posx;
						c0y -= q2.body.posy;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						var px1 = c1x - ax2.gnormx * c1d * 0.5;
						var py1 = c1y - ax2.gnormy * c1d * 0.5;
						var hash1 = arb.rev ? 0 : 1;
						var c1 = null;
						var cx_ite6 = arb.contacts.next;
						while(cx_ite6 != null) {
							var cur1 = cx_ite6;
							if(hash1 == cur1.hash) {
								c1 = cur1;
								break;
							}
							cx_ite6 = cx_ite6.next;
						}
						if(c1 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c1 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c1 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c1.next;
								c1.next = null;
							}
							var ci1 = c1.inner;
							ci1.jnAcc = ci1.jtAcc = 0;
							c1.hash = hash1;
							c1.fresh = true;
							c1.arbiter = arb;
							arb.jrAcc = 0;
							var _this1 = arb.contacts;
							c1._inuse = true;
							var temp1 = c1;
							temp1.next = _this1.next;
							_this1.next = temp1;
							_this1.modified = true;
							_this1.length++;
							arb.innards.add(ci1);
						} else {
							c1.fresh = false;
						}
						c1.px = px1;
						c1.py = py1;
						arb.nx = nx;
						arb.ny = ny;
						c1.dist = c1d;
						c1.stamp = arb.stamp;
						c1.posOnly = c1d > 0;
						con = c1;
						c1x -= q2.body.posx;
						c1y -= q2.body.posy;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else {
				return false;
			}
		} else {
			var max1 = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite7 = s2.polygon.edges.head;
			while(cx_ite7 != null) {
				var a = cx_ite7.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite7 = cx_ite7.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11 = vi.next == null ? s2.polygon.gverts.next : vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = v0.x - s1.circle.worldCOMx;
					py2 = v0.y - s1.circle.worldCOMy;
					var distSqr = px2 * px2 + py2 * py2;
					var co;
					if(distSqr > minDist * minDist) {
						co = null;
					} else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) {
						var px3 = s1.circle.worldCOMx;
						var py3 = s1.circle.worldCOMy;
						var c2 = null;
						var cx_ite8 = arb.contacts.next;
						while(cx_ite8 != null) {
							var cur2 = cx_ite8;
							if(0 == cur2.hash) {
								c2 = cur2;
								break;
							}
							cx_ite8 = cx_ite8.next;
						}
						if(c2 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c2 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c2 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c2.next;
								c2.next = null;
							}
							var ci2 = c2.inner;
							ci2.jnAcc = ci2.jtAcc = 0;
							c2.hash = 0;
							c2.fresh = true;
							c2.arbiter = arb;
							arb.jrAcc = 0;
							var _this2 = arb.contacts;
							c2._inuse = true;
							var temp2 = c2;
							temp2.next = _this2.next;
							_this2.next = temp2;
							_this2.modified = true;
							_this2.length++;
							arb.innards.add(ci2);
						} else {
							c2.fresh = false;
						}
						c2.px = px3;
						c2.py = py3;
						arb.nx = 1;
						arb.ny = 0;
						c2.dist = -minDist;
						c2.stamp = arb.stamp;
						c2.posOnly = false;
						co = c2;
					} else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1 = invDist < nape_Config.epsilon ? 1e100 : 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) {
							var px4 = s1.circle.worldCOMx + px2 * df;
							var py4 = s1.circle.worldCOMy + py2 * df;
							var c3 = null;
							var cx_ite9 = arb.contacts.next;
							while(cx_ite9 != null) {
								var cur3 = cx_ite9;
								if(0 == cur3.hash) {
									c3 = cur3;
									break;
								}
								cx_ite9 = cx_ite9.next;
							}
							if(c3 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c3 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c3 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c3.next;
									c3.next = null;
								}
								var ci3 = c3.inner;
								ci3.jnAcc = ci3.jtAcc = 0;
								c3.hash = 0;
								c3.fresh = true;
								c3.arbiter = arb;
								arb.jrAcc = 0;
								var _this3 = arb.contacts;
								c3._inuse = true;
								var temp3 = c3;
								temp3.next = _this3.next;
								_this3.next = temp3;
								_this3.modified = true;
								_this3.length++;
								arb.innards.add(ci3);
							} else {
								c3.fresh = false;
							}
							c3.px = px4;
							c3.py = py4;
							arb.nx = -px2 * invDist;
							arb.ny = -py2 * invDist;
							c3.dist = dist1 - minDist;
							c3.stamp = arb.stamp;
							c3.posOnly = false;
							co = c3;
						} else {
							var px5 = s1.circle.worldCOMx + px2 * df;
							var py5 = s1.circle.worldCOMy + py2 * df;
							var c4 = null;
							var cx_ite10 = arb.contacts.next;
							while(cx_ite10 != null) {
								var cur4 = cx_ite10;
								if(0 == cur4.hash) {
									c4 = cur4;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(c4 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c4 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c4 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c4.next;
									c4.next = null;
								}
								var ci4 = c4.inner;
								ci4.jnAcc = ci4.jtAcc = 0;
								c4.hash = 0;
								c4.fresh = true;
								c4.arbiter = arb;
								arb.jrAcc = 0;
								var _this4 = arb.contacts;
								c4._inuse = true;
								var temp4 = c4;
								temp4.next = _this4.next;
								_this4.next = temp4;
								_this4.modified = true;
								_this4.length++;
								arb.innards.add(ci4);
							} else {
								c4.fresh = false;
							}
							c4.px = px5;
							c4.py = py5;
							arb.nx = px2 * invDist;
							arb.ny = py2 * invDist;
							c4.dist = dist1 - minDist;
							c4.stamp = arb.stamp;
							c4.posOnly = false;
							co = c4;
						}
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px6 = 0.0;
					var py6 = 0.0;
					px6 = v11.x - s1.circle.worldCOMx;
					py6 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px6 * px6 + py6 * py6;
					var co1;
					if(distSqr1 > minDist1 * minDist1) {
						co1 = null;
					} else if(distSqr1 < nape_Config.epsilon * nape_Config.epsilon) {
						var px7 = s1.circle.worldCOMx;
						var py7 = s1.circle.worldCOMy;
						var c5 = null;
						var cx_ite11 = arb.contacts.next;
						while(cx_ite11 != null) {
							var cur5 = cx_ite11;
							if(0 == cur5.hash) {
								c5 = cur5;
								break;
							}
							cx_ite11 = cx_ite11.next;
						}
						if(c5 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c5 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c5 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c5.next;
								c5.next = null;
							}
							var ci5 = c5.inner;
							ci5.jnAcc = ci5.jtAcc = 0;
							c5.hash = 0;
							c5.fresh = true;
							c5.arbiter = arb;
							arb.jrAcc = 0;
							var _this5 = arb.contacts;
							c5._inuse = true;
							var temp5 = c5;
							temp5.next = _this5.next;
							_this5.next = temp5;
							_this5.modified = true;
							_this5.length++;
							arb.innards.add(ci5);
						} else {
							c5.fresh = false;
						}
						c5.px = px7;
						c5.py = py7;
						arb.nx = 1;
						arb.ny = 0;
						c5.dist = -minDist1;
						c5.stamp = arb.stamp;
						c5.posOnly = false;
						co1 = c5;
					} else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2 = invDist1 < nape_Config.epsilon ? 1e100 : 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) {
							var px8 = s1.circle.worldCOMx + px6 * df1;
							var py8 = s1.circle.worldCOMy + py6 * df1;
							var c6 = null;
							var cx_ite12 = arb.contacts.next;
							while(cx_ite12 != null) {
								var cur6 = cx_ite12;
								if(0 == cur6.hash) {
									c6 = cur6;
									break;
								}
								cx_ite12 = cx_ite12.next;
							}
							if(c6 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c6 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c6 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c6.next;
									c6.next = null;
								}
								var ci6 = c6.inner;
								ci6.jnAcc = ci6.jtAcc = 0;
								c6.hash = 0;
								c6.fresh = true;
								c6.arbiter = arb;
								arb.jrAcc = 0;
								var _this6 = arb.contacts;
								c6._inuse = true;
								var temp6 = c6;
								temp6.next = _this6.next;
								_this6.next = temp6;
								_this6.modified = true;
								_this6.length++;
								arb.innards.add(ci6);
							} else {
								c6.fresh = false;
							}
							c6.px = px8;
							c6.py = py8;
							arb.nx = -px6 * invDist1;
							arb.ny = -py6 * invDist1;
							c6.dist = dist2 - minDist1;
							c6.stamp = arb.stamp;
							c6.posOnly = false;
							co1 = c6;
						} else {
							var px9 = s1.circle.worldCOMx + px6 * df1;
							var py9 = s1.circle.worldCOMy + py6 * df1;
							var c7 = null;
							var cx_ite13 = arb.contacts.next;
							while(cx_ite13 != null) {
								var cur7 = cx_ite13;
								if(0 == cur7.hash) {
									c7 = cur7;
									break;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(c7 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c7 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c7 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c7.next;
									c7.next = null;
								}
								var ci7 = c7.inner;
								ci7.jnAcc = ci7.jtAcc = 0;
								c7.hash = 0;
								c7.fresh = true;
								c7.arbiter = arb;
								arb.jrAcc = 0;
								var _this7 = arb.contacts;
								c7._inuse = true;
								var temp7 = c7;
								temp7.next = _this7.next;
								_this7.next = temp7;
								_this7.modified = true;
								_this7.length++;
								arb.innards.add(ci7);
							} else {
								c7.fresh = false;
							}
							c7.px = px9;
							c7.py = py9;
							arb.nx = px6 * invDist1;
							arb.ny = py6 * invDist1;
							c7.dist = dist2 - minDist1;
							c7.stamp = arb.stamp;
							c7.posOnly = false;
							co1 = c7;
						}
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t3 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t3;
					ny1 = a0.gnormy * t3;
					var px10 = 0.0;
					var py10 = 0.0;
					px10 = s1.circle.worldCOMx - nx1;
					py10 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) {
						var nx2 = a0.gnormx;
						var ny2 = a0.gnormy;
						var c8 = null;
						var cx_ite14 = arb.contacts.next;
						while(cx_ite14 != null) {
							var cur8 = cx_ite14;
							if(0 == cur8.hash) {
								c8 = cur8;
								break;
							}
							cx_ite14 = cx_ite14.next;
						}
						if(c8 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c8 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c8 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c8.next;
								c8.next = null;
							}
							var ci8 = c8.inner;
							ci8.jnAcc = ci8.jtAcc = 0;
							c8.hash = 0;
							c8.fresh = true;
							c8.arbiter = arb;
							arb.jrAcc = 0;
							var _this8 = arb.contacts;
							c8._inuse = true;
							var temp8 = c8;
							temp8.next = _this8.next;
							_this8.next = temp8;
							_this8.modified = true;
							_this8.length++;
							arb.innards.add(ci8);
						} else {
							c8.fresh = false;
						}
						c8.px = px10;
						c8.py = py10;
						arb.nx = nx2;
						arb.ny = ny2;
						c8.dist = max1;
						c8.stamp = arb.stamp;
						c8.posOnly = false;
						con3 = c8;
					} else {
						var nx3 = -a0.gnormx;
						var ny3 = -a0.gnormy;
						var c9 = null;
						var cx_ite15 = arb.contacts.next;
						while(cx_ite15 != null) {
							var cur9 = cx_ite15;
							if(0 == cur9.hash) {
								c9 = cur9;
								break;
							}
							cx_ite15 = cx_ite15.next;
						}
						if(c9 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c9 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c9 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c9.next;
								c9.next = null;
							}
							var ci9 = c9.inner;
							ci9.jnAcc = ci9.jtAcc = 0;
							c9.hash = 0;
							c9.fresh = true;
							c9.arbiter = arb;
							arb.jrAcc = 0;
							var _this9 = arb.contacts;
							c9._inuse = true;
							var temp9 = c9;
							temp9.next = _this9.next;
							_this9.next = temp9;
							_this9.modified = true;
							_this9.length++;
							arb.innards.add(ci9);
						} else {
							c9.fresh = false;
						}
						c9.px = px10;
						c9.py = py10;
						arb.nx = nx3;
						arb.ny = ny3;
						c9.dist = max1;
						c9.stamp = arb.stamp;
						c9.posOnly = false;
						con3 = c9;
					}
					arb.ptype = rev ? 0 : 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px11 = 0.0;
		var py11 = 0.0;
		px11 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py11 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px11 * px11 + py11 * py11;
		var co2;
		if(distSqr2 > minDist2 * minDist2) {
			co2 = null;
		} else if(distSqr2 < nape_Config.epsilon * nape_Config.epsilon) {
			var px12 = s1.circle.worldCOMx;
			var py12 = s1.circle.worldCOMy;
			var c10 = null;
			var cx_ite16 = arb.contacts.next;
			while(cx_ite16 != null) {
				var cur10 = cx_ite16;
				if(0 == cur10.hash) {
					c10 = cur10;
					break;
				}
				cx_ite16 = cx_ite16.next;
			}
			if(c10 == null) {
				if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
					c10 = new zpp_$nape_dynamics_ZPP_$Contact();
				} else {
					c10 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c10.next;
					c10.next = null;
				}
				var ci10 = c10.inner;
				ci10.jnAcc = ci10.jtAcc = 0;
				c10.hash = 0;
				c10.fresh = true;
				c10.arbiter = arb;
				arb.jrAcc = 0;
				var _this10 = arb.contacts;
				c10._inuse = true;
				var temp10 = c10;
				temp10.next = _this10.next;
				_this10.next = temp10;
				_this10.modified = true;
				_this10.length++;
				arb.innards.add(ci10);
			} else {
				c10.fresh = false;
			}
			c10.px = px12;
			c10.py = py12;
			arb.nx = 1;
			arb.ny = 0;
			c10.dist = -minDist2;
			c10.stamp = arb.stamp;
			c10.posOnly = false;
			co2 = c10;
		} else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3 = invDist2 < nape_Config.epsilon ? 1e100 : 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) {
				var px13 = s1.circle.worldCOMx + px11 * df2;
				var py13 = s1.circle.worldCOMy + py11 * df2;
				var c11 = null;
				var cx_ite17 = arb.contacts.next;
				while(cx_ite17 != null) {
					var cur11 = cx_ite17;
					if(0 == cur11.hash) {
						c11 = cur11;
						break;
					}
					cx_ite17 = cx_ite17.next;
				}
				if(c11 == null) {
					if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
						c11 = new zpp_$nape_dynamics_ZPP_$Contact();
					} else {
						c11 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
						zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c11.next;
						c11.next = null;
					}
					var ci11 = c11.inner;
					ci11.jnAcc = ci11.jtAcc = 0;
					c11.hash = 0;
					c11.fresh = true;
					c11.arbiter = arb;
					arb.jrAcc = 0;
					var _this11 = arb.contacts;
					c11._inuse = true;
					var temp11 = c11;
					temp11.next = _this11.next;
					_this11.next = temp11;
					_this11.modified = true;
					_this11.length++;
					arb.innards.add(ci11);
				} else {
					c11.fresh = false;
				}
				c11.px = px13;
				c11.py = py13;
				arb.nx = -px11 * invDist2;
				arb.ny = -py11 * invDist2;
				c11.dist = dist3 - minDist2;
				c11.stamp = arb.stamp;
				c11.posOnly = false;
				co2 = c11;
			} else {
				var px14 = s1.circle.worldCOMx + px11 * df2;
				var py14 = s1.circle.worldCOMy + py11 * df2;
				var c12 = null;
				var cx_ite18 = arb.contacts.next;
				while(cx_ite18 != null) {
					var cur12 = cx_ite18;
					if(0 == cur12.hash) {
						c12 = cur12;
						break;
					}
					cx_ite18 = cx_ite18.next;
				}
				if(c12 == null) {
					if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
						c12 = new zpp_$nape_dynamics_ZPP_$Contact();
					} else {
						c12 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
						zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c12.next;
						c12.next = null;
					}
					var ci12 = c12.inner;
					ci12.jnAcc = ci12.jtAcc = 0;
					c12.hash = 0;
					c12.fresh = true;
					c12.arbiter = arb;
					arb.jrAcc = 0;
					var _this12 = arb.contacts;
					c12._inuse = true;
					var temp12 = c12;
					temp12.next = _this12.next;
					_this12.next = temp12;
					_this12.modified = true;
					_this12.length++;
					arb.innards.add(ci12);
				} else {
					c12.fresh = false;
				}
				c12.px = px14;
				c12.py = py14;
				arb.nx = px11 * invDist2;
				arb.ny = py11 * invDist2;
				c12.dist = dist3 - minDist2;
				c12.stamp = arb.stamp;
				c12.posOnly = false;
				co2 = c12;
			}
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else {
			return false;
		}
	}
};
zpp_$nape_geom_ZPP_$Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == 0) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_$nape_geom_ZPP_$Collide.testCollide(s1,s2);
};
zpp_$nape_geom_ZPP_$Collide.testCollide = function(s1,s2) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite2 = cx_ite2.next;
				}
				return cont;
			} else {
				return false;
			}
		} else {
			var a0 = null;
			var vi = null;
			var cont1 = true;
			var max = -1e+100;
			var vite = s2.polygon.gverts.next;
			var cx_ite4 = s2.polygon.edges.head;
			while(cx_ite4 != null) {
				var a = cx_ite4.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite4 = cx_ite4.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11 = vi.next == null ? s2.polygon.gverts.next : vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					return px * px + py * py <= minDist * minDist;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					return px1 * px1 + py1 * py1 <= minDist1 * minDist1;
				} else {
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		return px2 * px2 + py2 * py2 <= minDist2 * minDist2;
	}
};
zpp_$nape_geom_ZPP_$Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var out1 = [];
			var out2 = [];
			var cont = true;
			var total = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var ind = 0;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(k >= ax.gprojection + nape_Config.epsilon) {
						out2[ind] = true;
						total = false;
					}
					++ind;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(total) {
				var _this = s2.polygon;
				if(_this.zip_worldCOM) {
					if(_this.body != null) {
						_this.zip_worldCOM = false;
						if(_this.zip_localCOM) {
							_this.zip_localCOM = false;
							if(_this.type == 1) {
								var _this1 = _this.polygon;
								if(_this1.lverts.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
								} else if(_this1.lverts.next.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
									_this1.localCOMx += _this1.lverts.next.next.x;
									_this1.localCOMy += _this1.lverts.next.next.y;
									_this1.localCOMx *= 0.5;
									_this1.localCOMy *= 0.5;
								} else {
									_this1.localCOMx = 0;
									_this1.localCOMy = 0;
									var area = 0.0;
									var cx_ite2 = _this1.lverts.next;
									var u = cx_ite2;
									cx_ite2 = cx_ite2.next;
									var v1 = cx_ite2;
									cx_ite2 = cx_ite2.next;
									while(cx_ite2 != null) {
										var w = cx_ite2;
										area += v1.x * (w.y - u.y);
										var cf = w.y * v1.x - w.x * v1.y;
										_this1.localCOMx += (v1.x + w.x) * cf;
										_this1.localCOMy += (v1.y + w.y) * cf;
										u = v1;
										v1 = w;
										cx_ite2 = cx_ite2.next;
									}
									cx_ite2 = _this1.lverts.next;
									var w1 = cx_ite2;
									area += v1.x * (w1.y - u.y);
									var cf1 = w1.y * v1.x - w1.x * v1.y;
									_this1.localCOMx += (v1.x + w1.x) * cf1;
									_this1.localCOMy += (v1.y + w1.y) * cf1;
									u = v1;
									cx_ite2 = cx_ite2.next;
									var w2 = cx_ite2;
									area += w1.x * (w2.y - u.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this1.localCOMx += (w1.x + w2.x) * cf2;
									_this1.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this1.localCOMx *= t;
									_this1.localCOMy *= t;
								}
							}
							if(_this.wrap_localCOM != null) {
								_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
								_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
							}
						}
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
						_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
					}
				}
				arb.overlap = s2.polygon.area;
				arb.centroidx = s2.polygon.worldCOMx;
				arb.centroidy = s2.polygon.worldCOMy;
				return true;
			} else if(cont) {
				total = true;
				var cx_ite3 = s2.polygon.edges.head;
				while(cx_ite3 != null) {
					var ax1 = cx_ite3.elt;
					var min1 = 1e100;
					var ind1 = 0;
					var cx_ite4 = s1.polygon.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = ax1.gnormx * v2.x + ax1.gnormy * v2.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(k1 >= ax1.gprojection + nape_Config.epsilon) {
							out1[ind1] = true;
							total = false;
						}
						++ind1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(total) {
					var _this3 = s1.polygon;
					if(_this3.zip_worldCOM) {
						if(_this3.body != null) {
							_this3.zip_worldCOM = false;
							if(_this3.zip_localCOM) {
								_this3.zip_localCOM = false;
								if(_this3.type == 1) {
									var _this4 = _this3.polygon;
									if(_this4.lverts.next.next == null) {
										_this4.localCOMx = _this4.lverts.next.x;
										_this4.localCOMy = _this4.lverts.next.y;
									} else if(_this4.lverts.next.next.next == null) {
										_this4.localCOMx = _this4.lverts.next.x;
										_this4.localCOMy = _this4.lverts.next.y;
										_this4.localCOMx += _this4.lverts.next.next.x;
										_this4.localCOMy += _this4.lverts.next.next.y;
										_this4.localCOMx *= 0.5;
										_this4.localCOMy *= 0.5;
									} else {
										_this4.localCOMx = 0;
										_this4.localCOMy = 0;
										var area1 = 0.0;
										var cx_ite5 = _this4.lverts.next;
										var u1 = cx_ite5;
										cx_ite5 = cx_ite5.next;
										var v3 = cx_ite5;
										cx_ite5 = cx_ite5.next;
										while(cx_ite5 != null) {
											var w3 = cx_ite5;
											area1 += v3.x * (w3.y - u1.y);
											var cf3 = w3.y * v3.x - w3.x * v3.y;
											_this4.localCOMx += (v3.x + w3.x) * cf3;
											_this4.localCOMy += (v3.y + w3.y) * cf3;
											u1 = v3;
											v3 = w3;
											cx_ite5 = cx_ite5.next;
										}
										cx_ite5 = _this4.lverts.next;
										var w4 = cx_ite5;
										area1 += v3.x * (w4.y - u1.y);
										var cf4 = w4.y * v3.x - w4.x * v3.y;
										_this4.localCOMx += (v3.x + w4.x) * cf4;
										_this4.localCOMy += (v3.y + w4.y) * cf4;
										u1 = v3;
										cx_ite5 = cx_ite5.next;
										var w5 = cx_ite5;
										area1 += w4.x * (w5.y - u1.y);
										var cf5 = w5.y * w4.x - w5.x * w4.y;
										_this4.localCOMx += (w4.x + w5.x) * cf5;
										_this4.localCOMy += (w4.y + w5.y) * cf5;
										area1 = 1 / (3 * area1);
										var t1 = area1;
										_this4.localCOMx *= t1;
										_this4.localCOMy *= t1;
									}
								}
								if(_this3.wrap_localCOM != null) {
									_this3.wrap_localCOM.zpp_inner.x = _this3.localCOMx;
									_this3.wrap_localCOM.zpp_inner.y = _this3.localCOMy;
								}
							}
							var _this5 = _this3.body;
							if(_this5.zip_axis) {
								_this5.zip_axis = false;
								_this5.axisx = Math.sin(_this5.rot);
								_this5.axisy = Math.cos(_this5.rot);
							}
							_this3.worldCOMx = _this3.body.posx + (_this3.body.axisy * _this3.localCOMx - _this3.body.axisx * _this3.localCOMy);
							_this3.worldCOMy = _this3.body.posy + (_this3.localCOMx * _this3.body.axisx + _this3.localCOMy * _this3.body.axisy);
						}
					}
					arb.overlap = s1.polygon.area;
					arb.centroidx = s1.polygon.worldCOMx;
					arb.centroidy = s1.polygon.worldCOMy;
					return true;
				} else if(cont) {
					while(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
						var p = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
						if(!p._inuse) {
							if(p.outer != null) {
								p.outer.zpp_inner = null;
								p.outer = null;
							}
							p._isimmutable = null;
							p._validate = null;
							p._invalidate = null;
							p.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = p;
						}
					}
					var fst_vert = null;
					var poly1 = false;
					var ite1 = s1.polygon.gverts.next;
					var ind11 = 0;
					var ite2 = s2.polygon.gverts.next;
					var ind2 = 0;
					var _g1 = 0;
					var _g = s2.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out2[i]) {
							ind2 = i;
							break;
						} else {
							ite2 = ite2.next;
						}
					}
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						poly1 = true;
						var _g11 = 0;
						var _g2 = s1.polygon.edgeCnt;
						while(_g11 < _g2) {
							var i1 = _g11++;
							if(!out1[i1]) {
								ind11 = i1;
								break;
							} else {
								ite1 = ite1.next;
							}
						}
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
						} else {
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite1);
							fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						}
					} else {
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite2);
						fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
					}
					var cnt = 1;
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
						var cx_cont = true;
						var cx_itei = s1.polygon.gverts.next;
						var u2 = cx_itei;
						var cx_itej = cx_itei.next;
						while(cx_itej != null) {
							var v4 = cx_itej;
							var min2 = 2.0;
							var cx_itei1 = s2.polygon.gverts.next;
							var a = cx_itei1;
							var cx_itej1 = cx_itei1.next;
							while(cx_itej1 != null) {
								var b = cx_itej1;
								var t2 = 0.0;
								var _sx = 0.0;
								var _sy = 0.0;
								_sx = u2.x - a.x;
								_sy = u2.y - a.y;
								var _vx = 0.0;
								var _vy = 0.0;
								_vx = v4.x - u2.x;
								_vy = v4.y - u2.y;
								var _qx = 0.0;
								var _qy = 0.0;
								_qx = b.x - a.x;
								_qy = b.y - a.y;
								var den = _vy * _qx - _vx * _qy;
								var tmp;
								if(den * den > nape_Config.epsilon * nape_Config.epsilon) {
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									if(txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon) {
										var sxx = (_vy * _sx - _vx * _sy) * den;
										if(sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon) {
											t2 = txx;
											tmp = true;
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
								} else {
									tmp = false;
								}
								if(tmp) {
									if(t2 < min2) {
										min2 = t2;
										ite2 = cx_itei1;
									}
								}
								cx_itei1 = cx_itej1;
								a = b;
								cx_itej1 = cx_itej1.next;
							}
							while(true) {
								cx_itej1 = s2.polygon.gverts.next;
								var b1 = cx_itej1;
								var t3 = 0.0;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								_sx1 = u2.x - a.x;
								_sy1 = u2.y - a.y;
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								_vx1 = v4.x - u2.x;
								_vy1 = v4.y - u2.y;
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								_qx1 = b1.x - a.x;
								_qy1 = b1.y - a.y;
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								var tmp1;
								if(den1 * den1 > nape_Config.epsilon * nape_Config.epsilon) {
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									if(txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon) {
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										if(sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon) {
											t3 = txx1;
											tmp1 = true;
										} else {
											tmp1 = false;
										}
									} else {
										tmp1 = false;
									}
								} else {
									tmp1 = false;
								}
								if(tmp1) {
									if(t3 < min2) {
										min2 = t3;
										ite2 = cx_itei1;
									}
								}
								break;
							}
							if(min2 != 2.0) {
								var cx = 0.0;
								var cy = 0.0;
								var T = min2;
								cx = u2.x + (v4.x - u2.x) * T;
								cy = u2.y + (v4.y - u2.y) * T;
								var ret;
								if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
									ret = new zpp_$nape_geom_ZPP_$Vec2();
								} else {
									ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
									zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
									ret.next = null;
								}
								ret.weak = false;
								ret._immutable = false;
								ret.x = cx;
								ret.y = cy;
								fst_vert = ret;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
								poly1 = true;
								ite1 = cx_itei;
								cx_cont = false;
								break;
							}
							cx_itei = cx_itej;
							u2 = v4;
							cx_itej = cx_itej.next;
						}
						if(cx_cont) {
							while(true) {
								cx_itej = s1.polygon.gverts.next;
								var v5 = cx_itej;
								var min3 = 2.0;
								var cx_itei2 = s2.polygon.gverts.next;
								var a1 = cx_itei2;
								var cx_itej2 = cx_itei2.next;
								while(cx_itej2 != null) {
									var b2 = cx_itej2;
									var t4 = 0.0;
									var _sx2 = 0.0;
									var _sy2 = 0.0;
									_sx2 = u2.x - a1.x;
									_sy2 = u2.y - a1.y;
									var _vx2 = 0.0;
									var _vy2 = 0.0;
									_vx2 = v5.x - u2.x;
									_vy2 = v5.y - u2.y;
									var _qx2 = 0.0;
									var _qy2 = 0.0;
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
									var den2 = _vy2 * _qx2 - _vx2 * _qy2;
									var tmp2;
									if(den2 * den2 > nape_Config.epsilon * nape_Config.epsilon) {
										den2 = 1 / den2;
										var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
										if(txx2 > nape_Config.epsilon && txx2 < 1 - nape_Config.epsilon) {
											var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
											if(sxx2 > nape_Config.epsilon && sxx2 < 1 - nape_Config.epsilon) {
												t4 = txx2;
												tmp2 = true;
											} else {
												tmp2 = false;
											}
										} else {
											tmp2 = false;
										}
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										if(t4 < min3) {
											min3 = t4;
											ite2 = cx_itei2;
										}
									}
									cx_itei2 = cx_itej2;
									a1 = b2;
									cx_itej2 = cx_itej2.next;
								}
								while(true) {
									cx_itej2 = s2.polygon.gverts.next;
									var b3 = cx_itej2;
									var t5 = 0.0;
									var _sx3 = 0.0;
									var _sy3 = 0.0;
									_sx3 = u2.x - a1.x;
									_sy3 = u2.y - a1.y;
									var _vx3 = 0.0;
									var _vy3 = 0.0;
									_vx3 = v5.x - u2.x;
									_vy3 = v5.y - u2.y;
									var _qx3 = 0.0;
									var _qy3 = 0.0;
									_qx3 = b3.x - a1.x;
									_qy3 = b3.y - a1.y;
									var den3 = _vy3 * _qx3 - _vx3 * _qy3;
									var tmp3;
									if(den3 * den3 > nape_Config.epsilon * nape_Config.epsilon) {
										den3 = 1 / den3;
										var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
										if(txx3 > nape_Config.epsilon && txx3 < 1 - nape_Config.epsilon) {
											var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
											if(sxx3 > nape_Config.epsilon && sxx3 < 1 - nape_Config.epsilon) {
												t5 = txx3;
												tmp3 = true;
											} else {
												tmp3 = false;
											}
										} else {
											tmp3 = false;
										}
									} else {
										tmp3 = false;
									}
									if(tmp3) {
										if(t5 < min3) {
											min3 = t5;
											ite2 = cx_itei2;
										}
									}
									break;
								}
								if(min3 != 2.0) {
									var cx1 = 0.0;
									var cy1 = 0.0;
									var T1 = min3;
									cx1 = u2.x + (v5.x - u2.x) * T1;
									cy1 = u2.y + (v5.y - u2.y) * T1;
									var ret1;
									if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
										ret1 = new zpp_$nape_geom_ZPP_$Vec2();
									} else {
										ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
										zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
										ret1.next = null;
									}
									ret1.weak = false;
									ret1._immutable = false;
									ret1.x = cx1;
									ret1.y = cy1;
									fst_vert = ret1;
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
									poly1 = true;
									ite1 = cx_itei;
									break;
								}
								break;
							}
						}
						cnt = 2;
					}
					while(true) if(poly1) {
						ite1 = ite1.next;
						++ind11;
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
							ind11 = 0;
						}
						if(!out1[ind11]) {
							var ex = ite1;
							var tmp4;
							if(fst_vert != null) {
								var dx = 0.0;
								var dy = 0.0;
								dx = ex.x - fst_vert.x;
								dy = ex.y - fst_vert.y;
								tmp4 = dx * dx + dy * dy < nape_Config.epsilon;
							} else {
								tmp4 = false;
							}
							if(tmp4) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a2 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							var b4 = ite1;
							var u3 = ite2;
							var itm = ite2.next;
							if(itm == null) {
								itm = s2.polygon.gverts.next;
							}
							var max = -1.0;
							var itmo = null;
							var indo = 0;
							var icnt = 0;
							var beg_ite = itm;
							var cx_ite6 = itm;
							while(true) {
								var v6 = cx_ite6;
								var t6 = 0.0;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								_sx4 = u3.x - a2.x;
								_sy4 = u3.y - a2.y;
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								_vx4 = v6.x - u3.x;
								_vy4 = v6.y - u3.y;
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								_qx4 = b4.x - a2.x;
								_qy4 = b4.y - a2.y;
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								var tmp5;
								if(den4 * den4 > nape_Config.epsilon * nape_Config.epsilon) {
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									if(txx4 > nape_Config.epsilon && txx4 < 1 - nape_Config.epsilon) {
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										if(sxx4 > nape_Config.epsilon && sxx4 < 1 - nape_Config.epsilon) {
											t6 = txx4;
											tmp5 = true;
										} else {
											tmp5 = false;
										}
									} else {
										tmp5 = false;
									}
								} else {
									tmp5 = false;
								}
								if(tmp5) {
									if(t6 >= -1.0) {
										itmo = ite2;
										indo = ind2;
										icnt = 1;
										if(1 == cnt) {
											max = t6;
											cx_ite6 = beg_ite;
											break;
										} else {
											max = t6;
										}
									}
								}
								u3 = v6;
								ite2 = cx_ite6;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite6 = cx_ite6.next;
								if(cx_ite6 == null) {
									cx_ite6 = s2.polygon.gverts.next;
								}
								break;
							}
							while(cx_ite6 != beg_ite) {
								var v7 = cx_ite6;
								var t7 = 0.0;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								_sx5 = u3.x - a2.x;
								_sy5 = u3.y - a2.y;
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								_vx5 = v7.x - u3.x;
								_vy5 = v7.y - u3.y;
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								_qx5 = b4.x - a2.x;
								_qy5 = b4.y - a2.y;
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								var tmp6;
								if(den5 * den5 > nape_Config.epsilon * nape_Config.epsilon) {
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									if(txx5 > nape_Config.epsilon && txx5 < 1 - nape_Config.epsilon) {
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										if(sxx5 > nape_Config.epsilon && sxx5 < 1 - nape_Config.epsilon) {
											t7 = txx5;
											tmp6 = true;
										} else {
											tmp6 = false;
										}
									} else {
										tmp6 = false;
									}
								} else {
									tmp6 = false;
								}
								if(tmp6) {
									if(t7 >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t7;
											break;
										} else {
											max = t7;
										}
									}
								}
								u3 = v7;
								ite2 = cx_ite6;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite6 = cx_ite6.next;
								if(cx_ite6 == null) {
									cx_ite6 = s2.polygon.gverts.next;
								}
							}
							if(itmo == null) {
								break;
							}
							var u4 = itmo;
							var itm2 = itmo.next;
							if(itm2 == null) {
								itm2 = s2.polygon.gverts.next;
							}
							var v8 = itm2;
							var cx2 = 0.0;
							var cy2 = 0.0;
							var T2 = max;
							cx2 = u4.x + (v8.x - u4.x) * T2;
							cy2 = u4.y + (v8.y - u4.y) * T2;
							var tmp7;
							if(fst_vert != null) {
								var dx1 = 0.0;
								var dy1 = 0.0;
								dx1 = cx2 - fst_vert.x;
								dy1 = cy2 - fst_vert.y;
								tmp7 = dx1 * dx1 + dy1 * dy1 < nape_Config.epsilon;
							} else {
								tmp7 = false;
							}
							if(tmp7) {
								break;
							}
							var ret2;
							if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
								ret2 = new zpp_$nape_geom_ZPP_$Vec2();
							} else {
								ret2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.weak = false;
							ret2._immutable = false;
							ret2.x = cx2;
							ret2.y = cy2;
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ret2);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							ite2 = itmo;
							ind2 = indo;
							poly1 = !poly1;
							cnt = 2;
						}
					} else {
						ite2 = ite2.next;
						++ind2;
						if(ite2 == null) {
							ite2 = s2.polygon.gverts.next;
							ind2 = 0;
						}
						if(!out2[ind2]) {
							var ex1 = ite2;
							var tmp8;
							if(fst_vert != null) {
								var dx2 = 0.0;
								var dy2 = 0.0;
								dx2 = ex1.x - fst_vert.x;
								dy2 = ex1.y - fst_vert.y;
								tmp8 = dx2 * dx2 + dy2 * dy2 < nape_Config.epsilon;
							} else {
								tmp8 = false;
							}
							if(tmp8) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex1);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a3 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							var b5 = ite2;
							var u5 = ite1;
							var itm1 = ite1.next;
							if(itm1 == null) {
								itm1 = s1.polygon.gverts.next;
							}
							var max1 = -1.0;
							var itmo1 = null;
							var indo1 = 0;
							var icnt1 = 0;
							var beg_ite1 = itm1;
							var cx_ite7 = itm1;
							while(true) {
								var v9 = cx_ite7;
								var t8 = 0.0;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								_sx6 = u5.x - a3.x;
								_sy6 = u5.y - a3.y;
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								_vx6 = v9.x - u5.x;
								_vy6 = v9.y - u5.y;
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								_qx6 = b5.x - a3.x;
								_qy6 = b5.y - a3.y;
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								var tmp9;
								if(den6 * den6 > nape_Config.epsilon * nape_Config.epsilon) {
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									if(txx6 > nape_Config.epsilon && txx6 < 1 - nape_Config.epsilon) {
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										if(sxx6 > nape_Config.epsilon && sxx6 < 1 - nape_Config.epsilon) {
											t8 = txx6;
											tmp9 = true;
										} else {
											tmp9 = false;
										}
									} else {
										tmp9 = false;
									}
								} else {
									tmp9 = false;
								}
								if(tmp9) {
									if(t8 >= -1.0) {
										itmo1 = ite1;
										indo1 = ind11;
										icnt1 = 1;
										if(1 == cnt) {
											max1 = t8;
											cx_ite7 = beg_ite1;
											break;
										} else {
											max1 = t8;
										}
									}
								}
								u5 = v9;
								ite1 = cx_ite7;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite7 = cx_ite7.next;
								if(cx_ite7 == null) {
									cx_ite7 = s1.polygon.gverts.next;
								}
								break;
							}
							while(cx_ite7 != beg_ite1) {
								var v10 = cx_ite7;
								var t9 = 0.0;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								_sx7 = u5.x - a3.x;
								_sy7 = u5.y - a3.y;
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								_vx7 = v10.x - u5.x;
								_vy7 = v10.y - u5.y;
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								_qx7 = b5.x - a3.x;
								_qy7 = b5.y - a3.y;
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								var tmp10;
								if(den7 * den7 > nape_Config.epsilon * nape_Config.epsilon) {
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									if(txx7 > nape_Config.epsilon && txx7 < 1 - nape_Config.epsilon) {
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										if(sxx7 > nape_Config.epsilon && sxx7 < 1 - nape_Config.epsilon) {
											t9 = txx7;
											tmp10 = true;
										} else {
											tmp10 = false;
										}
									} else {
										tmp10 = false;
									}
								} else {
									tmp10 = false;
								}
								if(tmp10) {
									if(t9 >= max1) {
										itmo1 = ite1;
										indo1 = ind11;
										if(++icnt1 == cnt) {
											max1 = t9;
											break;
										} else {
											max1 = t9;
										}
									}
								}
								u5 = v10;
								ite1 = cx_ite7;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite7 = cx_ite7.next;
								if(cx_ite7 == null) {
									cx_ite7 = s1.polygon.gverts.next;
								}
							}
							if(itmo1 == null) {
								break;
							}
							var u6 = itmo1;
							var itm21 = itmo1.next;
							if(itm21 == null) {
								itm21 = s1.polygon.gverts.next;
							}
							var v11 = itm21;
							var cx3 = 0.0;
							var cy3 = 0.0;
							var T3 = max1;
							cx3 = u6.x + (v11.x - u6.x) * T3;
							cy3 = u6.y + (v11.y - u6.y) * T3;
							var tmp11;
							if(fst_vert != null) {
								var dx3 = 0.0;
								var dy3 = 0.0;
								dx3 = cx3 - fst_vert.x;
								dy3 = cy3 - fst_vert.y;
								tmp11 = dx3 * dx3 + dy3 * dy3 < nape_Config.epsilon;
							} else {
								tmp11 = false;
							}
							if(tmp11) {
								break;
							}
							var ret3;
							if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
								ret3 = new zpp_$nape_geom_ZPP_$Vec2();
							} else {
								ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.weak = false;
							ret3._immutable = false;
							ret3.x = cx3;
							ret3.y = cy3;
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ret3);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							ite1 = itmo1;
							ind11 = indo1;
							poly1 = !poly1;
							cnt = 2;
						}
					}
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
						var area2 = 0.0;
						var COMx = 0.0;
						var COMy = 0.0;
						COMx = 0;
						COMy = 0;
						area2 = 0.0;
						var cx_ite8 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
						var u7 = cx_ite8.elt;
						cx_ite8 = cx_ite8.next;
						var v12 = cx_ite8.elt;
						cx_ite8 = cx_ite8.next;
						while(cx_ite8 != null) {
							var w6 = cx_ite8.elt;
							area2 += v12.x * (w6.y - u7.y);
							var cf6 = w6.y * v12.x - w6.x * v12.y;
							COMx += (v12.x + w6.x) * cf6;
							COMy += (v12.y + w6.y) * cf6;
							u7 = v12;
							v12 = w6;
							cx_ite8 = cx_ite8.next;
						}
						cx_ite8 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
						var w7 = cx_ite8.elt;
						area2 += v12.x * (w7.y - u7.y);
						var cf7 = w7.y * v12.x - w7.x * v12.y;
						COMx += (v12.x + w7.x) * cf7;
						COMy += (v12.y + w7.y) * cf7;
						u7 = v12;
						cx_ite8 = cx_ite8.next;
						var w8 = cx_ite8.elt;
						area2 += w7.x * (w8.y - u7.y);
						var cf8 = w8.y * w7.x - w8.x * w7.y;
						COMx += (w7.x + w8.x) * cf8;
						COMy += (w7.y + w8.y) * cf8;
						area2 *= 0.5;
						var ia = 1 / (6 * area2);
						COMx *= ia;
						COMy *= ia;
						arb.overlap = -area2;
						arb.centroidx = COMx;
						arb.centroidy = COMy;
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else {
			var inte = [];
			var total1 = true;
			var a0 = null;
			var vi = null;
			var max2 = -1e+100;
			var cont1 = true;
			var vite = s2.polygon.gverts.next;
			var ind3 = 0;
			var cx_ite9 = s2.polygon.edges.head;
			while(cx_ite9 != null) {
				var a4 = cx_ite9.elt;
				var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
				if(dist > a4.gprojection + s1.circle.radius) {
					cont1 = false;
					break;
				} else if(dist + s1.circle.radius > a4.gprojection + nape_Config.epsilon) {
					total1 = false;
					inte[ind3] = true;
				}
				dist -= a4.gprojection + s1.circle.radius;
				if(dist > max2) {
					max2 = dist;
					a0 = a4;
					vi = vite;
				}
				vite = vite.next;
				++ind3;
				cx_ite9 = cx_ite9.next;
			}
			if(cont1) {
				if(total1) {
					arb.overlap = s1.circle.area;
					arb.centroidx = s1.circle.worldCOMx;
					arb.centroidy = s1.circle.worldCOMy;
					return true;
				} else {
					var v0 = vi;
					var v13 = vi.next == null ? s2.polygon.gverts.next : vi.next;
					var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
					var tmp12;
					if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
						tmp12 = px * px + py * py <= minDist * minDist;
					} else if(dt >= v13.y * a0.gnormx - v13.x * a0.gnormy) {
						var minDist1 = s1.circle.radius;
						var px1 = 0.0;
						var py1 = 0.0;
						px1 = v13.x - s1.circle.worldCOMx;
						py1 = v13.y - s1.circle.worldCOMy;
						tmp12 = px1 * px1 + py1 * py1 <= minDist1 * minDist1;
					} else {
						tmp12 = true;
					}
					if(tmp12) {
						var ins = [];
						var ind4 = 0;
						var total2 = true;
						var vi1 = null;
						var vind = 0;
						var cx_ite10 = s2.polygon.gverts.next;
						while(cx_ite10 != null) {
							var v14 = cx_ite10;
							var dx4 = 0.0;
							var dy4 = 0.0;
							dx4 = v14.x - s1.circle.worldCOMx;
							dy4 = v14.y - s1.circle.worldCOMy;
							if(!(ins[ind4] = dx4 * dx4 + dy4 * dy4 <= s1.circle.radius * s1.circle.radius)) {
								total2 = false;
							} else {
								vind = ind4;
								vi1 = cx_ite10;
							}
							++ind4;
							cx_ite10 = cx_ite10.next;
						}
						if(total2) {
							var _this6 = s2.polygon;
							if(_this6.zip_worldCOM) {
								if(_this6.body != null) {
									_this6.zip_worldCOM = false;
									if(_this6.zip_localCOM) {
										_this6.zip_localCOM = false;
										if(_this6.type == 1) {
											var _this7 = _this6.polygon;
											if(_this7.lverts.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
											} else if(_this7.lverts.next.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
												_this7.localCOMx += _this7.lverts.next.next.x;
												_this7.localCOMy += _this7.lverts.next.next.y;
												_this7.localCOMx *= 0.5;
												_this7.localCOMy *= 0.5;
											} else {
												_this7.localCOMx = 0;
												_this7.localCOMy = 0;
												var area3 = 0.0;
												var cx_ite11 = _this7.lverts.next;
												var u8 = cx_ite11;
												cx_ite11 = cx_ite11.next;
												var v15 = cx_ite11;
												cx_ite11 = cx_ite11.next;
												while(cx_ite11 != null) {
													var w9 = cx_ite11;
													area3 += v15.x * (w9.y - u8.y);
													var cf9 = w9.y * v15.x - w9.x * v15.y;
													_this7.localCOMx += (v15.x + w9.x) * cf9;
													_this7.localCOMy += (v15.y + w9.y) * cf9;
													u8 = v15;
													v15 = w9;
													cx_ite11 = cx_ite11.next;
												}
												cx_ite11 = _this7.lverts.next;
												var w10 = cx_ite11;
												area3 += v15.x * (w10.y - u8.y);
												var cf10 = w10.y * v15.x - w10.x * v15.y;
												_this7.localCOMx += (v15.x + w10.x) * cf10;
												_this7.localCOMy += (v15.y + w10.y) * cf10;
												u8 = v15;
												cx_ite11 = cx_ite11.next;
												var w11 = cx_ite11;
												area3 += w10.x * (w11.y - u8.y);
												var cf11 = w11.y * w10.x - w11.x * w10.y;
												_this7.localCOMx += (w10.x + w11.x) * cf11;
												_this7.localCOMy += (w10.y + w11.y) * cf11;
												area3 = 1 / (3 * area3);
												var t10 = area3;
												_this7.localCOMx *= t10;
												_this7.localCOMy *= t10;
											}
										}
										if(_this6.wrap_localCOM != null) {
											_this6.wrap_localCOM.zpp_inner.x = _this6.localCOMx;
											_this6.wrap_localCOM.zpp_inner.y = _this6.localCOMy;
										}
									}
									var _this8 = _this6.body;
									if(_this8.zip_axis) {
										_this8.zip_axis = false;
										_this8.axisx = Math.sin(_this8.rot);
										_this8.axisy = Math.cos(_this8.rot);
									}
									_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
									_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
								}
							}
							arb.overlap = s2.polygon.area;
							arb.centroidx = s2.polygon.worldCOMx;
							arb.centroidy = s2.polygon.worldCOMy;
							return true;
						} else {
							while(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
								var p1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
								if(!p1._inuse) {
									if(p1.outer != null) {
										p1.outer.zpp_inner = null;
										p1.outer = null;
									}
									p1._isimmutable = null;
									p1._validate = null;
									p1._invalidate = null;
									p1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
									zpp_$nape_geom_ZPP_$Vec2.zpp_pool = p1;
								}
							}
							zpp_$nape_geom_ZPP_$Collide.flowsegs.clear();
							var fst_vert1 = null;
							var state = 1;
							if(vi1 == null) {
								vi1 = s2.polygon.gverts.next;
								state = 2;
							} else {
								fst_vert1 = vi1;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert1);
							}
							while(state != 0) if(state == 1) {
								vi1 = vi1.next;
								if(vi1 == null) {
									vi1 = s2.polygon.gverts.next;
								}
								++vind;
								if(vind >= s2.polygon.edgeCnt) {
									vind = 0;
								}
								if(ins[vind]) {
									var dx5 = 0.0;
									var dy5 = 0.0;
									dx5 = fst_vert1.x - vi1.x;
									dy5 = fst_vert1.y - vi1.y;
									if(dx5 * dx5 + dy5 * dy5 < nape_Config.epsilon) {
										break;
									}
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(vi1);
								} else {
									var u9 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
									var v16 = vi1;
									var vx = 0.0;
									var vy = 0.0;
									vx = v16.x - u9.x;
									vy = v16.y - u9.y;
									var qx = 0.0;
									var qy = 0.0;
									qx = u9.x - s1.circle.worldCOMx;
									qy = u9.y - s1.circle.worldCOMy;
									var A = vx * vx + vy * vy;
									var B = 2 * (qx * vx + qy * vy);
									var D = Math.sqrt(B * B - 4 * A * (qx * qx + qy * qy - s1.circle.radius * s1.circle.radius));
									A = 1 / (2 * A);
									var t11 = (-B - D) * A;
									var cx4 = 0.0;
									var cy4 = 0.0;
									var T4 = t11 < nape_Config.epsilon ? (-B + D) * A : t11;
									cx4 = u9.x + (v16.x - u9.x) * T4;
									cy4 = u9.y + (v16.y - u9.y) * T4;
									var dx6 = 0.0;
									var dy6 = 0.0;
									dx6 = fst_vert1.x - cx4;
									dy6 = fst_vert1.y - cy4;
									if(dx6 * dx6 + dy6 * dy6 < nape_Config.epsilon) {
										break;
									}
									var ret4;
									if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
										ret4 = new zpp_$nape_geom_ZPP_$Vec2();
									} else {
										ret4 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
										zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret4.next;
										ret4.next = null;
									}
									ret4.weak = false;
									ret4._immutable = false;
									ret4.x = cx4;
									ret4.y = cy4;
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ret4);
									state = 2;
								}
							} else if(state == 2) {
								var vi2 = vi1.next;
								if(vi2 == null) {
									vi2 = s2.polygon.gverts.next;
								}
								var u10 = vi1;
								state = 0;
								var beg_ite2 = vi2;
								var cx_ite12 = vi2;
								while(true) {
									var v17 = cx_ite12;
									var vind2 = vind + 1;
									if(vind2 == s2.polygon.edgeCnt) {
										vind2 = 0;
									}
									if(inte[vind]) {
										if(ins[vind2]) {
											var vx1 = 0.0;
											var vy1 = 0.0;
											vx1 = v17.x - u10.x;
											vy1 = v17.y - u10.y;
											var qx1 = 0.0;
											var qy1 = 0.0;
											qx1 = u10.x - s1.circle.worldCOMx;
											qy1 = u10.y - s1.circle.worldCOMy;
											var A1 = vx1 * vx1 + vy1 * vy1;
											var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
											var D1 = Math.sqrt(B1 * B1 - 4 * A1 * (qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius));
											A1 = 1 / (2 * A1);
											var t12 = (-B1 - D1) * A1;
											var cx5 = 0.0;
											var cy5 = 0.0;
											var T5 = t12 < nape_Config.epsilon ? (-B1 + D1) * A1 : t12;
											cx5 = u10.x + (v17.x - u10.x) * T5;
											cy5 = u10.y + (v17.y - u10.y) * T5;
											var dx7 = 0.0;
											var dy7 = 0.0;
											dx7 = fst_vert1.x - cx5;
											dy7 = fst_vert1.y - cy5;
											if(dx7 * dx7 + dy7 * dy7 < nape_Config.epsilon) {
												state = 0;
												cx_ite12 = beg_ite2;
												break;
											}
											var ret5;
											if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
												ret5 = new zpp_$nape_geom_ZPP_$Vec2();
											} else {
												ret5 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
												zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret5.next;
												ret5.next = null;
											}
											ret5.weak = false;
											ret5._immutable = false;
											ret5.x = cx5;
											ret5.y = cy5;
											var cp = ret5;
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp);
											state = 1;
											cx_ite12 = beg_ite2;
											break;
										} else {
											var t0 = 0.0;
											var t13 = 0.0;
											var vx2 = 0.0;
											var vy2 = 0.0;
											vx2 = v17.x - u10.x;
											vy2 = v17.y - u10.y;
											var qx2 = 0.0;
											var qy2 = 0.0;
											qx2 = u10.x - s1.circle.worldCOMx;
											qy2 = u10.y - s1.circle.worldCOMy;
											var A2 = vx2 * vx2 + vy2 * vy2;
											var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
											var D2 = B2 * B2 - 4 * A2 * (qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius);
											var two;
											if(D2 * D2 < nape_Config.epsilon) {
												if(D2 < 0) {
													t0 = 10.0;
												} else {
													t13 = -B2 / (2 * A2);
													t0 = t13;
												}
												two = false;
											} else {
												D2 = Math.sqrt(D2);
												A2 = 1 / (2 * A2);
												t0 = (-B2 - D2) * A2;
												t13 = (-B2 + D2) * A2;
												two = true;
											}
											if(t0 < 1 - nape_Config.epsilon && t13 > nape_Config.epsilon) {
												var cx6 = 0.0;
												var cy6 = 0.0;
												var T6 = t0;
												cx6 = u10.x + (v17.x - u10.x) * T6;
												cy6 = u10.y + (v17.y - u10.y) * T6;
												var tmp13;
												if(fst_vert1 != null) {
													var dx8 = 0.0;
													var dy8 = 0.0;
													dx8 = fst_vert1.x - cx6;
													dy8 = fst_vert1.y - cy6;
													tmp13 = dx8 * dx8 + dy8 * dy8 < nape_Config.epsilon;
												} else {
													tmp13 = false;
												}
												if(tmp13) {
													state = 0;
													cx_ite12 = beg_ite2;
													break;
												}
												var ret6;
												if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
													ret6 = new zpp_$nape_geom_ZPP_$Vec2();
												} else {
													ret6 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
													zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret6.next;
													ret6.next = null;
												}
												ret6.weak = false;
												ret6._immutable = false;
												ret6.x = cx6;
												ret6.y = cy6;
												var cp1 = ret6;
												if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp1);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp1);
												if(fst_vert1 == null) {
													fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
												}
												if(two) {
													var cx7 = 0.0;
													var cy7 = 0.0;
													var T7 = t13;
													cx7 = u10.x + (v17.x - u10.x) * T7;
													cy7 = u10.y + (v17.y - u10.y) * T7;
													var ret7;
													if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
														ret7 = new zpp_$nape_geom_ZPP_$Vec2();
													} else {
														ret7 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
														zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret7.next;
														ret7.next = null;
													}
													ret7.weak = false;
													ret7._immutable = false;
													ret7.x = cx7;
													ret7.y = cy7;
													zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ret7);
												}
											}
										}
									}
									u10 = v17;
									vi1 = cx_ite12;
									vind = vind2;
									cx_ite12 = cx_ite12.next;
									if(cx_ite12 == null) {
										cx_ite12 = s2.polygon.gverts.next;
									}
									break;
								}
								while(cx_ite12 != beg_ite2) {
									var v18 = cx_ite12;
									var vind21 = vind + 1;
									if(vind21 == s2.polygon.edgeCnt) {
										vind21 = 0;
									}
									if(inte[vind]) {
										if(ins[vind21]) {
											var vx3 = 0.0;
											var vy3 = 0.0;
											vx3 = v18.x - u10.x;
											vy3 = v18.y - u10.y;
											var qx3 = 0.0;
											var qy3 = 0.0;
											qx3 = u10.x - s1.circle.worldCOMx;
											qy3 = u10.y - s1.circle.worldCOMy;
											var A3 = vx3 * vx3 + vy3 * vy3;
											var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
											var D3 = Math.sqrt(B3 * B3 - 4 * A3 * (qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius));
											A3 = 1 / (2 * A3);
											var t14 = (-B3 - D3) * A3;
											var cx8 = 0.0;
											var cy8 = 0.0;
											var T8 = t14 < nape_Config.epsilon ? (-B3 + D3) * A3 : t14;
											cx8 = u10.x + (v18.x - u10.x) * T8;
											cy8 = u10.y + (v18.y - u10.y) * T8;
											var dx9 = 0.0;
											var dy9 = 0.0;
											dx9 = fst_vert1.x - cx8;
											dy9 = fst_vert1.y - cy8;
											if(dx9 * dx9 + dy9 * dy9 < nape_Config.epsilon) {
												state = 0;
												break;
											}
											var ret8;
											if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
												ret8 = new zpp_$nape_geom_ZPP_$Vec2();
											} else {
												ret8 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
												zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret8.next;
												ret8.next = null;
											}
											ret8.weak = false;
											ret8._immutable = false;
											ret8.x = cx8;
											ret8.y = cy8;
											var cp2 = ret8;
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp2);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp2);
											state = 1;
											break;
										} else {
											var t01 = 0.0;
											var t15 = 0.0;
											var vx4 = 0.0;
											var vy4 = 0.0;
											vx4 = v18.x - u10.x;
											vy4 = v18.y - u10.y;
											var qx4 = 0.0;
											var qy4 = 0.0;
											qx4 = u10.x - s1.circle.worldCOMx;
											qy4 = u10.y - s1.circle.worldCOMy;
											var A4 = vx4 * vx4 + vy4 * vy4;
											var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
											var D4 = B4 * B4 - 4 * A4 * (qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius);
											var two1;
											if(D4 * D4 < nape_Config.epsilon) {
												if(D4 < 0) {
													t01 = 10.0;
												} else {
													t15 = -B4 / (2 * A4);
													t01 = t15;
												}
												two1 = false;
											} else {
												D4 = Math.sqrt(D4);
												A4 = 1 / (2 * A4);
												t01 = (-B4 - D4) * A4;
												t15 = (-B4 + D4) * A4;
												two1 = true;
											}
											if(t01 < 1 - nape_Config.epsilon && t15 > nape_Config.epsilon) {
												var cx9 = 0.0;
												var cy9 = 0.0;
												var T9 = t01;
												cx9 = u10.x + (v18.x - u10.x) * T9;
												cy9 = u10.y + (v18.y - u10.y) * T9;
												var tmp14;
												if(fst_vert1 != null) {
													var dx10 = 0.0;
													var dy10 = 0.0;
													dx10 = fst_vert1.x - cx9;
													dy10 = fst_vert1.y - cy9;
													tmp14 = dx10 * dx10 + dy10 * dy10 < nape_Config.epsilon;
												} else {
													tmp14 = false;
												}
												if(tmp14) {
													state = 0;
													break;
												}
												var ret9;
												if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
													ret9 = new zpp_$nape_geom_ZPP_$Vec2();
												} else {
													ret9 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
													zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret9.next;
													ret9.next = null;
												}
												ret9.weak = false;
												ret9._immutable = false;
												ret9.x = cx9;
												ret9.y = cy9;
												var cp3 = ret9;
												if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp3);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp3);
												if(fst_vert1 == null) {
													fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
												}
												if(two1) {
													var cx10 = 0.0;
													var cy10 = 0.0;
													var T10 = t15;
													cx10 = u10.x + (v18.x - u10.x) * T10;
													cy10 = u10.y + (v18.y - u10.y) * T10;
													var ret10;
													if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
														ret10 = new zpp_$nape_geom_ZPP_$Vec2();
													} else {
														ret10 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
														zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret10.next;
														ret10.next = null;
													}
													ret10.weak = false;
													ret10._immutable = false;
													ret10.x = cx10;
													ret10.y = cy10;
													zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ret10);
												}
											}
										}
									}
									u10 = v18;
									vi1 = cx_ite12;
									vind = vind21;
									cx_ite12 = cx_ite12.next;
									if(cx_ite12 == null) {
										cx_ite12 = s2.polygon.gverts.next;
									}
								}
							}
							if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
								return false;
							} else if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next == null) {
								var all = true;
								var cx_ite13 = s2.polygon.edges.head;
								while(cx_ite13 != null) {
									var e = cx_ite13.elt;
									if(e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy > e.gprojection) {
										all = false;
										break;
									}
									cx_ite13 = cx_ite13.next;
								}
								if(all) {
									arb.overlap = s1.circle.area;
									arb.centroidx = s1.circle.worldCOMx;
									arb.centroidy = s1.circle.worldCOMy;
									return true;
								} else {
									return false;
								}
							} else {
								var COMx1 = 0;
								var COMy1 = 0;
								var area4 = 0.0;
								if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
									var parea = 0.0;
									var pCOMx = 0.0;
									var pCOMy = 0.0;
									pCOMx = 0;
									pCOMy = 0;
									parea = 0.0;
									var cx_ite14 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
									var u11 = cx_ite14.elt;
									cx_ite14 = cx_ite14.next;
									var v19 = cx_ite14.elt;
									cx_ite14 = cx_ite14.next;
									while(cx_ite14 != null) {
										var w12 = cx_ite14.elt;
										parea += v19.x * (w12.y - u11.y);
										var cf12 = w12.y * v19.x - w12.x * v19.y;
										pCOMx += (v19.x + w12.x) * cf12;
										pCOMy += (v19.y + w12.y) * cf12;
										u11 = v19;
										v19 = w12;
										cx_ite14 = cx_ite14.next;
									}
									cx_ite14 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
									var w13 = cx_ite14.elt;
									parea += v19.x * (w13.y - u11.y);
									var cf13 = w13.y * v19.x - w13.x * v19.y;
									pCOMx += (v19.x + w13.x) * cf13;
									pCOMy += (v19.y + w13.y) * cf13;
									u11 = v19;
									cx_ite14 = cx_ite14.next;
									var w14 = cx_ite14.elt;
									parea += w13.x * (w14.y - u11.y);
									var cf14 = w14.y * w13.x - w14.x * w13.y;
									pCOMx += (w13.x + w14.x) * cf14;
									pCOMy += (w13.y + w14.y) * cf14;
									parea *= 0.5;
									var ia1 = 1 / (6 * parea);
									pCOMx *= ia1;
									pCOMy *= ia1;
									var t16 = -parea;
									COMx1 += pCOMx * t16;
									COMy1 += pCOMy * t16;
									area4 = 0.0 - parea;
								} else {
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.elt);
								}
								while(zpp_$nape_geom_ZPP_$Collide.flowsegs.head != null) {
									var u12 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var v20 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var dx11 = 0.0;
									var dy11 = 0.0;
									dx11 = v20.x - u12.x;
									dy11 = v20.y - u12.y;
									var nx = 0.0;
									var ny = 0.0;
									nx = dx11;
									ny = dy11;
									var imag = 1.0 / Math.sqrt(nx * nx + ny * ny);
									nx *= imag;
									ny *= imag;
									var t17 = nx;
									nx = -ny;
									ny = t17;
									var cx11 = 0.0;
									var cy11 = 0.0;
									cx11 = u12.x + v20.x;
									cy11 = u12.y + v20.y;
									cx11 *= 0.5;
									cy11 *= 0.5;
									cx11 -= s1.circle.worldCOMx;
									cy11 -= s1.circle.worldCOMy;
									var xd = nx * cx11 + ny * cy11;
									var carea = 0.0;
									var ccom = 0.0;
									var cos = xd / s1.circle.radius;
									var sin = Math.sqrt(1 - cos * cos);
									var theta = Math.acos(cos);
									carea = s1.circle.radius * (s1.circle.radius * theta - xd * sin);
									ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
									cx11 = s1.circle.worldCOMx;
									cy11 = s1.circle.worldCOMy;
									var t18 = ccom;
									cx11 += nx * t18;
									cy11 += ny * t18;
									var t19 = carea;
									COMx1 += cx11 * t19;
									COMy1 += cy11 * t19;
									area4 += carea;
								}
								var t20 = 1.0 / area4;
								COMx1 *= t20;
								COMy1 *= t20;
								arb.overlap = area4;
								arb.centroidx = COMx1;
								arb.centroidy = COMy1;
								return true;
							}
						}
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
		}
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) {
			return false;
		} else if(ds < nape_Config.epsilon * nape_Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
			}
			return true;
		} else {
			var d = Math.sqrt(ds);
			var id = 1 / d;
			var x1 = 0.5 * (d - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
			} else {
				var x2 = d - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area21 = 0.0;
					var y2 = 0.0;
					var cos1 = x1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - x1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var cos2 = x2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area21 = c2.radius * (c2.radius * theta2 - x2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area21;
					var ya = (y1 * area11 + (d - y2) * area21) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
				}
			}
			return true;
		}
	}
};
var zpp_$nape_geom_ZPP_$ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.inner = false;
	this.shape = null;
};
$hxClasses["zpp_nape.geom.ZPP_ConvexRayResult"] = zpp_$nape_geom_ZPP_$ConvexRayResult;
zpp_$nape_geom_ZPP_$ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
zpp_$nape_geom_ZPP_$ConvexRayResult.prototype = {
	__class__: zpp_$nape_geom_ZPP_$ConvexRayResult
};
var zpp_$nape_geom_ZPP_$GeomVert = function() {
	this.forced = false;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_GeomVert"] = zpp_$nape_geom_ZPP_$GeomVert;
zpp_$nape_geom_ZPP_$GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_$nape_geom_ZPP_$GeomVert.prototype = {
	__class__: zpp_$nape_geom_ZPP_$GeomVert
};
var zpp_$nape_geom_ZPP_$GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
$hxClasses["zpp_nape.geom.ZPP_GeomPoly"] = zpp_$nape_geom_ZPP_$GeomPoly;
zpp_$nape_geom_ZPP_$GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_$nape_geom_ZPP_$GeomPoly.prototype = {
	__class__: zpp_$nape_geom_ZPP_$GeomPoly
};
var zpp_$nape_geom_ZPP_$Mat23 = function() {
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_Mat23"] = zpp_$nape_geom_ZPP_$Mat23;
zpp_$nape_geom_ZPP_$Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_$nape_geom_ZPP_$Mat23.prototype = {
	__class__: zpp_$nape_geom_ZPP_$Mat23
};
var zpp_$nape_geom_ZPP_$MatMN = function() {
	this.x = null;
	this.n = 0;
	this.m = 0;
};
$hxClasses["zpp_nape.geom.ZPP_MatMN"] = zpp_$nape_geom_ZPP_$MatMN;
zpp_$nape_geom_ZPP_$MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_$nape_geom_ZPP_$MatMN.prototype = {
	__class__: zpp_$nape_geom_ZPP_$MatMN
};
var zpp_$nape_geom_ZPP_$ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_$nape_geom_ZPP_$Vec2();
	this.c2 = new zpp_$nape_geom_ZPP_$Vec2();
	this.axis = new zpp_$nape_geom_ZPP_$Vec2();
};
$hxClasses["zpp_nape.geom.ZPP_ToiEvent"] = zpp_$nape_geom_ZPP_$ToiEvent;
zpp_$nape_geom_ZPP_$ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
zpp_$nape_geom_ZPP_$ToiEvent.prototype = {
	__class__: zpp_$nape_geom_ZPP_$ToiEvent
};
var zpp_$nape_geom_ZPP_$SweepDistance = function() { };
$hxClasses["zpp_nape.geom.ZPP_SweepDistance"] = zpp_$nape_geom_ZPP_$SweepDistance;
zpp_$nape_geom_ZPP_$SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) {
		userAPI = false;
	}
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var ang2 = b2.angvel;
	if(ang2 < 0) {
		ang2 = -ang2;
	}
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape_Config.dynamicSweepLinearThreshold * nape_Config.dynamicSweepLinearThreshold && angBias < nape_Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			b1.posx += b1.velx * delta;
			b1.posy += b1.vely * delta;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var _this = p1.gverts.next;
			var e1 = ite.elt;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = _this.y * e1.gnormx - _this.x * e1.gnormy;
		}
		var dt1 = curTOI * timeStep;
		var delta1 = dt1 - b2.sweepTime;
		if(delta1 != 0) {
			b2.sweepTime = dt1;
			b2.posx += b2.velx * delta1;
			b2.posy += b2.vely * delta1;
			if(b2.angvel != 0) {
				var dr1 = b2.sweep_angvel * delta1;
				b2.rot += dr1;
				if(dr1 * dr1 > 0.0001) {
					b2.axisx = Math.sin(b2.rot);
					b2.axisy = Math.cos(b2.rot);
				} else {
					var d21 = dr1 * dr1;
					var p2 = 1 - 0.5 * d21;
					var m1 = 1 - d21 * d21 / 8;
					var nx1 = (p2 * b2.axisx + dr1 * b2.axisy) * m1;
					b2.axisy = (p2 * b2.axisy - dr1 * b2.axisx) * m1;
					b2.axisx = nx1;
				}
			}
		}
		if(s2.type == 0) {
			s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
			s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
		} else {
			var p3 = s2.polygon;
			var li1 = p3.lverts.next;
			var cx_ite2 = p3.gverts.next;
			while(cx_ite2 != null) {
				var g1 = cx_ite2;
				var l1 = li1;
				li1 = li1.next;
				g1.x = b2.posx + (b2.axisy * l1.x - b2.axisx * l1.y);
				g1.y = b2.posy + (l1.x * b2.axisx + l1.y * b2.axisy);
				cx_ite2 = cx_ite2.next;
			}
			var ite1 = p3.edges.head;
			var cx_ite3 = p3.gverts.next;
			var u1 = cx_ite3;
			cx_ite3 = cx_ite3.next;
			while(cx_ite3 != null) {
				var v1 = cx_ite3;
				var e2 = ite1.elt;
				ite1 = ite1.next;
				e2.gnormx = b2.axisy * e2.lnormx - b2.axisx * e2.lnormy;
				e2.gnormy = e2.lnormx * b2.axisx + e2.lnormy * b2.axisy;
				e2.gprojection = b2.posx * e2.gnormx + b2.posy * e2.gnormy + e2.lprojection;
				e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
				e2.tp1 = v1.y * e2.gnormx - v1.x * e2.gnormy;
				u1 = v1;
				cx_ite3 = cx_ite3.next;
			}
			var _this1 = p3.gverts.next;
			var e3 = ite1.elt;
			e3.gnormx = b2.axisy * e3.lnormx - b2.axisx * e3.lnormy;
			e3.gnormy = e3.lnormx * b2.axisx + e3.lnormy * b2.axisy;
			e3.gprojection = b2.posx * e3.gnormx + b2.posy * e3.gnormy + e3.lprojection;
			e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
			e3.tp1 = _this1.y * e3.gnormx - _this1.x * e3.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var sep;
		if(s1.type == 0 && s2.type == 0) {
			var c11 = s1.circle;
			var c21 = s2.circle;
			var dist;
			var nx2 = 0.0;
			var ny = 0.0;
			nx2 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx2 * nx2 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx2 = 1;
					ny = 0;
				} else {
					var t = 1.0 / len;
					nx2 *= t;
					ny *= t;
				}
				var t1 = c11.radius;
				c1.x = c11.worldCOMx + nx2 * t1;
				c1.y = c11.worldCOMy + ny * t1;
				var t2 = -c21.radius;
				c2.x = c21.worldCOMx + nx2 * t2;
				c2.y = c21.worldCOMy + ny * t2;
				axis.x = nx2;
				axis.y = ny;
			}
			sep = dist;
		} else {
			var swapped = false;
			if(s1.type == 0 && s2.type == 1) {
				s11 = s2;
				s21 = s1;
				w1 = c2;
				w2 = c1;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite4 = s11.polygon.edges.head;
				while(cx_ite4 != null) {
					var a = cx_ite4.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite4 = cx_ite4.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v11 = a0.gp1;
					var dt2 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt2 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny1 = 0.0;
						nx3 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx3 * nx3 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx3 = 1;
								ny1 = 0;
							} else {
								var t3 = 1.0 / len1;
								nx3 *= t3;
								ny1 *= t3;
							}
							w1.x = v0.x + nx3 * 0;
							w1.y = v0.y + ny1 * 0;
							var t4 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t4;
							w2.y = circle.worldCOMy + ny1 * t4;
							axis.x = nx3;
							axis.y = ny1;
						}
					} else if(dt2 >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var nx4 = 0.0;
						var ny2 = 0.0;
						nx4 = circle.worldCOMx - v11.x;
						ny2 = circle.worldCOMy - v11.y;
						var len2 = Math.sqrt(nx4 * nx4 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx4 = 1;
								ny2 = 0;
							} else {
								var t5 = 1.0 / len2;
								nx4 *= t5;
								ny2 *= t5;
							}
							w1.x = v11.x + nx4 * 0;
							w1.y = v11.y + ny2 * 0;
							var t6 = -circle.radius;
							w2.x = circle.worldCOMx + nx4 * t6;
							w2.y = circle.worldCOMy + ny2 * t6;
							axis.x = nx4;
							axis.y = ny2;
						}
					} else {
						var t7 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t7;
						w2.y = circle.worldCOMy + a0.gnormy * t7;
						var t8 = -best;
						w1.x = w2.x + a0.gnormx * t8;
						w1.y = w2.y + a0.gnormy * t8;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				sep = best;
			} else {
				var p11 = s11.polygon;
				var p21 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite5 = p11.edges.head;
				while(cx_ite5 != null) {
					var a3 = cx_ite5.elt;
					var min = 1e100;
					var cx_ite6 = p21.gverts.next;
					while(cx_ite6 != null) {
						var v2 = cx_ite6;
						var k = a3.gnormx * v2.x + a3.gnormy * v2.y;
						if(k < min) {
							min = k;
						}
						cx_ite6 = cx_ite6.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite5 = cx_ite5.next;
				}
				if(best1 < 1e100) {
					var cx_ite7 = p21.edges.head;
					while(cx_ite7 != null) {
						var a4 = cx_ite7.elt;
						var min1 = 1e100;
						var cx_ite8 = p11.gverts.next;
						while(cx_ite8 != null) {
							var v3 = cx_ite8;
							var k1 = a4.gnormx * v3.x + a4.gnormy * v3.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite8 = cx_ite8.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite7 = cx_ite7.next;
					}
					if(best1 < 1e100) {
						var q2;
						var ax;
						if(besti == 1) {
							q2 = p21;
							ax = a1;
						} else {
							q2 = p11;
							ax = a2;
							var tmp = w1;
							w1 = w2;
							w2 = tmp;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite9 = q2.edges.head;
						while(cx_ite9 != null) {
							var a5 = cx_ite9.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite9 = cx_ite9.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v12 = ax.gp1;
							var q0 = ay.gp0;
							var q1 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v12.x - v01.x;
							vy = v12.y - v01.y;
							qx = q1.x - q0.x;
							qy = q1.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q1.x) + vy * (v01.y - q1.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v12.x) + qy * (q0.y - v12.y)) * qdot;
							if(t11 < 0) {
								t11 = 0;
							} else if(t11 > 1) {
								t11 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t9 = t11;
							f1x = v01.x + vx * t9;
							f1y = v01.y + vy * t9;
							var f2x = 0.0;
							var f2y = 0.0;
							var t10 = t21;
							f2x = v01.x + vx * t10;
							f2y = v01.y + vy * t10;
							var g1x = 0.0;
							var g1y = 0.0;
							var t12 = s12;
							g1x = q0.x + qx * t12;
							g1y = q0.y + qy * t12;
							var g2x = 0.0;
							var g2y = 0.0;
							var t13 = s22;
							g2x = q0.x + qx * t13;
							g2y = q0.y + qy * t13;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - q0.x;
							dy = f1y - q0.y;
							var d1 = dx * dx + dy * dy;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - q1.x;
							dy1 = f2y - q1.y;
							var d22 = dx1 * dx1 + dy1 * dy1;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - v01.x;
							dy2 = g1y - v01.y;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - v12.x;
							dy3 = g2y - v12.y;
							var e21 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d22) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q1;
								d1 = d22;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e21) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v12;
								e11 = e21;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t14 = 1.0 / best1;
								axis.x *= t14;
								axis.y *= t14;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							sep = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t15 = (-ax.tp1 - d0) * den;
							if(t15 > nape_Config.epsilon) {
								c0x += dvx * t15;
								c0y += dvy * t15;
							}
							var t16 = (-ax.tp0 - d11) * den;
							if(t16 < -nape_Config.epsilon) {
								c1x += dvx * t16;
								c1y += dvy * t16;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t17 = -c0d;
								w1.x = w2.x + ax.gnormx * t17;
								w1.y = w2.y + ax.gnormy * t17;
								sep = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t18 = -c1d;
								w1.x = w2.x + ax.gnormx * t18;
								w1.y = w2.y + ax.gnormy * t18;
								sep = c1d;
							}
						}
					} else {
						sep = 1e100;
					}
				} else {
					sep = 1e100;
				}
			}
		}
		var sep1 = sep + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep1 < nape_Config.distanceThresholdCCD) {
			if(userAPI) {
				break;
			}
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta2 = sep1 / denom;
		if(delta2 < 1e-6) {
			delta2 = 1e-6;
		}
		curTOI += delta2;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt3 = curTOI * timeStep;
			var delta3 = dt3 - b1.sweepTime;
			if(delta3 != 0) {
				b1.sweepTime = dt3;
				b1.posx += b1.velx * delta3;
				b1.posy += b1.vely * delta3;
				if(b1.angvel != 0) {
					var dr2 = b1.sweep_angvel * delta3;
					b1.rot += dr2;
					if(dr2 * dr2 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d23 = dr2 * dr2;
						var p4 = 1 - 0.5 * d23;
						var m2 = 1 - d23 * d23 / 8;
						var nx5 = (p4 * b1.axisx + dr2 * b1.axisy) * m2;
						b1.axisy = (p4 * b1.axisy - dr2 * b1.axisx) * m2;
						b1.axisx = nx5;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p5 = s1.polygon;
				var li2 = p5.lverts.next;
				var cx_ite10 = p5.gverts.next;
				while(cx_ite10 != null) {
					var g2 = cx_ite10;
					var l2 = li2;
					li2 = li2.next;
					g2.x = b1.posx + (b1.axisy * l2.x - b1.axisx * l2.y);
					g2.y = b1.posy + (l2.x * b1.axisx + l2.y * b1.axisy);
					cx_ite10 = cx_ite10.next;
				}
				var ite2 = p5.edges.head;
				var cx_ite11 = p5.gverts.next;
				var u2 = cx_ite11;
				cx_ite11 = cx_ite11.next;
				while(cx_ite11 != null) {
					var v4 = cx_ite11;
					var e4 = ite2.elt;
					ite2 = ite2.next;
					e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
					e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
					e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
					e4.tp0 = u2.y * e4.gnormx - u2.x * e4.gnormy;
					e4.tp1 = v4.y * e4.gnormx - v4.x * e4.gnormy;
					u2 = v4;
					cx_ite11 = cx_ite11.next;
				}
				var _this2 = p5.gverts.next;
				var e5 = ite2.elt;
				e5.gnormx = b1.axisy * e5.lnormx - b1.axisx * e5.lnormy;
				e5.gnormy = e5.lnormx * b1.axisx + e5.lnormy * b1.axisy;
				e5.gprojection = b1.posx * e5.gnormx + b1.posy * e5.gnormy + e5.lprojection;
				e5.tp0 = u2.y * e5.gnormx - u2.x * e5.gnormy;
				e5.tp1 = _this2.y * e5.gnormx - _this2.x * e5.gnormy;
			}
			var dt4 = curTOI * timeStep;
			var delta4 = dt4 - b2.sweepTime;
			if(delta4 != 0) {
				b2.sweepTime = dt4;
				b2.posx += b2.velx * delta4;
				b2.posy += b2.vely * delta4;
				if(b2.angvel != 0) {
					var dr3 = b2.sweep_angvel * delta4;
					b2.rot += dr3;
					if(dr3 * dr3 > 0.0001) {
						b2.axisx = Math.sin(b2.rot);
						b2.axisy = Math.cos(b2.rot);
					} else {
						var d24 = dr3 * dr3;
						var p6 = 1 - 0.5 * d24;
						var m3 = 1 - d24 * d24 / 8;
						var nx6 = (p6 * b2.axisx + dr3 * b2.axisy) * m3;
						b2.axisy = (p6 * b2.axisy - dr3 * b2.axisx) * m3;
						b2.axisx = nx6;
					}
				}
			}
			if(s2.type == 0) {
				s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
				s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
			} else {
				var p7 = s2.polygon;
				var li3 = p7.lverts.next;
				var cx_ite12 = p7.gverts.next;
				while(cx_ite12 != null) {
					var g3 = cx_ite12;
					var l3 = li3;
					li3 = li3.next;
					g3.x = b2.posx + (b2.axisy * l3.x - b2.axisx * l3.y);
					g3.y = b2.posy + (l3.x * b2.axisx + l3.y * b2.axisy);
					cx_ite12 = cx_ite12.next;
				}
				var ite3 = p7.edges.head;
				var cx_ite13 = p7.gverts.next;
				var u3 = cx_ite13;
				cx_ite13 = cx_ite13.next;
				while(cx_ite13 != null) {
					var v5 = cx_ite13;
					var e6 = ite3.elt;
					ite3 = ite3.next;
					e6.gnormx = b2.axisy * e6.lnormx - b2.axisx * e6.lnormy;
					e6.gnormy = e6.lnormx * b2.axisx + e6.lnormy * b2.axisy;
					e6.gprojection = b2.posx * e6.gnormx + b2.posy * e6.gnormy + e6.lprojection;
					e6.tp0 = u3.y * e6.gnormx - u3.x * e6.gnormy;
					e6.tp1 = v5.y * e6.gnormx - v5.x * e6.gnormy;
					u3 = v5;
					cx_ite13 = cx_ite13.next;
				}
				var _this3 = p7.gverts.next;
				var e7 = ite3.elt;
				e7.gnormx = b2.axisy * e7.lnormx - b2.axisx * e7.lnormy;
				e7.gnormy = e7.lnormx * b2.axisx + e7.lnormy * b2.axisy;
				e7.gprojection = b2.posx * e7.gnormx + b2.posy * e7.gnormy + e7.lprojection;
				e7.tp0 = u3.y * e7.gnormx - u3.x * e7.gnormy;
				e7.tp1 = _this3.y * e7.gnormx - _this3.x * e7.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var sep2;
			if(s1.type == 0 && s2.type == 0) {
				var c12 = s1.circle;
				var c22 = s2.circle;
				var dist2;
				var nx7 = 0.0;
				var ny3 = 0.0;
				nx7 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx7 * nx7 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx7 = 1;
						ny3 = 0;
					} else {
						var t19 = 1.0 / len3;
						nx7 *= t19;
						ny3 *= t19;
					}
					var t20 = c12.radius;
					c1.x = c12.worldCOMx + nx7 * t20;
					c1.y = c12.worldCOMy + ny3 * t20;
					var t22 = -c22.radius;
					c2.x = c22.worldCOMx + nx7 * t22;
					c2.y = c22.worldCOMy + ny3 * t22;
					axis.x = nx7;
					axis.y = ny3;
				}
				sep2 = dist2;
			} else {
				var swapped1 = false;
				if(s1.type == 0 && s2.type == 1) {
					s13 = s2;
					s23 = s1;
					w11 = c2;
					w21 = c1;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite14 = s13.polygon.edges.head;
					while(cx_ite14 != null) {
						var a6 = cx_ite14.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite14 = cx_ite14.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v13 = a01.gp1;
						var dt5 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt5 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx8 = 0.0;
							var ny4 = 0.0;
							nx8 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx8 * nx8 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx8 = 1;
									ny4 = 0;
								} else {
									var t23 = 1.0 / len4;
									nx8 *= t23;
									ny4 *= t23;
								}
								w11.x = v02.x + nx8 * 0;
								w11.y = v02.y + ny4 * 0;
								var t24 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx8 * t24;
								w21.y = circle1.worldCOMy + ny4 * t24;
								axis.x = nx8;
								axis.y = ny4;
							}
						} else if(dt5 >= v13.y * a01.gnormx - v13.x * a01.gnormy) {
							var nx9 = 0.0;
							var ny5 = 0.0;
							nx9 = circle1.worldCOMx - v13.x;
							ny5 = circle1.worldCOMy - v13.y;
							var len5 = Math.sqrt(nx9 * nx9 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx9 = 1;
									ny5 = 0;
								} else {
									var t25 = 1.0 / len5;
									nx9 *= t25;
									ny5 *= t25;
								}
								w11.x = v13.x + nx9 * 0;
								w11.y = v13.y + ny5 * 0;
								var t26 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx9 * t26;
								w21.y = circle1.worldCOMy + ny5 * t26;
								axis.x = nx9;
								axis.y = ny5;
							}
						} else {
							var t27 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t27;
							w21.y = circle1.worldCOMy + a01.gnormy * t27;
							var t28 = -best2;
							w11.x = w21.x + a01.gnormx * t28;
							w11.y = w21.y + a01.gnormy * t28;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					sep2 = best2;
				} else {
					var p12 = s13.polygon;
					var p22 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite15 = p12.edges.head;
					while(cx_ite15 != null) {
						var a7 = cx_ite15.elt;
						var min3 = 1e100;
						var cx_ite16 = p22.gverts.next;
						while(cx_ite16 != null) {
							var v6 = cx_ite16;
							var k3 = a7.gnormx * v6.x + a7.gnormy * v6.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite16 = cx_ite16.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite15 = cx_ite15.next;
					}
					if(best3 < 1e100) {
						var cx_ite17 = p22.edges.head;
						while(cx_ite17 != null) {
							var a8 = cx_ite17.elt;
							var min4 = 1e100;
							var cx_ite18 = p12.gverts.next;
							while(cx_ite18 != null) {
								var v7 = cx_ite18;
								var k4 = a8.gnormx * v7.x + a8.gnormy * v7.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite18 = cx_ite18.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite17 = cx_ite17.next;
						}
						if(best3 < 1e100) {
							var q21;
							var ax1;
							if(besti1 == 1) {
								q21 = p22;
								ax1 = a11;
							} else {
								q21 = p12;
								ax1 = a21;
								var tmp1 = w11;
								w11 = w21;
								w21 = tmp1;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite19 = q21.edges.head;
							while(cx_ite19 != null) {
								var a9 = cx_ite19.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite19 = cx_ite19.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v14 = ax1.gp1;
								var q01 = ay1.gp0;
								var q11 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v14.x - v03.x;
								vy1 = v14.y - v03.y;
								qx1 = q11.x - q01.x;
								qy1 = q11.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t29 = -(vx1 * (v03.x - q11.x) + vy1 * (v03.y - q11.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v14.x) + qy1 * (q01.y - v14.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t29 < 0) {
									t29 = 0;
								} else if(t29 > 1) {
									t29 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t30 = t110;
								f1x1 = v03.x + vx1 * t30;
								f1y1 = v03.y + vy1 * t30;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t31 = t29;
								f2x1 = v03.x + vx1 * t31;
								f2y1 = v03.y + vy1 * t31;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t32 = s14;
								g1x1 = q01.x + qx1 * t32;
								g1y1 = q01.y + qy1 * t32;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t33 = s24;
								g2x1 = q01.x + qx1 * t33;
								g2y1 = q01.y + qy1 * t33;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - q01.x;
								dy4 = f1y1 - q01.y;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - q11.x;
								dy5 = f2y1 - q11.y;
								var d25 = dx5 * dx5 + dy5 * dy5;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - v03.x;
								dy6 = g1y1 - v03.y;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - v14.x;
								dy7 = g2y1 - v14.y;
								var e22 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d25) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q11;
									d12 = d25;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e22) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v14;
									e12 = e22;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t34 = 1.0 / best3;
									axis.x *= t34;
									axis.y *= t34;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								sep2 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t35 = (-ax1.tp1 - d01) * den1;
								if(t35 > nape_Config.epsilon) {
									c0x1 += dvx1 * t35;
									c0y1 += dvy1 * t35;
								}
								var t36 = (-ax1.tp0 - d13) * den1;
								if(t36 < -nape_Config.epsilon) {
									c1x1 += dvx1 * t36;
									c1y1 += dvy1 * t36;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t37 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t37;
									w11.y = w21.y + ax1.gnormy * t37;
									sep2 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t38 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t38;
									w11.y = w21.y + ax1.gnormy * t38;
									sep2 = c1d1;
								}
							}
						} else {
							sep2 = 1e100;
						}
					} else {
						sep2 = 1e100;
					}
				}
			}
			var sep3 = sep2 + negRadius;
			if(sep3 < nape_Config.distanceThresholdCCD) {
				if(userAPI) {
					break;
				}
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = deltax * axis.x + deltay * axis.y - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep3 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep1 > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			b1.posx += b1.velx * delta;
			b1.posy += b1.vely * delta;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var _this = p1.gverts.next;
			var e1 = ite.elt;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = _this.y * e1.gnormx - _this.x * e1.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var sep;
		if(s1.type == 0 && s2.type == 0) {
			var c11 = s1.circle;
			var c21 = s2.circle;
			var dist;
			var nx1 = 0.0;
			var ny = 0.0;
			nx1 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx1 * nx1 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx1 = 1;
					ny = 0;
				} else {
					var t = 1.0 / len;
					nx1 *= t;
					ny *= t;
				}
				var t1 = c11.radius;
				c1.x = c11.worldCOMx + nx1 * t1;
				c1.y = c11.worldCOMy + ny * t1;
				var t2 = -c21.radius;
				c2.x = c21.worldCOMx + nx1 * t2;
				c2.y = c21.worldCOMy + ny * t2;
				axis.x = nx1;
				axis.y = ny;
			}
			sep = dist;
		} else {
			var swapped = false;
			if(s1.type == 0 && s2.type == 1) {
				s11 = s2;
				s21 = s1;
				w1 = c2;
				w2 = c1;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite2 = s11.polygon.edges.head;
				while(cx_ite2 != null) {
					var a = cx_ite2.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v1 = a0.gp1;
					var dt1 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt1 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx2 = 0.0;
						var ny1 = 0.0;
						nx2 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx2 * nx2 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx2 = 1;
								ny1 = 0;
							} else {
								var t3 = 1.0 / len1;
								nx2 *= t3;
								ny1 *= t3;
							}
							w1.x = v0.x + nx2 * 0;
							w1.y = v0.y + ny1 * 0;
							var t4 = -circle.radius;
							w2.x = circle.worldCOMx + nx2 * t4;
							w2.y = circle.worldCOMy + ny1 * t4;
							axis.x = nx2;
							axis.y = ny1;
						}
					} else if(dt1 >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny2 = 0.0;
						nx3 = circle.worldCOMx - v1.x;
						ny2 = circle.worldCOMy - v1.y;
						var len2 = Math.sqrt(nx3 * nx3 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx3 = 1;
								ny2 = 0;
							} else {
								var t5 = 1.0 / len2;
								nx3 *= t5;
								ny2 *= t5;
							}
							w1.x = v1.x + nx3 * 0;
							w1.y = v1.y + ny2 * 0;
							var t6 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t6;
							w2.y = circle.worldCOMy + ny2 * t6;
							axis.x = nx3;
							axis.y = ny2;
						}
					} else {
						var t7 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t7;
						w2.y = circle.worldCOMy + a0.gnormy * t7;
						var t8 = -best;
						w1.x = w2.x + a0.gnormx * t8;
						w1.y = w2.y + a0.gnormy * t8;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				sep = best;
			} else {
				var p11 = s11.polygon;
				var p2 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite3 = p11.edges.head;
				while(cx_ite3 != null) {
					var a3 = cx_ite3.elt;
					var min = 1e100;
					var cx_ite4 = p2.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k = a3.gnormx * v2.x + a3.gnormy * v2.y;
						if(k < min) {
							min = k;
						}
						cx_ite4 = cx_ite4.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < 1e100) {
					var cx_ite5 = p2.edges.head;
					while(cx_ite5 != null) {
						var a4 = cx_ite5.elt;
						var min1 = 1e100;
						var cx_ite6 = p11.gverts.next;
						while(cx_ite6 != null) {
							var v3 = cx_ite6;
							var k1 = a4.gnormx * v3.x + a4.gnormy * v3.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite6 = cx_ite6.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(best1 < 1e100) {
						var q2;
						var ax;
						if(besti == 1) {
							q2 = p2;
							ax = a1;
						} else {
							q2 = p11;
							ax = a2;
							var tmp = w1;
							w1 = w2;
							w2 = tmp;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite7 = q2.edges.head;
						while(cx_ite7 != null) {
							var a5 = cx_ite7.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite7 = cx_ite7.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v11 = ax.gp1;
							var q0 = ay.gp0;
							var q1 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v11.x - v01.x;
							vy = v11.y - v01.y;
							qx = q1.x - q0.x;
							qy = q1.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q1.x) + vy * (v01.y - q1.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
							if(t11 < 0) {
								t11 = 0;
							} else if(t11 > 1) {
								t11 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t9 = t11;
							f1x = v01.x + vx * t9;
							f1y = v01.y + vy * t9;
							var f2x = 0.0;
							var f2y = 0.0;
							var t10 = t21;
							f2x = v01.x + vx * t10;
							f2y = v01.y + vy * t10;
							var g1x = 0.0;
							var g1y = 0.0;
							var t12 = s12;
							g1x = q0.x + qx * t12;
							g1y = q0.y + qy * t12;
							var g2x = 0.0;
							var g2y = 0.0;
							var t13 = s22;
							g2x = q0.x + qx * t13;
							g2y = q0.y + qy * t13;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - q0.x;
							dy = f1y - q0.y;
							var d1 = dx * dx + dy * dy;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - q1.x;
							dy1 = f2y - q1.y;
							var d21 = dx1 * dx1 + dy1 * dy1;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - v01.x;
							dy2 = g1y - v01.y;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - v11.x;
							dy3 = g2y - v11.y;
							var e2 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d21) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q1;
								d1 = d21;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e2) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v11;
								e11 = e2;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t14 = 1.0 / best1;
								axis.x *= t14;
								axis.y *= t14;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							sep = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t15 = (-ax.tp1 - d0) * den;
							if(t15 > nape_Config.epsilon) {
								c0x += dvx * t15;
								c0y += dvy * t15;
							}
							var t16 = (-ax.tp0 - d11) * den;
							if(t16 < -nape_Config.epsilon) {
								c1x += dvx * t16;
								c1y += dvy * t16;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t17 = -c0d;
								w1.x = w2.x + ax.gnormx * t17;
								w1.y = w2.y + ax.gnormy * t17;
								sep = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t18 = -c1d;
								w1.x = w2.x + ax.gnormx * t18;
								w1.y = w2.y + ax.gnormy * t18;
								sep = c1d;
							}
						}
					} else {
						sep = 1e100;
					}
				} else {
					sep = 1e100;
				}
			}
		}
		var sep1 = sep + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep1 < nape_Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta1 = sep1 / denom;
		if(delta1 < 1e-6) {
			delta1 = 1e-6;
		}
		curTOI += delta1;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt2 = curTOI * timeStep;
			var delta2 = dt2 - b1.sweepTime;
			if(delta2 != 0) {
				b1.sweepTime = dt2;
				b1.posx += b1.velx * delta2;
				b1.posy += b1.vely * delta2;
				if(b1.angvel != 0) {
					var dr1 = b1.sweep_angvel * delta2;
					b1.rot += dr1;
					if(dr1 * dr1 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d22 = dr1 * dr1;
						var p3 = 1 - 0.5 * d22;
						var m1 = 1 - d22 * d22 / 8;
						var nx4 = (p3 * b1.axisx + dr1 * b1.axisy) * m1;
						b1.axisy = (p3 * b1.axisy - dr1 * b1.axisx) * m1;
						b1.axisx = nx4;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p4 = s1.polygon;
				var li1 = p4.lverts.next;
				var cx_ite8 = p4.gverts.next;
				while(cx_ite8 != null) {
					var g1 = cx_ite8;
					var l1 = li1;
					li1 = li1.next;
					g1.x = b1.posx + (b1.axisy * l1.x - b1.axisx * l1.y);
					g1.y = b1.posy + (l1.x * b1.axisx + l1.y * b1.axisy);
					cx_ite8 = cx_ite8.next;
				}
				var ite1 = p4.edges.head;
				var cx_ite9 = p4.gverts.next;
				var u1 = cx_ite9;
				cx_ite9 = cx_ite9.next;
				while(cx_ite9 != null) {
					var v4 = cx_ite9;
					var e3 = ite1.elt;
					ite1 = ite1.next;
					e3.gnormx = b1.axisy * e3.lnormx - b1.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * b1.axisx + e3.lnormy * b1.axisy;
					e3.gprojection = b1.posx * e3.gnormx + b1.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
					e3.tp1 = v4.y * e3.gnormx - v4.x * e3.gnormy;
					u1 = v4;
					cx_ite9 = cx_ite9.next;
				}
				var _this1 = p4.gverts.next;
				var e4 = ite1.elt;
				e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
				e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
				e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
				e4.tp0 = u1.y * e4.gnormx - u1.x * e4.gnormy;
				e4.tp1 = _this1.y * e4.gnormx - _this1.x * e4.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var sep2;
			if(s1.type == 0 && s2.type == 0) {
				var c12 = s1.circle;
				var c22 = s2.circle;
				var dist2;
				var nx5 = 0.0;
				var ny3 = 0.0;
				nx5 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx5 * nx5 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx5 = 1;
						ny3 = 0;
					} else {
						var t19 = 1.0 / len3;
						nx5 *= t19;
						ny3 *= t19;
					}
					var t20 = c12.radius;
					c1.x = c12.worldCOMx + nx5 * t20;
					c1.y = c12.worldCOMy + ny3 * t20;
					var t22 = -c22.radius;
					c2.x = c22.worldCOMx + nx5 * t22;
					c2.y = c22.worldCOMy + ny3 * t22;
					axis.x = nx5;
					axis.y = ny3;
				}
				sep2 = dist2;
			} else {
				var swapped1 = false;
				if(s1.type == 0 && s2.type == 1) {
					s13 = s2;
					s23 = s1;
					w11 = c2;
					w21 = c1;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite10 = s13.polygon.edges.head;
					while(cx_ite10 != null) {
						var a6 = cx_ite10.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite10 = cx_ite10.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v12 = a01.gp1;
						var dt3 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt3 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx6 = 0.0;
							var ny4 = 0.0;
							nx6 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx6 * nx6 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx6 = 1;
									ny4 = 0;
								} else {
									var t23 = 1.0 / len4;
									nx6 *= t23;
									ny4 *= t23;
								}
								w11.x = v02.x + nx6 * 0;
								w11.y = v02.y + ny4 * 0;
								var t24 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx6 * t24;
								w21.y = circle1.worldCOMy + ny4 * t24;
								axis.x = nx6;
								axis.y = ny4;
							}
						} else if(dt3 >= v12.y * a01.gnormx - v12.x * a01.gnormy) {
							var nx7 = 0.0;
							var ny5 = 0.0;
							nx7 = circle1.worldCOMx - v12.x;
							ny5 = circle1.worldCOMy - v12.y;
							var len5 = Math.sqrt(nx7 * nx7 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx7 = 1;
									ny5 = 0;
								} else {
									var t25 = 1.0 / len5;
									nx7 *= t25;
									ny5 *= t25;
								}
								w11.x = v12.x + nx7 * 0;
								w11.y = v12.y + ny5 * 0;
								var t26 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx7 * t26;
								w21.y = circle1.worldCOMy + ny5 * t26;
								axis.x = nx7;
								axis.y = ny5;
							}
						} else {
							var t27 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t27;
							w21.y = circle1.worldCOMy + a01.gnormy * t27;
							var t28 = -best2;
							w11.x = w21.x + a01.gnormx * t28;
							w11.y = w21.y + a01.gnormy * t28;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					sep2 = best2;
				} else {
					var p12 = s13.polygon;
					var p21 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite11 = p12.edges.head;
					while(cx_ite11 != null) {
						var a7 = cx_ite11.elt;
						var min3 = 1e100;
						var cx_ite12 = p21.gverts.next;
						while(cx_ite12 != null) {
							var v5 = cx_ite12;
							var k3 = a7.gnormx * v5.x + a7.gnormy * v5.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite12 = cx_ite12.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite11 = cx_ite11.next;
					}
					if(best3 < 1e100) {
						var cx_ite13 = p21.edges.head;
						while(cx_ite13 != null) {
							var a8 = cx_ite13.elt;
							var min4 = 1e100;
							var cx_ite14 = p12.gverts.next;
							while(cx_ite14 != null) {
								var v6 = cx_ite14;
								var k4 = a8.gnormx * v6.x + a8.gnormy * v6.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite14 = cx_ite14.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite13 = cx_ite13.next;
						}
						if(best3 < 1e100) {
							var q21;
							var ax1;
							if(besti1 == 1) {
								q21 = p21;
								ax1 = a11;
							} else {
								q21 = p12;
								ax1 = a21;
								var tmp1 = w11;
								w11 = w21;
								w21 = tmp1;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite15 = q21.edges.head;
							while(cx_ite15 != null) {
								var a9 = cx_ite15.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite15 = cx_ite15.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v13 = ax1.gp1;
								var q01 = ay1.gp0;
								var q11 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v13.x - v03.x;
								vy1 = v13.y - v03.y;
								qx1 = q11.x - q01.x;
								qy1 = q11.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t29 = -(vx1 * (v03.x - q11.x) + vy1 * (v03.y - q11.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v13.x) + qy1 * (q01.y - v13.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t29 < 0) {
									t29 = 0;
								} else if(t29 > 1) {
									t29 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t30 = t110;
								f1x1 = v03.x + vx1 * t30;
								f1y1 = v03.y + vy1 * t30;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t31 = t29;
								f2x1 = v03.x + vx1 * t31;
								f2y1 = v03.y + vy1 * t31;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t32 = s14;
								g1x1 = q01.x + qx1 * t32;
								g1y1 = q01.y + qy1 * t32;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t33 = s24;
								g2x1 = q01.x + qx1 * t33;
								g2y1 = q01.y + qy1 * t33;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - q01.x;
								dy4 = f1y1 - q01.y;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - q11.x;
								dy5 = f2y1 - q11.y;
								var d23 = dx5 * dx5 + dy5 * dy5;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - v03.x;
								dy6 = g1y1 - v03.y;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - v13.x;
								dy7 = g2y1 - v13.y;
								var e21 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d23) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q11;
									d12 = d23;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e21) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v13;
									e12 = e21;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t34 = 1.0 / best3;
									axis.x *= t34;
									axis.y *= t34;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								sep2 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t35 = (-ax1.tp1 - d01) * den1;
								if(t35 > nape_Config.epsilon) {
									c0x1 += dvx1 * t35;
									c0y1 += dvy1 * t35;
								}
								var t36 = (-ax1.tp0 - d13) * den1;
								if(t36 < -nape_Config.epsilon) {
									c1x1 += dvx1 * t36;
									c1y1 += dvy1 * t36;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t37 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t37;
									w11.y = w21.y + ax1.gnormy * t37;
									sep2 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t38 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t38;
									w11.y = w21.y + ax1.gnormy * t38;
									sep2 = c1d1;
								}
							}
						} else {
							sep2 = 1e100;
						}
					} else {
						sep2 = 1e100;
					}
				}
			}
			var sep3 = sep2 + negRadius;
			if(sep3 < nape_Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = deltax * axis.x + deltay * axis.y - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep3 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep1 > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
var zpp_$nape_geom_ZPP_$Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec2"] = zpp_$nape_geom_ZPP_$Vec2;
zpp_$nape_geom_ZPP_$Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_$nape_geom_ZPP_$Vec2.prototype = {
	add: function(o) {
		o._inuse = true;
		o.next = this.next;
		this.next = o;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		o._inuse = true;
		if(cur == null) {
			o.next = this.next;
			this.next = o;
		} else {
			o.next = cur.next;
			cur.next = o;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return o;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Vec3 = function() {
	this._validate = null;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_Vec3"] = zpp_$nape_geom_ZPP_$Vec3;
zpp_$nape_geom_ZPP_$Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
zpp_$nape_geom_ZPP_$Vec3.prototype = {
	__class__: zpp_$nape_geom_ZPP_$Vec3
};
var zpp_$nape_phys_ZPP_$Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_$nape_ZPP_$ID.Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CallbackSet();
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.phys.ZPP_Interactor"] = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
zpp_$nape_phys_ZPP_$Interactor.get = function(i1,i2) {
	var id = i1.id < i2.id ? i1.id : i2.id;
	var di = i1.id < i2.id ? i2.id : i1.id;
	var ret = null;
	var cx_ite = (i1.cbsets.length < i2.cbsets.length ? i1.cbsets : i2.cbsets).head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_phys_ZPP_$Interactor.prototype = {
	__iaddedToSpace: function() {
		if(this.group != null) {
			this.group.interactors.add(this);
		}
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			cx_ite.elt.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) {
			this.group.interactors.remove(this);
		}
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			cx_ite.elt.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) {
				body.space.non_inlined_wake(body);
			}
		} else if(this.ibody != null) {
			if(this.ibody.space != null) {
				this.ibody.space.non_inlined_wake(this.ibody);
			}
		} else if(this.icompound.space != null) {
			this.icompound.space.wakeCompound(this.icompound);
		}
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.remove(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				if(cb.id < cx_ite.elt.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = this.cbTypes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.listeners.clear();
				o.zip_listeners = true;
				o.bodylisteners.clear();
				o.zip_bodylisteners = true;
				o.conlisteners.clear();
				o.zip_conlisteners = true;
				while(o.cbTypes.head != null) o.cbTypes.pop_unsafe().cbsets.remove(o);
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,immutable_midstep: function(n) {
	}
	,__class__: zpp_$nape_phys_ZPP_$Interactor
};
var zpp_$nape_phys_ZPP_$Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.component = null;
	this.constraints = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Infinity;
	this.pre_posy = Infinity;
	this.pre_rot = Infinity;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.kinematicDelaySleep = false;
};
$hxClasses["zpp_nape.phys.ZPP_Body"] = zpp_$nape_phys_ZPP_$Body;
zpp_$nape_phys_ZPP_$Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_$nape_phys_ZPP_$Body.__static = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	var ret = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC);
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_$nape_phys_ZPP_$Body.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Body.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,atRest: function(dt) {
		if(this.type != 2) {
			return this.component.sleeping;
		} else {
			var linSq = nape_Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) {
				cansleep = false;
			} else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.posx - this.pre_posx;
				dy = this.posy - this.pre_posy;
				if(dx * dx + dy * dy > 0.25 * linSq * dt * dt) {
					cansleep = false;
				} else {
					var dx1 = 0.0;
					var dy1 = 0.0;
					dx1 = this.aabb.maxx - this.aabb.minx;
					dy1 = this.aabb.maxy - this.aabb.miny;
					var idl = dx1 * dx1 + dy1 * dy1;
					var angSq = nape_Config.angularSleepThreshold;
					angSq *= angSq;
					if(4 * this.angvel * this.angvel * idl > angSq) {
						cansleep = false;
					} else {
						var dr = this.rot - this.pre_rot;
						if(dr * dr * idl > angSq * dt * dt) {
							cansleep = false;
						} else {
							cansleep = true;
						}
					}
				}
			}
			if(!cansleep) {
				this.component.waket = this.space.stamp;
			}
			return this.component.waket + nape_Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			cx_ite.elt.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.type == 1) {
					s.polygon.invalidate_gverts();
					s.polygon.invalidate_gaxi();
				}
				s.invalidate_worldCOM();
				cx_ite = cx_ite.next;
			}
			this.zip_worldCOM = true;
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,vel_invalidate: function(vel) {
		this.velx = vel.x;
		this.vely = vel.y;
		this.wake();
	}
	,vel_validate: function() {
		this.wrap_vel.zpp_inner.x = this.velx;
		this.wrap_vel.zpp_inner.y = this.vely;
	}
	,setupPosition: function() {
		var x = this.posx;
		var y = this.posy;
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			var tmp;
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				var _this1 = ret.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this2 = ret.zpp_inner;
				if(_this2._invalidate != null) {
					_this2._invalidate(_this2);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_pos = ret;
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) {
			this.wrap_pos.zpp_inner._immutable = true;
		} else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,setupVelocity: function() {
		var x = this.velx;
		var y = this.vely;
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			var tmp;
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				var _this1 = ret.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this2 = ret.zpp_inner;
				if(_this2._invalidate != null) {
					_this2._invalidate(_this2);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_vel = ret;
		this.wrap_vel.zpp_inner._inuse = true;
		if(this.world) {
			this.wrap_vel.zpp_inner._immutable = true;
		} else {
			this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
			this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
		}
	}
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		if(this.zip_mass || this.massMode == 0 && false) {
			this.zip_mass = false;
			if(this.massMode == 0) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == 2 && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Infinity;
				this.imass = this.smass = 0.0;
			}
		}
	}
	,invalidate_gravMass: function() {
		if(this.gravMassMode != 1) {
			this.zip_gravMass = true;
		}
		if(this.gravMassMode != 2) {
			this.zip_gravMassScale = true;
		}
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == 0) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == 2) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		if(this.zip_inertia || this.inertiaMode == 0 && false) {
			this.zip_inertia = false;
			if(this.inertiaMode == 0) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == 2 && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Infinity;
				this.sinertia = this.iinertia = 0;
			}
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == 1) {
						var _this = s.polygon;
						if(_this.lverts.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
						} else if(_this.lverts.next.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
							_this.localCOMx += _this.lverts.next.next.x;
							_this.localCOMy += _this.lverts.next.next.y;
							_this.localCOMx *= 0.5;
							_this.localCOMy *= 0.5;
						} else {
							_this.localCOMx = 0;
							_this.localCOMy = 0;
							var area = 0.0;
							var cx_ite1 = _this.lverts.next;
							var u = cx_ite1;
							cx_ite1 = cx_ite1.next;
							var v = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var w = cx_ite1;
								area += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								_this.localCOMx += (v.x + w.x) * cf;
								_this.localCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite1 = cx_ite1.next;
							}
							cx_ite1 = _this.lverts.next;
							var w1 = cx_ite1;
							area += v.x * (w1.y - u.y);
							var cf1 = w1.y * v.x - w1.x * v.y;
							_this.localCOMx += (v.x + w1.x) * cf1;
							_this.localCOMy += (v.y + w1.y) * cf1;
							u = v;
							cx_ite1 = cx_ite1.next;
							var w2 = cx_ite1;
							area += w1.x * (w2.y - u.y);
							var cf2 = w2.y * w1.x - w2.x * w1.y;
							_this.localCOMx += (w1.x + w2.x) * cf2;
							_this.localCOMy += (w1.y + w2.y) * cf2;
							area = 1 / (3 * area);
							var t = area;
							_this.localCOMx *= t;
							_this.localCOMy *= t;
						}
					}
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t1 = s.area * s.material.density;
				tempx += s.localCOMx * t1;
				tempy += s.localCOMy * t1;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t2 = 1.0 / msum;
				this.localCOMx = tempx * t2;
				this.localCOMy = tempy * t2;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == 0) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == 2) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Infinity;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,aabb_validate: function() {
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Infinity;
			this.aabb.miny = Infinity;
			this.aabb.maxx = -Infinity;
			this.aabb.maxy = -Infinity;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == 0) {
							var _this = s.circle;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												_this1.localCOMx += _this1.lverts.next.next.x;
												_this1.localCOMy += _this1.lverts.next.next.y;
												_this1.localCOMx *= 0.5;
												_this1.localCOMy *= 0.5;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite1 = _this1.lverts.next;
												var u = cx_ite1;
												cx_ite1 = cx_ite1.next;
												var v = cx_ite1;
												cx_ite1 = cx_ite1.next;
												while(cx_ite1 != null) {
													var w = cx_ite1;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite1 = cx_ite1.next;
												}
												cx_ite1 = _this1.lverts.next;
												var w1 = cx_ite1;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this1.localCOMx += (v.x + w1.x) * cf1;
												_this1.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												cx_ite1 = cx_ite1.next;
												var w2 = cx_ite1;
												area += w1.x * (w2.y - u.y);
												var cf2 = w2.y * w1.x - w2.x * w1.y;
												_this1.localCOMx += (w1.x + w2.x) * cf2;
												_this1.localCOMy += (w1.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t = area;
												_this1.localCOMx *= t;
												_this1.localCOMy *= t;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this2 = _this.body;
									if(_this2.zip_axis) {
										_this2.zip_axis = false;
										_this2.axisx = Math.sin(_this2.rot);
										_this2.axisy = Math.cos(_this2.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							var rx = _this.radius;
							var ry = _this.radius;
							_this.aabb.minx = _this.worldCOMx - rx;
							_this.aabb.miny = _this.worldCOMy - ry;
							_this.aabb.maxx = _this.worldCOMx + rx;
							_this.aabb.maxy = _this.worldCOMy + ry;
						} else {
							var _this3 = s.polygon;
							if(_this3.zip_gverts) {
								if(_this3.body != null) {
									_this3.zip_gverts = false;
									_this3.validate_lverts();
									var _this4 = _this3.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this3.lverts.next;
									var cx_ite2 = _this3.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
										g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							var _this5 = _this3.gverts.next;
							_this3.aabb.minx = _this5.x;
							_this3.aabb.miny = _this5.y;
							_this3.aabb.maxx = _this5.x;
							_this3.aabb.maxy = _this5.y;
							var cx_ite3 = _this3.gverts.next.next;
							while(cx_ite3 != null) {
								var p = cx_ite3;
								if(p.x < _this3.aabb.minx) {
									_this3.aabb.minx = p.x;
								}
								if(p.x > _this3.aabb.maxx) {
									_this3.aabb.maxx = p.x;
								}
								if(p.y < _this3.aabb.miny) {
									_this3.aabb.miny = p.y;
								}
								if(p.y > _this3.aabb.maxy) {
									_this3.aabb.maxy = p.y;
								}
								cx_ite3 = cx_ite3.next;
							}
						}
					}
				}
				var _this6 = this.aabb;
				var x = s.aabb;
				if(x.minx < _this6.minx) {
					_this6.minx = x.minx;
				}
				if(x.maxx > _this6.maxx) {
					_this6.maxx = x.maxx;
				}
				if(x.miny < _this6.miny) {
					_this6.miny = x.miny;
				}
				if(x.maxy > _this6.maxy) {
					_this6.maxy = x.maxy;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) {
				s.zpp_inner.body.wrap_shapes.remove(s);
			}
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) {
				var _this = this.space;
				var s1 = s.zpp_inner;
				var o = s1.body;
				if(!o.world) {
					o.component.waket = _this.stamp + (_this.midstep ? 0 : 1);
					if(o.type == 3) {
						o.kinematicDelaySleep = true;
					}
					if(o.component.sleeping) {
						_this.really_wake(o,false);
					}
				}
				_this.bphase.insert(s1);
				s1.addedToSpace();
			}
			if(s.zpp_inner.type == 1) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else {
			return false;
		}
	}
	,shapes_subber: function(s) {
		if(this.space != null) {
			this.space.removed_shape(s.zpp_inner);
		}
		s.zpp_inner.body = null;
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,addedToSpace: function() {
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(this.arbiters.head != null) {
			var arb = this.arbiters.pop_unsafe();
			var s = this.space;
			arb.cleared = true;
			if(arb.b2 == this) {
				var _this = arb.b1.arbiters;
				var pre = null;
				var cur = _this.head;
				while(cur != null) {
					if(cur.elt == arb) {
						var old;
						var ret;
						if(pre == null) {
							old = _this.head;
							ret = old.next;
							_this.head = ret;
							if(_this.head == null) {
								_this.pushmod = true;
							}
						} else {
							old = pre.next;
							ret = old.next;
							pre.next = ret;
							if(ret == null) {
								_this.pushmod = true;
							}
						}
						var o = old;
						o.elt = null;
						o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
						_this.modified = true;
						_this.length--;
						_this.pushmod = true;
						break;
					}
					pre = cur;
					cur = cur.next;
				}
			}
			if(arb.b1 == this) {
				var _this1 = arb.b2.arbiters;
				var pre1 = null;
				var cur1 = _this1.head;
				while(cur1 != null) {
					if(cur1.elt == arb) {
						var old1;
						var ret1;
						if(pre1 == null) {
							old1 = _this1.head;
							ret1 = old1.next;
							_this1.head = ret1;
							if(_this1.head == null) {
								_this1.pushmod = true;
							}
						} else {
							old1 = pre1.next;
							ret1 = old1.next;
							pre1.next = ret1;
							if(ret1 == null) {
								_this1.pushmod = true;
							}
						}
						var o1 = old1;
						o1.elt = null;
						o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o1;
						_this1.modified = true;
						_this1.length--;
						_this1.pushmod = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
			}
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			s.f_arbiters.modified = true;
		}
		var o2 = this.component;
		o2.body = null;
		o2.constraint = null;
		o2.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o2;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,__class__: zpp_$nape_phys_ZPP_$Body
});
var zpp_$nape_phys_ZPP_$Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_constraints = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
};
$hxClasses["zpp_nape.phys.ZPP_Compound"] = zpp_$nape_phys_ZPP_$Compound;
zpp_$nape_phys_ZPP_$Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
zpp_$nape_phys_ZPP_$Compound.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Compound.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,__class__: zpp_$nape_phys_ZPP_$Compound
});
var zpp_$nape_phys_ZPP_$FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.shapes = null;
};
$hxClasses["zpp_nape.phys.ZPP_FluidProperties"] = zpp_$nape_phys_ZPP_$FluidProperties;
zpp_$nape_phys_ZPP_$FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_$nape_phys_ZPP_$FluidProperties.prototype = {
	__class__: zpp_$nape_phys_ZPP_$FluidProperties
};
var zpp_$nape_phys_ZPP_$Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
$hxClasses["zpp_nape.phys.ZPP_Material"] = zpp_$nape_phys_ZPP_$Material;
zpp_$nape_phys_ZPP_$Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_$nape_phys_ZPP_$Material.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			cx_ite.elt.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Material
};
var zpp_$nape_shape_ZPP_$Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.pairs = new zpp_$nape_util_ZNPList_$ZPP_$AABBPair();
	this.ishape = this;
	this.type = type;
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_$nape_phys_ZPP_$Material();
	this.sweepRadius = this.sweepCoef = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Shape"] = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_$nape_shape_ZPP_$Shape.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_shape_ZPP_$Shape.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == 0) {
				this.circle.__validate_sweepRadius();
			} else {
				this.polygon.__validate_sweepRadius();
			}
		}
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == 0) {
				this.circle.__validate_area_inertia();
			} else {
				this.polygon.__validate_area_inertia();
			}
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == 0) {
				this.circle.__validate_angDrag();
			} else {
				this.polygon.__validate_angDrag();
			}
		}
	}
	,getworldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == 1) {
						var _this = this.polygon;
						if(_this.lverts.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
						} else if(_this.lverts.next.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
							_this.localCOMx += _this.lverts.next.next.x;
							_this.localCOMy += _this.lverts.next.next.y;
							_this.localCOMx *= 0.5;
							_this.localCOMy *= 0.5;
						} else {
							_this.localCOMx = 0;
							_this.localCOMy = 0;
							var area = 0.0;
							var cx_ite = _this.lverts.next;
							var u = cx_ite;
							cx_ite = cx_ite.next;
							var v = cx_ite;
							cx_ite = cx_ite.next;
							while(cx_ite != null) {
								var w = cx_ite;
								area += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								_this.localCOMx += (v.x + w.x) * cf;
								_this.localCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite = cx_ite.next;
							}
							cx_ite = _this.lverts.next;
							var w1 = cx_ite;
							area += v.x * (w1.y - u.y);
							var cf1 = w1.y * v.x - w1.x * v.y;
							_this.localCOMx += (v.x + w1.x) * cf1;
							_this.localCOMy += (v.y + w1.y) * cf1;
							u = v;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							area += w1.x * (w2.y - u.y);
							var cf2 = w2.y * w1.x - w2.x * w1.y;
							_this.localCOMx += (w1.x + w2.x) * cf2;
							_this.localCOMy += (w1.y + w2.y) * cf2;
							area = 1 / (3 * area);
							var t = area;
							_this.localCOMx *= t;
							_this.localCOMy *= t;
						}
					}
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				var _this1 = this.body;
				if(_this1.zip_axis) {
					_this1.zip_axis = false;
					_this1.axisx = Math.sin(_this1.rot);
					_this1.axisy = Math.cos(_this1.rot);
				}
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
		this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			var _this = this.body;
			_this.zip_localCOM = true;
			_this.zip_worldCOM = true;
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == 0) {
			this.zip_sweepRadius = true;
		}
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) {
			var _this = this.body;
			_this.zip_localCOM = true;
			_this.zip_worldCOM = true;
		}
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_$nape_phys_ZPP_$Material.WAKE) != 0) {
			this.wake();
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ARBITERS) != 0) {
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.PROPS) != 0) {
			if(this.body != null) {
				var _this = this.body;
				_this.zip_localCOM = true;
				_this.zip_worldCOM = true;
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ANGDRAG) != 0) {
			this.invalidate_angDrag();
		}
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,aabb_validate: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == 0) {
					var _this = this.circle;
					if(_this.zip_worldCOM) {
						if(_this.body != null) {
							_this.zip_worldCOM = false;
							if(_this.zip_localCOM) {
								_this.zip_localCOM = false;
								if(_this.type == 1) {
									var _this1 = _this.polygon;
									if(_this1.lverts.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
									} else if(_this1.lverts.next.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
										_this1.localCOMx += _this1.lverts.next.next.x;
										_this1.localCOMy += _this1.lverts.next.next.y;
										_this1.localCOMx *= 0.5;
										_this1.localCOMy *= 0.5;
									} else {
										_this1.localCOMx = 0;
										_this1.localCOMy = 0;
										var area = 0.0;
										var cx_ite = _this1.lverts.next;
										var u = cx_ite;
										cx_ite = cx_ite.next;
										var v = cx_ite;
										cx_ite = cx_ite.next;
										while(cx_ite != null) {
											var w = cx_ite;
											area += v.x * (w.y - u.y);
											var cf = w.y * v.x - w.x * v.y;
											_this1.localCOMx += (v.x + w.x) * cf;
											_this1.localCOMy += (v.y + w.y) * cf;
											u = v;
											v = w;
											cx_ite = cx_ite.next;
										}
										cx_ite = _this1.lverts.next;
										var w1 = cx_ite;
										area += v.x * (w1.y - u.y);
										var cf1 = w1.y * v.x - w1.x * v.y;
										_this1.localCOMx += (v.x + w1.x) * cf1;
										_this1.localCOMy += (v.y + w1.y) * cf1;
										u = v;
										cx_ite = cx_ite.next;
										var w2 = cx_ite;
										area += w1.x * (w2.y - u.y);
										var cf2 = w2.y * w1.x - w2.x * w1.y;
										_this1.localCOMx += (w1.x + w2.x) * cf2;
										_this1.localCOMy += (w1.y + w2.y) * cf2;
										area = 1 / (3 * area);
										var t = area;
										_this1.localCOMx *= t;
										_this1.localCOMy *= t;
									}
								}
								if(_this.wrap_localCOM != null) {
									_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
									_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
								}
							}
							var _this2 = _this.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
						}
					}
					var rx = _this.radius;
					var ry = _this.radius;
					_this.aabb.minx = _this.worldCOMx - rx;
					_this.aabb.miny = _this.worldCOMy - ry;
					_this.aabb.maxx = _this.worldCOMx + rx;
					_this.aabb.maxy = _this.worldCOMy + ry;
				} else {
					var _this3 = this.polygon;
					if(_this3.zip_gverts) {
						if(_this3.body != null) {
							_this3.zip_gverts = false;
							_this3.validate_lverts();
							var _this4 = _this3.body;
							if(_this4.zip_axis) {
								_this4.zip_axis = false;
								_this4.axisx = Math.sin(_this4.rot);
								_this4.axisy = Math.cos(_this4.rot);
							}
							var li = _this3.lverts.next;
							var cx_ite1 = _this3.gverts.next;
							while(cx_ite1 != null) {
								var g = cx_ite1;
								var l = li;
								li = li.next;
								g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
								g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
								cx_ite1 = cx_ite1.next;
							}
						}
					}
					var _this5 = _this3.gverts.next;
					_this3.aabb.minx = _this5.x;
					_this3.aabb.miny = _this5.y;
					_this3.aabb.maxx = _this5.x;
					_this3.aabb.maxy = _this5.y;
					var cx_ite2 = _this3.gverts.next.next;
					while(cx_ite2 != null) {
						var p = cx_ite2;
						if(p.x < _this3.aabb.minx) {
							_this3.aabb.minx = p.x;
						}
						if(p.x > _this3.aabb.maxx) {
							_this3.aabb.maxx = p.x;
						}
						if(p.y < _this3.aabb.miny) {
							_this3.aabb.miny = p.y;
						}
						if(p.y > _this3.aabb.maxy) {
							_this3.aabb.maxy = p.y;
						}
						cx_ite2 = cx_ite2.next;
					}
				}
			}
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) {
					this.material.shapes.remove(this);
				}
			}
			this.material = material;
			if(this.body != null && this.body.space != null) {
				material.shapes.add(this);
			}
			this.wake();
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) {
					this.filter.shapes.remove(this);
				}
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) {
				filter.shapes.add(this);
			}
			this.wake();
		}
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.shapes.add(this);
		}
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.shapes.remove(this);
		}
	}
	,__class__: zpp_$nape_shape_ZPP_$Shape
});
var zpp_$nape_shape_ZPP_$Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,0);
	this.circle = this;
	this.zip_localCOM = false;
};
$hxClasses["zpp_nape.shape.ZPP_Circle"] = zpp_$nape_shape_ZPP_$Circle;
zpp_$nape_shape_ZPP_$Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_$nape_shape_ZPP_$Circle.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Circle.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
		if(this.body != null) {
			this.body.wake();
		}
	}
	,localCOM_validate: function() {
		this.wrap_localCOM.zpp_inner.x = this.localCOMx;
		this.wrap_localCOM.zpp_inner.y = this.localCOMy;
	}
	,localCOM_invalidate: function(x) {
		this.localCOMx = x.x;
		this.localCOMy = x.y;
		this.invalidate_localCOM();
		if(this.body != null) {
			this.body.wake();
		}
	}
	,setupLocalCOM: function() {
		var x = this.localCOMx;
		var y = this.localCOMy;
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			var tmp;
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				var _this1 = ret.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this2 = ret.zpp_inner;
				if(_this2._invalidate != null) {
					_this2._invalidate(_this2);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_localCOM = ret;
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		this.angDrag = (lc + 2 * r2) * (this.material.dynamicFriction * nape_Config.fluidAngularDragFriction) + 0.5 * nape_Config.fluidAngularDrag * (1 + nape_Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__class__: zpp_$nape_shape_ZPP_$Circle
});
var zpp_$nape_shape_ZPP_$Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Edge"] = zpp_$nape_shape_ZPP_$Edge;
zpp_$nape_shape_ZPP_$Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_$nape_shape_ZPP_$Edge.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_shape_ZPP_$Edge.internal = true;
			this.outer = new nape_shape_Edge();
			zpp_$nape_shape_ZPP_$Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_$nape_shape_ZPP_$Edge
};
var zpp_$nape_shape_ZPP_$Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
};
$hxClasses["zpp_nape.shape.ZPP_Polygon"] = zpp_$nape_shape_ZPP_$Polygon;
zpp_$nape_shape_ZPP_$Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_$nape_shape_ZPP_$Polygon.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Polygon.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,gverts_pa_validate: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				var _this = this.body;
				if(_this.zip_axis) {
					_this.zip_axis = false;
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				}
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			if(cx_ite == x.zpp_inner) {
				break;
			} else {
				if(ite == null) {
					ite = this.gverts.next;
				} else {
					ite = ite.next;
				}
				if(ite2 == null) {
					ite2 = this.edges.head;
				} else {
					ite2 = ite2.next;
				}
			}
			cx_ite = cx_ite.next;
		}
		var ret;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.weak = false;
		ret._immutable = true;
		ret.x = 0;
		ret.y = 0;
		var vec = ret;
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed1 = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed1 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed2;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed2 = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed2 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed2.next;
					ed2.next = null;
				}
				ed2.polygon = this;
				this.edges.insert(ite2,ed2);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,gverts_validate: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				var _this = this.body;
				if(_this.zip_axis) {
					_this.zip_axis = false;
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				}
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,getlverts: function() {
		this.wrap_lverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,getgverts: function() {
		this.wrap_gverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.gverts,true);
		this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
	}
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) {
			this.body.wake();
		}
	}
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
		this.zip_gverts = true;
	}
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			if(cx_ite == x) {
				break;
			} else {
				if(ite == null) {
					ite = this.gverts.next;
				} else {
					ite = ite.next;
				}
				if(ite2 == null) {
					ite2 = this.edges.head;
				} else {
					ite2 = ite2.next;
				}
			}
			cx_ite = cx_ite.next;
		}
		var rem = ite == null ? this.gverts.next : ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o1 = rem1;
			o1.polygon = null;
			o1.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o1;
			rem1 = this.edges.pop_unsafe();
			var o2 = rem1;
			o2.polygon = null;
			o2.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o2;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem2 = ite2 == null ? this.edges.head.elt : ite2.next.elt;
			this.edges.erase(ite2);
			var o3 = rem2;
			o3.polygon = null;
			o3.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o3;
			this.edgeCnt--;
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) {
			return;
		}
		if(this.lverts.next.next == null) {
			return;
		}
		if(this.lverts.next.next.next == null) {
			return;
		}
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var u = cur;
			var v = cur.next == null ? this.lverts.next : cur.next;
			var dx = 0.0;
			var dy = 0.0;
			dx = u.x - v.x;
			dy = u.y - v.y;
			if(dx * dx + dy * dy < nape_Config.epsilon * nape_Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) {
			return;
		}
		var removed;
		while(true) {
			removed = false;
			var pre1 = this.lverts.next;
			while(pre1 != null) {
				var cur1 = pre1.next == null ? this.lverts.next : pre1.next;
				var u1 = pre1;
				var v1 = cur1;
				var w = cur1.next == null ? this.lverts.next : cur1.next;
				var ax = 0.0;
				var ay = 0.0;
				ax = v1.x - u1.x;
				ay = v1.y - u1.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v1.x;
				by = w.y - v1.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) {
					pre1 = pre1.next;
				} else {
					this.cleanup_lvert(cur1);
					this.lverts.erase(pre1.next == null ? null : pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
			if(!removed) {
				break;
			}
		}
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) {
			this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_gverts != null) {
			this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_edges != null) {
			this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		}
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var _this = this.lverts.next;
			var edge1 = ite.elt;
			edge1.lp0 = u;
			edge1.lp1 = _this;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - _this.x;
			dy1 = u.y - _this.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) {
				maxRadius = r;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.edges.head;
		while(cx_ite1 != null) {
			var e = cx_ite1.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) {
					break;
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		if(minRadius < 0) {
			minRadius = 0;
		}
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				s1 += a * (v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y));
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w1 = cx_ite;
			var a1 = v.y * u.x - v.x * u.y;
			s1 += a1 * (v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y));
			s2 += a1;
			this.area += v.x * (w1.y - u.y);
			u = v;
			cx_ite = cx_ite.next;
			var a2 = w1.y * u.x - w1.x * u.y;
			s1 += a2 * (w1.x * w1.x + w1.y * w1.y + (w1.x * u.x + w1.y * u.y) + (u.x * u.x + u.y * u.y));
			s2 += a2;
			this.area += w1.x * (cx_ite.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta = t > 1 ? 1 : t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				accum += (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota)) * ta * edge.length * nape_Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb = t < 0 ? 0 : t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				accum += (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1)) * nape_Config.fluidVacuumDrag * (1 - tb) * edge.length * nape_Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		while(true) {
			cx_itej = this.lverts.next;
			var v1 = cx_itej;
			var edge1 = ei.elt;
			ei = ei.next;
			perim += edge1.length;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = v1.x - u.x;
			dy1 = v1.y - u.y;
			accum += edge1.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
			var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
			if(t3 > 0) {
				var ta1 = t3 > 1 ? 1 : t3;
				var cx2 = 0.0;
				var cy2 = 0.0;
				cx2 = u.x;
				cy2 = u.y;
				var t4 = ta1;
				cx2 += dx1 * t4;
				cy2 += dy1 * t4;
				var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
				var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
				accum += (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2)) * ta1 * edge1.length * nape_Config.fluidAngularDrag;
			}
			if(t3 < 1) {
				var tb1 = t3 < 0 ? 0 : t3;
				var cx3 = 0.0;
				var cy3 = 0.0;
				cx3 = u.x;
				cy3 = u.y;
				var t5 = tb1;
				cx3 += dx1 * t5;
				cy3 += dy1 * t5;
				var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
				var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
				accum += (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3)) * nape_Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape_Config.fluidAngularDrag;
			}
			break;
		}
		this.angDrag = accum / (this.inertia * perim);
	}
	,localCOM_validate: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == 1) {
				var _this = this.polygon;
				if(_this.lverts.next.next == null) {
					_this.localCOMx = _this.lverts.next.x;
					_this.localCOMy = _this.lverts.next.y;
				} else if(_this.lverts.next.next.next == null) {
					_this.localCOMx = _this.lverts.next.x;
					_this.localCOMy = _this.lverts.next.y;
					_this.localCOMx += _this.lverts.next.next.x;
					_this.localCOMy += _this.lverts.next.next.y;
					_this.localCOMx *= 0.5;
					_this.localCOMy *= 0.5;
				} else {
					_this.localCOMx = 0;
					_this.localCOMy = 0;
					var area = 0.0;
					var cx_ite = _this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						area += v.x * (w.y - u.y);
						var cf = w.y * v.x - w.x * v.y;
						_this.localCOMx += (v.x + w.x) * cf;
						_this.localCOMy += (v.y + w.y) * cf;
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					cx_ite = _this.lverts.next;
					var w1 = cx_ite;
					area += v.x * (w1.y - u.y);
					var cf1 = w1.y * v.x - w1.x * v.y;
					_this.localCOMx += (v.x + w1.x) * cf1;
					_this.localCOMy += (v.y + w1.y) * cf1;
					u = v;
					cx_ite = cx_ite.next;
					var w2 = cx_ite;
					area += w1.x * (w2.y - u.y);
					var cf2 = w2.y * w1.x - w2.x * w1.y;
					_this.localCOMx += (w1.x + w2.x) * cf2;
					_this.localCOMy += (w1.y + w2.y) * cf2;
					area = 1 / (3 * area);
					var t = area;
					_this.localCOMx *= t;
					_this.localCOMy *= t;
				}
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,localCOM_invalidate: function(x) {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == 1) {
				var _this = this.polygon;
				if(_this.lverts.next.next == null) {
					_this.localCOMx = _this.lverts.next.x;
					_this.localCOMy = _this.lverts.next.y;
				} else if(_this.lverts.next.next.next == null) {
					_this.localCOMx = _this.lverts.next.x;
					_this.localCOMy = _this.lverts.next.y;
					_this.localCOMx += _this.lverts.next.next.x;
					_this.localCOMy += _this.lverts.next.next.y;
					_this.localCOMx *= 0.5;
					_this.localCOMy *= 0.5;
				} else {
					_this.localCOMx = 0;
					_this.localCOMy = 0;
					var area = 0.0;
					var cx_ite = _this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						area += v.x * (w.y - u.y);
						var cf = w.y * v.x - w.x * v.y;
						_this.localCOMx += (v.x + w.x) * cf;
						_this.localCOMy += (v.y + w.y) * cf;
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					cx_ite = _this.lverts.next;
					var w1 = cx_ite;
					area += v.x * (w1.y - u.y);
					var cf1 = w1.y * v.x - w1.x * v.y;
					_this.localCOMx += (v.x + w1.x) * cf1;
					_this.localCOMy += (v.y + w1.y) * cf1;
					u = v;
					cx_ite = cx_ite.next;
					var w2 = cx_ite;
					area += w1.x * (w2.y - u.y);
					var cf2 = w2.y * w1.x - w2.x * w1.y;
					_this.localCOMx += (w1.x + w2.x) * cf2;
					_this.localCOMy += (w1.y + w2.y) * cf2;
					area = 1 / (3 * area);
					var t = area;
					_this.localCOMx *= t;
					_this.localCOMy *= t;
				}
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
		var delx = 0;
		var dely = 0;
		delx = x.x - this.localCOMx;
		dely = x.y - this.localCOMy;
		var cx_ite1 = this.lverts.next;
		while(cx_ite1 != null) {
			var p = cx_ite1;
			p.x += delx;
			p.y += dely;
			cx_ite1 = cx_ite1.next;
		}
		this.invalidate_lverts();
	}
	,setupLocalCOM: function() {
		var x = this.localCOMx;
		var y = this.localCOMy;
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			var tmp;
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				var _this1 = ret.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this2 = ret.zpp_inner;
				if(_this2._invalidate != null) {
					_this2._invalidate(_this2);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_localCOM = ret;
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__class__: zpp_$nape_shape_ZPP_$Polygon
});
var zpp_$nape_space_ZPP_$Broadphase = function() {
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
$hxClasses["zpp_nape.space.ZPP_Broadphase"] = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_$nape_space_ZPP_$Broadphase.prototype = {
	insert: function(shape) {
		if(this.is_sweep) {
			this.sweep.__insert(shape);
		} else {
			this.dynab.__insert(shape);
		}
	}
	,remove: function(shape) {
		if(this.is_sweep) {
			this.sweep.__remove(shape);
		} else {
			this.dynab.__remove(shape);
		}
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) {
							var _this = shape.circle;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												_this1.localCOMx += _this1.lverts.next.next.x;
												_this1.localCOMy += _this1.lverts.next.next.y;
												_this1.localCOMx *= 0.5;
												_this1.localCOMy *= 0.5;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite = _this1.lverts.next;
												var u = cx_ite;
												cx_ite = cx_ite.next;
												var v = cx_ite;
												cx_ite = cx_ite.next;
												while(cx_ite != null) {
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
												}
												cx_ite = _this1.lverts.next;
												var w1 = cx_ite;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this1.localCOMx += (v.x + w1.x) * cf1;
												_this1.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												cx_ite = cx_ite.next;
												var w2 = cx_ite;
												area += w1.x * (w2.y - u.y);
												var cf2 = w2.y * w1.x - w2.x * w1.y;
												_this1.localCOMx += (w1.x + w2.x) * cf2;
												_this1.localCOMy += (w1.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t = area;
												_this1.localCOMx *= t;
												_this1.localCOMy *= t;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this2 = _this.body;
									if(_this2.zip_axis) {
										_this2.zip_axis = false;
										_this2.axisx = Math.sin(_this2.rot);
										_this2.axisy = Math.cos(_this2.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							var rx = _this.radius;
							var ry = _this.radius;
							_this.aabb.minx = _this.worldCOMx - rx;
							_this.aabb.miny = _this.worldCOMy - ry;
							_this.aabb.maxx = _this.worldCOMx + rx;
							_this.aabb.maxy = _this.worldCOMy + ry;
						} else {
							var _this3 = shape.polygon;
							if(_this3.zip_gverts) {
								if(_this3.body != null) {
									_this3.zip_gverts = false;
									_this3.validate_lverts();
									var _this4 = _this3.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this3.lverts.next;
									var cx_ite1 = _this3.gverts.next;
									while(cx_ite1 != null) {
										var g = cx_ite1;
										var l = li;
										li = li.next;
										g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
										g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
										cx_ite1 = cx_ite1.next;
									}
								}
							}
							var _this5 = _this3.gverts.next;
							_this3.aabb.minx = _this5.x;
							_this3.aabb.miny = _this5.y;
							_this3.aabb.maxx = _this5.x;
							_this3.aabb.maxy = _this5.y;
							var cx_ite2 = _this3.gverts.next.next;
							while(cx_ite2 != null) {
								var p = cx_ite2;
								if(p.x < _this3.aabb.minx) {
									_this3.aabb.minx = p.x;
								}
								if(p.x > _this3.aabb.maxx) {
									_this3.aabb.maxx = p.x;
								}
								if(p.y < _this3.aabb.miny) {
									_this3.aabb.miny = p.y;
								}
								if(p.y > _this3.aabb.maxy) {
									_this3.aabb.maxy = p.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
					}
				}
			}
		} else {
			var _this6 = this.dynab;
			var node = shape.node;
			if(!node.synced) {
				if(!_this6.space.continuous) {
					if(shape.zip_aabb) {
						if(shape.body != null) {
							shape.zip_aabb = false;
							if(shape.type == 0) {
								var _this7 = shape.circle;
								if(_this7.zip_worldCOM) {
									if(_this7.body != null) {
										_this7.zip_worldCOM = false;
										if(_this7.zip_localCOM) {
											_this7.zip_localCOM = false;
											if(_this7.type == 1) {
												var _this8 = _this7.polygon;
												if(_this8.lverts.next.next == null) {
													_this8.localCOMx = _this8.lverts.next.x;
													_this8.localCOMy = _this8.lverts.next.y;
												} else if(_this8.lverts.next.next.next == null) {
													_this8.localCOMx = _this8.lverts.next.x;
													_this8.localCOMy = _this8.lverts.next.y;
													_this8.localCOMx += _this8.lverts.next.next.x;
													_this8.localCOMy += _this8.lverts.next.next.y;
													_this8.localCOMx *= 0.5;
													_this8.localCOMy *= 0.5;
												} else {
													_this8.localCOMx = 0;
													_this8.localCOMy = 0;
													var area1 = 0.0;
													var cx_ite3 = _this8.lverts.next;
													var u1 = cx_ite3;
													cx_ite3 = cx_ite3.next;
													var v1 = cx_ite3;
													cx_ite3 = cx_ite3.next;
													while(cx_ite3 != null) {
														var w3 = cx_ite3;
														area1 += v1.x * (w3.y - u1.y);
														var cf3 = w3.y * v1.x - w3.x * v1.y;
														_this8.localCOMx += (v1.x + w3.x) * cf3;
														_this8.localCOMy += (v1.y + w3.y) * cf3;
														u1 = v1;
														v1 = w3;
														cx_ite3 = cx_ite3.next;
													}
													cx_ite3 = _this8.lverts.next;
													var w4 = cx_ite3;
													area1 += v1.x * (w4.y - u1.y);
													var cf4 = w4.y * v1.x - w4.x * v1.y;
													_this8.localCOMx += (v1.x + w4.x) * cf4;
													_this8.localCOMy += (v1.y + w4.y) * cf4;
													u1 = v1;
													cx_ite3 = cx_ite3.next;
													var w5 = cx_ite3;
													area1 += w4.x * (w5.y - u1.y);
													var cf5 = w5.y * w4.x - w5.x * w4.y;
													_this8.localCOMx += (w4.x + w5.x) * cf5;
													_this8.localCOMy += (w4.y + w5.y) * cf5;
													area1 = 1 / (3 * area1);
													var t1 = area1;
													_this8.localCOMx *= t1;
													_this8.localCOMy *= t1;
												}
											}
											if(_this7.wrap_localCOM != null) {
												_this7.wrap_localCOM.zpp_inner.x = _this7.localCOMx;
												_this7.wrap_localCOM.zpp_inner.y = _this7.localCOMy;
											}
										}
										var _this9 = _this7.body;
										if(_this9.zip_axis) {
											_this9.zip_axis = false;
											_this9.axisx = Math.sin(_this9.rot);
											_this9.axisy = Math.cos(_this9.rot);
										}
										_this7.worldCOMx = _this7.body.posx + (_this7.body.axisy * _this7.localCOMx - _this7.body.axisx * _this7.localCOMy);
										_this7.worldCOMy = _this7.body.posy + (_this7.localCOMx * _this7.body.axisx + _this7.localCOMy * _this7.body.axisy);
									}
								}
								var rx1 = _this7.radius;
								var ry1 = _this7.radius;
								_this7.aabb.minx = _this7.worldCOMx - rx1;
								_this7.aabb.miny = _this7.worldCOMy - ry1;
								_this7.aabb.maxx = _this7.worldCOMx + rx1;
								_this7.aabb.maxy = _this7.worldCOMy + ry1;
							} else {
								var _this10 = shape.polygon;
								if(_this10.zip_gverts) {
									if(_this10.body != null) {
										_this10.zip_gverts = false;
										_this10.validate_lverts();
										var _this11 = _this10.body;
										if(_this11.zip_axis) {
											_this11.zip_axis = false;
											_this11.axisx = Math.sin(_this11.rot);
											_this11.axisy = Math.cos(_this11.rot);
										}
										var li1 = _this10.lverts.next;
										var cx_ite4 = _this10.gverts.next;
										while(cx_ite4 != null) {
											var g1 = cx_ite4;
											var l1 = li1;
											li1 = li1.next;
											g1.x = _this10.body.posx + (_this10.body.axisy * l1.x - _this10.body.axisx * l1.y);
											g1.y = _this10.body.posy + (l1.x * _this10.body.axisx + l1.y * _this10.body.axisy);
											cx_ite4 = cx_ite4.next;
										}
									}
								}
								var _this12 = _this10.gverts.next;
								_this10.aabb.minx = _this12.x;
								_this10.aabb.miny = _this12.y;
								_this10.aabb.maxx = _this12.x;
								_this10.aabb.maxy = _this12.y;
								var cx_ite5 = _this10.gverts.next.next;
								while(cx_ite5 != null) {
									var p1 = cx_ite5;
									if(p1.x < _this10.aabb.minx) {
										_this10.aabb.minx = p1.x;
									}
									if(p1.x > _this10.aabb.maxx) {
										_this10.aabb.maxx = p1.x;
									}
									if(p1.y < _this10.aabb.miny) {
										_this10.aabb.miny = p1.y;
									}
									if(p1.y > _this10.aabb.maxy) {
										_this10.aabb.maxy = p1.y;
									}
									cx_ite5 = cx_ite5.next;
								}
							}
						}
					}
				}
				var sync;
				if(node.dyn == (shape.body.type == 1 ? false : !shape.body.component.sleeping)) {
					var _this13 = node.aabb;
					var x = shape.aabb;
					sync = !(x.minx >= _this13.minx && x.miny >= _this13.miny && x.maxx <= _this13.maxx && x.maxy <= _this13.maxy);
				} else {
					sync = true;
				}
				if(sync) {
					node.synced = true;
					node.snext = _this6.syncs;
					_this6.syncs = node;
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
	}
	,clear: function() {
	}
	,__class__: zpp_$nape_space_ZPP_$Broadphase
};
var zpp_$nape_space_ZPP_$AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
$hxClasses["zpp_nape.space.ZPP_AABBNode"] = zpp_$nape_space_ZPP_$AABBNode;
zpp_$nape_space_ZPP_$AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_$nape_space_ZPP_$AABBNode.prototype = {
	__class__: zpp_$nape_space_ZPP_$AABBNode
};
var zpp_$nape_space_ZPP_$AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBPair"] = zpp_$nape_space_ZPP_$AABBPair;
zpp_$nape_space_ZPP_$AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_$nape_space_ZPP_$AABBPair.prototype = {
	__class__: zpp_$nape_space_ZPP_$AABBPair
};
var zpp_$nape_space_ZPP_$AABBTree = function() {
	this.root = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBTree"] = zpp_$nape_space_ZPP_$AABBTree;
zpp_$nape_space_ZPP_$AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_$nape_space_ZPP_$AABBTree.prototype = {
	clear: function() {
		if(this.root == null) {
			return;
		}
		var stack = null;
		this.root.next = stack;
		stack = this.root;
		while(stack != null) {
			var ret = stack;
			stack = ret.next;
			ret.next = null;
			if(ret.child1 == null) {
				ret.shape.node = null;
				ret.shape.removedFromSpace();
				ret.shape = null;
			} else {
				if(ret.child1 != null) {
					ret.child1.next = stack;
					stack = ret.child1;
				}
				if(ret.child2 != null) {
					ret.child2.next = stack;
					stack = ret.child2;
				}
			}
			ret.height = -1;
			var o = ret.aabb;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
			ret.child1 = ret.child2 = ret.parent = null;
			ret.next = null;
			ret.snext = null;
			ret.mnext = null;
			ret.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = ret;
		}
		this.root = null;
	}
	,removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling = parent.child1 == leaf ? parent.child2 : parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) {
					gparent.child1 = sibling;
				} else {
					gparent.child2 = sibling;
				}
				sibling.parent = gparent;
				parent.height = -1;
				var o = parent.aabb;
				if(o.outer != null) {
					o.outer.zpp_inner = null;
					o.outer = null;
				}
				o.wrap_min = o.wrap_max = null;
				o._invalidate = null;
				o._validate = null;
				o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
				parent.child1 = parent.child2 = parent.parent = null;
				parent.next = null;
				parent.snext = null;
				parent.mnext = null;
				parent.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = parent;
				var node = gparent;
				while(node != null) {
					if(node.child1 == null || node.height < 2) {
						node = node;
					} else {
						var b = node.child1;
						var c = node.child2;
						var balance = c.height - b.height;
						if(balance > 1) {
							var f = c.child1;
							var g = c.child2;
							c.child1 = node;
							c.parent = node.parent;
							node.parent = c;
							if(c.parent != null) {
								if(c.parent.child1 == node) {
									c.parent.child1 = c;
								} else {
									c.parent.child2 = c;
								}
							} else {
								this.root = c;
							}
							if(f.height > g.height) {
								c.child2 = f;
								node.child2 = g;
								g.parent = node;
								var _this = node.aabb;
								var a = b.aabb;
								var b1 = g.aabb;
								_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
								_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
								_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
								_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
								var _this1 = c.aabb;
								var a1 = node.aabb;
								var b2 = f.aabb;
								_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
								_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
								_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
								_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
								var x = b.height;
								var y = g.height;
								node.height = 1 + (x > y ? x : y);
								var x1 = node.height;
								var y1 = f.height;
								c.height = 1 + (x1 > y1 ? x1 : y1);
							} else {
								c.child2 = g;
								node.child2 = f;
								f.parent = node;
								var _this2 = node.aabb;
								var a2 = b.aabb;
								var b3 = f.aabb;
								_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
								_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
								_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
								_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
								var _this3 = c.aabb;
								var a3 = node.aabb;
								var b4 = g.aabb;
								_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
								_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
								_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
								_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
								var x2 = b.height;
								var y2 = f.height;
								node.height = 1 + (x2 > y2 ? x2 : y2);
								var x3 = node.height;
								var y3 = g.height;
								c.height = 1 + (x3 > y3 ? x3 : y3);
							}
							node = c;
						} else if(balance < -1) {
							var f1 = b.child1;
							var g1 = b.child2;
							b.child1 = node;
							b.parent = node.parent;
							node.parent = b;
							if(b.parent != null) {
								if(b.parent.child1 == node) {
									b.parent.child1 = b;
								} else {
									b.parent.child2 = b;
								}
							} else {
								this.root = b;
							}
							if(f1.height > g1.height) {
								b.child2 = f1;
								node.child1 = g1;
								g1.parent = node;
								var _this4 = node.aabb;
								var a4 = c.aabb;
								var b5 = g1.aabb;
								_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
								_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
								_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
								_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
								var _this5 = b.aabb;
								var a5 = node.aabb;
								var b6 = f1.aabb;
								_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
								_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
								_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
								_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
								var x4 = c.height;
								var y4 = g1.height;
								node.height = 1 + (x4 > y4 ? x4 : y4);
								var x5 = node.height;
								var y5 = f1.height;
								b.height = 1 + (x5 > y5 ? x5 : y5);
							} else {
								b.child2 = g1;
								node.child1 = f1;
								f1.parent = node;
								var _this6 = node.aabb;
								var a6 = c.aabb;
								var b7 = f1.aabb;
								_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
								_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
								_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
								_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
								var _this7 = b.aabb;
								var a7 = node.aabb;
								var b8 = g1.aabb;
								_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
								_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
								_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
								_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
								var x6 = c.height;
								var y6 = f1.height;
								node.height = 1 + (x6 > y6 ? x6 : y6);
								var x7 = node.height;
								var y7 = g1.height;
								b.height = 1 + (x7 > y7 ? x7 : y7);
							}
							node = b;
						} else {
							node = node;
						}
					}
					var child1 = node.child1;
					var child2 = node.child2;
					var _this8 = node.aabb;
					var a8 = child1.aabb;
					var b9 = child2.aabb;
					_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
					_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
					_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
					_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
					var x8 = child1.height;
					var y8 = child2.height;
					node.height = 1 + (x8 > y8 ? x8 : y8);
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				parent.height = -1;
				var o1 = parent.aabb;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1.wrap_min = o1.wrap_max = null;
				o1._invalidate = null;
				o1._validate = null;
				o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
				parent.child1 = parent.child2 = parent.parent = null;
				parent.next = null;
				parent.snext = null;
				parent.mnext = null;
				parent.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = parent;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$AABBTree
};
var zpp_$nape_space_ZPP_$DynAABBPhase = function(space) {
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_$nape_space_ZPP_$AABBTree();
	this.dtree = new zpp_$nape_space_ZPP_$AABBTree();
};
$hxClasses["zpp_nape.space.ZPP_DynAABBPhase"] = zpp_$nape_space_ZPP_$DynAABBPhase;
zpp_$nape_space_ZPP_$DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_$nape_space_ZPP_$DynAABBPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$DynAABBPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	__insert: function(shape) {
		var node;
		if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
			node = new zpp_$nape_space_ZPP_$AABBNode();
		} else {
			node = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
			node.aabb = new zpp_$nape_geom_ZPP_$AABB();
		} else {
			node.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) {
				this.dtree.removeLeaf(node);
			} else {
				this.stree.removeLeaf(node);
			}
		}
		shape.node = null;
		if(node.synced) {
			var pre = null;
			var cur = this.syncs;
			while(cur != null) {
				if(cur == node) {
					break;
				}
				pre = cur;
				cur = cur.snext;
			}
			if(pre == null) {
				this.syncs = cur.snext;
			} else {
				pre.snext = cur.snext;
			}
			cur.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre1 = null;
			var cur1 = this.moves;
			while(cur1 != null) {
				if(cur1 == node) {
					break;
				}
				pre1 = cur1;
				cur1 = cur1.mnext;
			}
			if(pre1 == null) {
				this.moves = cur1.mnext;
			} else {
				pre1.mnext = cur1.mnext;
			}
			cur1.mnext = null;
			node.moved = false;
		}
		var pre2 = null;
		var cur2 = this.pairs;
		while(cur2 != null) {
			var nxt = cur2.next;
			if(cur2.n1 == node || cur2.n2 == node) {
				if(pre2 == null) {
					this.pairs = nxt;
				} else {
					pre2.next = nxt;
				}
				if(cur2.arb != null) {
					cur2.arb.pair = null;
				}
				cur2.arb = null;
				cur2.n1.shape.pairs.remove(cur2);
				cur2.n2.shape.pairs.remove(cur2);
				var o = cur2;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur2 = nxt;
				continue;
			}
			pre2 = cur2;
			cur2 = nxt;
		}
		while(shape.pairs.head != null) {
			var cur3 = shape.pairs.pop_unsafe();
			if(cur3.n1 == node) {
				cur3.n2.shape.pairs.remove(cur3);
			} else {
				cur3.n1.shape.pairs.remove(cur3);
			}
			if(cur3.arb != null) {
				cur3.arb.pair = null;
			}
			cur3.arb = null;
			cur3.n1 = cur3.n2 = null;
			cur3.sleeping = false;
			cur3.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = cur3;
		}
		node.height = -1;
		var o1 = node.aabb;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1.wrap_min = o1.wrap_max = null;
		o1._invalidate = null;
		o1._validate = null;
		o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
		node.child1 = node.child2 = node.parent = null;
		node.next = null;
		node.snext = null;
		node.mnext = null;
		node.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = node;
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree = node.dyn ? this.dtree : this.stree;
				if(node == tree.root) {
					tree.root = null;
				} else {
					var parent = node.parent;
					var gparent = parent.parent;
					var sibling = parent.child1 == node ? parent.child2 : parent.child1;
					if(gparent != null) {
						if(gparent.child1 == parent) {
							gparent.child1 = sibling;
						} else {
							gparent.child2 = sibling;
						}
						sibling.parent = gparent;
						parent.height = -1;
						var o = parent.aabb;
						if(o.outer != null) {
							o.outer.zpp_inner = null;
							o.outer = null;
						}
						o.wrap_min = o.wrap_max = null;
						o._invalidate = null;
						o._validate = null;
						o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
						zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
						parent.child1 = parent.child2 = parent.parent = null;
						parent.next = null;
						parent.snext = null;
						parent.mnext = null;
						parent.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
						zpp_$nape_space_ZPP_$AABBNode.zpp_pool = parent;
						var node1 = gparent;
						while(node1 != null) {
							if(node1.child1 == null || node1.height < 2) {
								node1 = node1;
							} else {
								var b = node1.child1;
								var c = node1.child2;
								var balance = c.height - b.height;
								if(balance > 1) {
									var f = c.child1;
									var g = c.child2;
									c.child1 = node1;
									c.parent = node1.parent;
									node1.parent = c;
									if(c.parent != null) {
										if(c.parent.child1 == node1) {
											c.parent.child1 = c;
										} else {
											c.parent.child2 = c;
										}
									} else {
										tree.root = c;
									}
									if(f.height > g.height) {
										c.child2 = f;
										node1.child2 = g;
										g.parent = node1;
										var _this = node1.aabb;
										var a = b.aabb;
										var b1 = g.aabb;
										_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
										_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
										_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
										_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
										var _this1 = c.aabb;
										var a1 = node1.aabb;
										var b2 = f.aabb;
										_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
										_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
										_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
										_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
										var x = b.height;
										var y = g.height;
										node1.height = 1 + (x > y ? x : y);
										var x1 = node1.height;
										var y1 = f.height;
										c.height = 1 + (x1 > y1 ? x1 : y1);
									} else {
										c.child2 = g;
										node1.child2 = f;
										f.parent = node1;
										var _this2 = node1.aabb;
										var a2 = b.aabb;
										var b3 = f.aabb;
										_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
										_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
										_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
										_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
										var _this3 = c.aabb;
										var a3 = node1.aabb;
										var b4 = g.aabb;
										_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
										_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
										_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
										_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
										var x2 = b.height;
										var y2 = f.height;
										node1.height = 1 + (x2 > y2 ? x2 : y2);
										var x3 = node1.height;
										var y3 = g.height;
										c.height = 1 + (x3 > y3 ? x3 : y3);
									}
									node1 = c;
								} else if(balance < -1) {
									var f1 = b.child1;
									var g1 = b.child2;
									b.child1 = node1;
									b.parent = node1.parent;
									node1.parent = b;
									if(b.parent != null) {
										if(b.parent.child1 == node1) {
											b.parent.child1 = b;
										} else {
											b.parent.child2 = b;
										}
									} else {
										tree.root = b;
									}
									if(f1.height > g1.height) {
										b.child2 = f1;
										node1.child1 = g1;
										g1.parent = node1;
										var _this4 = node1.aabb;
										var a4 = c.aabb;
										var b5 = g1.aabb;
										_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
										_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
										_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
										_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
										var _this5 = b.aabb;
										var a5 = node1.aabb;
										var b6 = f1.aabb;
										_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
										_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
										_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
										_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
										var x4 = c.height;
										var y4 = g1.height;
										node1.height = 1 + (x4 > y4 ? x4 : y4);
										var x5 = node1.height;
										var y5 = f1.height;
										b.height = 1 + (x5 > y5 ? x5 : y5);
									} else {
										b.child2 = g1;
										node1.child1 = f1;
										f1.parent = node1;
										var _this6 = node1.aabb;
										var a6 = c.aabb;
										var b7 = f1.aabb;
										_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
										_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
										_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
										_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
										var _this7 = b.aabb;
										var a7 = node1.aabb;
										var b8 = g1.aabb;
										_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
										_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
										_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
										_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
										var x6 = c.height;
										var y6 = f1.height;
										node1.height = 1 + (x6 > y6 ? x6 : y6);
										var x7 = node1.height;
										var y7 = g1.height;
										b.height = 1 + (x7 > y7 ? x7 : y7);
									}
									node1 = b;
								} else {
									node1 = node1;
								}
							}
							var child1 = node1.child1;
							var child2 = node1.child2;
							var _this8 = node1.aabb;
							var a8 = child1.aabb;
							var b9 = child2.aabb;
							_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
							_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
							_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
							_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
							var x8 = child1.height;
							var y8 = child2.height;
							node1.height = 1 + (x8 > y8 ? x8 : y8);
							node1 = node1.parent;
						}
					} else {
						tree.root = sibling;
						sibling.parent = null;
						parent.height = -1;
						var o1 = parent.aabb;
						if(o1.outer != null) {
							o1.outer.zpp_inner = null;
							o1.outer = null;
						}
						o1.wrap_min = o1.wrap_max = null;
						o1._invalidate = null;
						o1._validate = null;
						o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
						zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
						parent.child1 = parent.child2 = parent.parent = null;
						parent.next = null;
						parent.snext = null;
						parent.mnext = null;
						parent.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
						zpp_$nape_space_ZPP_$AABBNode.zpp_pool = parent;
					}
				}
			} else {
				node.first_sync = false;
			}
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) {
							var _this9 = shape.circle;
							if(_this9.zip_worldCOM) {
								if(_this9.body != null) {
									_this9.zip_worldCOM = false;
									if(_this9.zip_localCOM) {
										_this9.zip_localCOM = false;
										if(_this9.type == 1) {
											var _this10 = _this9.polygon;
											if(_this10.lverts.next.next == null) {
												_this10.localCOMx = _this10.lverts.next.x;
												_this10.localCOMy = _this10.lverts.next.y;
											} else if(_this10.lverts.next.next.next == null) {
												_this10.localCOMx = _this10.lverts.next.x;
												_this10.localCOMy = _this10.lverts.next.y;
												_this10.localCOMx += _this10.lverts.next.next.x;
												_this10.localCOMy += _this10.lverts.next.next.y;
												_this10.localCOMx *= 0.5;
												_this10.localCOMy *= 0.5;
											} else {
												_this10.localCOMx = 0;
												_this10.localCOMy = 0;
												var area = 0.0;
												var cx_ite = _this10.lverts.next;
												var u = cx_ite;
												cx_ite = cx_ite.next;
												var v = cx_ite;
												cx_ite = cx_ite.next;
												while(cx_ite != null) {
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this10.localCOMx += (v.x + w.x) * cf;
													_this10.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
												}
												cx_ite = _this10.lverts.next;
												var w1 = cx_ite;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this10.localCOMx += (v.x + w1.x) * cf1;
												_this10.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												cx_ite = cx_ite.next;
												var w2 = cx_ite;
												area += w1.x * (w2.y - u.y);
												var cf2 = w2.y * w1.x - w2.x * w1.y;
												_this10.localCOMx += (w1.x + w2.x) * cf2;
												_this10.localCOMy += (w1.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t = area;
												_this10.localCOMx *= t;
												_this10.localCOMy *= t;
											}
										}
										if(_this9.wrap_localCOM != null) {
											_this9.wrap_localCOM.zpp_inner.x = _this9.localCOMx;
											_this9.wrap_localCOM.zpp_inner.y = _this9.localCOMy;
										}
									}
									var _this11 = _this9.body;
									if(_this11.zip_axis) {
										_this11.zip_axis = false;
										_this11.axisx = Math.sin(_this11.rot);
										_this11.axisy = Math.cos(_this11.rot);
									}
									_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
									_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
								}
							}
							var rx = _this9.radius;
							var ry = _this9.radius;
							_this9.aabb.minx = _this9.worldCOMx - rx;
							_this9.aabb.miny = _this9.worldCOMy - ry;
							_this9.aabb.maxx = _this9.worldCOMx + rx;
							_this9.aabb.maxy = _this9.worldCOMy + ry;
						} else {
							var _this12 = shape.polygon;
							if(_this12.zip_gverts) {
								if(_this12.body != null) {
									_this12.zip_gverts = false;
									_this12.validate_lverts();
									var _this13 = _this12.body;
									if(_this13.zip_axis) {
										_this13.zip_axis = false;
										_this13.axisx = Math.sin(_this13.rot);
										_this13.axisy = Math.cos(_this13.rot);
									}
									var li = _this12.lverts.next;
									var cx_ite1 = _this12.gverts.next;
									while(cx_ite1 != null) {
										var g2 = cx_ite1;
										var l = li;
										li = li.next;
										g2.x = _this12.body.posx + (_this12.body.axisy * l.x - _this12.body.axisx * l.y);
										g2.y = _this12.body.posy + (l.x * _this12.body.axisx + l.y * _this12.body.axisy);
										cx_ite1 = cx_ite1.next;
									}
								}
							}
							var _this14 = _this12.gverts.next;
							_this12.aabb.minx = _this14.x;
							_this12.aabb.miny = _this14.y;
							_this12.aabb.maxx = _this14.x;
							_this12.aabb.maxy = _this14.y;
							var cx_ite2 = _this12.gverts.next.next;
							while(cx_ite2 != null) {
								var p = cx_ite2;
								if(p.x < _this12.aabb.minx) {
									_this12.aabb.minx = p.x;
								}
								if(p.x > _this12.aabb.maxx) {
									_this12.aabb.maxx = p.x;
								}
								if(p.y < _this12.aabb.miny) {
									_this12.aabb.miny = p.y;
								}
								if(p.y > _this12.aabb.maxy) {
									_this12.aabb.maxy = p.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
					}
				}
			}
			var a9 = shape.aabb;
			aabb.minx = a9.minx - 3.0;
			aabb.miny = a9.miny - 3.0;
			aabb.maxx = a9.maxx + 3.0;
			aabb.maxy = a9.maxy + 3.0;
			var tree1 = (node.dyn = shape.body.type == 1 ? false : !shape.body.component.sleeping) ? this.dtree : this.stree;
			if(tree1.root == null) {
				tree1.root = node;
				tree1.root.parent = null;
			} else {
				var leafaabb = node.aabb;
				var node2 = tree1.root;
				while(node2.child1 != null) {
					var child11 = node2.child1;
					var child21 = node2.child2;
					var _this15 = node2.aabb;
					var area1 = (_this15.maxx - _this15.minx + (_this15.maxy - _this15.miny)) * 2;
					var _this16 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var a10 = node2.aabb;
					_this16.minx = a10.minx < leafaabb.minx ? a10.minx : leafaabb.minx;
					_this16.miny = a10.miny < leafaabb.miny ? a10.miny : leafaabb.miny;
					_this16.maxx = a10.maxx > leafaabb.maxx ? a10.maxx : leafaabb.maxx;
					_this16.maxy = a10.maxy > leafaabb.maxy ? a10.maxy : leafaabb.maxy;
					var _this17 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var carea = (_this17.maxx - _this17.minx + (_this17.maxy - _this17.miny)) * 2;
					var cost = 2 * carea;
					var icost = 2 * (carea - area1);
					var _this18 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var b10 = child11.aabb;
					_this18.minx = leafaabb.minx < b10.minx ? leafaabb.minx : b10.minx;
					_this18.miny = leafaabb.miny < b10.miny ? leafaabb.miny : b10.miny;
					_this18.maxx = leafaabb.maxx > b10.maxx ? leafaabb.maxx : b10.maxx;
					_this18.maxy = leafaabb.maxy > b10.maxy ? leafaabb.maxy : b10.maxy;
					var cost1;
					if(child11.child1 == null) {
						var _this19 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost1 = (_this19.maxx - _this19.minx + (_this19.maxy - _this19.miny)) * 2 + icost;
					} else {
						var _this20 = child11.aabb;
						var _this21 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost1 = (_this21.maxx - _this21.minx + (_this21.maxy - _this21.miny)) * 2 - (_this20.maxx - _this20.minx + (_this20.maxy - _this20.miny)) * 2 + icost;
					}
					var _this22 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var b11 = child21.aabb;
					_this22.minx = leafaabb.minx < b11.minx ? leafaabb.minx : b11.minx;
					_this22.miny = leafaabb.miny < b11.miny ? leafaabb.miny : b11.miny;
					_this22.maxx = leafaabb.maxx > b11.maxx ? leafaabb.maxx : b11.maxx;
					_this22.maxy = leafaabb.maxy > b11.maxy ? leafaabb.maxy : b11.maxy;
					var cost2;
					if(child21.child1 == null) {
						var _this23 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost2 = (_this23.maxx - _this23.minx + (_this23.maxy - _this23.miny)) * 2 + icost;
					} else {
						var _this24 = child21.aabb;
						var _this25 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost2 = (_this25.maxx - _this25.minx + (_this25.maxy - _this25.miny)) * 2 - (_this24.maxx - _this24.minx + (_this24.maxy - _this24.miny)) * 2 + icost;
					}
					if(cost < cost1 && cost < cost2) {
						break;
					} else if(cost1 < cost2) {
						node2 = child11;
					} else {
						node2 = child21;
					}
				}
				var sibling1 = node2;
				var oparent = sibling1.parent;
				var nparent;
				if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
					nparent = new zpp_$nape_space_ZPP_$AABBNode();
				} else {
					nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
					zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
					nparent.next = null;
				}
				if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
					nparent.aabb = new zpp_$nape_geom_ZPP_$AABB();
				} else {
					nparent.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
					zpp_$nape_geom_ZPP_$AABB.zpp_pool = nparent.aabb.next;
					nparent.aabb.next = null;
				}
				nparent.moved = false;
				nparent.synced = false;
				nparent.first_sync = false;
				nparent.parent = oparent;
				var _this26 = nparent.aabb;
				var b12 = sibling1.aabb;
				_this26.minx = leafaabb.minx < b12.minx ? leafaabb.minx : b12.minx;
				_this26.miny = leafaabb.miny < b12.miny ? leafaabb.miny : b12.miny;
				_this26.maxx = leafaabb.maxx > b12.maxx ? leafaabb.maxx : b12.maxx;
				_this26.maxy = leafaabb.maxy > b12.maxy ? leafaabb.maxy : b12.maxy;
				nparent.height = sibling1.height + 1;
				if(oparent != null) {
					if(oparent.child1 == sibling1) {
						oparent.child1 = nparent;
					} else {
						oparent.child2 = nparent;
					}
					nparent.child1 = sibling1;
					nparent.child2 = node;
					sibling1.parent = nparent;
					node.parent = nparent;
				} else {
					nparent.child1 = sibling1;
					nparent.child2 = node;
					sibling1.parent = nparent;
					node.parent = nparent;
					tree1.root = nparent;
				}
				node2 = node.parent;
				while(node2 != null) {
					if(node2.child1 == null || node2.height < 2) {
						node2 = node2;
					} else {
						var b13 = node2.child1;
						var c1 = node2.child2;
						var balance1 = c1.height - b13.height;
						if(balance1 > 1) {
							var f2 = c1.child1;
							var g3 = c1.child2;
							c1.child1 = node2;
							c1.parent = node2.parent;
							node2.parent = c1;
							if(c1.parent != null) {
								if(c1.parent.child1 == node2) {
									c1.parent.child1 = c1;
								} else {
									c1.parent.child2 = c1;
								}
							} else {
								tree1.root = c1;
							}
							if(f2.height > g3.height) {
								c1.child2 = f2;
								node2.child2 = g3;
								g3.parent = node2;
								var _this27 = node2.aabb;
								var a11 = b13.aabb;
								var b14 = g3.aabb;
								_this27.minx = a11.minx < b14.minx ? a11.minx : b14.minx;
								_this27.miny = a11.miny < b14.miny ? a11.miny : b14.miny;
								_this27.maxx = a11.maxx > b14.maxx ? a11.maxx : b14.maxx;
								_this27.maxy = a11.maxy > b14.maxy ? a11.maxy : b14.maxy;
								var _this28 = c1.aabb;
								var a12 = node2.aabb;
								var b15 = f2.aabb;
								_this28.minx = a12.minx < b15.minx ? a12.minx : b15.minx;
								_this28.miny = a12.miny < b15.miny ? a12.miny : b15.miny;
								_this28.maxx = a12.maxx > b15.maxx ? a12.maxx : b15.maxx;
								_this28.maxy = a12.maxy > b15.maxy ? a12.maxy : b15.maxy;
								var x9 = b13.height;
								var y9 = g3.height;
								node2.height = 1 + (x9 > y9 ? x9 : y9);
								var x10 = node2.height;
								var y10 = f2.height;
								c1.height = 1 + (x10 > y10 ? x10 : y10);
							} else {
								c1.child2 = g3;
								node2.child2 = f2;
								f2.parent = node2;
								var _this29 = node2.aabb;
								var a13 = b13.aabb;
								var b16 = f2.aabb;
								_this29.minx = a13.minx < b16.minx ? a13.minx : b16.minx;
								_this29.miny = a13.miny < b16.miny ? a13.miny : b16.miny;
								_this29.maxx = a13.maxx > b16.maxx ? a13.maxx : b16.maxx;
								_this29.maxy = a13.maxy > b16.maxy ? a13.maxy : b16.maxy;
								var _this30 = c1.aabb;
								var a14 = node2.aabb;
								var b17 = g3.aabb;
								_this30.minx = a14.minx < b17.minx ? a14.minx : b17.minx;
								_this30.miny = a14.miny < b17.miny ? a14.miny : b17.miny;
								_this30.maxx = a14.maxx > b17.maxx ? a14.maxx : b17.maxx;
								_this30.maxy = a14.maxy > b17.maxy ? a14.maxy : b17.maxy;
								var x11 = b13.height;
								var y11 = f2.height;
								node2.height = 1 + (x11 > y11 ? x11 : y11);
								var x12 = node2.height;
								var y12 = g3.height;
								c1.height = 1 + (x12 > y12 ? x12 : y12);
							}
							node2 = c1;
						} else if(balance1 < -1) {
							var f3 = b13.child1;
							var g4 = b13.child2;
							b13.child1 = node2;
							b13.parent = node2.parent;
							node2.parent = b13;
							if(b13.parent != null) {
								if(b13.parent.child1 == node2) {
									b13.parent.child1 = b13;
								} else {
									b13.parent.child2 = b13;
								}
							} else {
								tree1.root = b13;
							}
							if(f3.height > g4.height) {
								b13.child2 = f3;
								node2.child1 = g4;
								g4.parent = node2;
								var _this31 = node2.aabb;
								var a15 = c1.aabb;
								var b18 = g4.aabb;
								_this31.minx = a15.minx < b18.minx ? a15.minx : b18.minx;
								_this31.miny = a15.miny < b18.miny ? a15.miny : b18.miny;
								_this31.maxx = a15.maxx > b18.maxx ? a15.maxx : b18.maxx;
								_this31.maxy = a15.maxy > b18.maxy ? a15.maxy : b18.maxy;
								var _this32 = b13.aabb;
								var a16 = node2.aabb;
								var b19 = f3.aabb;
								_this32.minx = a16.minx < b19.minx ? a16.minx : b19.minx;
								_this32.miny = a16.miny < b19.miny ? a16.miny : b19.miny;
								_this32.maxx = a16.maxx > b19.maxx ? a16.maxx : b19.maxx;
								_this32.maxy = a16.maxy > b19.maxy ? a16.maxy : b19.maxy;
								var x13 = c1.height;
								var y13 = g4.height;
								node2.height = 1 + (x13 > y13 ? x13 : y13);
								var x14 = node2.height;
								var y14 = f3.height;
								b13.height = 1 + (x14 > y14 ? x14 : y14);
							} else {
								b13.child2 = g4;
								node2.child1 = f3;
								f3.parent = node2;
								var _this33 = node2.aabb;
								var a17 = c1.aabb;
								var b20 = f3.aabb;
								_this33.minx = a17.minx < b20.minx ? a17.minx : b20.minx;
								_this33.miny = a17.miny < b20.miny ? a17.miny : b20.miny;
								_this33.maxx = a17.maxx > b20.maxx ? a17.maxx : b20.maxx;
								_this33.maxy = a17.maxy > b20.maxy ? a17.maxy : b20.maxy;
								var _this34 = b13.aabb;
								var a18 = node2.aabb;
								var b21 = g4.aabb;
								_this34.minx = a18.minx < b21.minx ? a18.minx : b21.minx;
								_this34.miny = a18.miny < b21.miny ? a18.miny : b21.miny;
								_this34.maxx = a18.maxx > b21.maxx ? a18.maxx : b21.maxx;
								_this34.maxy = a18.maxy > b21.maxy ? a18.maxy : b21.maxy;
								var x15 = c1.height;
								var y15 = f3.height;
								node2.height = 1 + (x15 > y15 ? x15 : y15);
								var x16 = node2.height;
								var y16 = g4.height;
								b13.height = 1 + (x16 > y16 ? x16 : y16);
							}
							node2 = b13;
						} else {
							node2 = node2;
						}
					}
					var child12 = node2.child1;
					var child22 = node2.child2;
					var x17 = child12.height;
					var y17 = child22.height;
					node2.height = 1 + (x17 > y17 ? x17 : y17);
					var _this35 = node2.aabb;
					var a19 = child12.aabb;
					var b22 = child22.aabb;
					_this35.minx = a19.minx < b22.minx ? a19.minx : b22.minx;
					_this35.miny = a19.miny < b22.miny ? a19.miny : b22.miny;
					_this35.maxx = a19.maxx > b22.maxx ? a19.maxx : b22.maxx;
					_this35.maxy = a19.maxy > b22.maxy ? a19.maxy : b22.maxy;
					node2 = node2.parent;
				}
			}
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			if(ret.moved) {
				continue;
			}
			ret.moved = false;
			var lshape = ret.shape;
			if(lshape.body.component.sleeping) {
				continue;
			}
			var ab = ret.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				if(ret1 == ret) {
					continue;
				}
				if(ret1.child1 == null) {
					var shape1 = ret1.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == 1 && lshape.body.type == 1)) {
						var x18 = ret1.aabb;
						if(x18.miny <= ab.maxy && ab.miny <= x18.maxy && x18.minx <= ab.maxx && ab.minx <= x18.maxx) {
							var id;
							var di;
							if(lshape.id < shape1.id) {
								id = lshape.id;
								di = shape1.id;
							} else {
								id = shape1.id;
								di = lshape.id;
							}
							var p1 = null;
							var cx_ite3 = (lshape.pairs.length < shape1.pairs.length ? lshape : shape1).pairs.head;
							while(cx_ite3 != null) {
								var px = cx_ite3.elt;
								if(px.id == id && px.di == di) {
									p1 = px;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p1 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p1 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							p1.n1 = ret;
							p1.n2 = ret1;
							p1.id = id;
							p1.di = di;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							var _this36 = lshape.pairs;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = p1;
							var temp = ret2;
							temp.next = _this36.head;
							_this36.head = temp;
							_this36.modified = true;
							_this36.length++;
							var _this37 = shape1.pairs;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = p1;
							var temp1 = ret3;
							temp1.next = _this37.head;
							_this37.head = temp1;
							_this37.modified = true;
							_this37.length++;
						}
					}
				} else {
					var x19 = ret1.aabb;
					if(x19.miny <= ab.maxy && ab.miny <= x19.maxy && x19.minx <= ab.maxx && ab.minx <= x19.maxx) {
						if(ret1.child1 != null) {
							ret1.child1.next = stack;
							stack = ret1.child1;
						}
						if(ret1.child2 != null) {
							ret1.child2.next = stack;
							stack = ret1.child2;
						}
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var ret4 = stack;
				stack = ret4.next;
				ret4.next = null;
				if(ret4 == ret) {
					continue;
				}
				if(ret4.child1 == null) {
					var shape2 = ret4.shape;
					if(shape2.body != lshape.body && !(shape2.body.type == 1 && lshape.body.type == 1)) {
						var x20 = ret4.aabb;
						if(x20.miny <= ab.maxy && ab.miny <= x20.maxy && x20.minx <= ab.maxx && ab.minx <= x20.maxx) {
							var id1;
							var di1;
							if(lshape.id < shape2.id) {
								id1 = lshape.id;
								di1 = shape2.id;
							} else {
								id1 = shape2.id;
								di1 = lshape.id;
							}
							var p2 = null;
							var cx_ite4 = (lshape.pairs.length < shape2.pairs.length ? lshape : shape2).pairs.head;
							while(cx_ite4 != null) {
								var px1 = cx_ite4.elt;
								if(px1.id == id1 && px1.di == di1) {
									p2 = px1;
									break;
								}
								cx_ite4 = cx_ite4.next;
							}
							if(p2 != null) {
								if(p2.sleeping) {
									p2.sleeping = false;
									p2.next = this.pairs;
									this.pairs = p2;
									p2.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p2 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p2 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p2.next;
								p2.next = null;
							}
							p2.n1 = ret;
							p2.n2 = ret4;
							p2.id = id1;
							p2.di = di1;
							p2.next = this.pairs;
							this.pairs = p2;
							p2.first = true;
							var _this38 = lshape.pairs;
							var ret5;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret5 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.elt = p2;
							var temp2 = ret5;
							temp2.next = _this38.head;
							_this38.head = temp2;
							_this38.modified = true;
							_this38.length++;
							var _this39 = shape2.pairs;
							var ret6;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret6 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.elt = p2;
							var temp3 = ret6;
							temp3.next = _this39.head;
							_this39.head = temp3;
							_this39.modified = true;
							_this39.length++;
						}
					}
				} else {
					var x21 = ret4.aabb;
					if(x21.miny <= ab.maxy && ab.miny <= x21.maxy && x21.minx <= ab.maxx && ab.minx <= x21.maxx) {
						if(ret4.child1 != null) {
							ret4.child1.next = stack;
							stack = ret4.child1;
						}
						if(ret4.child2 != null) {
							ret4.child2.next = stack;
							stack = ret4.child2;
						}
					}
				}
			}
		}
		while(this.moves != null) {
			var ret7 = this.moves;
			this.moves = ret7.mnext;
			ret7.mnext = null;
			ret7.moved = false;
			var lshape1 = ret7.shape;
			if(lshape1.body.component.sleeping) {
				continue;
			}
			var ab1 = ret7.aabb;
			var stack1 = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack1;
				stack1 = this.dtree.root;
			}
			while(stack1 != null) {
				var ret8 = stack1;
				stack1 = ret8.next;
				ret8.next = null;
				if(ret8 == ret7) {
					continue;
				}
				if(ret8.child1 == null) {
					var shape3 = ret8.shape;
					if(shape3.body != lshape1.body && !(shape3.body.type == 1 && lshape1.body.type == 1)) {
						var x22 = ret8.aabb;
						if(x22.miny <= ab1.maxy && ab1.miny <= x22.maxy && x22.minx <= ab1.maxx && ab1.minx <= x22.maxx) {
							var id2;
							var di2;
							if(lshape1.id < shape3.id) {
								id2 = lshape1.id;
								di2 = shape3.id;
							} else {
								id2 = shape3.id;
								di2 = lshape1.id;
							}
							var p3 = null;
							var cx_ite5 = (lshape1.pairs.length < shape3.pairs.length ? lshape1 : shape3).pairs.head;
							while(cx_ite5 != null) {
								var px2 = cx_ite5.elt;
								if(px2.id == id2 && px2.di == di2) {
									p3 = px2;
									break;
								}
								cx_ite5 = cx_ite5.next;
							}
							if(p3 != null) {
								if(p3.sleeping) {
									p3.sleeping = false;
									p3.next = this.pairs;
									this.pairs = p3;
									p3.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p3 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p3 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p3.next;
								p3.next = null;
							}
							p3.n1 = ret7;
							p3.n2 = ret8;
							p3.id = id2;
							p3.di = di2;
							p3.next = this.pairs;
							this.pairs = p3;
							p3.first = true;
							var _this40 = lshape1.pairs;
							var ret9;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret9 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret9 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret9.next;
								ret9.next = null;
							}
							ret9.elt = p3;
							var temp4 = ret9;
							temp4.next = _this40.head;
							_this40.head = temp4;
							_this40.modified = true;
							_this40.length++;
							var _this41 = shape3.pairs;
							var ret10;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret10 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret10 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret10.next;
								ret10.next = null;
							}
							ret10.elt = p3;
							var temp5 = ret10;
							temp5.next = _this41.head;
							_this41.head = temp5;
							_this41.modified = true;
							_this41.length++;
						}
					}
				} else {
					var x23 = ret8.aabb;
					if(x23.miny <= ab1.maxy && ab1.miny <= x23.maxy && x23.minx <= ab1.maxx && ab1.minx <= x23.maxx) {
						if(ret8.child1 != null) {
							ret8.child1.next = stack1;
							stack1 = ret8.child1;
						}
						if(ret8.child2 != null) {
							ret8.child2.next = stack1;
							stack1 = ret8.child2;
						}
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack1;
				stack1 = this.stree.root;
			}
			while(stack1 != null) {
				var ret11 = stack1;
				stack1 = ret11.next;
				ret11.next = null;
				if(ret11 == ret7) {
					continue;
				}
				if(ret11.child1 == null) {
					var shape4 = ret11.shape;
					if(shape4.body != lshape1.body && !(shape4.body.type == 1 && lshape1.body.type == 1)) {
						var x24 = ret11.aabb;
						if(x24.miny <= ab1.maxy && ab1.miny <= x24.maxy && x24.minx <= ab1.maxx && ab1.minx <= x24.maxx) {
							var id3;
							var di3;
							if(lshape1.id < shape4.id) {
								id3 = lshape1.id;
								di3 = shape4.id;
							} else {
								id3 = shape4.id;
								di3 = lshape1.id;
							}
							var p4 = null;
							var cx_ite6 = (lshape1.pairs.length < shape4.pairs.length ? lshape1 : shape4).pairs.head;
							while(cx_ite6 != null) {
								var px3 = cx_ite6.elt;
								if(px3.id == id3 && px3.di == di3) {
									p4 = px3;
									break;
								}
								cx_ite6 = cx_ite6.next;
							}
							if(p4 != null) {
								if(p4.sleeping) {
									p4.sleeping = false;
									p4.next = this.pairs;
									this.pairs = p4;
									p4.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p4 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p4 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p4.next;
								p4.next = null;
							}
							p4.n1 = ret7;
							p4.n2 = ret11;
							p4.id = id3;
							p4.di = di3;
							p4.next = this.pairs;
							this.pairs = p4;
							p4.first = true;
							var _this42 = lshape1.pairs;
							var ret12;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret12 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret12 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret12.next;
								ret12.next = null;
							}
							ret12.elt = p4;
							var temp6 = ret12;
							temp6.next = _this42.head;
							_this42.head = temp6;
							_this42.modified = true;
							_this42.length++;
							var _this43 = shape4.pairs;
							var ret13;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret13 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret13 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret13.next;
								ret13.next = null;
							}
							ret13.elt = p4;
							var temp7 = ret13;
							temp7.next = _this43.head;
							_this43.head = temp7;
							_this43.modified = true;
							_this43.length++;
						}
					}
				} else {
					var x25 = ret11.aabb;
					if(x25.miny <= ab1.maxy && ab1.miny <= x25.maxy && x25.minx <= ab1.maxx && ab1.minx <= x25.maxx) {
						if(ret11.child1 != null) {
							ret11.child1.next = stack1;
							stack1 = ret11.child1;
						}
						if(ret11.child2 != null) {
							ret11.child2.next = stack1;
							stack1 = ret11.child2;
						}
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			var tmp;
			if(!cur.first) {
				var _this44 = cur.n1.aabb;
				var x26 = cur.n2.aabb;
				tmp = !(x26.miny <= _this44.maxy && _this44.miny <= x26.maxy && x26.minx <= _this44.maxx && _this44.minx <= x26.maxx);
			} else {
				tmp = false;
			}
			if(tmp) {
				if(pre == null) {
					this.pairs = cur.next;
				} else {
					pre.next = cur.next;
				}
				var _this45 = cur.n1.shape.pairs;
				var pre1 = null;
				var cur1 = _this45.head;
				while(cur1 != null) {
					if(cur1.elt == cur) {
						var old;
						var ret14;
						if(pre1 == null) {
							old = _this45.head;
							ret14 = old.next;
							_this45.head = ret14;
							if(_this45.head == null) {
								_this45.pushmod = true;
							}
						} else {
							old = pre1.next;
							ret14 = old.next;
							pre1.next = ret14;
							if(ret14 == null) {
								_this45.pushmod = true;
							}
						}
						var o2 = old;
						o2.elt = null;
						o2.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o2;
						_this45.modified = true;
						_this45.length--;
						_this45.pushmod = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
				var _this46 = cur.n2.shape.pairs;
				var pre2 = null;
				var cur2 = _this46.head;
				while(cur2 != null) {
					if(cur2.elt == cur) {
						var old1;
						var ret15;
						if(pre2 == null) {
							old1 = _this46.head;
							ret15 = old1.next;
							_this46.head = ret15;
							if(_this46.head == null) {
								_this46.pushmod = true;
							}
						} else {
							old1 = pre2.next;
							ret15 = old1.next;
							pre2.next = ret15;
							if(ret15 == null) {
								_this46.pushmod = true;
							}
						}
						var o3 = old1;
						o3.elt = null;
						o3.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o3;
						_this46.modified = true;
						_this46.length--;
						_this46.pushmod = true;
						break;
					}
					pre2 = cur2;
					cur2 = cur2.next;
				}
				var nxt = cur.next;
				if(cur.arb != null) {
					cur.arb.pair = null;
				}
				cur.arb = null;
				var o4 = cur;
				o4.n1 = o4.n2 = null;
				o4.sleeping = false;
				o4.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o4;
				cur = nxt;
				continue;
			}
			var s1 = cur.n1.shape;
			var b110 = s1.body;
			var s2 = cur.n2.shape;
			var b23 = s2.body;
			if(!cur.first) {
				if((b110.component.sleeping || b110.type == 1) && (b23.component.sleeping || b23.type == 1)) {
					cur.sleeping = true;
					if(pre == null) {
						this.pairs = cur.next;
					} else {
						pre.next = cur.next;
					}
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			var _this47 = s1.aabb;
			var x27 = s2.aabb;
			if(x27.miny <= _this47.maxy && _this47.miny <= x27.maxy && x27.minx <= _this47.maxx && _this47.minx <= x27.maxx) {
				var oarb = cur.arb;
				if(discrete) {
					cur.arb = space.narrowPhase(s1,s2,b110.type != 2 || b23.type != 2,cur.arb,false);
				} else {
					cur.arb = space.continuousEvent(s1,s2,b110.type != 2 || b23.type != 2,cur.arb,false);
				}
				if(cur.arb == null) {
					if(oarb != null) {
						oarb.pair = null;
					}
				} else {
					cur.arb.pair = cur;
				}
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.syncs != null) {
			var next = this.syncs.snext;
			this.syncs.snext = null;
			if(this.syncs.first_sync) {
				this.syncs.shape.node = null;
				this.syncs.shape.removedFromSpace();
				this.syncs.shape = null;
			}
			this.syncs = next;
		}
		while(this.moves != null) {
			var next1 = this.moves.mnext;
			this.moves.mnext = null;
			if(this.moves.first_sync) {
				this.moves.shape.node = null;
				this.moves.shape.removedFromSpace();
				this.moves.shape = null;
			}
			this.moves = next1;
		}
		while(this.pairs != null) {
			var nxt = this.pairs.next;
			if(this.pairs.arb != null) {
				this.pairs.arb.pair = null;
			}
			this.pairs.arb = null;
			var _this = this.pairs.n1.shape.pairs;
			var obj = this.pairs;
			var pre = null;
			var cur = _this.head;
			while(cur != null) {
				if(cur.elt == obj) {
					var old;
					var ret;
					if(pre == null) {
						old = _this.head;
						ret = old.next;
						_this.head = ret;
						if(_this.head == null) {
							_this.pushmod = true;
						}
					} else {
						old = pre.next;
						ret = old.next;
						pre.next = ret;
						if(ret == null) {
							_this.pushmod = true;
						}
					}
					var o = old;
					o.elt = null;
					o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
					_this.modified = true;
					_this.length--;
					_this.pushmod = true;
					break;
				}
				pre = cur;
				cur = cur.next;
			}
			var _this1 = this.pairs.n2.shape.pairs;
			var obj1 = this.pairs;
			var pre1 = null;
			var cur1 = _this1.head;
			while(cur1 != null) {
				if(cur1.elt == obj1) {
					var old1;
					var ret1;
					if(pre1 == null) {
						old1 = _this1.head;
						ret1 = old1.next;
						_this1.head = ret1;
						if(_this1.head == null) {
							_this1.pushmod = true;
						}
					} else {
						old1 = pre1.next;
						ret1 = old1.next;
						pre1.next = ret1;
						if(ret1 == null) {
							_this1.pushmod = true;
						}
					}
					var o1 = old1;
					o1.elt = null;
					o1.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o1;
					_this1.modified = true;
					_this1.length--;
					_this1.pushmod = true;
					break;
				}
				pre1 = cur1;
				cur1 = cur1.next;
			}
			var o2 = this.pairs;
			o2.n1 = o2.n2 = null;
			o2.sleeping = false;
			o2.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o2;
			this.pairs = nxt;
		}
		this.dtree.clear();
		this.stree.clear();
	}
	,__class__: zpp_$nape_space_ZPP_$DynAABBPhase
});
var zpp_$nape_space_ZPP_$Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_$nape_util_ZNPList_$ZPP_$Component();
};
$hxClasses["zpp_nape.space.ZPP_Island"] = zpp_$nape_space_ZPP_$Island;
zpp_$nape_space_ZPP_$Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_$nape_space_ZPP_$Island.prototype = {
	pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,__class__: zpp_$nape_space_ZPP_$Island
};
var zpp_$nape_space_ZPP_$Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
$hxClasses["zpp_nape.space.ZPP_Component"] = zpp_$nape_space_ZPP_$Component;
zpp_$nape_space_ZPP_$Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_$nape_space_ZPP_$Component.prototype = {
	__class__: zpp_$nape_space_ZPP_$Component
};
var zpp_$nape_space_ZPP_$CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
};
$hxClasses["zpp_nape.space.ZPP_CallbackSet"] = zpp_$nape_space_ZPP_$CallbackSet;
zpp_$nape_space_ZPP_$CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
zpp_$nape_space_ZPP_$CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool == null) {
		ret = new zpp_$nape_space_ZPP_$CallbackSet();
	} else {
		ret = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = 1;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = 1;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = 1;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_$nape_space_ZPP_$CallbackSet.prototype = {
	pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var _this = this.next;
		this.pop();
		return _this;
	}
	,remove_arb: function(x) {
		var _this = this.arbiters;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == x) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) if((cx_ite.elt.type & type) == 0) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		return retvar;
	}
	,__class__: zpp_$nape_space_ZPP_$CallbackSet
};
var zpp_$nape_space_ZPP_$CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
		this.cbsets = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
	} else {
		this.cbsets = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	this.cbsets.lt = zpp_$nape_callbacks_ZPP_$CbSet.setlt;
	this.space = space;
};
$hxClasses["zpp_nape.space.ZPP_CbSetManager"] = zpp_$nape_space_ZPP_$CbSetManager;
zpp_$nape_space_ZPP_$CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
zpp_$nape_space_ZPP_$CbSetManager.prototype = {
	get: function(cbTypes) {
		if(cbTypes.head == null) {
			return null;
		}
		var fake;
		if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
			fake = new zpp_$nape_callbacks_ZPP_$CbSet();
		} else {
			fake = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) {
			ret = res.data;
		} else {
			var set = zpp_$nape_callbacks_ZPP_$CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.listeners.clear();
		o.zip_listeners = true;
		o.bodylisteners.clear();
		o.zip_bodylisteners = true;
		o.conlisteners.clear();
		o.zip_conlisteners = true;
		while(o.cbTypes.head != null) o.cbTypes.pop_unsafe().cbsets.remove(o);
		o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(set.cbpairs.head != null) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) {
					pair.b.cbpairs.remove(pair);
				} else {
					pair.a.cbpairs.remove(pair);
				}
			}
			pair.a = pair.b = null;
			pair.listeners.clear();
			pair.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = pair;
		}
		set.manager = null;
	}
	,__class__: zpp_$nape_space_ZPP_$CbSetManager
};
var zpp_$nape_space_ZPP_$Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.outer = null;
	this.toiEvents = new zpp_$nape_util_ZNPList_$ZPP_$ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	this.precb = new nape_callbacks_PreCallback();
	this.precb.zpp_inner = new zpp_$nape_callbacks_ZPP_$Callback();
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	var tmp;
	if(broadphase != null) {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = broadphase == zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
	} else {
		tmp = true;
	}
	if(tmp) {
		this.bphase = new zpp_$nape_space_ZPP_$DynAABBPhase(this);
	} else {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(broadphase == zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE) {
			this.bphase = new zpp_$nape_space_ZPP_$SweepPhase(this);
		}
	}
	this.time = 0.0;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.kinematics = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.c_arbiters_true = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.c_arbiters_false = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.f_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter();
	this.s_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter();
	this.islands = new zpp_$nape_space_ZPP_$Island();
	this.live = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_live = zpp_$nape_util_ZPP_$BodyList.get(this.live,true);
	this.staticsleep = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.live_constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_livecon = zpp_$nape_util_ZPP_$ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_$nape_phys_ZPP_$Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_$nape_callbacks_ZPP_$Callback();
	this.midstep = false;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this.wrap_listeners = zpp_$nape_util_ZPP_$ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.callbackset_list = new zpp_$nape_space_ZPP_$CallbackSet();
	this.mrca1 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.mrca2 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.prelisteners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.cbsets = new zpp_$nape_space_ZPP_$CbSetManager(this);
};
$hxClasses["zpp_nape.space.ZPP_Space"] = zpp_$nape_space_ZPP_$Space;
zpp_$nape_space_ZPP_$Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_$nape_space_ZPP_$Space.prototype = {
	getgravity: function() {
		var x = this.gravityx;
		var y = this.gravityy;
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			var tmp;
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				var _this1 = ret.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this2 = ret.zpp_inner;
				if(_this2._invalidate != null) {
					_this2._invalidate(_this2);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_gravity = ret;
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
		var cx_ite = this.bodies.head;
		while(cx_ite != null) {
			var x1 = cx_ite.elt;
			if(!x1.world) {
				x1.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(x1.type == 3) {
					x1.kinematicDelaySleep = true;
				}
				if(x1.component.sleeping) {
					this.really_wake(x1,false);
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.compounds.head;
		while(cx_ite1 != null) {
			stack.add(cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
		while(stack.head != null) {
			var s = stack.pop_unsafe();
			var cx_ite2 = s.bodies.head;
			while(cx_ite2 != null) {
				var x2 = cx_ite2.elt;
				if(!x2.world) {
					x2.component.waket = this.stamp + (this.midstep ? 0 : 1);
					if(x2.type == 3) {
						x2.kinematicDelaySleep = true;
					}
					if(x2.component.sleeping) {
						this.really_wake(x2,false);
					}
				}
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = s.compounds.head;
			while(cx_ite3 != null) {
				stack.add(cx_ite3.elt);
				cx_ite3 = cx_ite3.next;
			}
		}
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,clear: function() {
		while(this.listeners.head != null) this.remListener(this.listeners.pop_unsafe());
		while(this.callbackset_list.next != null) {
			var c = this.callbackset_list.pop_unsafe();
			c.arbiters.clear();
			c.int1 = c.int2 = null;
			c.id = c.di = -1;
			c.freed = true;
			c.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = c;
		}
		while(this.c_arbiters_true.head != null) {
			var arb = this.c_arbiters_true.pop_unsafe();
			if(!arb.cleared) {
				var _this = arb.b1.arbiters;
				var pre = null;
				var cur = _this.head;
				while(cur != null) {
					if(cur.elt == arb) {
						var old;
						var ret;
						if(pre == null) {
							old = _this.head;
							ret = old.next;
							_this.head = ret;
							if(_this.head == null) {
								_this.pushmod = true;
							}
						} else {
							old = pre.next;
							ret = old.next;
							pre.next = ret;
							if(ret == null) {
								_this.pushmod = true;
							}
						}
						var o = old;
						o.elt = null;
						o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
						_this.modified = true;
						_this.length--;
						_this.pushmod = true;
						break;
					}
					pre = cur;
					cur = cur.next;
				}
				var _this1 = arb.b2.arbiters;
				var pre1 = null;
				var cur1 = _this1.head;
				while(cur1 != null) {
					if(cur1.elt == arb) {
						var old1;
						var ret1;
						if(pre1 == null) {
							old1 = _this1.head;
							ret1 = old1.next;
							_this1.head = ret1;
							if(_this1.head == null) {
								_this1.pushmod = true;
							}
						} else {
							old1 = pre1.next;
							ret1 = old1.next;
							pre1.next = ret1;
							if(ret1 == null) {
								_this1.pushmod = true;
							}
						}
						var o1 = old1;
						o1.elt = null;
						o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o1;
						_this1.modified = true;
						_this1.length--;
						_this1.pushmod = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
				if(arb.pair != null) {
					arb.pair.arb = null;
					arb.pair = null;
				}
			}
			arb.b1 = arb.b2 = null;
			arb.active = false;
			arb.intchange = false;
			while(arb.contacts.next != null) {
				var _this2 = arb.contacts;
				var _this3 = _this2.next;
				_this2.pop();
				_this3.arbiter = null;
				_this3.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = _this3;
				var _this4 = arb.innards;
				var ret2 = _this4.next;
				_this4.next = ret2.next;
				ret2._inuse = false;
				if(_this4.next == null) {
					_this4.pushmod = true;
				}
				_this4.modified = true;
				_this4.length--;
			}
			arb.userdef_dyn_fric = false;
			arb.userdef_stat_fric = false;
			arb.userdef_restitution = false;
			arb.userdef_rfric = false;
			arb.__ref_edge1 = arb.__ref_edge2 = null;
			arb.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb;
			arb.pre_dt = -1.0;
		}
		while(this.c_arbiters_false.head != null) {
			var arb1 = this.c_arbiters_false.pop_unsafe();
			if(!arb1.cleared) {
				var _this5 = arb1.b1.arbiters;
				var pre2 = null;
				var cur2 = _this5.head;
				while(cur2 != null) {
					if(cur2.elt == arb1) {
						var old2;
						var ret3;
						if(pre2 == null) {
							old2 = _this5.head;
							ret3 = old2.next;
							_this5.head = ret3;
							if(_this5.head == null) {
								_this5.pushmod = true;
							}
						} else {
							old2 = pre2.next;
							ret3 = old2.next;
							pre2.next = ret3;
							if(ret3 == null) {
								_this5.pushmod = true;
							}
						}
						var o2 = old2;
						o2.elt = null;
						o2.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o2;
						_this5.modified = true;
						_this5.length--;
						_this5.pushmod = true;
						break;
					}
					pre2 = cur2;
					cur2 = cur2.next;
				}
				var _this6 = arb1.b2.arbiters;
				var pre3 = null;
				var cur3 = _this6.head;
				while(cur3 != null) {
					if(cur3.elt == arb1) {
						var old3;
						var ret4;
						if(pre3 == null) {
							old3 = _this6.head;
							ret4 = old3.next;
							_this6.head = ret4;
							if(_this6.head == null) {
								_this6.pushmod = true;
							}
						} else {
							old3 = pre3.next;
							ret4 = old3.next;
							pre3.next = ret4;
							if(ret4 == null) {
								_this6.pushmod = true;
							}
						}
						var o3 = old3;
						o3.elt = null;
						o3.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o3;
						_this6.modified = true;
						_this6.length--;
						_this6.pushmod = true;
						break;
					}
					pre3 = cur3;
					cur3 = cur3.next;
				}
				if(arb1.pair != null) {
					arb1.pair.arb = null;
					arb1.pair = null;
				}
			}
			arb1.b1 = arb1.b2 = null;
			arb1.active = false;
			arb1.intchange = false;
			while(arb1.contacts.next != null) {
				var _this7 = arb1.contacts;
				var _this8 = _this7.next;
				_this7.pop();
				_this8.arbiter = null;
				_this8.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = _this8;
				var _this9 = arb1.innards;
				var ret5 = _this9.next;
				_this9.next = ret5.next;
				ret5._inuse = false;
				if(_this9.next == null) {
					_this9.pushmod = true;
				}
				_this9.modified = true;
				_this9.length--;
			}
			arb1.userdef_dyn_fric = false;
			arb1.userdef_stat_fric = false;
			arb1.userdef_restitution = false;
			arb1.userdef_rfric = false;
			arb1.__ref_edge1 = arb1.__ref_edge2 = null;
			arb1.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb1;
			arb1.pre_dt = -1.0;
		}
		while(this.s_arbiters.head != null) {
			var arb2 = this.s_arbiters.pop_unsafe();
			if(!arb2.cleared) {
				var _this10 = arb2.b1.arbiters;
				var pre4 = null;
				var cur4 = _this10.head;
				while(cur4 != null) {
					if(cur4.elt == arb2) {
						var old4;
						var ret6;
						if(pre4 == null) {
							old4 = _this10.head;
							ret6 = old4.next;
							_this10.head = ret6;
							if(_this10.head == null) {
								_this10.pushmod = true;
							}
						} else {
							old4 = pre4.next;
							ret6 = old4.next;
							pre4.next = ret6;
							if(ret6 == null) {
								_this10.pushmod = true;
							}
						}
						var o4 = old4;
						o4.elt = null;
						o4.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o4;
						_this10.modified = true;
						_this10.length--;
						_this10.pushmod = true;
						break;
					}
					pre4 = cur4;
					cur4 = cur4.next;
				}
				var _this11 = arb2.b2.arbiters;
				var pre5 = null;
				var cur5 = _this11.head;
				while(cur5 != null) {
					if(cur5.elt == arb2) {
						var old5;
						var ret7;
						if(pre5 == null) {
							old5 = _this11.head;
							ret7 = old5.next;
							_this11.head = ret7;
							if(_this11.head == null) {
								_this11.pushmod = true;
							}
						} else {
							old5 = pre5.next;
							ret7 = old5.next;
							pre5.next = ret7;
							if(ret7 == null) {
								_this11.pushmod = true;
							}
						}
						var o5 = old5;
						o5.elt = null;
						o5.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o5;
						_this11.modified = true;
						_this11.length--;
						_this11.pushmod = true;
						break;
					}
					pre5 = cur5;
					cur5 = cur5.next;
				}
				if(arb2.pair != null) {
					arb2.pair.arb = null;
					arb2.pair = null;
				}
			}
			arb2.b1 = arb2.b2 = null;
			arb2.active = false;
			arb2.intchange = false;
			arb2.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb2;
		}
		while(this.f_arbiters.head != null) {
			var arb3 = this.f_arbiters.pop_unsafe();
			if(!arb3.cleared) {
				var _this12 = arb3.b1.arbiters;
				var pre6 = null;
				var cur6 = _this12.head;
				while(cur6 != null) {
					if(cur6.elt == arb3) {
						var old6;
						var ret8;
						if(pre6 == null) {
							old6 = _this12.head;
							ret8 = old6.next;
							_this12.head = ret8;
							if(_this12.head == null) {
								_this12.pushmod = true;
							}
						} else {
							old6 = pre6.next;
							ret8 = old6.next;
							pre6.next = ret8;
							if(ret8 == null) {
								_this12.pushmod = true;
							}
						}
						var o6 = old6;
						o6.elt = null;
						o6.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o6;
						_this12.modified = true;
						_this12.length--;
						_this12.pushmod = true;
						break;
					}
					pre6 = cur6;
					cur6 = cur6.next;
				}
				var _this13 = arb3.b2.arbiters;
				var pre7 = null;
				var cur7 = _this13.head;
				while(cur7 != null) {
					if(cur7.elt == arb3) {
						var old7;
						var ret9;
						if(pre7 == null) {
							old7 = _this13.head;
							ret9 = old7.next;
							_this13.head = ret9;
							if(_this13.head == null) {
								_this13.pushmod = true;
							}
						} else {
							old7 = pre7.next;
							ret9 = old7.next;
							pre7.next = ret9;
							if(ret9 == null) {
								_this13.pushmod = true;
							}
						}
						var o7 = old7;
						o7.elt = null;
						o7.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o7;
						_this13.modified = true;
						_this13.length--;
						_this13.pushmod = true;
						break;
					}
					pre7 = cur7;
					cur7 = cur7.next;
				}
				if(arb3.pair != null) {
					arb3.pair.arb = null;
					arb3.pair = null;
				}
			}
			arb3.b1 = arb3.b2 = null;
			arb3.active = false;
			arb3.intchange = false;
			arb3.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb3;
			arb3.pre_dt = -1.0;
		}
		this.bphase.clear();
		while(this.bodies.head != null) {
			var b = this.bodies.pop_unsafe();
			if(b.component != null) {
				var i = b.component.island;
				if(i != null) {
					while(i.comps.head != null) {
						var c1 = i.comps.pop_unsafe();
						c1.sleeping = false;
						c1.island = null;
						c1.parent = c1;
						c1.rank = 0;
					}
					i.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = i;
				}
			}
			b.removedFromSpace();
			b.space = null;
		}
		while(this.constraints.head != null) {
			var c2 = this.constraints.pop_unsafe();
			if(c2.component != null) {
				var i1 = c2.component.island;
				if(i1 != null) {
					while(i1.comps.head != null) {
						var c3 = i1.comps.pop_unsafe();
						c3.sleeping = false;
						c3.island = null;
						c3.parent = c3;
						c3.rank = 0;
					}
					i1.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = i1;
				}
			}
			c2.removedFromSpace();
			c2.space = null;
		}
		this.kinematics.clear();
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
		while(this.compounds.head != null) stack.add(this.compounds.pop_unsafe());
		while(stack.head != null) {
			var comp = stack.pop_unsafe();
			comp.removedFromSpace();
			comp.space = null;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var b1 = cx_ite.elt;
				if(b1.component != null) {
					var i2 = b1.component.island;
					if(i2 != null) {
						while(i2.comps.head != null) {
							var c4 = i2.comps.pop_unsafe();
							c4.sleeping = false;
							c4.island = null;
							c4.parent = c4;
							c4.rank = 0;
						}
						i2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = i2;
					}
				}
				b1.removedFromSpace();
				b1.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.constraints.head;
			while(cx_ite1 != null) {
				var c5 = cx_ite1.elt;
				if(c5.component != null) {
					var i3 = c5.component.island;
					if(i3 != null) {
						while(i3.comps.head != null) {
							var c6 = i3.comps.pop_unsafe();
							c6.sleeping = false;
							c6.island = null;
							c6.parent = c6;
							c6.rank = 0;
						}
						i3.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = i3;
					}
				}
				c5.removedFromSpace();
				c5.space = null;
				cx_ite1 = cx_ite1.next;
			}
			var cx_ite2 = comp.compounds.head;
			while(cx_ite2 != null) {
				stack.add(cx_ite2.elt);
				cx_ite2 = cx_ite2.next;
			}
		}
		this.staticsleep.clear();
		this.live.clear();
		this.live_constraints.clear();
		this.stamp = 0;
		this.time = 0.0;
		this.mrca1.clear();
		this.mrca2.clear();
		this.prelisteners.clear();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			}
			this.addBody(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_compounds.remove(x);
			}
			this.addCompound(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			}
			this.addConstraint(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			}
			this.addListener(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
	}
	,remListener: function(x) {
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		var _this = cb.int1.cbsets;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = cb;
		var temp = ret;
		temp.next = _this.head;
		_this.head = temp;
		_this.modified = true;
		_this.length++;
		var _this1 = cb.int2.cbsets;
		var ret1;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) {
			ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet();
		} else {
			ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = cb;
		var temp1 = ret1;
		temp1.next = _this1.head;
		_this1.head = temp1;
		_this1.modified = true;
		_this1.length++;
		var _this2 = this.callbackset_list;
		cb._inuse = true;
		cb.next = _this2.next;
		_this2.next = cb;
		_this2.modified = true;
		_this2.length++;
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		var _this = cb.int1.cbsets;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == cb) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this1 = cb.int2.cbsets;
		var pre1 = null;
		var cur1 = _this1.head;
		while(cur1 != null) {
			if(cur1.elt == cb) {
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.head;
					ret1 = old1.next;
					_this1.head = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
	}
	,transmitType: function(p,new_type) {
		if(!p.world) {
			p.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(p.type == 3) {
				p.kinematicDelaySleep = true;
			}
			if(p.component.sleeping) {
				this.really_wake(p,false);
			}
		}
		if(p.type == 2) {
			this.live.remove(p);
		} else if(p.type == 3) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == 1) {
			this.staticsleep.remove(p);
		}
		p.type = new_type;
		if(p.type == 3) {
			this.kinematics.add(p);
		}
		if(p.type == 1) {
			this.static_validation(p);
		}
		p.component.sleeping = true;
		if(!p.world) {
			p.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(p.type == 3) {
				p.kinematicDelaySleep = true;
			}
			if(p.component.sleeping) {
				this.really_wake(p,true);
			}
		}
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) {
			deleting = false;
		}
		var _gthis = this;
		var body = s.body;
		if(!deleting) {
			body.wake();
		}
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = cx_ite.elt;
			if(xarb.ws1 == s || xarb.ws2 == s) {
				if(xarb.present != 0) {
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							var ret = null;
							var cx_ite3 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
							while(cx_ite3 != null) {
								var p = cx_ite3.elt;
								if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
									ret = p;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(ret == null) {
								var ret1;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret1.a = cb1;
									ret1.b = cb2;
								} else {
									ret1.a = cb2;
									ret1.b = cb1;
								}
								ret = ret1;
								cb1.cbpairs.add(ret);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret);
								}
							}
							if(ret.zip_listeners) {
								ret.zip_listeners = false;
								ret.__validate();
							}
							if(ret.listeners.head == null) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							callbackset.remove_arb(xarb);
							xarb.present--;
							var ret2 = null;
							var cx_ite4 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
							while(cx_ite4 != null) {
								var p1 = cx_ite4.elt;
								if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
									ret2 = p1;
									break;
								}
								cx_ite4 = cx_ite4.next;
							}
							if(ret2 == null) {
								var ret3;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret3 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret3 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret3.next;
									ret3.next = null;
								}
								ret3.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret3.a = cb1;
									ret3.b = cb2;
								} else {
									ret3.a = cb2;
									ret3.b = cb1;
								}
								ret2 = ret3;
								cb1.cbpairs.add(ret2);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret2);
								}
							}
							if(ret2.zip_listeners) {
								ret2.zip_listeners = false;
								ret2.__validate();
							}
							var cx_ite5 = ret2.listeners.head;
							while(cx_ite5 != null) {
								var x = cx_ite5.elt;
								if(x.event == 1) {
									if((x.itype & xarb.type) != 0 && callbackset.empty_arb(x.itype)) {
										var cb = _gthis.push_callback(x);
										cb.event = 1;
										var o1 = callbackset.int1;
										var o2 = callbackset.int2;
										var tmp;
										var _this = x.options1;
										var xs = o1.cbTypes;
										if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
											var _this1 = x.options2;
											var xs1 = o2.cbTypes;
											if(_this1.nonemptyintersection(xs1,_this1.includes)) {
												tmp = !_this1.nonemptyintersection(xs1,_this1.excludes);
											} else {
												tmp = false;
											}
										} else {
											tmp = false;
										}
										if(tmp) {
											cb.int1 = o1;
											cb.int2 = o2;
										} else {
											cb.int1 = o2;
											cb.int2 = o1;
										}
										cb.set = callbackset;
									}
								}
								cx_ite5 = cx_ite5.next;
							}
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb.b1 != body && xarb.b1.type == 2) {
					var o = xarb.b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o.type == 3) {
							o.kinematicDelaySleep = true;
						}
						if(o.component.sleeping) {
							this.really_wake(o,false);
						}
					}
				}
				if(xarb.b2 != body && xarb.b2.type == 2) {
					var o3 = xarb.b2;
					if(!o3.world) {
						o3.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o3.type == 3) {
							o3.kinematicDelaySleep = true;
						}
						if(o3.component.sleeping) {
							this.really_wake(o3,false);
						}
					}
				}
				xarb.cleared = true;
				if(body == null || xarb.b2 == body) {
					var _this2 = xarb.b1.arbiters;
					var pre1 = null;
					var cur = _this2.head;
					while(cur != null) {
						if(cur.elt == xarb) {
							var old;
							var ret4;
							if(pre1 == null) {
								old = _this2.head;
								ret4 = old.next;
								_this2.head = ret4;
								if(_this2.head == null) {
									_this2.pushmod = true;
								}
							} else {
								old = pre1.next;
								ret4 = old.next;
								pre1.next = ret4;
								if(ret4 == null) {
									_this2.pushmod = true;
								}
							}
							var o4 = old;
							o4.elt = null;
							o4.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o4;
							_this2.modified = true;
							_this2.length--;
							_this2.pushmod = true;
							break;
						}
						pre1 = cur;
						cur = cur.next;
					}
				}
				if(body == null || xarb.b1 == body) {
					var _this3 = xarb.b2.arbiters;
					var pre2 = null;
					var cur1 = _this3.head;
					while(cur1 != null) {
						if(cur1.elt == xarb) {
							var old1;
							var ret5;
							if(pre2 == null) {
								old1 = _this3.head;
								ret5 = old1.next;
								_this3.head = ret5;
								if(_this3.head == null) {
									_this3.pushmod = true;
								}
							} else {
								old1 = pre2.next;
								ret5 = old1.next;
								pre2.next = ret5;
								if(ret5 == null) {
									_this3.pushmod = true;
								}
							}
							var o5 = old1;
							o5.elt = null;
							o5.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o5;
							_this3.modified = true;
							_this3.length--;
							_this3.pushmod = true;
							break;
						}
						pre2 = cur1;
						cur1 = cur1.next;
					}
				}
				if(xarb.pair != null) {
					xarb.pair.arb = null;
					xarb.pair = null;
				}
				xarb.active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			this.addBody(cx_ite.elt);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			this.addConstraint(cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			this.addCompound(cx_ite2.elt);
			cx_ite2 = cx_ite2.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			this.remBody(cx_ite.elt);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			this.remConstraint(cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			this.remCompound(cx_ite2.elt);
			cx_ite2 = cx_ite2.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		if(!body.world) {
			body.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(body.type == 3) {
				body.kinematicDelaySleep = true;
			}
			if(body.component.sleeping) {
				this.really_wake(body,true);
			}
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.bphase.insert(shape);
			shape.addedToSpace();
			cx_ite = cx_ite.next;
		}
		if(body.type == 1) {
			this.static_validation(body);
		} else if(body.type != 2) {
			if(flag != 3) {
				this.kinematics.add(body);
			}
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		if(body.type == 1) {
			if(!body.world) {
				body.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(body.type == 3) {
					body.kinematicDelaySleep = true;
				}
				if(body.component.sleeping) {
					this.really_wake(body,true);
				}
			}
			this.staticsleep.remove(body);
		} else if(body.type == 2) {
			if(!body.world) {
				body.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(body.type == 3) {
					body.kinematicDelaySleep = true;
				}
				if(body.component.sleeping) {
					this.really_wake(body,true);
				}
			}
			this.live.remove(body);
		} else {
			if(flag != 3) {
				this.kinematics.remove(body);
			}
			if(!body.world) {
				body.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(body.type == 3) {
					body.kinematicDelaySleep = true;
				}
				if(body.component.sleeping) {
					this.really_wake(body,true);
				}
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			this.removed_shape(cx_ite.elt,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool == null) {
			cb = new zpp_$nape_callbacks_ZPP_$Callback();
		} else {
			cb = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _gthis = this;
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(xxlist.head != null && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				while(true) {
					numMerges = 0;
					left = head;
					head = null;
					tail = head;
					while(left != null) {
						++numMerges;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							++leftSize;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								--rightSize;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else if(left.elt.active && right.elt.active ? left.elt.oc1.dist < right.elt.oc1.dist : true) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else {
								nxt = right;
								right = right.next;
								--rightSize;
							}
							if(tail != null) {
								tail.next = nxt;
							} else {
								head = nxt;
							}
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
					if(!(numMerges > 1)) {
						break;
					}
				}
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.live.head;
		while(cx_ite1 != null) {
			var cur1 = cx_ite1.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cx_ite1 = cx_ite1.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur2 = cx_ite2.elt;
			var urot = cur2.pre_rot != cur2.rot;
			if(!(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy)) {
				var cx_ite3 = cur2.shapes.head;
				while(cx_ite3 != null) {
					var s = cx_ite3.elt;
					if(s.type == 1) {
						s.polygon.invalidate_gverts();
						s.polygon.invalidate_gaxi();
					}
					s.invalidate_worldCOM();
					cx_ite3 = cx_ite3.next;
				}
				cur2.zip_worldCOM = true;
			}
			if(urot) {
				cur2.zip_axis = true;
				var cx_ite4 = cur2.shapes.head;
				while(cx_ite4 != null) {
					var s1 = cx_ite4.elt;
					if(s1.type == 1) {
						s1.polygon.invalidate_gverts();
						s1.polygon.invalidate_gaxi();
					}
					s1.invalidate_worldCOM();
					cx_ite4 = cx_ite4.next;
				}
				cur2.zip_worldCOM = true;
			}
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite5 = this.live.head;
		while(cx_ite5 != null) {
			var cur3 = cx_ite5.elt;
			var urot1 = cur3.pre_rot != cur3.rot;
			if(!(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy)) {
				var cx_ite6 = cur3.shapes.head;
				while(cx_ite6 != null) {
					var s2 = cx_ite6.elt;
					if(s2.type == 1) {
						s2.polygon.invalidate_gverts();
						s2.polygon.invalidate_gaxi();
					}
					s2.invalidate_worldCOM();
					cx_ite6 = cx_ite6.next;
				}
				cur3.zip_worldCOM = true;
			}
			if(urot1) {
				cur3.zip_axis = true;
				var cx_ite7 = cur3.shapes.head;
				while(cx_ite7 != null) {
					var s3 = cx_ite7.elt;
					if(s3.type == 1) {
						s3.polygon.invalidate_gverts();
						s3.polygon.invalidate_gaxi();
					}
					s3.invalidate_worldCOM();
					cx_ite7 = cx_ite7.next;
				}
				cur3.zip_worldCOM = true;
			}
			cx_ite5 = cx_ite5.next;
		}
		var pre = null;
		var cx_ite8 = this.staticsleep.head;
		while(cx_ite8 != null) {
			var b = cx_ite8.elt;
			if(b.type != 3 || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite8 = cx_ite8.next;
					continue;
				}
				b.component.sleeping = true;
				var _this = this.staticsleep;
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				cx_ite8 = ret;
				continue;
			}
			pre = cx_ite8;
			cx_ite8 = cx_ite8.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite9 = this.callbackset_list.next;
		while(cx_ite9 != null) {
			var set = cx_ite9;
			if(set.arbiters.head == null) {
				var _this1 = this.callbackset_list;
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.next;
					ret1 = old1.next;
					_this1.next = ret1;
					if(_this1.next == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				old1._inuse = false;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				cx_ite9 = ret1;
				set.int1 = set.int2 = null;
				set.id = set.di = -1;
				set.freed = true;
				set.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = set;
				continue;
			}
			var ret2;
			ret2 = true;
			var cx_ite10 = set.arbiters.head;
			while(cx_ite10 != null) if(cx_ite10.elt.sleeping) {
				cx_ite10 = cx_ite10.next;
				continue;
			} else {
				ret2 = false;
				break;
			}
			var sleeping = ret2;
			var a = set.int1.cbSet;
			var b1 = set.int2.cbSet;
			var ret3 = null;
			var cx_ite11 = (a.cbpairs.length < b1.cbpairs.length ? a.cbpairs : b1.cbpairs).head;
			while(cx_ite11 != null) {
				var p = cx_ite11.elt;
				if(p.a == a && p.b == b1 || p.a == b1 && p.b == a) {
					ret3 = p;
					break;
				}
				cx_ite11 = cx_ite11.next;
			}
			if(ret3 == null) {
				var ret4;
				if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
					ret4 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
				} else {
					ret4 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
					zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.zip_listeners = true;
				if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b1)) {
					ret4.a = a;
					ret4.b = b1;
				} else {
					ret4.a = b1;
					ret4.b = a;
				}
				ret3 = ret4;
				a.cbpairs.add(ret3);
				if(b1 != a) {
					b1.cbpairs.add(ret3);
				}
			}
			if(ret3.zip_listeners) {
				ret3.zip_listeners = false;
				ret3.__validate();
			}
			var cx_ite12 = ret3.listeners.head;
			while(cx_ite12 != null) {
				var x = cx_ite12.elt;
				if(x.event == 6) {
					if((!sleeping || x.allowSleepingCallbacks) && !set.empty_arb(x.itype)) {
						var cb = _gthis.push_callback(x);
						cb.event = 6;
						var o1 = set.int1;
						var o2 = set.int2;
						var tmp;
						var _this2 = x.options1;
						var xs = o1.cbTypes;
						if(_this2.nonemptyintersection(xs,_this2.includes) && !_this2.nonemptyintersection(xs,_this2.excludes)) {
							var _this3 = x.options2;
							var xs1 = o2.cbTypes;
							if(_this3.nonemptyintersection(xs1,_this3.includes)) {
								tmp = !_this3.nonemptyintersection(xs1,_this3.excludes);
							} else {
								tmp = false;
							}
						} else {
							tmp = false;
						}
						if(tmp) {
							cb.int1 = o1;
							cb.int2 = o2;
						} else {
							cb.int1 = o2;
							cb.int2 = o1;
						}
						cb.set = set;
					}
				}
				cx_ite12 = cx_ite12.next;
			}
			pre1 = cx_ite9;
			cx_ite9 = cx_ite9.next;
		}
		while(!this.callbacks.empty()) {
			var cb1 = this.callbacks.pop();
			if(cb1.listener.type == 0) {
				cb1.listener.body.handler(cb1.wrapper_body());
			} else if(cb1.listener.type == 1) {
				cb1.listener.constraint.handler(cb1.wrapper_con());
			} else if(cb1.listener.type == 2) {
				cb1.listener.interaction.handleri(cb1.wrapper_int());
			}
			cb1.int1 = cb1.int2 = null;
			cb1.body = null;
			cb1.constraint = null;
			cb1.listener = null;
			if(cb1.wrap_arbiters != null) {
				cb1.wrap_arbiters.zpp_inner.inner = null;
			}
			cb1.set = null;
			cb1.next = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = cb1;
		}
	}
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && this.toiEvents.head != null) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b1 = toi.s1.body;
				var b2 = toi.s2.body;
				if(b1.sweepFrozen && b2.sweepFrozen) {
					if(toi.toi != 0 && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(toi.s1,toi.s2)) {
						toi.toi = 0;
					} else {
						cx_ite = this.toiEvents.erase(pre);
						toi.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi;
						continue;
					}
				}
				if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b1.sweepFrozen;
						toi.frozen2 = b2.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,nape_Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							toi.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						toi.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) {
				break;
			}
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b11 = minTOI.s1.body;
			var b21 = minTOI.s2.body;
			if(!b11.sweepFrozen) {
				var dt = curTimeAlpha * deltaTime;
				var delta = dt - b11.sweepTime;
				if(delta != 0) {
					b11.sweepTime = dt;
					b11.posx += b11.velx * delta;
					b11.posy += b11.vely * delta;
					if(b11.angvel != 0) {
						var dr = b11.sweep_angvel * delta;
						b11.rot += dr;
						if(dr * dr > 0.0001) {
							b11.axisx = Math.sin(b11.rot);
							b11.axisy = Math.cos(b11.rot);
						} else {
							var d2 = dr * dr;
							var p = 1 - 0.5 * d2;
							var m = 1 - d2 * d2 / 8;
							var nx = (p * b11.axisx + dr * b11.axisy) * m;
							b11.axisy = (p * b11.axisy - dr * b11.axisx) * m;
							b11.axisx = nx;
						}
					}
				}
				var s = minTOI.s1;
				if(s.type == 0) {
					s.worldCOMx = b11.posx + (b11.axisy * s.localCOMx - b11.axisx * s.localCOMy);
					s.worldCOMy = b11.posy + (s.localCOMx * b11.axisx + s.localCOMy * b11.axisy);
				} else {
					var p1 = s.polygon;
					var li = p1.lverts.next;
					var cx_ite1 = p1.gverts.next;
					while(cx_ite1 != null) {
						var g = cx_ite1;
						var l = li;
						li = li.next;
						g.x = b11.posx + (b11.axisy * l.x - b11.axisx * l.y);
						g.y = b11.posy + (l.x * b11.axisx + l.y * b11.axisy);
						cx_ite1 = cx_ite1.next;
					}
					var ite = p1.edges.head;
					var cx_ite2 = p1.gverts.next;
					var u = cx_ite2;
					cx_ite2 = cx_ite2.next;
					while(cx_ite2 != null) {
						var v = cx_ite2;
						var e = ite.elt;
						ite = ite.next;
						e.gnormx = b11.axisy * e.lnormx - b11.axisx * e.lnormy;
						e.gnormy = e.lnormx * b11.axisx + e.lnormy * b11.axisy;
						e.gprojection = b11.posx * e.gnormx + b11.posy * e.gnormy + e.lprojection;
						e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
						e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
						u = v;
						cx_ite2 = cx_ite2.next;
					}
					var _this = p1.gverts.next;
					var e1 = ite.elt;
					e1.gnormx = b11.axisy * e1.lnormx - b11.axisx * e1.lnormy;
					e1.gnormy = e1.lnormx * b11.axisx + e1.lnormy * b11.axisy;
					e1.gprojection = b11.posx * e1.gnormx + b11.posy * e1.gnormy + e1.lprojection;
					e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
					e1.tp1 = _this.y * e1.gnormx - _this.x * e1.gnormy;
				}
			}
			if(!b21.sweepFrozen) {
				var dt1 = curTimeAlpha * deltaTime;
				var delta1 = dt1 - b21.sweepTime;
				if(delta1 != 0) {
					b21.sweepTime = dt1;
					b21.posx += b21.velx * delta1;
					b21.posy += b21.vely * delta1;
					if(b21.angvel != 0) {
						var dr1 = b21.sweep_angvel * delta1;
						b21.rot += dr1;
						if(dr1 * dr1 > 0.0001) {
							b21.axisx = Math.sin(b21.rot);
							b21.axisy = Math.cos(b21.rot);
						} else {
							var d21 = dr1 * dr1;
							var p2 = 1 - 0.5 * d21;
							var m1 = 1 - d21 * d21 / 8;
							var nx1 = (p2 * b21.axisx + dr1 * b21.axisy) * m1;
							b21.axisy = (p2 * b21.axisy - dr1 * b21.axisx) * m1;
							b21.axisx = nx1;
						}
					}
				}
				var s1 = minTOI.s2;
				if(s1.type == 0) {
					s1.worldCOMx = b21.posx + (b21.axisy * s1.localCOMx - b21.axisx * s1.localCOMy);
					s1.worldCOMy = b21.posy + (s1.localCOMx * b21.axisx + s1.localCOMy * b21.axisy);
				} else {
					var p3 = s1.polygon;
					var li1 = p3.lverts.next;
					var cx_ite3 = p3.gverts.next;
					while(cx_ite3 != null) {
						var g1 = cx_ite3;
						var l1 = li1;
						li1 = li1.next;
						g1.x = b21.posx + (b21.axisy * l1.x - b21.axisx * l1.y);
						g1.y = b21.posy + (l1.x * b21.axisx + l1.y * b21.axisy);
						cx_ite3 = cx_ite3.next;
					}
					var ite1 = p3.edges.head;
					var cx_ite4 = p3.gverts.next;
					var u1 = cx_ite4;
					cx_ite4 = cx_ite4.next;
					while(cx_ite4 != null) {
						var v1 = cx_ite4;
						var e2 = ite1.elt;
						ite1 = ite1.next;
						e2.gnormx = b21.axisy * e2.lnormx - b21.axisx * e2.lnormy;
						e2.gnormy = e2.lnormx * b21.axisx + e2.lnormy * b21.axisy;
						e2.gprojection = b21.posx * e2.gnormx + b21.posy * e2.gnormy + e2.lprojection;
						e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
						e2.tp1 = v1.y * e2.gnormx - v1.x * e2.gnormy;
						u1 = v1;
						cx_ite4 = cx_ite4.next;
					}
					var _this1 = p3.gverts.next;
					var e3 = ite1.elt;
					e3.gnormx = b21.axisy * e3.lnormx - b21.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * b21.axisx + e3.lnormy * b21.axisy;
					e3.gprojection = b21.posx * e3.gnormx + b21.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
					e3.tp1 = _this1.y * e3.gnormx - _this1.x * e3.gnormy;
				}
			}
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL && (arb.active && (arb.immState & 1) != 0)) {
					var _this2 = arb.colarb;
					var jx = _this2.nx * _this2.c1.jnAcc - _this2.ny * _this2.c1.jtAcc;
					var jy = _this2.ny * _this2.c1.jnAcc + _this2.nx * _this2.c1.jtAcc;
					var t = _this2.b1.imass;
					_this2.b1.velx -= jx * t;
					_this2.b1.vely -= jy * t;
					_this2.b1.angvel -= _this2.b1.iinertia * (jy * _this2.c1.r1x - jx * _this2.c1.r1y);
					var t1 = _this2.b2.imass;
					_this2.b2.velx += jx * t1;
					_this2.b2.vely += jy * t1;
					_this2.b2.angvel += _this2.b2.iinertia * (jy * _this2.c1.r2x - jx * _this2.c1.r2y);
					if(_this2.hc2) {
						var jx1 = _this2.nx * _this2.c2.jnAcc - _this2.ny * _this2.c2.jtAcc;
						var jy1 = _this2.ny * _this2.c2.jnAcc + _this2.nx * _this2.c2.jtAcc;
						var t2 = _this2.b1.imass;
						_this2.b1.velx -= jx1 * t2;
						_this2.b1.vely -= jy1 * t2;
						_this2.b1.angvel -= _this2.b1.iinertia * (jy1 * _this2.c2.r1x - jx1 * _this2.c2.r1y);
						var t3 = _this2.b2.imass;
						_this2.b2.velx += jx1 * t3;
						_this2.b2.vely += jy1 * t3;
						_this2.b2.angvel += _this2.b2.iinertia * (jy1 * _this2.c2.r2x - jx1 * _this2.c2.r2y);
					}
					_this2.b2.angvel += _this2.jrAcc * _this2.b2.iinertia;
					_this2.b1.angvel -= _this2.jrAcc * _this2.b1.iinertia;
					var _this3 = arb.colarb;
					var jx2;
					var jy2;
					var j;
					var jMax;
					var jOld;
					var cjAcc;
					var v1x = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
					var v1y = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
					j = (v1y * _this3.nx - v1x * _this3.ny + _this3.surfacex) * _this3.c1.tMass;
					jMax = _this3.c1.friction * _this3.c1.jnAcc;
					jOld = _this3.c1.jtAcc;
					cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					_this3.c1.jtAcc = cjAcc;
					jx2 = -_this3.ny * j;
					jy2 = _this3.nx * j;
					_this3.b2.velx += jx2 * _this3.b2.imass;
					_this3.b2.vely += jy2 * _this3.b2.imass;
					_this3.b1.velx -= jx2 * _this3.b1.imass;
					_this3.b1.vely -= jy2 * _this3.b1.imass;
					_this3.b2.angvel += _this3.rt1b * j * _this3.b2.iinertia;
					_this3.b1.angvel -= _this3.rt1a * j * _this3.b1.iinertia;
					if(_this3.hc2) {
						var v2x = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
						var v2y = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
						j = (v2y * _this3.nx - v2x * _this3.ny + _this3.surfacex) * _this3.c2.tMass;
						jMax = _this3.c2.friction * _this3.c2.jnAcc;
						jOld = _this3.c2.jtAcc;
						cjAcc = jOld - j;
						if(cjAcc > jMax) {
							cjAcc = jMax;
						} else if(cjAcc < -jMax) {
							cjAcc = -jMax;
						}
						j = cjAcc - jOld;
						_this3.c2.jtAcc = cjAcc;
						jx2 = -_this3.ny * j;
						jy2 = _this3.nx * j;
						_this3.b2.velx += jx2 * _this3.b2.imass;
						_this3.b2.vely += jy2 * _this3.b2.imass;
						_this3.b1.velx -= jx2 * _this3.b1.imass;
						_this3.b1.vely -= jy2 * _this3.b1.imass;
						_this3.b2.angvel += _this3.rt2b * j * _this3.b2.iinertia;
						_this3.b1.angvel -= _this3.rt2a * j * _this3.b1.iinertia;
						v1x = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
						v1y = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
						v2x = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
						v2y = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
						var ax = _this3.c1.jnAcc;
						var ay = _this3.c2.jnAcc;
						var jnx = v1x * _this3.nx + v1y * _this3.ny + _this3.surfacey + _this3.c1.bounce - (_this3.Ka * ax + _this3.Kb * ay);
						var jny = v2x * _this3.nx + v2y * _this3.ny + _this3.surfacey + _this3.c2.bounce - (_this3.Kb * ax + _this3.Kc * ay);
						var xx = -(_this3.kMassa * jnx + _this3.kMassb * jny);
						var xy = -(_this3.kMassb * jnx + _this3.kMassc * jny);
						if(xx >= 0 && xy >= 0) {
							jnx = xx - ax;
							jny = xy - ay;
							_this3.c1.jnAcc = xx;
							_this3.c2.jnAcc = xy;
						} else {
							xx = -_this3.c1.nMass * jnx;
							if(xx >= 0 && _this3.Kb * xx + jny >= 0) {
								jnx = xx - ax;
								jny = -ay;
								_this3.c1.jnAcc = xx;
								_this3.c2.jnAcc = 0;
							} else {
								xy = -_this3.c2.nMass * jny;
								if(xy >= 0 && _this3.Kb * xy + jnx >= 0) {
									jnx = -ax;
									jny = xy - ay;
									_this3.c1.jnAcc = 0;
									_this3.c2.jnAcc = xy;
								} else if(jnx >= 0 && jny >= 0) {
									jnx = -ax;
									jny = -ay;
									_this3.c1.jnAcc = _this3.c2.jnAcc = 0;
								} else {
									jnx = 0;
									jny = 0;
								}
							}
						}
						j = jnx + jny;
						jx2 = _this3.nx * j;
						jy2 = _this3.ny * j;
						_this3.b2.velx += jx2 * _this3.b2.imass;
						_this3.b2.vely += jy2 * _this3.b2.imass;
						_this3.b1.velx -= jx2 * _this3.b1.imass;
						_this3.b1.vely -= jy2 * _this3.b1.imass;
						_this3.b2.angvel += (_this3.rn1b * jnx + _this3.rn2b * jny) * _this3.b2.iinertia;
						_this3.b1.angvel -= (_this3.rn1a * jnx + _this3.rn2a * jny) * _this3.b1.iinertia;
					} else {
						if(_this3.radius != 0.0) {
							j = (_this3.b2.angvel - _this3.b1.angvel) * _this3.rMass;
							jMax = _this3.rfric * _this3.c1.jnAcc;
							jOld = _this3.jrAcc;
							_this3.jrAcc -= j;
							if(_this3.jrAcc > jMax) {
								_this3.jrAcc = jMax;
							} else if(_this3.jrAcc < -jMax) {
								_this3.jrAcc = -jMax;
							}
							j = _this3.jrAcc - jOld;
							_this3.b2.angvel += j * _this3.b2.iinertia;
							_this3.b1.angvel -= j * _this3.b1.iinertia;
						}
						v1x = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
						v1y = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
						j = (_this3.c1.bounce + (_this3.nx * v1x + _this3.ny * v1y) + _this3.surfacey) * _this3.c1.nMass;
						jOld = _this3.c1.jnAcc;
						cjAcc = jOld - j;
						if(cjAcc < 0.0) {
							cjAcc = 0.0;
						}
						j = cjAcc - jOld;
						_this3.c1.jnAcc = cjAcc;
						jx2 = _this3.nx * j;
						jy2 = _this3.ny * j;
						_this3.b2.velx += jx2 * _this3.b2.imass;
						_this3.b2.vely += jy2 * _this3.b2.imass;
						_this3.b1.velx -= jx2 * _this3.b1.imass;
						_this3.b1.vely -= jy2 * _this3.b1.imass;
						_this3.b2.angvel += _this3.rn1b * j * _this3.b2.iinertia;
						_this3.b1.angvel -= _this3.rn1a * j * _this3.b1.iinertia;
					}
					var _this4 = arb.colarb;
					var jx3;
					var jy3;
					var j1;
					var jMax1;
					var jOld1;
					var cjAcc1;
					var v1x1 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
					var v1y1 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
					j1 = (v1y1 * _this4.nx - v1x1 * _this4.ny + _this4.surfacex) * _this4.c1.tMass;
					jMax1 = _this4.c1.friction * _this4.c1.jnAcc;
					jOld1 = _this4.c1.jtAcc;
					cjAcc1 = jOld1 - j1;
					if(cjAcc1 > jMax1) {
						cjAcc1 = jMax1;
					} else if(cjAcc1 < -jMax1) {
						cjAcc1 = -jMax1;
					}
					j1 = cjAcc1 - jOld1;
					_this4.c1.jtAcc = cjAcc1;
					jx3 = -_this4.ny * j1;
					jy3 = _this4.nx * j1;
					_this4.b2.velx += jx3 * _this4.b2.imass;
					_this4.b2.vely += jy3 * _this4.b2.imass;
					_this4.b1.velx -= jx3 * _this4.b1.imass;
					_this4.b1.vely -= jy3 * _this4.b1.imass;
					_this4.b2.angvel += _this4.rt1b * j1 * _this4.b2.iinertia;
					_this4.b1.angvel -= _this4.rt1a * j1 * _this4.b1.iinertia;
					if(_this4.hc2) {
						var v2x1 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
						var v2y1 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
						j1 = (v2y1 * _this4.nx - v2x1 * _this4.ny + _this4.surfacex) * _this4.c2.tMass;
						jMax1 = _this4.c2.friction * _this4.c2.jnAcc;
						jOld1 = _this4.c2.jtAcc;
						cjAcc1 = jOld1 - j1;
						if(cjAcc1 > jMax1) {
							cjAcc1 = jMax1;
						} else if(cjAcc1 < -jMax1) {
							cjAcc1 = -jMax1;
						}
						j1 = cjAcc1 - jOld1;
						_this4.c2.jtAcc = cjAcc1;
						jx3 = -_this4.ny * j1;
						jy3 = _this4.nx * j1;
						_this4.b2.velx += jx3 * _this4.b2.imass;
						_this4.b2.vely += jy3 * _this4.b2.imass;
						_this4.b1.velx -= jx3 * _this4.b1.imass;
						_this4.b1.vely -= jy3 * _this4.b1.imass;
						_this4.b2.angvel += _this4.rt2b * j1 * _this4.b2.iinertia;
						_this4.b1.angvel -= _this4.rt2a * j1 * _this4.b1.iinertia;
						v1x1 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
						v1y1 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
						v2x1 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
						v2y1 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
						var ax1 = _this4.c1.jnAcc;
						var ay1 = _this4.c2.jnAcc;
						var jnx1 = v1x1 * _this4.nx + v1y1 * _this4.ny + _this4.surfacey + _this4.c1.bounce - (_this4.Ka * ax1 + _this4.Kb * ay1);
						var jny1 = v2x1 * _this4.nx + v2y1 * _this4.ny + _this4.surfacey + _this4.c2.bounce - (_this4.Kb * ax1 + _this4.Kc * ay1);
						var xx1 = -(_this4.kMassa * jnx1 + _this4.kMassb * jny1);
						var xy1 = -(_this4.kMassb * jnx1 + _this4.kMassc * jny1);
						if(xx1 >= 0 && xy1 >= 0) {
							jnx1 = xx1 - ax1;
							jny1 = xy1 - ay1;
							_this4.c1.jnAcc = xx1;
							_this4.c2.jnAcc = xy1;
						} else {
							xx1 = -_this4.c1.nMass * jnx1;
							if(xx1 >= 0 && _this4.Kb * xx1 + jny1 >= 0) {
								jnx1 = xx1 - ax1;
								jny1 = -ay1;
								_this4.c1.jnAcc = xx1;
								_this4.c2.jnAcc = 0;
							} else {
								xy1 = -_this4.c2.nMass * jny1;
								if(xy1 >= 0 && _this4.Kb * xy1 + jnx1 >= 0) {
									jnx1 = -ax1;
									jny1 = xy1 - ay1;
									_this4.c1.jnAcc = 0;
									_this4.c2.jnAcc = xy1;
								} else if(jnx1 >= 0 && jny1 >= 0) {
									jnx1 = -ax1;
									jny1 = -ay1;
									_this4.c1.jnAcc = _this4.c2.jnAcc = 0;
								} else {
									jnx1 = 0;
									jny1 = 0;
								}
							}
						}
						j1 = jnx1 + jny1;
						jx3 = _this4.nx * j1;
						jy3 = _this4.ny * j1;
						_this4.b2.velx += jx3 * _this4.b2.imass;
						_this4.b2.vely += jy3 * _this4.b2.imass;
						_this4.b1.velx -= jx3 * _this4.b1.imass;
						_this4.b1.vely -= jy3 * _this4.b1.imass;
						_this4.b2.angvel += (_this4.rn1b * jnx1 + _this4.rn2b * jny1) * _this4.b2.iinertia;
						_this4.b1.angvel -= (_this4.rn1a * jnx1 + _this4.rn2a * jny1) * _this4.b1.iinertia;
					} else {
						if(_this4.radius != 0.0) {
							j1 = (_this4.b2.angvel - _this4.b1.angvel) * _this4.rMass;
							jMax1 = _this4.rfric * _this4.c1.jnAcc;
							jOld1 = _this4.jrAcc;
							_this4.jrAcc -= j1;
							if(_this4.jrAcc > jMax1) {
								_this4.jrAcc = jMax1;
							} else if(_this4.jrAcc < -jMax1) {
								_this4.jrAcc = -jMax1;
							}
							j1 = _this4.jrAcc - jOld1;
							_this4.b2.angvel += j1 * _this4.b2.iinertia;
							_this4.b1.angvel -= j1 * _this4.b1.iinertia;
						}
						v1x1 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
						v1y1 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
						j1 = (_this4.c1.bounce + (_this4.nx * v1x1 + _this4.ny * v1y1) + _this4.surfacey) * _this4.c1.nMass;
						jOld1 = _this4.c1.jnAcc;
						cjAcc1 = jOld1 - j1;
						if(cjAcc1 < 0.0) {
							cjAcc1 = 0.0;
						}
						j1 = cjAcc1 - jOld1;
						_this4.c1.jnAcc = cjAcc1;
						jx3 = _this4.nx * j1;
						jy3 = _this4.ny * j1;
						_this4.b2.velx += jx3 * _this4.b2.imass;
						_this4.b2.vely += jy3 * _this4.b2.imass;
						_this4.b1.velx -= jx3 * _this4.b1.imass;
						_this4.b1.vely -= jy3 * _this4.b1.imass;
						_this4.b2.angvel += _this4.rn1b * j1 * _this4.b2.iinertia;
						_this4.b1.angvel -= _this4.rn1a * j1 * _this4.b1.iinertia;
					}
					var _this5 = arb.colarb;
					var jx4;
					var jy4;
					var j2;
					var jMax2;
					var jOld2;
					var cjAcc2;
					var v1x2 = _this5.k1x + _this5.b2.velx - _this5.c1.r2y * _this5.b2.angvel - (_this5.b1.velx - _this5.c1.r1y * _this5.b1.angvel);
					var v1y2 = _this5.k1y + _this5.b2.vely + _this5.c1.r2x * _this5.b2.angvel - (_this5.b1.vely + _this5.c1.r1x * _this5.b1.angvel);
					j2 = (v1y2 * _this5.nx - v1x2 * _this5.ny + _this5.surfacex) * _this5.c1.tMass;
					jMax2 = _this5.c1.friction * _this5.c1.jnAcc;
					jOld2 = _this5.c1.jtAcc;
					cjAcc2 = jOld2 - j2;
					if(cjAcc2 > jMax2) {
						cjAcc2 = jMax2;
					} else if(cjAcc2 < -jMax2) {
						cjAcc2 = -jMax2;
					}
					j2 = cjAcc2 - jOld2;
					_this5.c1.jtAcc = cjAcc2;
					jx4 = -_this5.ny * j2;
					jy4 = _this5.nx * j2;
					_this5.b2.velx += jx4 * _this5.b2.imass;
					_this5.b2.vely += jy4 * _this5.b2.imass;
					_this5.b1.velx -= jx4 * _this5.b1.imass;
					_this5.b1.vely -= jy4 * _this5.b1.imass;
					_this5.b2.angvel += _this5.rt1b * j2 * _this5.b2.iinertia;
					_this5.b1.angvel -= _this5.rt1a * j2 * _this5.b1.iinertia;
					if(_this5.hc2) {
						var v2x2 = _this5.k2x + _this5.b2.velx - _this5.c2.r2y * _this5.b2.angvel - (_this5.b1.velx - _this5.c2.r1y * _this5.b1.angvel);
						var v2y2 = _this5.k2y + _this5.b2.vely + _this5.c2.r2x * _this5.b2.angvel - (_this5.b1.vely + _this5.c2.r1x * _this5.b1.angvel);
						j2 = (v2y2 * _this5.nx - v2x2 * _this5.ny + _this5.surfacex) * _this5.c2.tMass;
						jMax2 = _this5.c2.friction * _this5.c2.jnAcc;
						jOld2 = _this5.c2.jtAcc;
						cjAcc2 = jOld2 - j2;
						if(cjAcc2 > jMax2) {
							cjAcc2 = jMax2;
						} else if(cjAcc2 < -jMax2) {
							cjAcc2 = -jMax2;
						}
						j2 = cjAcc2 - jOld2;
						_this5.c2.jtAcc = cjAcc2;
						jx4 = -_this5.ny * j2;
						jy4 = _this5.nx * j2;
						_this5.b2.velx += jx4 * _this5.b2.imass;
						_this5.b2.vely += jy4 * _this5.b2.imass;
						_this5.b1.velx -= jx4 * _this5.b1.imass;
						_this5.b1.vely -= jy4 * _this5.b1.imass;
						_this5.b2.angvel += _this5.rt2b * j2 * _this5.b2.iinertia;
						_this5.b1.angvel -= _this5.rt2a * j2 * _this5.b1.iinertia;
						v1x2 = _this5.k1x + _this5.b2.velx - _this5.c1.r2y * _this5.b2.angvel - (_this5.b1.velx - _this5.c1.r1y * _this5.b1.angvel);
						v1y2 = _this5.k1y + _this5.b2.vely + _this5.c1.r2x * _this5.b2.angvel - (_this5.b1.vely + _this5.c1.r1x * _this5.b1.angvel);
						v2x2 = _this5.k2x + _this5.b2.velx - _this5.c2.r2y * _this5.b2.angvel - (_this5.b1.velx - _this5.c2.r1y * _this5.b1.angvel);
						v2y2 = _this5.k2y + _this5.b2.vely + _this5.c2.r2x * _this5.b2.angvel - (_this5.b1.vely + _this5.c2.r1x * _this5.b1.angvel);
						var ax2 = _this5.c1.jnAcc;
						var ay2 = _this5.c2.jnAcc;
						var jnx2 = v1x2 * _this5.nx + v1y2 * _this5.ny + _this5.surfacey + _this5.c1.bounce - (_this5.Ka * ax2 + _this5.Kb * ay2);
						var jny2 = v2x2 * _this5.nx + v2y2 * _this5.ny + _this5.surfacey + _this5.c2.bounce - (_this5.Kb * ax2 + _this5.Kc * ay2);
						var xx2 = -(_this5.kMassa * jnx2 + _this5.kMassb * jny2);
						var xy2 = -(_this5.kMassb * jnx2 + _this5.kMassc * jny2);
						if(xx2 >= 0 && xy2 >= 0) {
							jnx2 = xx2 - ax2;
							jny2 = xy2 - ay2;
							_this5.c1.jnAcc = xx2;
							_this5.c2.jnAcc = xy2;
						} else {
							xx2 = -_this5.c1.nMass * jnx2;
							if(xx2 >= 0 && _this5.Kb * xx2 + jny2 >= 0) {
								jnx2 = xx2 - ax2;
								jny2 = -ay2;
								_this5.c1.jnAcc = xx2;
								_this5.c2.jnAcc = 0;
							} else {
								xy2 = -_this5.c2.nMass * jny2;
								if(xy2 >= 0 && _this5.Kb * xy2 + jnx2 >= 0) {
									jnx2 = -ax2;
									jny2 = xy2 - ay2;
									_this5.c1.jnAcc = 0;
									_this5.c2.jnAcc = xy2;
								} else if(jnx2 >= 0 && jny2 >= 0) {
									jnx2 = -ax2;
									jny2 = -ay2;
									_this5.c1.jnAcc = _this5.c2.jnAcc = 0;
								} else {
									jnx2 = 0;
									jny2 = 0;
								}
							}
						}
						j2 = jnx2 + jny2;
						jx4 = _this5.nx * j2;
						jy4 = _this5.ny * j2;
						_this5.b2.velx += jx4 * _this5.b2.imass;
						_this5.b2.vely += jy4 * _this5.b2.imass;
						_this5.b1.velx -= jx4 * _this5.b1.imass;
						_this5.b1.vely -= jy4 * _this5.b1.imass;
						_this5.b2.angvel += (_this5.rn1b * jnx2 + _this5.rn2b * jny2) * _this5.b2.iinertia;
						_this5.b1.angvel -= (_this5.rn1a * jnx2 + _this5.rn2a * jny2) * _this5.b1.iinertia;
					} else {
						if(_this5.radius != 0.0) {
							j2 = (_this5.b2.angvel - _this5.b1.angvel) * _this5.rMass;
							jMax2 = _this5.rfric * _this5.c1.jnAcc;
							jOld2 = _this5.jrAcc;
							_this5.jrAcc -= j2;
							if(_this5.jrAcc > jMax2) {
								_this5.jrAcc = jMax2;
							} else if(_this5.jrAcc < -jMax2) {
								_this5.jrAcc = -jMax2;
							}
							j2 = _this5.jrAcc - jOld2;
							_this5.b2.angvel += j2 * _this5.b2.iinertia;
							_this5.b1.angvel -= j2 * _this5.b1.iinertia;
						}
						v1x2 = _this5.k1x + _this5.b2.velx - _this5.c1.r2y * _this5.b2.angvel - (_this5.b1.velx - _this5.c1.r1y * _this5.b1.angvel);
						v1y2 = _this5.k1y + _this5.b2.vely + _this5.c1.r2x * _this5.b2.angvel - (_this5.b1.vely + _this5.c1.r1x * _this5.b1.angvel);
						j2 = (_this5.c1.bounce + (_this5.nx * v1x2 + _this5.ny * v1y2) + _this5.surfacey) * _this5.c1.nMass;
						jOld2 = _this5.c1.jnAcc;
						cjAcc2 = jOld2 - j2;
						if(cjAcc2 < 0.0) {
							cjAcc2 = 0.0;
						}
						j2 = cjAcc2 - jOld2;
						_this5.c1.jnAcc = cjAcc2;
						jx4 = _this5.nx * j2;
						jy4 = _this5.ny * j2;
						_this5.b2.velx += jx4 * _this5.b2.imass;
						_this5.b2.vely += jy4 * _this5.b2.imass;
						_this5.b1.velx -= jx4 * _this5.b1.imass;
						_this5.b1.vely -= jy4 * _this5.b1.imass;
						_this5.b2.angvel += _this5.rn1b * j2 * _this5.b2.iinertia;
						_this5.b1.angvel -= _this5.rn1a * j2 * _this5.b1.iinertia;
					}
					var _this6 = arb.colarb;
					var jx5;
					var jy5;
					var j3;
					var jMax3;
					var jOld3;
					var cjAcc3;
					var v1x3 = _this6.k1x + _this6.b2.velx - _this6.c1.r2y * _this6.b2.angvel - (_this6.b1.velx - _this6.c1.r1y * _this6.b1.angvel);
					var v1y3 = _this6.k1y + _this6.b2.vely + _this6.c1.r2x * _this6.b2.angvel - (_this6.b1.vely + _this6.c1.r1x * _this6.b1.angvel);
					j3 = (v1y3 * _this6.nx - v1x3 * _this6.ny + _this6.surfacex) * _this6.c1.tMass;
					jMax3 = _this6.c1.friction * _this6.c1.jnAcc;
					jOld3 = _this6.c1.jtAcc;
					cjAcc3 = jOld3 - j3;
					if(cjAcc3 > jMax3) {
						cjAcc3 = jMax3;
					} else if(cjAcc3 < -jMax3) {
						cjAcc3 = -jMax3;
					}
					j3 = cjAcc3 - jOld3;
					_this6.c1.jtAcc = cjAcc3;
					jx5 = -_this6.ny * j3;
					jy5 = _this6.nx * j3;
					_this6.b2.velx += jx5 * _this6.b2.imass;
					_this6.b2.vely += jy5 * _this6.b2.imass;
					_this6.b1.velx -= jx5 * _this6.b1.imass;
					_this6.b1.vely -= jy5 * _this6.b1.imass;
					_this6.b2.angvel += _this6.rt1b * j3 * _this6.b2.iinertia;
					_this6.b1.angvel -= _this6.rt1a * j3 * _this6.b1.iinertia;
					if(_this6.hc2) {
						var v2x3 = _this6.k2x + _this6.b2.velx - _this6.c2.r2y * _this6.b2.angvel - (_this6.b1.velx - _this6.c2.r1y * _this6.b1.angvel);
						var v2y3 = _this6.k2y + _this6.b2.vely + _this6.c2.r2x * _this6.b2.angvel - (_this6.b1.vely + _this6.c2.r1x * _this6.b1.angvel);
						j3 = (v2y3 * _this6.nx - v2x3 * _this6.ny + _this6.surfacex) * _this6.c2.tMass;
						jMax3 = _this6.c2.friction * _this6.c2.jnAcc;
						jOld3 = _this6.c2.jtAcc;
						cjAcc3 = jOld3 - j3;
						if(cjAcc3 > jMax3) {
							cjAcc3 = jMax3;
						} else if(cjAcc3 < -jMax3) {
							cjAcc3 = -jMax3;
						}
						j3 = cjAcc3 - jOld3;
						_this6.c2.jtAcc = cjAcc3;
						jx5 = -_this6.ny * j3;
						jy5 = _this6.nx * j3;
						_this6.b2.velx += jx5 * _this6.b2.imass;
						_this6.b2.vely += jy5 * _this6.b2.imass;
						_this6.b1.velx -= jx5 * _this6.b1.imass;
						_this6.b1.vely -= jy5 * _this6.b1.imass;
						_this6.b2.angvel += _this6.rt2b * j3 * _this6.b2.iinertia;
						_this6.b1.angvel -= _this6.rt2a * j3 * _this6.b1.iinertia;
						v1x3 = _this6.k1x + _this6.b2.velx - _this6.c1.r2y * _this6.b2.angvel - (_this6.b1.velx - _this6.c1.r1y * _this6.b1.angvel);
						v1y3 = _this6.k1y + _this6.b2.vely + _this6.c1.r2x * _this6.b2.angvel - (_this6.b1.vely + _this6.c1.r1x * _this6.b1.angvel);
						v2x3 = _this6.k2x + _this6.b2.velx - _this6.c2.r2y * _this6.b2.angvel - (_this6.b1.velx - _this6.c2.r1y * _this6.b1.angvel);
						v2y3 = _this6.k2y + _this6.b2.vely + _this6.c2.r2x * _this6.b2.angvel - (_this6.b1.vely + _this6.c2.r1x * _this6.b1.angvel);
						var ax3 = _this6.c1.jnAcc;
						var ay3 = _this6.c2.jnAcc;
						var jnx3 = v1x3 * _this6.nx + v1y3 * _this6.ny + _this6.surfacey + _this6.c1.bounce - (_this6.Ka * ax3 + _this6.Kb * ay3);
						var jny3 = v2x3 * _this6.nx + v2y3 * _this6.ny + _this6.surfacey + _this6.c2.bounce - (_this6.Kb * ax3 + _this6.Kc * ay3);
						var xx3 = -(_this6.kMassa * jnx3 + _this6.kMassb * jny3);
						var xy3 = -(_this6.kMassb * jnx3 + _this6.kMassc * jny3);
						if(xx3 >= 0 && xy3 >= 0) {
							jnx3 = xx3 - ax3;
							jny3 = xy3 - ay3;
							_this6.c1.jnAcc = xx3;
							_this6.c2.jnAcc = xy3;
						} else {
							xx3 = -_this6.c1.nMass * jnx3;
							if(xx3 >= 0 && _this6.Kb * xx3 + jny3 >= 0) {
								jnx3 = xx3 - ax3;
								jny3 = -ay3;
								_this6.c1.jnAcc = xx3;
								_this6.c2.jnAcc = 0;
							} else {
								xy3 = -_this6.c2.nMass * jny3;
								if(xy3 >= 0 && _this6.Kb * xy3 + jnx3 >= 0) {
									jnx3 = -ax3;
									jny3 = xy3 - ay3;
									_this6.c1.jnAcc = 0;
									_this6.c2.jnAcc = xy3;
								} else if(jnx3 >= 0 && jny3 >= 0) {
									jnx3 = -ax3;
									jny3 = -ay3;
									_this6.c1.jnAcc = _this6.c2.jnAcc = 0;
								} else {
									jnx3 = 0;
									jny3 = 0;
								}
							}
						}
						j3 = jnx3 + jny3;
						jx5 = _this6.nx * j3;
						jy5 = _this6.ny * j3;
						_this6.b2.velx += jx5 * _this6.b2.imass;
						_this6.b2.vely += jy5 * _this6.b2.imass;
						_this6.b1.velx -= jx5 * _this6.b1.imass;
						_this6.b1.vely -= jy5 * _this6.b1.imass;
						_this6.b2.angvel += (_this6.rn1b * jnx3 + _this6.rn2b * jny3) * _this6.b2.iinertia;
						_this6.b1.angvel -= (_this6.rn1a * jnx3 + _this6.rn2a * jny3) * _this6.b1.iinertia;
					} else {
						if(_this6.radius != 0.0) {
							j3 = (_this6.b2.angvel - _this6.b1.angvel) * _this6.rMass;
							jMax3 = _this6.rfric * _this6.c1.jnAcc;
							jOld3 = _this6.jrAcc;
							_this6.jrAcc -= j3;
							if(_this6.jrAcc > jMax3) {
								_this6.jrAcc = jMax3;
							} else if(_this6.jrAcc < -jMax3) {
								_this6.jrAcc = -jMax3;
							}
							j3 = _this6.jrAcc - jOld3;
							_this6.b2.angvel += j3 * _this6.b2.iinertia;
							_this6.b1.angvel -= j3 * _this6.b1.iinertia;
						}
						v1x3 = _this6.k1x + _this6.b2.velx - _this6.c1.r2y * _this6.b2.angvel - (_this6.b1.velx - _this6.c1.r1y * _this6.b1.angvel);
						v1y3 = _this6.k1y + _this6.b2.vely + _this6.c1.r2x * _this6.b2.angvel - (_this6.b1.vely + _this6.c1.r1x * _this6.b1.angvel);
						j3 = (_this6.c1.bounce + (_this6.nx * v1x3 + _this6.ny * v1y3) + _this6.surfacey) * _this6.c1.nMass;
						jOld3 = _this6.c1.jnAcc;
						cjAcc3 = jOld3 - j3;
						if(cjAcc3 < 0.0) {
							cjAcc3 = 0.0;
						}
						j3 = cjAcc3 - jOld3;
						_this6.c1.jnAcc = cjAcc3;
						jx5 = _this6.nx * j3;
						jy5 = _this6.ny * j3;
						_this6.b2.velx += jx5 * _this6.b2.imass;
						_this6.b2.vely += jy5 * _this6.b2.imass;
						_this6.b1.velx -= jx5 * _this6.b1.imass;
						_this6.b1.vely -= jy5 * _this6.b1.imass;
						_this6.b2.angvel += _this6.rn1b * j3 * _this6.b2.iinertia;
						_this6.b1.angvel -= _this6.rn1a * j3 * _this6.b1.iinertia;
					}
					b11.sweep_angvel = b11.angvel % MAX_VEL;
					b21.sweep_angvel = b21.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & 1) != 0) && arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				if(!b11.sweepFrozen && b11.type != 3) {
					b11.sweepFrozen = true;
					if(minTOI.failed) {
						b11.angvel = b11.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						b11.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b11.angvel = b11.sweep_angvel;
					} else {
						b11.angvel = b11.sweep_angvel;
					}
				}
				if(!b21.sweepFrozen && b21.type != 3) {
					b21.sweepFrozen = true;
					if(minTOI.failed) {
						b21.angvel = b21.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						b21.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b21.angvel = b21.sweep_angvel;
					} else {
						b21.angvel = b21.sweep_angvel;
					}
				}
			}
			var o = minTOI;
			o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
		}
		while(this.toiEvents.head != null) {
			var toi1 = this.toiEvents.pop_unsafe();
			toi1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi1;
		}
		var cx_ite5 = this.kinematics.head;
		while(cx_ite5 != null) {
			var cur = cx_ite5.elt;
			var delta2 = deltaTime - cur.sweepTime;
			if(delta2 != 0) {
				cur.sweepTime = deltaTime;
				cur.posx += cur.velx * delta2;
				cur.posy += cur.vely * delta2;
				if(cur.angvel != 0) {
					var dr2 = cur.sweep_angvel * delta2;
					cur.rot += dr2;
					if(dr2 * dr2 > 0.0001) {
						cur.axisx = Math.sin(cur.rot);
						cur.axisy = Math.cos(cur.rot);
					} else {
						var d22 = dr2 * dr2;
						var p4 = 1 - 0.5 * d22;
						var m2 = 1 - d22 * d22 / 8;
						var nx2 = (p4 * cur.axisx + dr2 * cur.axisy) * m2;
						cur.axisy = (p4 * cur.axisy - dr2 * cur.axisx) * m2;
						cur.axisx = nx2;
					}
				}
			}
			cur.sweepTime = 0;
			cx_ite5 = cx_ite5.next;
		}
		var cx_ite6 = this.live.head;
		while(cx_ite6 != null) {
			var cur1 = cx_ite6.elt;
			if(!cur1.sweepFrozen) {
				var delta3 = deltaTime - cur1.sweepTime;
				if(delta3 != 0) {
					cur1.sweepTime = deltaTime;
					cur1.posx += cur1.velx * delta3;
					cur1.posy += cur1.vely * delta3;
					if(cur1.angvel != 0) {
						var dr3 = cur1.sweep_angvel * delta3;
						cur1.rot += dr3;
						if(dr3 * dr3 > 0.0001) {
							cur1.axisx = Math.sin(cur1.rot);
							cur1.axisy = Math.cos(cur1.rot);
						} else {
							var d23 = dr3 * dr3;
							var p5 = 1 - 0.5 * d23;
							var m3 = 1 - d23 * d23 / 8;
							var nx3 = (p5 * cur1.axisx + dr3 * cur1.axisy) * m3;
							cur1.axisy = (p5 * cur1.axisy - dr3 * cur1.axisx) * m3;
							cur1.axisx = nx3;
						}
					}
				}
			}
			cur1.sweepTime = 0;
			cx_ite6 = cx_ite6.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) {
			return in_arb;
		}
		if(s1.body.disableCCD || s2.body.disableCCD) {
			return in_arb;
		}
		var tmp;
		if(!(in_arb != null && in_arb.colarb == null)) {
			var b1 = s1.body;
			var b2 = s2.body;
			var con_ignore;
			con_ignore = false;
			var cx_ite = b1.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.ignore && con.pair_exists(b1.id,b2.id)) {
					con_ignore = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
			var tmp1;
			var tmp2;
			if(!con_ignore) {
				var cur = s1;
				while(cur != null && cur.group == null) if(cur.ishape != null) {
					cur = cur.ishape.body;
				} else if(cur.icompound != null) {
					cur = cur.icompound.compound;
				} else {
					cur = cur.ibody.compound;
				}
				var g1 = cur == null ? null : cur.group;
				var tmp3;
				if(g1 == null) {
					tmp3 = false;
				} else {
					var cur1 = s2;
					while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
						cur1 = cur1.ishape.body;
					} else if(cur1.icompound != null) {
						cur1 = cur1.icompound.compound;
					} else {
						cur1 = cur1.ibody.compound;
					}
					var g2 = cur1 == null ? null : cur1.group;
					if(g2 == null) {
						tmp3 = false;
					} else {
						var ret = false;
						while(g1 != null && g2 != null) {
							if(g1 == g2) {
								ret = g1.ignore;
								break;
							}
							if(g1.depth < g2.depth) {
								g2 = g2.group;
							} else {
								g1 = g1.group;
							}
						}
						tmp3 = ret;
					}
				}
				tmp2 = !tmp3;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var tmp4;
				if(s1.sensorEnabled || s2.sensorEnabled) {
					var _this = s1.filter;
					var x = s2.filter;
					if((_this.sensorMask & x.sensorGroup) != 0) {
						tmp4 = (x.sensorMask & _this.sensorGroup) != 0;
					} else {
						tmp4 = false;
					}
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					tmp1 = 2;
				} else {
					var tmp5;
					var tmp6;
					if(s1.fluidEnabled || s2.fluidEnabled) {
						var _this1 = s1.filter;
						var x1 = s2.filter;
						if((_this1.fluidMask & x1.fluidGroup) != 0) {
							tmp6 = (x1.fluidMask & _this1.fluidGroup) != 0;
						} else {
							tmp6 = false;
						}
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						tmp5 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
					} else {
						tmp5 = false;
					}
					if(tmp5) {
						tmp1 = 0;
					} else {
						var tmp7;
						var _this2 = s1.filter;
						var x2 = s2.filter;
						if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
							tmp7 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
						} else {
							tmp7 = false;
						}
						if(tmp7) {
							tmp1 = 1;
						} else {
							tmp1 = -1;
						}
					}
				}
			} else {
				tmp1 = -1;
			}
			tmp = tmp1 <= 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			return in_arb;
		}
		var b11 = s1.body;
		var b21 = s2.body;
		if(stat || b11.bullet || b21.bullet) {
			var toi;
			if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) {
				toi = new zpp_$nape_geom_ZPP_$ToiEvent();
			} else {
				toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b11.type == 3 || b21.type == 3;
			if(stat && !kin) {
				if(s1.body.type != 2) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp8 = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp8;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				} else {
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				}
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				toi.arbiter = in_arb != null ? in_arb.colarb : null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.type == 2 && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else {
				b.component.woken = true;
			}
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == 2 && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else {
				con.component.woken = true;
			}
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 4) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 4;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			stack.add(cx_ite.elt);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				stack.add(cx_ite1.elt);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(stack.head != null) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					stack.add(cx_ite2.elt);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					stack.add(cx_ite3.elt);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xshp = intx.ishape != null ? intx.ishape : null;
				var cx_ite4 = (intx.ibody != null ? intx.ibody : intx.ishape.body).arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(xarb.present == 0) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i1 = cx_ite5.elt;
						if(i1.cbSet != cb1 && i1.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i2 = cx_ite6.elt;
							if(i1.cbSet == cb1 && i2.cbSet != cb2 || i1.cbSet == cb2 && i2.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset != null) {
								while(callbackset.arbiters.head != null) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				this.nullInteractorType(cx_ite.elt,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				this.nullInteractorType(cx_ite1.elt,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xshp = intx.ishape != null ? intx.ishape : null;
			var cx_ite2 = (intx.ibody != null ? intx.ibody : intx.ishape.body).arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(xarb.present == 0) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			stack.add(cx_ite.elt);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				stack.add(cx_ite1.elt);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(stack.head != null) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					stack.add(cx_ite2.elt);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					stack.add(cx_ite3.elt);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xshp = intx.ishape != null ? intx.ishape : null;
				var cx_ite4 = (intx.ibody != null ? intx.ibody : intx.ishape.body).arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(!xarb.presentable) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i1 = cx_ite5.elt;
						if(i1.cbSet != cb1 && i1.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i2 = cx_ite6.elt;
							if(i1.cbSet == cb1 && i2.cbSet != cb2 || i1.cbSet == cb2 && i2.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							var tmp;
							var ret;
							ret = false;
							var cx_ite7 = callbackset.arbiters.head;
							while(cx_ite7 != null) {
								if(cx_ite7.elt == xarb) {
									ret = true;
									break;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(!ret) {
								var _this = callbackset.arbiters;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = xarb;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
								tmp = true;
							} else {
								tmp = false;
							}
							if(tmp) {
								xarb.present++;
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				this.freshInteractorType(cx_ite.elt,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				this.freshInteractorType(cx_ite1.elt,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xshp = intx.ishape != null ? intx.ishape : null;
			var cx_ite2 = (intx.ibody != null ? intx.ibody : intx.ishape.body).arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(!xarb.presentable) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						var ret = null;
						var cx_ite5 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
						while(cx_ite5 != null) {
							var p = cx_ite5.elt;
							if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
								ret = p;
								break;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(ret == null) {
							var ret1;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
								ret1.a = cb1;
								ret1.b = cb2;
							} else {
								ret1.a = cb2;
								ret1.b = cb1;
							}
							ret = ret1;
							cb1.cbpairs.add(ret);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret);
							}
						}
						if(ret.zip_listeners) {
							ret.zip_listeners = false;
							ret.__validate();
						}
						if(ret.listeners.head != null) {
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							var tmp;
							var ret2;
							ret2 = false;
							var cx_ite6 = callbackset.arbiters.head;
							while(cx_ite6 != null) {
								if(cx_ite6.elt == xarb) {
									ret2 = true;
									break;
								}
								cx_ite6 = cx_ite6.next;
							}
							if(!ret2) {
								var _this = callbackset.arbiters;
								var ret3;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret3.next;
									ret3.next = null;
								}
								ret3.elt = xarb;
								var temp = ret3;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
								tmp = true;
							} else {
								tmp = false;
							}
							if(tmp) {
								xarb.present++;
							}
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			if(!y.world) {
				y.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(y.type == 3) {
					y.kinematicDelaySleep = true;
				}
				if(y.component.sleeping) {
					this.really_wake(y,false);
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			this.wake_constraint(cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			this.wakeCompound(cx_ite2.elt);
			cx_ite2 = cx_ite2.next;
		}
	}
	,wakeIsland: function(i) {
		while(i.comps.head != null) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep ? 0 : 1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) {
								var _this = this.c_arbiters_true;
								var ret;
								if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
									ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
								} else {
									ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
									ret.next = null;
								}
								ret.elt = carb;
								var temp = ret;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							} else {
								var _this1 = this.c_arbiters_false;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = carb;
								var temp1 = ret1;
								temp1.next = _this1.head;
								_this1.head = temp1;
								_this1.modified = true;
								_this1.length++;
							}
						} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
							var _this2 = this.f_arbiters;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = arb.fluidarb;
							var temp2 = ret2;
							temp2.next = _this2.head;
							_this2.head = temp2;
							_this2.modified = true;
							_this2.length++;
						} else {
							var _this3 = this.s_arbiters;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = arb.sensorarb;
							var temp3 = ret3;
							temp3.next = _this3.head;
							_this3.head = temp3;
							_this3.modified = true;
							_this3.length++;
						}
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(b.type != 1) {
					var cx_ite1 = b.shapes.head;
					while(cx_ite1 != null) {
						var shape = cx_ite1.elt;
						if(shape.node != null) {
							this.bphase.sync(shape);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				var _this4 = this.live_constraints;
				var ret4;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
					ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
				} else {
					ret4 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.elt = con;
				var temp4 = ret4;
				temp4.next = _this4.head;
				_this4.head = temp4;
				_this4.modified = true;
				_this4.length++;
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		i.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
		zpp_$nape_space_ZPP_$Island.zpp_pool = i;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.type == 3) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,fst);
			}
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == 3 || o.type == 1) {
				var _this = this.staticsleep;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = o;
				var temp = ret;
				temp.next = _this.head;
				_this.head = temp;
				_this.modified = true;
				_this.length++;
			} else {
				var _this1 = this.live;
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = o;
				var temp1 = ret1;
				temp1.next = _this1.head;
				_this1.head = temp1;
				_this1.modified = true;
				_this1.length++;
			}
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) {
					this.wake_constraint(con);
				}
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = o.arbiters.head;
			while(cx_ite1 != null) {
				var arb = cx_ite1.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep ? 0 : 1) - arb.sleep_stamp;
					if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) {
							var _this2 = this.c_arbiters_true;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = carb;
							var temp2 = ret2;
							temp2.next = _this2.head;
							_this2.head = temp2;
							_this2.modified = true;
							_this2.length++;
						} else {
							var _this3 = this.c_arbiters_false;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = carb;
							var temp3 = ret3;
							temp3.next = _this3.head;
							_this3.head = temp3;
							_this3.modified = true;
							_this3.length++;
						}
					} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
						var _this4 = this.f_arbiters;
						var ret4;
						if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
							ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
						} else {
							ret4 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret4.next;
							ret4.next = null;
						}
						ret4.elt = arb.fluidarb;
						var temp4 = ret4;
						temp4.next = _this4.head;
						_this4.head = temp4;
						_this4.modified = true;
						_this4.length++;
					} else {
						var _this5 = this.s_arbiters;
						var ret5;
						if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
							ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
						} else {
							ret5 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.elt = arb.sensorarb;
						var temp5 = ret5;
						temp5.next = _this5.head;
						_this5.head = temp5;
						_this5.modified = true;
						_this5.length++;
					}
				}
				if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & 1) != 0) {
					if(arb.b1.type == 2 && arb.b1.component.sleeping) {
						var o1 = arb.b1;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o1.type == 3) {
								o1.kinematicDelaySleep = true;
							}
							if(o1.component.sleeping) {
								this.really_wake(o1,false);
							}
						}
					}
					if(arb.b2.type == 2 && arb.b2.component.sleeping) {
						var o2 = arb.b2;
						if(!o2.world) {
							o2.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o2.type == 3) {
								o2.kinematicDelaySleep = true;
							}
							if(o2.component.sleeping) {
								this.really_wake(o2,false);
							}
						}
					}
				}
				cx_ite1 = cx_ite1.next;
			}
			if(!fst && o.type == 2) {
				this.bodyCbWake(o);
			}
			if(!fst && !this.bphase.is_sweep && o.type != 1) {
				var cx_ite2 = o.shapes.head;
				while(cx_ite2 != null) {
					var shape = cx_ite2.elt;
					if(shape.node != null) {
						this.bphase.sync(shape);
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		} else {
			this.wakeIsland(o.component.island);
		}
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) {
			fst = false;
		}
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					var _this = this.live_constraints;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = con;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
					con.wake_connected();
					if(!fst) {
						this.constraintCbWake(con);
					}
				} else {
					this.wakeIsland(con.component.island);
				}
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & 1) != 0) {
				if(arb.b1.type == 2 && arb.b2.type == 2) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) {
						xr = arb.b1.component;
					} else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) {
						yr = arb.b2.component;
					} else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) {
							xr.parent = yr;
						} else if(xr.rank > yr.rank) {
							yr.parent = xr;
						} else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.f_arbiters.head;
		while(cx_ite1 != null) {
			var arb1 = cx_ite1.elt;
			if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & 1) != 0) {
				if(arb1.b1.type == 2 && arb1.b2.type == 2) {
					var xr1;
					if(arb1.b1.component == arb1.b1.component.parent) {
						xr1 = arb1.b1.component;
					} else {
						var obj2 = arb1.b1.component;
						var stack2 = null;
						while(obj2 != obj2.parent) {
							var nxt4 = obj2.parent;
							obj2.parent = stack2;
							stack2 = obj2;
							obj2 = nxt4;
						}
						while(stack2 != null) {
							var nxt5 = stack2.parent;
							stack2.parent = obj2;
							stack2 = nxt5;
						}
						xr1 = obj2;
					}
					var yr1;
					if(arb1.b2.component == arb1.b2.component.parent) {
						yr1 = arb1.b2.component;
					} else {
						var obj3 = arb1.b2.component;
						var stack3 = null;
						while(obj3 != obj3.parent) {
							var nxt6 = obj3.parent;
							obj3.parent = stack3;
							stack3 = obj3;
							obj3 = nxt6;
						}
						while(stack3 != null) {
							var nxt7 = stack3.parent;
							stack3.parent = obj3;
							stack3 = nxt7;
						}
						yr1 = obj3;
					}
					if(xr1 != yr1) {
						if(xr1.rank < yr1.rank) {
							xr1.parent = yr1;
						} else if(xr1.rank > yr1.rank) {
							yr1.parent = xr1;
						} else {
							yr1.parent = xr1;
							xr1.rank++;
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live_constraints.head;
		while(cx_ite2 != null) {
			cx_ite2.elt.forest();
			cx_ite2 = cx_ite2.next;
		}
		while(this.live.head != null) {
			var _this = this.live;
			var ret = _this.head.elt;
			_this.pop();
			var oc = ret.component;
			var root;
			if(oc == oc.parent) {
				root = oc;
			} else {
				var obj4 = oc;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(root.island == null) {
				if(zpp_$nape_space_ZPP_$Island.zpp_pool == null) {
					root.island = new zpp_$nape_space_ZPP_$Island();
				} else {
					root.island = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				var _this1 = this.islands;
				var o = root.island;
				o._inuse = true;
				o.next = _this1.next;
				_this1.next = o;
				_this1.modified = true;
				_this1.length++;
				root.island.sleep = true;
			}
			oc.island = root.island;
			var _this2 = oc.island.comps;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Component();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = oc;
			var temp = ret1;
			temp.next = _this2.head;
			_this2.head = temp;
			_this2.modified = true;
			_this2.length++;
			var rest = ret.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) {
				oc.island.waket = oc.waket;
			}
		}
		while(this.live_constraints.head != null) {
			var _this3 = this.live_constraints;
			var ret2 = _this3.head.elt;
			_this3.pop();
			var oc1 = ret2.component;
			var root1;
			if(oc1 == oc1.parent) {
				root1 = oc1;
			} else {
				var obj5 = oc1;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				root1 = obj5;
			}
			oc1.island = root1.island;
			var _this4 = oc1.island.comps;
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Component();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = oc1;
			var temp1 = ret3;
			temp1.next = _this4.head;
			_this4.head = temp1;
			_this4.modified = true;
			_this4.length++;
			if(oc1.waket > oc1.island.waket) {
				oc1.island.waket = oc1.waket;
			}
		}
		while(this.islands.next != null) {
			var _this5 = this.islands;
			var _this6 = _this5.next;
			_this5.pop();
			if(_this6.sleep) {
				var cx_ite3 = _this6.comps.head;
				while(cx_ite3 != null) {
					var c = cx_ite3.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite4 = b.shapes.head;
						while(cx_ite4 != null) {
							this.bphase.sync(cx_ite4.elt);
							cx_ite4 = cx_ite4.next;
						}
						this.bodyCbSleep(b);
					} else {
						this.constraintCbSleep(c.constraint);
						c.sleeping = true;
					}
					cx_ite3 = cx_ite3.next;
				}
			} else {
				while(_this6.comps.head != null) {
					var _this7 = _this6.comps;
					var ret4 = _this7.head.elt;
					_this7.pop();
					ret4.waket = _this6.waket;
					if(ret4.isBody) {
						var _this8 = this.live;
						var ret5;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
							ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
						} else {
							ret5 = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.elt = ret4.body;
						var temp2 = ret5;
						temp2.next = _this8.head;
						_this8.head = temp2;
						_this8.modified = true;
						_this8.length++;
					} else {
						var _this9 = this.live_constraints;
						var ret6;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
							ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
						} else {
							ret6 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.elt = ret4.constraint;
						var temp3 = ret6;
						temp3.next = _this9.head;
						_this9.head = temp3;
						_this9.modified = true;
						_this9.length++;
					}
					ret4.sleeping = false;
					ret4.island = null;
					ret4.parent = ret4;
					ret4.rank = 0;
				}
				_this6.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
				zpp_$nape_space_ZPP_$Island.zpp_pool = _this6;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre1 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
				arb1.sleep_stamp = this.stamp;
				arb1.sleeping = true;
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = arbs1.head;
					ret1 = old1.next;
					arbs1.head = ret1;
					if(arbs1.head == null) {
						arbs1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						arbs1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o1;
				arbs1.modified = true;
				arbs1.length--;
				arbs1.pushmod = true;
				arbite1 = ret1;
				continue;
			}
			pre1 = arbite1;
			arbite1 = arbite1.next;
		}
		var pre2 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
				arb2.sleep_stamp = this.stamp;
				arb2.sleeping = true;
				var old2;
				var ret2;
				if(pre2 == null) {
					old2 = arbs2.head;
					ret2 = old2.next;
					arbs2.head = ret2;
					if(arbs2.head == null) {
						arbs2.pushmod = true;
					}
				} else {
					old2 = pre2.next;
					ret2 = old2.next;
					pre2.next = ret2;
					if(ret2 == null) {
						arbs2.pushmod = true;
					}
				}
				var o2 = old2;
				o2.elt = null;
				o2.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o2;
				arbs2.modified = true;
				arbs2.length--;
				arbs2.pushmod = true;
				arbite2 = ret2;
				continue;
			}
			pre2 = arbite2;
			arbite2 = arbite2.next;
		}
	}
	,static_validation: function(body) {
		if(body.shapes.head != null) {
			if(body.zip_aabb) {
				body.zip_aabb = false;
				body.aabb.minx = Infinity;
				body.aabb.miny = Infinity;
				body.aabb.maxx = -Infinity;
				body.aabb.maxy = -Infinity;
				var cx_ite = body.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					if(s.zip_aabb) {
						if(s.body != null) {
							s.zip_aabb = false;
							if(s.type == 0) {
								var _this = s.circle;
								if(_this.zip_worldCOM) {
									if(_this.body != null) {
										_this.zip_worldCOM = false;
										if(_this.zip_localCOM) {
											_this.zip_localCOM = false;
											if(_this.type == 1) {
												var _this1 = _this.polygon;
												if(_this1.lverts.next.next == null) {
													_this1.localCOMx = _this1.lverts.next.x;
													_this1.localCOMy = _this1.lverts.next.y;
												} else if(_this1.lverts.next.next.next == null) {
													_this1.localCOMx = _this1.lverts.next.x;
													_this1.localCOMy = _this1.lverts.next.y;
													_this1.localCOMx += _this1.lverts.next.next.x;
													_this1.localCOMy += _this1.lverts.next.next.y;
													_this1.localCOMx *= 0.5;
													_this1.localCOMy *= 0.5;
												} else {
													_this1.localCOMx = 0;
													_this1.localCOMy = 0;
													var area = 0.0;
													var cx_ite1 = _this1.lverts.next;
													var u = cx_ite1;
													cx_ite1 = cx_ite1.next;
													var v = cx_ite1;
													cx_ite1 = cx_ite1.next;
													while(cx_ite1 != null) {
														var w = cx_ite1;
														area += v.x * (w.y - u.y);
														var cf = w.y * v.x - w.x * v.y;
														_this1.localCOMx += (v.x + w.x) * cf;
														_this1.localCOMy += (v.y + w.y) * cf;
														u = v;
														v = w;
														cx_ite1 = cx_ite1.next;
													}
													cx_ite1 = _this1.lverts.next;
													var w1 = cx_ite1;
													area += v.x * (w1.y - u.y);
													var cf1 = w1.y * v.x - w1.x * v.y;
													_this1.localCOMx += (v.x + w1.x) * cf1;
													_this1.localCOMy += (v.y + w1.y) * cf1;
													u = v;
													cx_ite1 = cx_ite1.next;
													var w2 = cx_ite1;
													area += w1.x * (w2.y - u.y);
													var cf2 = w2.y * w1.x - w2.x * w1.y;
													_this1.localCOMx += (w1.x + w2.x) * cf2;
													_this1.localCOMy += (w1.y + w2.y) * cf2;
													area = 1 / (3 * area);
													var t = area;
													_this1.localCOMx *= t;
													_this1.localCOMy *= t;
												}
											}
											if(_this.wrap_localCOM != null) {
												_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
												_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
											}
										}
										var _this2 = _this.body;
										if(_this2.zip_axis) {
											_this2.zip_axis = false;
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										}
										_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
										_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
									}
								}
								var rx = _this.radius;
								var ry = _this.radius;
								_this.aabb.minx = _this.worldCOMx - rx;
								_this.aabb.miny = _this.worldCOMy - ry;
								_this.aabb.maxx = _this.worldCOMx + rx;
								_this.aabb.maxy = _this.worldCOMy + ry;
							} else {
								var _this3 = s.polygon;
								if(_this3.zip_gverts) {
									if(_this3.body != null) {
										_this3.zip_gverts = false;
										_this3.validate_lverts();
										var _this4 = _this3.body;
										if(_this4.zip_axis) {
											_this4.zip_axis = false;
											_this4.axisx = Math.sin(_this4.rot);
											_this4.axisy = Math.cos(_this4.rot);
										}
										var li = _this3.lverts.next;
										var cx_ite2 = _this3.gverts.next;
										while(cx_ite2 != null) {
											var g = cx_ite2;
											var l = li;
											li = li.next;
											g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
											g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
											cx_ite2 = cx_ite2.next;
										}
									}
								}
								var _this5 = _this3.gverts.next;
								_this3.aabb.minx = _this5.x;
								_this3.aabb.miny = _this5.y;
								_this3.aabb.maxx = _this5.x;
								_this3.aabb.maxy = _this5.y;
								var cx_ite3 = _this3.gverts.next.next;
								while(cx_ite3 != null) {
									var p = cx_ite3;
									if(p.x < _this3.aabb.minx) {
										_this3.aabb.minx = p.x;
									}
									if(p.x > _this3.aabb.maxx) {
										_this3.aabb.maxx = p.x;
									}
									if(p.y < _this3.aabb.miny) {
										_this3.aabb.miny = p.y;
									}
									if(p.y > _this3.aabb.maxy) {
										_this3.aabb.maxy = p.y;
									}
									cx_ite3 = cx_ite3.next;
								}
							}
						}
					}
					var _this6 = body.aabb;
					var x = s.aabb;
					if(x.minx < _this6.minx) {
						_this6.minx = x.minx;
					}
					if(x.maxx > _this6.maxx) {
						_this6.maxx = x.maxx;
					}
					if(x.miny < _this6.miny) {
						_this6.miny = x.miny;
					}
					if(x.maxy > _this6.maxy) {
						_this6.maxy = x.maxy;
					}
					cx_ite = cx_ite.next;
				}
			}
		}
		body.validate_mass();
		body.validate_inertia();
		var cx_ite4 = body.shapes.head;
		while(cx_ite4 != null) {
			var s1 = cx_ite4.elt;
			if(s1.type == 1) {
				var _this7 = s1.polygon;
				if(_this7.zip_sanitation) {
					_this7.zip_sanitation = false;
					_this7.splice_collinear_real();
				}
				var _this8 = s1.polygon;
				if(_this8.zip_gaxi) {
					if(_this8.body != null) {
						_this8.zip_gaxi = false;
						_this8.validate_laxi();
						var _this9 = _this8.body;
						if(_this9.zip_axis) {
							_this9.zip_axis = false;
							_this9.axisx = Math.sin(_this9.rot);
							_this9.axisy = Math.cos(_this9.rot);
						}
						if(_this8.zip_gverts) {
							if(_this8.body != null) {
								_this8.zip_gverts = false;
								_this8.validate_lverts();
								var _this10 = _this8.body;
								if(_this10.zip_axis) {
									_this10.zip_axis = false;
									_this10.axisx = Math.sin(_this10.rot);
									_this10.axisy = Math.cos(_this10.rot);
								}
								var li1 = _this8.lverts.next;
								var cx_ite5 = _this8.gverts.next;
								while(cx_ite5 != null) {
									var g1 = cx_ite5;
									var l1 = li1;
									li1 = li1.next;
									g1.x = _this8.body.posx + (_this8.body.axisy * l1.x - _this8.body.axisx * l1.y);
									g1.y = _this8.body.posy + (l1.x * _this8.body.axisx + l1.y * _this8.body.axisy);
									cx_ite5 = cx_ite5.next;
								}
							}
						}
						var ite = _this8.edges.head;
						var cx_ite6 = _this8.gverts.next;
						var u1 = cx_ite6;
						cx_ite6 = cx_ite6.next;
						while(cx_ite6 != null) {
							var v1 = cx_ite6;
							var e = ite.elt;
							ite = ite.next;
							e.gp0 = u1;
							e.gp1 = v1;
							e.gnormx = _this8.body.axisy * e.lnormx - _this8.body.axisx * e.lnormy;
							e.gnormy = e.lnormx * _this8.body.axisx + e.lnormy * _this8.body.axisy;
							e.gprojection = _this8.body.posx * e.gnormx + _this8.body.posy * e.gnormy + e.lprojection;
							if(e.wrap_gnorm != null) {
								e.wrap_gnorm.zpp_inner.x = e.gnormx;
								e.wrap_gnorm.zpp_inner.y = e.gnormy;
							}
							e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
							e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
							u1 = v1;
							cx_ite6 = cx_ite6.next;
						}
						var e1 = ite.elt;
						e1.gp0 = u1;
						e1.gp1 = _this8.gverts.next;
						e1.gnormx = _this8.body.axisy * e1.lnormx - _this8.body.axisx * e1.lnormy;
						e1.gnormy = e1.lnormx * _this8.body.axisx + e1.lnormy * _this8.body.axisy;
						e1.gprojection = _this8.body.posx * e1.gnormx + _this8.body.posy * e1.gnormy + e1.lprojection;
						if(e1.wrap_gnorm != null) {
							e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
							e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
						}
						e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
						e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
					}
				}
			}
			cx_ite4 = cx_ite4.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		var _this = this.cbsets;
		if(!_this.cbsets.empty()) {
			var set_ite = _this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				set_ite.data.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == 1) {
					var _this1 = s.polygon;
					if(_this1.zip_sanitation) {
						_this1.zip_sanitation = false;
						_this1.splice_collinear_real();
					}
					var _this2 = s.polygon;
					if(_this2.zip_gaxi) {
						if(_this2.body != null) {
							_this2.zip_gaxi = false;
							_this2.validate_laxi();
							var _this3 = _this2.body;
							if(_this3.zip_axis) {
								_this3.zip_axis = false;
								_this3.axisx = Math.sin(_this3.rot);
								_this3.axisy = Math.cos(_this3.rot);
							}
							if(_this2.zip_gverts) {
								if(_this2.body != null) {
									_this2.zip_gverts = false;
									_this2.validate_lverts();
									var _this4 = _this2.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this2.lverts.next;
									var cx_ite2 = _this2.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this2.body.posx + (_this2.body.axisy * l.x - _this2.body.axisx * l.y);
										g.y = _this2.body.posy + (l.x * _this2.body.axisx + l.y * _this2.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							var ite = _this2.edges.head;
							var cx_ite3 = _this2.gverts.next;
							var u = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var v = cx_ite3;
								var e = ite.elt;
								ite = ite.next;
								e.gp0 = u;
								e.gp1 = v;
								e.gnormx = _this2.body.axisy * e.lnormx - _this2.body.axisx * e.lnormy;
								e.gnormy = e.lnormx * _this2.body.axisx + e.lnormy * _this2.body.axisy;
								e.gprojection = _this2.body.posx * e.gnormx + _this2.body.posy * e.gnormy + e.lprojection;
								if(e.wrap_gnorm != null) {
									e.wrap_gnorm.zpp_inner.x = e.gnormx;
									e.wrap_gnorm.zpp_inner.y = e.gnormy;
								}
								e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
								e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
								u = v;
								cx_ite3 = cx_ite3.next;
							}
							var e1 = ite.elt;
							e1.gp0 = u;
							e1.gp1 = _this2.gverts.next;
							e1.gnormx = _this2.body.axisy * e1.lnormx - _this2.body.axisx * e1.lnormy;
							e1.gnormy = e1.lnormx * _this2.body.axisx + e1.lnormy * _this2.body.axisy;
							e1.gprojection = _this2.body.posx * e1.gnormx + _this2.body.posy * e1.gnormy + e1.lprojection;
							if(e1.wrap_gnorm != null) {
								e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
								e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
							}
							e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
							e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
						}
					}
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) {
					cur.sweepRadius = s.sweepRadius;
				}
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(cur.shapes.head != null) {
				if(cur.zip_aabb) {
					cur.zip_aabb = false;
					cur.aabb.minx = Infinity;
					cur.aabb.miny = Infinity;
					cur.aabb.maxx = -Infinity;
					cur.aabb.maxy = -Infinity;
					var cx_ite4 = cur.shapes.head;
					while(cx_ite4 != null) {
						var s1 = cx_ite4.elt;
						if(s1.zip_aabb) {
							if(s1.body != null) {
								s1.zip_aabb = false;
								if(s1.type == 0) {
									var _this5 = s1.circle;
									if(_this5.zip_worldCOM) {
										if(_this5.body != null) {
											_this5.zip_worldCOM = false;
											if(_this5.zip_localCOM) {
												_this5.zip_localCOM = false;
												if(_this5.type == 1) {
													var _this6 = _this5.polygon;
													if(_this6.lverts.next.next == null) {
														_this6.localCOMx = _this6.lverts.next.x;
														_this6.localCOMy = _this6.lverts.next.y;
													} else if(_this6.lverts.next.next.next == null) {
														_this6.localCOMx = _this6.lverts.next.x;
														_this6.localCOMy = _this6.lverts.next.y;
														_this6.localCOMx += _this6.lverts.next.next.x;
														_this6.localCOMy += _this6.lverts.next.next.y;
														_this6.localCOMx *= 0.5;
														_this6.localCOMy *= 0.5;
													} else {
														_this6.localCOMx = 0;
														_this6.localCOMy = 0;
														var area = 0.0;
														var cx_ite5 = _this6.lverts.next;
														var u1 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														var v1 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														while(cx_ite5 != null) {
															var w = cx_ite5;
															area += v1.x * (w.y - u1.y);
															var cf = w.y * v1.x - w.x * v1.y;
															_this6.localCOMx += (v1.x + w.x) * cf;
															_this6.localCOMy += (v1.y + w.y) * cf;
															u1 = v1;
															v1 = w;
															cx_ite5 = cx_ite5.next;
														}
														cx_ite5 = _this6.lverts.next;
														var w1 = cx_ite5;
														area += v1.x * (w1.y - u1.y);
														var cf1 = w1.y * v1.x - w1.x * v1.y;
														_this6.localCOMx += (v1.x + w1.x) * cf1;
														_this6.localCOMy += (v1.y + w1.y) * cf1;
														u1 = v1;
														cx_ite5 = cx_ite5.next;
														var w2 = cx_ite5;
														area += w1.x * (w2.y - u1.y);
														var cf2 = w2.y * w1.x - w2.x * w1.y;
														_this6.localCOMx += (w1.x + w2.x) * cf2;
														_this6.localCOMy += (w1.y + w2.y) * cf2;
														area = 1 / (3 * area);
														var t = area;
														_this6.localCOMx *= t;
														_this6.localCOMy *= t;
													}
												}
												if(_this5.wrap_localCOM != null) {
													_this5.wrap_localCOM.zpp_inner.x = _this5.localCOMx;
													_this5.wrap_localCOM.zpp_inner.y = _this5.localCOMy;
												}
											}
											var _this7 = _this5.body;
											if(_this7.zip_axis) {
												_this7.zip_axis = false;
												_this7.axisx = Math.sin(_this7.rot);
												_this7.axisy = Math.cos(_this7.rot);
											}
											_this5.worldCOMx = _this5.body.posx + (_this5.body.axisy * _this5.localCOMx - _this5.body.axisx * _this5.localCOMy);
											_this5.worldCOMy = _this5.body.posy + (_this5.localCOMx * _this5.body.axisx + _this5.localCOMy * _this5.body.axisy);
										}
									}
									var rx = _this5.radius;
									var ry = _this5.radius;
									_this5.aabb.minx = _this5.worldCOMx - rx;
									_this5.aabb.miny = _this5.worldCOMy - ry;
									_this5.aabb.maxx = _this5.worldCOMx + rx;
									_this5.aabb.maxy = _this5.worldCOMy + ry;
								} else {
									var _this8 = s1.polygon;
									if(_this8.zip_gverts) {
										if(_this8.body != null) {
											_this8.zip_gverts = false;
											_this8.validate_lverts();
											var _this9 = _this8.body;
											if(_this9.zip_axis) {
												_this9.zip_axis = false;
												_this9.axisx = Math.sin(_this9.rot);
												_this9.axisy = Math.cos(_this9.rot);
											}
											var li1 = _this8.lverts.next;
											var cx_ite6 = _this8.gverts.next;
											while(cx_ite6 != null) {
												var g1 = cx_ite6;
												var l1 = li1;
												li1 = li1.next;
												g1.x = _this8.body.posx + (_this8.body.axisy * l1.x - _this8.body.axisx * l1.y);
												g1.y = _this8.body.posy + (l1.x * _this8.body.axisx + l1.y * _this8.body.axisy);
												cx_ite6 = cx_ite6.next;
											}
										}
									}
									var _this10 = _this8.gverts.next;
									_this8.aabb.minx = _this10.x;
									_this8.aabb.miny = _this10.y;
									_this8.aabb.maxx = _this10.x;
									_this8.aabb.maxy = _this10.y;
									var cx_ite7 = _this8.gverts.next.next;
									while(cx_ite7 != null) {
										var p = cx_ite7;
										if(p.x < _this8.aabb.minx) {
											_this8.aabb.minx = p.x;
										}
										if(p.x > _this8.aabb.maxx) {
											_this8.aabb.maxx = p.x;
										}
										if(p.y < _this8.aabb.miny) {
											_this8.aabb.miny = p.y;
										}
										if(p.y > _this8.aabb.maxy) {
											_this8.aabb.maxy = p.y;
										}
										cx_ite7 = cx_ite7.next;
									}
								}
							}
						}
						var _this11 = cur.aabb;
						var x = s1.aabb;
						if(x.minx < _this11.minx) {
							_this11.minx = x.minx;
						}
						if(x.maxx > _this11.maxx) {
							_this11.maxx = x.maxx;
						}
						if(x.miny < _this11.miny) {
							_this11.miny = x.miny;
						}
						if(x.maxy > _this11.maxy) {
							_this11.maxy = x.maxy;
						}
						cx_ite4 = cx_ite4.next;
					}
				}
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
			}
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite8 = cur.cbSet.bodylisteners.head;
				while(cx_ite8 != null) {
					var i = cx_ite8.elt;
					if(i.event != 2) {
						cx_ite8 = cx_ite8.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.body = cur;
					cx_ite8 = cx_ite8.next;
				}
			}
			cur.component.woken = false;
			var cx_ite9 = cur.shapes.head;
			while(cx_ite9 != null) {
				this.bphase.sync(cx_ite9.elt);
				cx_ite9 = cx_ite9.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite10 = this.kinematics.head;
		while(cx_ite10 != null) {
			var cur1 = cx_ite10.elt;
			cur1.sweepRadius = 0;
			var cx_ite11 = cur1.shapes.head;
			while(cx_ite11 != null) {
				var s2 = cx_ite11.elt;
				if(s2.type == 1) {
					var _this12 = s2.polygon;
					if(_this12.zip_sanitation) {
						_this12.zip_sanitation = false;
						_this12.splice_collinear_real();
					}
					var _this13 = s2.polygon;
					if(_this13.zip_gaxi) {
						if(_this13.body != null) {
							_this13.zip_gaxi = false;
							_this13.validate_laxi();
							var _this14 = _this13.body;
							if(_this14.zip_axis) {
								_this14.zip_axis = false;
								_this14.axisx = Math.sin(_this14.rot);
								_this14.axisy = Math.cos(_this14.rot);
							}
							if(_this13.zip_gverts) {
								if(_this13.body != null) {
									_this13.zip_gverts = false;
									_this13.validate_lverts();
									var _this15 = _this13.body;
									if(_this15.zip_axis) {
										_this15.zip_axis = false;
										_this15.axisx = Math.sin(_this15.rot);
										_this15.axisy = Math.cos(_this15.rot);
									}
									var li2 = _this13.lverts.next;
									var cx_ite12 = _this13.gverts.next;
									while(cx_ite12 != null) {
										var g2 = cx_ite12;
										var l2 = li2;
										li2 = li2.next;
										g2.x = _this13.body.posx + (_this13.body.axisy * l2.x - _this13.body.axisx * l2.y);
										g2.y = _this13.body.posy + (l2.x * _this13.body.axisx + l2.y * _this13.body.axisy);
										cx_ite12 = cx_ite12.next;
									}
								}
							}
							var ite1 = _this13.edges.head;
							var cx_ite13 = _this13.gverts.next;
							var u2 = cx_ite13;
							cx_ite13 = cx_ite13.next;
							while(cx_ite13 != null) {
								var v2 = cx_ite13;
								var e2 = ite1.elt;
								ite1 = ite1.next;
								e2.gp0 = u2;
								e2.gp1 = v2;
								e2.gnormx = _this13.body.axisy * e2.lnormx - _this13.body.axisx * e2.lnormy;
								e2.gnormy = e2.lnormx * _this13.body.axisx + e2.lnormy * _this13.body.axisy;
								e2.gprojection = _this13.body.posx * e2.gnormx + _this13.body.posy * e2.gnormy + e2.lprojection;
								if(e2.wrap_gnorm != null) {
									e2.wrap_gnorm.zpp_inner.x = e2.gnormx;
									e2.wrap_gnorm.zpp_inner.y = e2.gnormy;
								}
								e2.tp0 = e2.gp0.y * e2.gnormx - e2.gp0.x * e2.gnormy;
								e2.tp1 = e2.gp1.y * e2.gnormx - e2.gp1.x * e2.gnormy;
								u2 = v2;
								cx_ite13 = cx_ite13.next;
							}
							var e3 = ite1.elt;
							e3.gp0 = u2;
							e3.gp1 = _this13.gverts.next;
							e3.gnormx = _this13.body.axisy * e3.lnormx - _this13.body.axisx * e3.lnormy;
							e3.gnormy = e3.lnormx * _this13.body.axisx + e3.lnormy * _this13.body.axisy;
							e3.gprojection = _this13.body.posx * e3.gnormx + _this13.body.posy * e3.gnormy + e3.lprojection;
							if(e3.wrap_gnorm != null) {
								e3.wrap_gnorm.zpp_inner.x = e3.gnormx;
								e3.wrap_gnorm.zpp_inner.y = e3.gnormy;
							}
							e3.tp0 = e3.gp0.y * e3.gnormx - e3.gp0.x * e3.gnormy;
							e3.tp1 = e3.gp1.y * e3.gnormx - e3.gp1.x * e3.gnormy;
						}
					}
				}
				s2.validate_sweepRadius();
				if(s2.sweepRadius > cur1.sweepRadius) {
					cur1.sweepRadius = s2.sweepRadius;
				}
				cx_ite11 = cx_ite11.next;
			}
			cur1.validate_mass();
			cur1.validate_inertia();
			if(cur1.shapes.head != null) {
				if(cur1.zip_aabb) {
					cur1.zip_aabb = false;
					cur1.aabb.minx = Infinity;
					cur1.aabb.miny = Infinity;
					cur1.aabb.maxx = -Infinity;
					cur1.aabb.maxy = -Infinity;
					var cx_ite14 = cur1.shapes.head;
					while(cx_ite14 != null) {
						var s3 = cx_ite14.elt;
						if(s3.zip_aabb) {
							if(s3.body != null) {
								s3.zip_aabb = false;
								if(s3.type == 0) {
									var _this16 = s3.circle;
									if(_this16.zip_worldCOM) {
										if(_this16.body != null) {
											_this16.zip_worldCOM = false;
											if(_this16.zip_localCOM) {
												_this16.zip_localCOM = false;
												if(_this16.type == 1) {
													var _this17 = _this16.polygon;
													if(_this17.lverts.next.next == null) {
														_this17.localCOMx = _this17.lverts.next.x;
														_this17.localCOMy = _this17.lverts.next.y;
													} else if(_this17.lverts.next.next.next == null) {
														_this17.localCOMx = _this17.lverts.next.x;
														_this17.localCOMy = _this17.lverts.next.y;
														_this17.localCOMx += _this17.lverts.next.next.x;
														_this17.localCOMy += _this17.lverts.next.next.y;
														_this17.localCOMx *= 0.5;
														_this17.localCOMy *= 0.5;
													} else {
														_this17.localCOMx = 0;
														_this17.localCOMy = 0;
														var area1 = 0.0;
														var cx_ite15 = _this17.lverts.next;
														var u3 = cx_ite15;
														cx_ite15 = cx_ite15.next;
														var v3 = cx_ite15;
														cx_ite15 = cx_ite15.next;
														while(cx_ite15 != null) {
															var w3 = cx_ite15;
															area1 += v3.x * (w3.y - u3.y);
															var cf3 = w3.y * v3.x - w3.x * v3.y;
															_this17.localCOMx += (v3.x + w3.x) * cf3;
															_this17.localCOMy += (v3.y + w3.y) * cf3;
															u3 = v3;
															v3 = w3;
															cx_ite15 = cx_ite15.next;
														}
														cx_ite15 = _this17.lverts.next;
														var w4 = cx_ite15;
														area1 += v3.x * (w4.y - u3.y);
														var cf4 = w4.y * v3.x - w4.x * v3.y;
														_this17.localCOMx += (v3.x + w4.x) * cf4;
														_this17.localCOMy += (v3.y + w4.y) * cf4;
														u3 = v3;
														cx_ite15 = cx_ite15.next;
														var w5 = cx_ite15;
														area1 += w4.x * (w5.y - u3.y);
														var cf5 = w5.y * w4.x - w5.x * w4.y;
														_this17.localCOMx += (w4.x + w5.x) * cf5;
														_this17.localCOMy += (w4.y + w5.y) * cf5;
														area1 = 1 / (3 * area1);
														var t1 = area1;
														_this17.localCOMx *= t1;
														_this17.localCOMy *= t1;
													}
												}
												if(_this16.wrap_localCOM != null) {
													_this16.wrap_localCOM.zpp_inner.x = _this16.localCOMx;
													_this16.wrap_localCOM.zpp_inner.y = _this16.localCOMy;
												}
											}
											var _this18 = _this16.body;
											if(_this18.zip_axis) {
												_this18.zip_axis = false;
												_this18.axisx = Math.sin(_this18.rot);
												_this18.axisy = Math.cos(_this18.rot);
											}
											_this16.worldCOMx = _this16.body.posx + (_this16.body.axisy * _this16.localCOMx - _this16.body.axisx * _this16.localCOMy);
											_this16.worldCOMy = _this16.body.posy + (_this16.localCOMx * _this16.body.axisx + _this16.localCOMy * _this16.body.axisy);
										}
									}
									var rx1 = _this16.radius;
									var ry1 = _this16.radius;
									_this16.aabb.minx = _this16.worldCOMx - rx1;
									_this16.aabb.miny = _this16.worldCOMy - ry1;
									_this16.aabb.maxx = _this16.worldCOMx + rx1;
									_this16.aabb.maxy = _this16.worldCOMy + ry1;
								} else {
									var _this19 = s3.polygon;
									if(_this19.zip_gverts) {
										if(_this19.body != null) {
											_this19.zip_gverts = false;
											_this19.validate_lverts();
											var _this20 = _this19.body;
											if(_this20.zip_axis) {
												_this20.zip_axis = false;
												_this20.axisx = Math.sin(_this20.rot);
												_this20.axisy = Math.cos(_this20.rot);
											}
											var li3 = _this19.lverts.next;
											var cx_ite16 = _this19.gverts.next;
											while(cx_ite16 != null) {
												var g3 = cx_ite16;
												var l3 = li3;
												li3 = li3.next;
												g3.x = _this19.body.posx + (_this19.body.axisy * l3.x - _this19.body.axisx * l3.y);
												g3.y = _this19.body.posy + (l3.x * _this19.body.axisx + l3.y * _this19.body.axisy);
												cx_ite16 = cx_ite16.next;
											}
										}
									}
									var _this21 = _this19.gverts.next;
									_this19.aabb.minx = _this21.x;
									_this19.aabb.miny = _this21.y;
									_this19.aabb.maxx = _this21.x;
									_this19.aabb.maxy = _this21.y;
									var cx_ite17 = _this19.gverts.next.next;
									while(cx_ite17 != null) {
										var p1 = cx_ite17;
										if(p1.x < _this19.aabb.minx) {
											_this19.aabb.minx = p1.x;
										}
										if(p1.x > _this19.aabb.maxx) {
											_this19.aabb.maxx = p1.x;
										}
										if(p1.y < _this19.aabb.miny) {
											_this19.aabb.miny = p1.y;
										}
										if(p1.y > _this19.aabb.maxy) {
											_this19.aabb.maxy = p1.y;
										}
										cx_ite17 = cx_ite17.next;
									}
								}
							}
						}
						var _this22 = cur1.aabb;
						var x1 = s3.aabb;
						if(x1.minx < _this22.minx) {
							_this22.minx = x1.minx;
						}
						if(x1.maxx > _this22.maxx) {
							_this22.maxx = x1.maxx;
						}
						if(x1.miny < _this22.miny) {
							_this22.miny = x1.miny;
						}
						if(x1.maxy > _this22.maxy) {
							_this22.maxy = x1.maxy;
						}
						cx_ite14 = cx_ite14.next;
					}
				}
				cur1.validate_worldCOM();
			}
			cur1.validate_gravMass();
			if(cur1.zip_axis) {
				cur1.zip_axis = false;
				cur1.axisx = Math.sin(cur1.rot);
				cur1.axisy = Math.cos(cur1.rot);
			}
			var cx_ite18 = cur1.shapes.head;
			while(cx_ite18 != null) {
				this.bphase.sync(cx_ite18.elt);
				cx_ite18 = cx_ite18.next;
			}
			cx_ite10 = cx_ite10.next;
		}
		var cx_ite19 = this.live_constraints.head;
		while(cx_ite19 != null) {
			var con = cx_ite19.elt;
			if(con.active) {
				if(con.component.woken && con.cbSet != null) {
					var cx_ite20 = con.cbSet.conlisteners.head;
					while(cx_ite20 != null) {
						var i1 = cx_ite20.elt;
						if(i1.event != 2) {
							cx_ite20 = cx_ite20.next;
							continue;
						}
						var cb1 = this.push_callback(i1);
						cb1.event = 2;
						cb1.constraint = con;
						cx_ite20 = cx_ite20.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite19 = cx_ite19.next;
		}
	}
	,updateVel: function(dt) {
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				cur.angvel = angDrag * cur.angvel + (cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass) * dt * cur.iinertia;
			}
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			var delta = dt - cur.sweepTime;
			if(delta != 0) {
				cur.sweepTime = dt;
				cur.posx += cur.velx * delta;
				cur.posy += cur.vely * delta;
				if(cur.angvel != 0) {
					var dr = cur.sweep_angvel * delta;
					cur.rot += dr;
					if(dr * dr > 0.0001) {
						cur.axisx = Math.sin(cur.rot);
						cur.axisy = Math.cos(cur.rot);
					} else {
						var d2 = dr * dr;
						var p = 1 - 0.5 * d2;
						var m = 1 - d2 * d2 / 8;
						var nx = (p * cur.axisx + dr * cur.axisy) * m;
						cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
						cur.axisx = nx;
					}
				}
			}
			if(!cur.disableCCD) {
				var linThreshold = nape_Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape_Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == 3) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) {
						angvel = -angvel;
					}
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.0083333333333333332 | 0;
						if(count > 8) {
							count = 8;
						}
						var anginc = angvel * dt / count;
						var delta1 = dt - cur.sweepTime;
						if(delta1 != 0) {
							cur.sweepTime = dt;
							cur.posx += cur.velx * delta1;
							cur.posy += cur.vely * delta1;
							if(cur.angvel != 0) {
								var dr1 = cur.sweep_angvel * delta1;
								cur.rot += dr1;
								if(dr1 * dr1 > 0.0001) {
									cur.axisx = Math.sin(cur.rot);
									cur.axisy = Math.cos(cur.rot);
								} else {
									var d21 = dr1 * dr1;
									var p1 = 1 - 0.5 * d21;
									var m1 = 1 - d21 * d21 / 8;
									var nx1 = (p1 * cur.axisx + dr1 * cur.axisy) * m1;
									cur.axisy = (p1 * cur.axisy - dr1 * cur.axisx) * m1;
									cur.axisx = nx1;
								}
							}
						}
						if(s.type == 0) {
							var _this = s.circle;
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							_this.aabb.minx = _this.worldCOMx - _this.radius;
							_this.aabb.miny = _this.worldCOMy - _this.radius;
							_this.aabb.maxx = _this.worldCOMx + _this.radius;
							_this.aabb.maxy = _this.worldCOMy + _this.radius;
						} else {
							var _this1 = s.polygon;
							var li = _this1.lverts.next;
							var _this2 = _this1.gverts.next;
							var l = li;
							li = li.next;
							_this2.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
							_this2.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
							_this1.aabb.minx = _this2.x;
							_this1.aabb.miny = _this2.y;
							_this1.aabb.maxx = _this2.x;
							_this1.aabb.maxy = _this2.y;
							var cx_ite2 = _this1.gverts.next.next;
							while(cx_ite2 != null) {
								var p2 = cx_ite2;
								var l1 = li;
								li = li.next;
								p2.x = _this1.body.posx + (_this1.body.axisy * l1.x - _this1.body.axisx * l1.y);
								p2.y = _this1.body.posy + (l1.x * _this1.body.axisx + l1.y * _this1.body.axisy);
								if(p2.x < _this1.aabb.minx) {
									_this1.aabb.minx = p2.x;
								}
								if(p2.x > _this1.aabb.maxx) {
									_this1.aabb.maxx = p2.x;
								}
								if(p2.y < _this1.aabb.miny) {
									_this1.aabb.miny = p2.y;
								}
								if(p2.y > _this1.aabb.maxy) {
									_this1.aabb.maxy = p2.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
						if(minx < aabb.minx) {
							aabb.minx = minx;
						} else {
							minx = aabb.minx;
						}
						if(miny < aabb.miny) {
							aabb.miny = miny;
						} else {
							miny = aabb.miny;
						}
						if(maxx > aabb.maxx) {
							aabb.maxx = maxx;
						} else {
							maxx = aabb.maxx;
						}
						if(maxy > aabb.maxy) {
							aabb.maxy = maxy;
						} else {
							maxy = aabb.maxy;
						}
						var _g1 = 1;
						var _g = count;
						while(_g1 < _g) {
							var dt1 = anginc * _g1++ * iangvel;
							var delta2 = dt1 - cur.sweepTime;
							if(delta2 != 0) {
								cur.sweepTime = dt1;
								cur.posx += cur.velx * delta2;
								cur.posy += cur.vely * delta2;
								if(cur.angvel != 0) {
									var dr2 = cur.sweep_angvel * delta2;
									cur.rot += dr2;
									if(dr2 * dr2 > 0.0001) {
										cur.axisx = Math.sin(cur.rot);
										cur.axisy = Math.cos(cur.rot);
									} else {
										var d22 = dr2 * dr2;
										var p3 = 1 - 0.5 * d22;
										var m2 = 1 - d22 * d22 / 8;
										var nx2 = (p3 * cur.axisx + dr2 * cur.axisy) * m2;
										cur.axisy = (p3 * cur.axisy - dr2 * cur.axisx) * m2;
										cur.axisx = nx2;
									}
								}
							}
							if(s.type == 0) {
								var _this3 = s.circle;
								_this3.worldCOMx = _this3.body.posx + (_this3.body.axisy * _this3.localCOMx - _this3.body.axisx * _this3.localCOMy);
								_this3.worldCOMy = _this3.body.posy + (_this3.localCOMx * _this3.body.axisx + _this3.localCOMy * _this3.body.axisy);
								_this3.aabb.minx = _this3.worldCOMx - _this3.radius;
								_this3.aabb.miny = _this3.worldCOMy - _this3.radius;
								_this3.aabb.maxx = _this3.worldCOMx + _this3.radius;
								_this3.aabb.maxy = _this3.worldCOMy + _this3.radius;
							} else {
								var _this4 = s.polygon;
								var li1 = _this4.lverts.next;
								var _this5 = _this4.gverts.next;
								var l2 = li1;
								li1 = li1.next;
								_this5.x = _this4.body.posx + (_this4.body.axisy * l2.x - _this4.body.axisx * l2.y);
								_this5.y = _this4.body.posy + (l2.x * _this4.body.axisx + l2.y * _this4.body.axisy);
								_this4.aabb.minx = _this5.x;
								_this4.aabb.miny = _this5.y;
								_this4.aabb.maxx = _this5.x;
								_this4.aabb.maxy = _this5.y;
								var cx_ite3 = _this4.gverts.next.next;
								while(cx_ite3 != null) {
									var p4 = cx_ite3;
									var l3 = li1;
									li1 = li1.next;
									p4.x = _this4.body.posx + (_this4.body.axisy * l3.x - _this4.body.axisx * l3.y);
									p4.y = _this4.body.posy + (l3.x * _this4.body.axisx + l3.y * _this4.body.axisy);
									if(p4.x < _this4.aabb.minx) {
										_this4.aabb.minx = p4.x;
									}
									if(p4.x > _this4.aabb.maxx) {
										_this4.aabb.maxx = p4.x;
									}
									if(p4.y < _this4.aabb.miny) {
										_this4.aabb.miny = p4.y;
									}
									if(p4.y > _this4.aabb.maxy) {
										_this4.aabb.maxy = p4.y;
									}
									cx_ite3 = cx_ite3.next;
								}
							}
							if(minx < aabb.minx) {
								aabb.minx = minx;
							} else {
								minx = aabb.minx;
							}
							if(miny < aabb.miny) {
								aabb.miny = miny;
							} else {
								miny = aabb.miny;
							}
							if(maxx > aabb.maxx) {
								aabb.maxx = maxx;
							} else {
								maxx = aabb.maxx;
							}
							if(maxy > aabb.maxy) {
								aabb.maxy = maxy;
							} else {
								maxy = aabb.maxy;
							}
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == 2 && cur.bulletEnabled) {
						var linThreshold2 = nape_Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape_Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) {
							cur.bullet = true;
						}
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite4 = this.kinematics.head;
		while(cx_ite4 != null) {
			var cur1 = cx_ite4.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cur1.sweepTime = 0;
			cur1.sweep_angvel = cur1.angvel % MAX_VEL;
			var delta3 = dt - cur1.sweepTime;
			if(delta3 != 0) {
				cur1.sweepTime = dt;
				cur1.posx += cur1.velx * delta3;
				cur1.posy += cur1.vely * delta3;
				if(cur1.angvel != 0) {
					var dr3 = cur1.sweep_angvel * delta3;
					cur1.rot += dr3;
					if(dr3 * dr3 > 0.0001) {
						cur1.axisx = Math.sin(cur1.rot);
						cur1.axisy = Math.cos(cur1.rot);
					} else {
						var d23 = dr3 * dr3;
						var p5 = 1 - 0.5 * d23;
						var m3 = 1 - d23 * d23 / 8;
						var nx3 = (p5 * cur1.axisx + dr3 * cur1.axisy) * m3;
						cur1.axisy = (p5 * cur1.axisy - dr3 * cur1.axisx) * m3;
						cur1.axisx = nx3;
					}
				}
			}
			if(!cur1.disableCCD) {
				var linThreshold1 = nape_Config.staticCCDLinearThreshold * cur1.sweepRadius;
				var angThreshold1 = nape_Config.staticCCDAngularThreshold;
				if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == 3) {
					var angvel1 = cur1.sweep_angvel;
					if(angvel1 < 0) {
						angvel1 = -angvel1;
					}
					var iangvel1 = 1 / angvel1;
					var cx_ite5 = cur1.shapes.head;
					while(cx_ite5 != null) {
						var s1 = cx_ite5.elt;
						var aabb1 = s1.aabb;
						var minx1 = aabb1.minx;
						var miny1 = aabb1.miny;
						var maxx1 = aabb1.maxx;
						var maxy1 = aabb1.maxy;
						var count1 = angvel1 * dt * s1.sweepCoef * 0.0083333333333333332 | 0;
						if(count1 > 8) {
							count1 = 8;
						}
						var anginc1 = angvel1 * dt / count1;
						var delta4 = dt - cur1.sweepTime;
						if(delta4 != 0) {
							cur1.sweepTime = dt;
							cur1.posx += cur1.velx * delta4;
							cur1.posy += cur1.vely * delta4;
							if(cur1.angvel != 0) {
								var dr4 = cur1.sweep_angvel * delta4;
								cur1.rot += dr4;
								if(dr4 * dr4 > 0.0001) {
									cur1.axisx = Math.sin(cur1.rot);
									cur1.axisy = Math.cos(cur1.rot);
								} else {
									var d24 = dr4 * dr4;
									var p6 = 1 - 0.5 * d24;
									var m4 = 1 - d24 * d24 / 8;
									var nx4 = (p6 * cur1.axisx + dr4 * cur1.axisy) * m4;
									cur1.axisy = (p6 * cur1.axisy - dr4 * cur1.axisx) * m4;
									cur1.axisx = nx4;
								}
							}
						}
						if(s1.type == 0) {
							var _this6 = s1.circle;
							_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
							_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
							_this6.aabb.minx = _this6.worldCOMx - _this6.radius;
							_this6.aabb.miny = _this6.worldCOMy - _this6.radius;
							_this6.aabb.maxx = _this6.worldCOMx + _this6.radius;
							_this6.aabb.maxy = _this6.worldCOMy + _this6.radius;
						} else {
							var _this7 = s1.polygon;
							var li2 = _this7.lverts.next;
							var _this8 = _this7.gverts.next;
							var l4 = li2;
							li2 = li2.next;
							_this8.x = _this7.body.posx + (_this7.body.axisy * l4.x - _this7.body.axisx * l4.y);
							_this8.y = _this7.body.posy + (l4.x * _this7.body.axisx + l4.y * _this7.body.axisy);
							_this7.aabb.minx = _this8.x;
							_this7.aabb.miny = _this8.y;
							_this7.aabb.maxx = _this8.x;
							_this7.aabb.maxy = _this8.y;
							var cx_ite6 = _this7.gverts.next.next;
							while(cx_ite6 != null) {
								var p7 = cx_ite6;
								var l5 = li2;
								li2 = li2.next;
								p7.x = _this7.body.posx + (_this7.body.axisy * l5.x - _this7.body.axisx * l5.y);
								p7.y = _this7.body.posy + (l5.x * _this7.body.axisx + l5.y * _this7.body.axisy);
								if(p7.x < _this7.aabb.minx) {
									_this7.aabb.minx = p7.x;
								}
								if(p7.x > _this7.aabb.maxx) {
									_this7.aabb.maxx = p7.x;
								}
								if(p7.y < _this7.aabb.miny) {
									_this7.aabb.miny = p7.y;
								}
								if(p7.y > _this7.aabb.maxy) {
									_this7.aabb.maxy = p7.y;
								}
								cx_ite6 = cx_ite6.next;
							}
						}
						if(minx1 < aabb1.minx) {
							aabb1.minx = minx1;
						} else {
							minx1 = aabb1.minx;
						}
						if(miny1 < aabb1.miny) {
							aabb1.miny = miny1;
						} else {
							miny1 = aabb1.miny;
						}
						if(maxx1 > aabb1.maxx) {
							aabb1.maxx = maxx1;
						} else {
							maxx1 = aabb1.maxx;
						}
						if(maxy1 > aabb1.maxy) {
							aabb1.maxy = maxy1;
						} else {
							maxy1 = aabb1.maxy;
						}
						var _g11 = 1;
						var _g2 = count1;
						while(_g11 < _g2) {
							var dt2 = anginc1 * _g11++ * iangvel1;
							var delta5 = dt2 - cur1.sweepTime;
							if(delta5 != 0) {
								cur1.sweepTime = dt2;
								cur1.posx += cur1.velx * delta5;
								cur1.posy += cur1.vely * delta5;
								if(cur1.angvel != 0) {
									var dr5 = cur1.sweep_angvel * delta5;
									cur1.rot += dr5;
									if(dr5 * dr5 > 0.0001) {
										cur1.axisx = Math.sin(cur1.rot);
										cur1.axisy = Math.cos(cur1.rot);
									} else {
										var d25 = dr5 * dr5;
										var p8 = 1 - 0.5 * d25;
										var m5 = 1 - d25 * d25 / 8;
										var nx5 = (p8 * cur1.axisx + dr5 * cur1.axisy) * m5;
										cur1.axisy = (p8 * cur1.axisy - dr5 * cur1.axisx) * m5;
										cur1.axisx = nx5;
									}
								}
							}
							if(s1.type == 0) {
								var _this9 = s1.circle;
								_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
								_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
								_this9.aabb.minx = _this9.worldCOMx - _this9.radius;
								_this9.aabb.miny = _this9.worldCOMy - _this9.radius;
								_this9.aabb.maxx = _this9.worldCOMx + _this9.radius;
								_this9.aabb.maxy = _this9.worldCOMy + _this9.radius;
							} else {
								var _this10 = s1.polygon;
								var li3 = _this10.lverts.next;
								var _this11 = _this10.gverts.next;
								var l6 = li3;
								li3 = li3.next;
								_this11.x = _this10.body.posx + (_this10.body.axisy * l6.x - _this10.body.axisx * l6.y);
								_this11.y = _this10.body.posy + (l6.x * _this10.body.axisx + l6.y * _this10.body.axisy);
								_this10.aabb.minx = _this11.x;
								_this10.aabb.miny = _this11.y;
								_this10.aabb.maxx = _this11.x;
								_this10.aabb.maxy = _this11.y;
								var cx_ite7 = _this10.gverts.next.next;
								while(cx_ite7 != null) {
									var p9 = cx_ite7;
									var l7 = li3;
									li3 = li3.next;
									p9.x = _this10.body.posx + (_this10.body.axisy * l7.x - _this10.body.axisx * l7.y);
									p9.y = _this10.body.posy + (l7.x * _this10.body.axisx + l7.y * _this10.body.axisy);
									if(p9.x < _this10.aabb.minx) {
										_this10.aabb.minx = p9.x;
									}
									if(p9.x > _this10.aabb.maxx) {
										_this10.aabb.maxx = p9.x;
									}
									if(p9.y < _this10.aabb.miny) {
										_this10.aabb.miny = p9.y;
									}
									if(p9.y > _this10.aabb.maxy) {
										_this10.aabb.maxy = p9.y;
									}
									cx_ite7 = cx_ite7.next;
								}
							}
							if(minx1 < aabb1.minx) {
								aabb1.minx = minx1;
							} else {
								minx1 = aabb1.minx;
							}
							if(miny1 < aabb1.miny) {
								aabb1.miny = miny1;
							} else {
								miny1 = aabb1.miny;
							}
							if(maxx1 > aabb1.maxx) {
								aabb1.maxx = maxx1;
							} else {
								maxx1 = aabb1.maxx;
							}
							if(maxy1 > aabb1.maxy) {
								aabb1.maxy = maxy1;
							} else {
								maxy1 = aabb1.maxy;
							}
						}
						this.bphase.sync(s1);
						cx_ite5 = cx_ite5.next;
					}
					cur1.sweepFrozen = false;
					if(cur1.type == 2 && cur1.bulletEnabled) {
						var linThreshold21 = nape_Config.bulletCCDLinearThreshold * cur1.sweepRadius;
						var angThreshold21 = nape_Config.bulletCCDAngularThreshold;
						if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) {
							cur1.bullet = true;
						}
					}
				} else {
					cur1.sweepFrozen = true;
					cur1.bullet = false;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
			cx_ite4 = cx_ite4.next;
		}
	}
	,presteparb: function(arb,dt,cont) {
		if(cont == null) {
			cont = false;
		}
		var _gthis = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) {
				arb.endGenerated = this.stamp;
			}
			if(begcb || endcb || arb.cleared || arb.intchange) {
				var s1 = arb.ws1;
				var s2 = arb.ws2;
				var _this = this.mrca1;
				while(_this.head != null) {
					var ret = _this.head;
					_this.head = ret.next;
					ret.elt = null;
					ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
					_this.modified = true;
					_this.length--;
				}
				_this.pushmod = true;
				var _this1 = this.mrca2;
				while(_this1.head != null) {
					var ret1 = _this1.head;
					_this1.head = ret1.next;
					ret1.elt = null;
					ret1.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
					_this1.modified = true;
					_this1.length--;
				}
				_this1.pushmod = true;
				if(s1.cbSet != null) {
					var _this2 = this.mrca1;
					var ret2;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret2.next;
						ret2.next = null;
					}
					ret2.elt = s1;
					var temp = ret2;
					temp.next = _this2.head;
					_this2.head = temp;
					_this2.modified = true;
					_this2.length++;
				}
				if(s1.body.cbSet != null) {
					var _this3 = this.mrca1;
					var ret3;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret3.next;
						ret3.next = null;
					}
					ret3.elt = s1.body;
					var temp1 = ret3;
					temp1.next = _this3.head;
					_this3.head = temp1;
					_this3.modified = true;
					_this3.length++;
				}
				if(s2.cbSet != null) {
					var _this4 = this.mrca2;
					var ret4;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret4 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.elt = s2;
					var temp2 = ret4;
					temp2.next = _this4.head;
					_this4.head = temp2;
					_this4.modified = true;
					_this4.length++;
				}
				if(s2.body.cbSet != null) {
					var _this5 = this.mrca2;
					var ret5;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret5 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.elt = s2.body;
					var temp3 = ret5;
					temp3.next = _this5.head;
					_this5.head = temp3;
					_this5.modified = true;
					_this5.length++;
				}
				var c1 = s1.body.compound;
				var c2 = s2.body.compound;
				while(c1 != c2) if((c1 == null ? 0 : c1.depth) < (c2 == null ? 0 : c2.depth)) {
					if(c2.cbSet != null) {
						var _this6 = this.mrca2;
						var ret6;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
							ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
						} else {
							ret6 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.elt = c2;
						var temp4 = ret6;
						temp4.next = _this6.head;
						_this6.head = temp4;
						_this6.modified = true;
						_this6.length++;
					}
					c2 = c2.compound;
				} else {
					if(c1.cbSet != null) {
						var _this7 = this.mrca1;
						var ret7;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
							ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
						} else {
							ret7 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret7.next;
							ret7.next = null;
						}
						ret7.elt = c1;
						var temp5 = ret7;
						temp5.next = _this7.head;
						_this7.head = temp5;
						_this7.modified = true;
						_this7.length++;
					}
					c1 = c1.compound;
				}
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						var ret8 = null;
						var cx_ite2 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
						while(cx_ite2 != null) {
							var p = cx_ite2.elt;
							if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
								ret8 = p;
								break;
							}
							cx_ite2 = cx_ite2.next;
						}
						if(ret8 == null) {
							var ret9;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret9 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret9 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret9.next;
								ret9.next = null;
							}
							ret9.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
								ret9.a = cb1;
								ret9.b = cb2;
							} else {
								ret9.a = cb2;
								ret9.b = cb1;
							}
							ret8 = ret9;
							cb1.cbpairs.add(ret8);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret8);
							}
						}
						if(ret8.zip_listeners) {
							ret8.zip_listeners = false;
							ret8.__validate();
						}
						if(ret8.listeners.head == null) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(begcb || arb.intchange) {
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							var ret10 = null;
							var cx_ite3 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
							while(cx_ite3 != null) {
								var p1 = cx_ite3.elt;
								if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
									ret10 = p1;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(ret10 == null) {
								var ret11;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret11 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret11 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret11.next;
									ret11.next = null;
								}
								ret11.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret11.a = cb1;
									ret11.b = cb2;
								} else {
									ret11.a = cb2;
									ret11.b = cb1;
								}
								ret10 = ret11;
								cb1.cbpairs.add(ret10);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret10);
								}
							}
							if(ret10.zip_listeners) {
								ret10.zip_listeners = false;
								ret10.__validate();
							}
							var cx_ite4 = ret10.listeners.head;
							while(cx_ite4 != null) {
								var x = cx_ite4.elt;
								if(x.event == 0) {
									if((x.itype & arb.type) != 0 && callbackset.empty_arb(x.itype)) {
										var cb = _gthis.push_callback(x);
										cb.event = 0;
										var o1 = callbackset.int1;
										var o2 = callbackset.int2;
										var tmp;
										var _this8 = x.options1;
										var xs = o1.cbTypes;
										if(_this8.nonemptyintersection(xs,_this8.includes) && !_this8.nonemptyintersection(xs,_this8.excludes)) {
											var _this9 = x.options2;
											var xs1 = o2.cbTypes;
											if(_this9.nonemptyintersection(xs1,_this9.includes)) {
												tmp = !_this9.nonemptyintersection(xs1,_this9.excludes);
											} else {
												tmp = false;
											}
										} else {
											tmp = false;
										}
										if(tmp) {
											cb.int1 = o1;
											cb.int2 = o2;
										} else {
											cb.int1 = o2;
											cb.int2 = o1;
										}
										cb.set = callbackset;
									}
								}
								cx_ite4 = cx_ite4.next;
							}
							var tmp1;
							var ret12;
							ret12 = false;
							var cx_ite5 = callbackset.arbiters.head;
							while(cx_ite5 != null) {
								if(cx_ite5.elt == arb) {
									ret12 = true;
									break;
								}
								cx_ite5 = cx_ite5.next;
							}
							if(!ret12) {
								var _this10 = callbackset.arbiters;
								var ret13;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret13 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret13 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret13.next;
									ret13.next = null;
								}
								ret13.elt = arb;
								var temp6 = ret13;
								temp6.next = _this10.head;
								_this10.head = temp6;
								_this10.modified = true;
								_this10.length++;
								tmp1 = true;
							} else {
								tmp1 = false;
							}
							if(tmp1) {
								arb.present++;
							}
						} else {
							arb.present--;
							callbackset.remove_arb(arb);
							var ret14 = null;
							var cx_ite6 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
							while(cx_ite6 != null) {
								var p2 = cx_ite6.elt;
								if(p2.a == cb1 && p2.b == cb2 || p2.a == cb2 && p2.b == cb1) {
									ret14 = p2;
									break;
								}
								cx_ite6 = cx_ite6.next;
							}
							if(ret14 == null) {
								var ret15;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret15 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret15 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret15.next;
									ret15.next = null;
								}
								ret15.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret15.a = cb1;
									ret15.b = cb2;
								} else {
									ret15.a = cb2;
									ret15.b = cb1;
								}
								ret14 = ret15;
								cb1.cbpairs.add(ret14);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret14);
								}
							}
							if(ret14.zip_listeners) {
								ret14.zip_listeners = false;
								ret14.__validate();
							}
							var cx_ite7 = ret14.listeners.head;
							while(cx_ite7 != null) {
								var x1 = cx_ite7.elt;
								if(x1.event == 1) {
									if((x1.itype & arb.type) != 0 && callbackset.empty_arb(x1.itype)) {
										var cb3 = _gthis.push_callback(x1);
										cb3.event = 1;
										var o11 = callbackset.int1;
										var o21 = callbackset.int2;
										var tmp2;
										var _this11 = x1.options1;
										var xs2 = o11.cbTypes;
										if(_this11.nonemptyintersection(xs2,_this11.includes) && !_this11.nonemptyintersection(xs2,_this11.excludes)) {
											var _this12 = x1.options2;
											var xs3 = o21.cbTypes;
											if(_this12.nonemptyintersection(xs3,_this12.includes)) {
												tmp2 = !_this12.nonemptyintersection(xs3,_this12.excludes);
											} else {
												tmp2 = false;
											}
										} else {
											tmp2 = false;
										}
										if(tmp2) {
											cb3.int1 = o11;
											cb3.int2 = o21;
										} else {
											cb3.int1 = o21;
											cb3.int2 = o11;
										}
										cb3.set = callbackset;
									}
								}
								cx_ite7 = cx_ite7.next;
							}
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? nape_Config.arbiterExpirationDelay : 0) < this.stamp) {
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				var _this13 = arb.sensorarb;
				if(!_this13.cleared) {
					var _this14 = _this13.b1.arbiters;
					var pre = null;
					var cur = _this14.head;
					while(cur != null) {
						if(cur.elt == _this13) {
							var old;
							var ret16;
							if(pre == null) {
								old = _this14.head;
								ret16 = old.next;
								_this14.head = ret16;
								if(_this14.head == null) {
									_this14.pushmod = true;
								}
							} else {
								old = pre.next;
								ret16 = old.next;
								pre.next = ret16;
								if(ret16 == null) {
									_this14.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this14.modified = true;
							_this14.length--;
							_this14.pushmod = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					var _this15 = _this13.b2.arbiters;
					var pre1 = null;
					var cur1 = _this15.head;
					while(cur1 != null) {
						if(cur1.elt == _this13) {
							var old1;
							var ret17;
							if(pre1 == null) {
								old1 = _this15.head;
								ret17 = old1.next;
								_this15.head = ret17;
								if(_this15.head == null) {
									_this15.pushmod = true;
								}
							} else {
								old1 = pre1.next;
								ret17 = old1.next;
								pre1.next = ret17;
								if(ret17 == null) {
									_this15.pushmod = true;
								}
							}
							var o3 = old1;
							o3.elt = null;
							o3.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o3;
							_this15.modified = true;
							_this15.length--;
							_this15.pushmod = true;
							break;
						}
						pre1 = cur1;
						cur1 = cur1.next;
					}
					if(_this13.pair != null) {
						_this13.pair.arb = null;
						_this13.pair = null;
					}
				}
				_this13.b1 = _this13.b2 = null;
				_this13.active = false;
				_this13.intchange = false;
				_this13.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = _this13;
			} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				var _this16 = arb.fluidarb;
				if(!_this16.cleared) {
					var _this17 = _this16.b1.arbiters;
					var pre2 = null;
					var cur2 = _this17.head;
					while(cur2 != null) {
						if(cur2.elt == _this16) {
							var old2;
							var ret18;
							if(pre2 == null) {
								old2 = _this17.head;
								ret18 = old2.next;
								_this17.head = ret18;
								if(_this17.head == null) {
									_this17.pushmod = true;
								}
							} else {
								old2 = pre2.next;
								ret18 = old2.next;
								pre2.next = ret18;
								if(ret18 == null) {
									_this17.pushmod = true;
								}
							}
							var o4 = old2;
							o4.elt = null;
							o4.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o4;
							_this17.modified = true;
							_this17.length--;
							_this17.pushmod = true;
							break;
						}
						pre2 = cur2;
						cur2 = cur2.next;
					}
					var _this18 = _this16.b2.arbiters;
					var pre3 = null;
					var cur3 = _this18.head;
					while(cur3 != null) {
						if(cur3.elt == _this16) {
							var old3;
							var ret19;
							if(pre3 == null) {
								old3 = _this18.head;
								ret19 = old3.next;
								_this18.head = ret19;
								if(_this18.head == null) {
									_this18.pushmod = true;
								}
							} else {
								old3 = pre3.next;
								ret19 = old3.next;
								pre3.next = ret19;
								if(ret19 == null) {
									_this18.pushmod = true;
								}
							}
							var o5 = old3;
							o5.elt = null;
							o5.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o5;
							_this18.modified = true;
							_this18.length--;
							_this18.pushmod = true;
							break;
						}
						pre3 = cur3;
						cur3 = cur3.next;
					}
					if(_this16.pair != null) {
						_this16.pair.arb = null;
						_this16.pair = null;
					}
				}
				_this16.b1 = _this16.b2 = null;
				_this16.active = false;
				_this16.intchange = false;
				_this16.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = _this16;
				_this16.pre_dt = -1.0;
			} else {
				var _this19 = arb.colarb;
				if(!_this19.cleared) {
					var _this20 = _this19.b1.arbiters;
					var pre4 = null;
					var cur4 = _this20.head;
					while(cur4 != null) {
						if(cur4.elt == _this19) {
							var old4;
							var ret20;
							if(pre4 == null) {
								old4 = _this20.head;
								ret20 = old4.next;
								_this20.head = ret20;
								if(_this20.head == null) {
									_this20.pushmod = true;
								}
							} else {
								old4 = pre4.next;
								ret20 = old4.next;
								pre4.next = ret20;
								if(ret20 == null) {
									_this20.pushmod = true;
								}
							}
							var o6 = old4;
							o6.elt = null;
							o6.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o6;
							_this20.modified = true;
							_this20.length--;
							_this20.pushmod = true;
							break;
						}
						pre4 = cur4;
						cur4 = cur4.next;
					}
					var _this21 = _this19.b2.arbiters;
					var pre5 = null;
					var cur5 = _this21.head;
					while(cur5 != null) {
						if(cur5.elt == _this19) {
							var old5;
							var ret21;
							if(pre5 == null) {
								old5 = _this21.head;
								ret21 = old5.next;
								_this21.head = ret21;
								if(_this21.head == null) {
									_this21.pushmod = true;
								}
							} else {
								old5 = pre5.next;
								ret21 = old5.next;
								pre5.next = ret21;
								if(ret21 == null) {
									_this21.pushmod = true;
								}
							}
							var o7 = old5;
							o7.elt = null;
							o7.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o7;
							_this21.modified = true;
							_this21.length--;
							_this21.pushmod = true;
							break;
						}
						pre5 = cur5;
						cur5 = cur5.next;
					}
					if(_this19.pair != null) {
						_this19.pair.arb = null;
						_this19.pair = null;
					}
				}
				_this19.b1 = _this19.b2 = null;
				_this19.active = false;
				_this19.intchange = false;
				while(_this19.contacts.next != null) {
					var _this22 = _this19.contacts;
					var _this23 = _this22.next;
					_this22.pop();
					_this23.arbiter = null;
					_this23.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = _this23;
					var _this24 = _this19.innards;
					var ret22 = _this24.next;
					_this24.next = ret22.next;
					ret22._inuse = false;
					if(_this24.next == null) {
						_this24.pushmod = true;
					}
					_this24.modified = true;
					_this24.length--;
				}
				_this19.userdef_dyn_fric = false;
				_this19.userdef_stat_fric = false;
				_this19.userdef_restitution = false;
				_this19.userdef_rfric = false;
				_this19.__ref_edge1 = _this19.__ref_edge2 = null;
				_this19.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = _this19;
				_this19.pre_dt = -1.0;
			}
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & 1) != 0) {
			if(arb.active && arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				if(arb.colarb != null) {
					var _this25 = arb.colarb;
					if(_this25.invalidated) {
						_this25.invalidated = false;
						if(!_this25.userdef_restitution) {
							if(_this25.s1.material.elasticity <= -Infinity || _this25.s2.material.elasticity <= -Infinity) {
								_this25.restitution = 0;
							} else if(_this25.s1.material.elasticity >= Infinity || _this25.s2.material.elasticity >= Infinity) {
								_this25.restitution = 1;
							} else {
								_this25.restitution = (_this25.s1.material.elasticity + _this25.s2.material.elasticity) / 2;
							}
							if(_this25.restitution < 0) {
								_this25.restitution = 0;
							}
							if(_this25.restitution > 1) {
								_this25.restitution = 1;
							}
						}
						if(!_this25.userdef_dyn_fric) {
							_this25.dyn_fric = Math.sqrt(_this25.s1.material.dynamicFriction * _this25.s2.material.dynamicFriction);
						}
						if(!_this25.userdef_stat_fric) {
							_this25.stat_fric = Math.sqrt(_this25.s1.material.staticFriction * _this25.s2.material.staticFriction);
						}
						if(!_this25.userdef_rfric) {
							_this25.rfric = Math.sqrt(_this25.s1.material.rollingFriction * _this25.s2.material.rollingFriction);
						}
					}
					if(_this25.pre_dt == -1.0) {
						_this25.pre_dt = dt;
					}
					var dtratio = dt / _this25.pre_dt;
					_this25.pre_dt = dt;
					var mass_sum = _this25.b1.smass + _this25.b2.smass;
					_this25.hc2 = false;
					var fst = true;
					_this25.biasCoef = _this25.b1.type != 2 || _this25.b2.type != 2 ? _this25.continuous ? nape_Config.contactContinuousStaticBiasCoef : nape_Config.contactStaticBiasCoef : _this25.continuous ? nape_Config.contactContinuousBiasCoef : nape_Config.contactBiasCoef;
					_this25.continuous = false;
					var pre6 = null;
					var prei = null;
					var cx_itei = _this25.innards.next;
					var cx_ite8 = _this25.contacts.next;
					while(cx_ite8 != null) {
						var c = cx_ite8;
						if(c.stamp + nape_Config.arbiterExpirationDelay < _this25.stamp) {
							var _this26 = _this25.contacts;
							var old6;
							var ret23;
							if(pre6 == null) {
								old6 = _this26.next;
								ret23 = old6.next;
								_this26.next = ret23;
								if(_this26.next == null) {
									_this26.pushmod = true;
								}
							} else {
								old6 = pre6.next;
								ret23 = old6.next;
								pre6.next = ret23;
								if(ret23 == null) {
									_this26.pushmod = true;
								}
							}
							old6._inuse = false;
							_this26.modified = true;
							_this26.length--;
							_this26.pushmod = true;
							cx_ite8 = ret23;
							var _this27 = _this25.innards;
							var old7;
							var ret24;
							if(prei == null) {
								old7 = _this27.next;
								ret24 = old7.next;
								_this27.next = ret24;
								if(_this27.next == null) {
									_this27.pushmod = true;
								}
							} else {
								old7 = prei.next;
								ret24 = old7.next;
								prei.next = ret24;
								if(ret24 == null) {
									_this27.pushmod = true;
								}
							}
							old7._inuse = false;
							_this27.modified = true;
							_this27.length--;
							_this27.pushmod = true;
							cx_itei = ret24;
							c.arbiter = null;
							c.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
							zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c;
							continue;
						}
						var ci = c.inner;
						var pact1 = c.active;
						c.active = c.stamp == _this25.stamp;
						if(c.active) {
							if(fst) {
								fst = false;
								_this25.c1 = ci;
								_this25.oc1 = c;
							} else {
								_this25.hc2 = true;
								_this25.c2 = ci;
								_this25.oc2 = c;
							}
							ci.r2x = c.px - _this25.b2.posx;
							ci.r2y = c.py - _this25.b2.posy;
							ci.r1x = c.px - _this25.b1.posx;
							ci.r1y = c.py - _this25.b1.posy;
							var x2 = ci.r2x * _this25.nx + ci.r2y * _this25.ny;
							var kt = mass_sum + _this25.b2.sinertia * (x2 * x2);
							var x3 = ci.r1x * _this25.nx + ci.r1y * _this25.ny;
							kt += _this25.b1.sinertia * (x3 * x3);
							ci.tMass = kt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / kt;
							var x4 = _this25.ny * ci.r2x - _this25.nx * ci.r2y;
							var nt = mass_sum + _this25.b2.sinertia * (x4 * x4);
							var x5 = _this25.ny * ci.r1x - _this25.nx * ci.r1y;
							nt += _this25.b1.sinertia * (x5 * x5);
							ci.nMass = nt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / nt;
							var vrx = 0.0;
							var vry = 0.0;
							var ang = _this25.b2.angvel + _this25.b2.kinangvel;
							vrx = _this25.b2.velx + _this25.b2.kinvelx - ci.r2y * ang;
							vry = _this25.b2.vely + _this25.b2.kinvely + ci.r2x * ang;
							ang = _this25.b1.angvel + _this25.b1.kinangvel;
							vrx -= _this25.b1.velx + _this25.b1.kinvelx - ci.r1y * ang;
							vry -= _this25.b1.vely + _this25.b1.kinvely + ci.r1x * ang;
							var vdot = _this25.nx * vrx + _this25.ny * vry;
							c.elasticity = _this25.restitution;
							ci.bounce = vdot * c.elasticity;
							if(ci.bounce > -nape_Config.elasticThreshold) {
								ci.bounce = 0;
							}
							vdot = vry * _this25.nx - vrx * _this25.ny;
							var thr = nape_Config.staticFrictionThreshold;
							if(vdot * vdot > thr * thr) {
								ci.friction = _this25.dyn_fric;
							} else {
								ci.friction = _this25.stat_fric;
							}
							ci.jnAcc *= dtratio;
							ci.jtAcc *= dtratio;
						}
						if(pact1 != c.active) {
							_this25.contacts.modified = true;
						}
						pre6 = cx_ite8;
						prei = cx_itei;
						cx_itei = cx_itei.next;
						cx_ite8 = cx_ite8.next;
					}
					if(_this25.hc2) {
						_this25.hpc2 = true;
						if(_this25.oc1.posOnly) {
							var tmp3 = _this25.c1;
							_this25.c1 = _this25.c2;
							_this25.c2 = tmp3;
							var tmp21 = _this25.oc1;
							_this25.oc1 = _this25.oc2;
							_this25.oc2 = tmp21;
							_this25.hc2 = false;
						} else if(_this25.oc2.posOnly) {
							_this25.hc2 = false;
						}
						if(_this25.oc1.posOnly) {
							fst = true;
						}
					} else {
						_this25.hpc2 = false;
					}
					_this25.jrAcc *= dtratio;
					if(!fst) {
						_this25.rn1a = _this25.ny * _this25.c1.r1x - _this25.nx * _this25.c1.r1y;
						_this25.rt1a = _this25.c1.r1x * _this25.nx + _this25.c1.r1y * _this25.ny;
						_this25.rn1b = _this25.ny * _this25.c1.r2x - _this25.nx * _this25.c1.r2y;
						_this25.rt1b = _this25.c1.r2x * _this25.nx + _this25.c1.r2y * _this25.ny;
						_this25.k1x = _this25.b2.kinvelx - _this25.c1.r2y * _this25.b2.kinangvel - (_this25.b1.kinvelx - _this25.c1.r1y * _this25.b1.kinangvel);
						_this25.k1y = _this25.b2.kinvely + _this25.c1.r2x * _this25.b2.kinangvel - (_this25.b1.kinvely + _this25.c1.r1x * _this25.b1.kinangvel);
					}
					if(_this25.hc2) {
						_this25.rn2a = _this25.ny * _this25.c2.r1x - _this25.nx * _this25.c2.r1y;
						_this25.rt2a = _this25.c2.r1x * _this25.nx + _this25.c2.r1y * _this25.ny;
						_this25.rn2b = _this25.ny * _this25.c2.r2x - _this25.nx * _this25.c2.r2y;
						_this25.rt2b = _this25.c2.r2x * _this25.nx + _this25.c2.r2y * _this25.ny;
						_this25.k2x = _this25.b2.kinvelx - _this25.c2.r2y * _this25.b2.kinangvel - (_this25.b1.kinvelx - _this25.c2.r1y * _this25.b1.kinangvel);
						_this25.k2y = _this25.b2.kinvely + _this25.c2.r2x * _this25.b2.kinangvel - (_this25.b1.kinvely + _this25.c2.r1x * _this25.b1.kinangvel);
						_this25.kMassa = mass_sum + _this25.b1.sinertia * _this25.rn1a * _this25.rn1a + _this25.b2.sinertia * _this25.rn1b * _this25.rn1b;
						_this25.kMassb = mass_sum + _this25.b1.sinertia * _this25.rn1a * _this25.rn2a + _this25.b2.sinertia * _this25.rn1b * _this25.rn2b;
						_this25.kMassc = mass_sum + _this25.b1.sinertia * _this25.rn2a * _this25.rn2a + _this25.b2.sinertia * _this25.rn2b * _this25.rn2b;
						if(_this25.kMassa * _this25.kMassa + 2 * _this25.kMassb * _this25.kMassb + _this25.kMassc * _this25.kMassc < nape_Config.illConditionedThreshold * (_this25.kMassa * _this25.kMassc - _this25.kMassb * _this25.kMassb)) {
							_this25.Ka = _this25.kMassa;
							_this25.Kb = _this25.kMassb;
							_this25.Kc = _this25.kMassc;
							var det = _this25.kMassa * _this25.kMassc - _this25.kMassb * _this25.kMassb;
							if(det != det) {
								_this25.kMassa = _this25.kMassb = _this25.kMassc = 0;
							} else if(det == 0) {
								if(_this25.kMassa != 0) {
									_this25.kMassa = 1 / _this25.kMassa;
								} else {
									_this25.kMassa = 0;
								}
								if(_this25.kMassc != 0) {
									_this25.kMassc = 1 / _this25.kMassc;
								} else {
									_this25.kMassc = 0;
								}
								_this25.kMassb = 0;
							} else {
								det = 1 / det;
								var t = _this25.kMassc * det;
								_this25.kMassc = _this25.kMassa * det;
								_this25.kMassa = t;
								_this25.kMassb *= -det;
							}
						} else {
							_this25.hc2 = false;
							if(_this25.oc2.dist < _this25.oc1.dist) {
								var t1 = _this25.c1;
								_this25.c1 = _this25.c2;
								_this25.c2 = t1;
							}
							_this25.oc2.active = false;
							_this25.contacts.modified = true;
						}
					}
					_this25.surfacex = _this25.b2.svelx;
					_this25.surfacey = _this25.b2.svely;
					_this25.surfacex += _this25.b1.svelx;
					_this25.surfacey += _this25.b1.svely;
					_this25.surfacex = -_this25.surfacex;
					_this25.surfacey = -_this25.surfacey;
					_this25.rMass = _this25.b1.sinertia + _this25.b2.sinertia;
					if(_this25.rMass != 0) {
						_this25.rMass = 1 / _this25.rMass;
					}
					if(fst) {
						arb.active = false;
					}
				} else {
					var _this28 = arb.fluidarb;
					if(_this28.pre_dt == -1.0) {
						_this28.pre_dt = dt;
					}
					var dtratio1 = dt / _this28.pre_dt;
					_this28.pre_dt = dt;
					_this28.r1x = _this28.centroidx - _this28.b1.posx;
					_this28.r1y = _this28.centroidy - _this28.b1.posy;
					_this28.r2x = _this28.centroidx - _this28.b2.posx;
					_this28.r2y = _this28.centroidy - _this28.b2.posy;
					var g1x = 0.0;
					var g1y = 0.0;
					if(_this28.ws1.fluidEnabled && _this28.ws1.fluidProperties.wrap_gravity != null) {
						g1x = _this28.ws1.fluidProperties.gravityx;
						g1y = _this28.ws1.fluidProperties.gravityy;
					} else {
						g1x = this.gravityx;
						g1y = this.gravityy;
					}
					var g2x = 0.0;
					var g2y = 0.0;
					if(_this28.ws2.fluidEnabled && _this28.ws2.fluidProperties.wrap_gravity != null) {
						g2x = _this28.ws2.fluidProperties.gravityx;
						g2y = _this28.ws2.fluidProperties.gravityy;
					} else {
						g2x = this.gravityx;
						g2y = this.gravityy;
					}
					var buoyx = 0;
					var buoyy = 0;
					if(_this28.ws1.fluidEnabled && _this28.ws2.fluidEnabled) {
						var mass1 = _this28.overlap * _this28.ws1.fluidProperties.density;
						var mass2 = _this28.overlap * _this28.ws2.fluidProperties.density;
						if(mass1 > mass2) {
							var t2 = mass1 + mass2;
							buoyx -= g1x * t2;
							buoyy -= g1y * t2;
						} else if(mass1 < mass2) {
							var t3 = mass1 + mass2;
							buoyx += g2x * t3;
							buoyy += g2y * t3;
						} else {
							var gx = 0.0;
							var gy = 0.0;
							gx = g1x + g2x;
							gy = g1y + g2y;
							gx *= 0.5;
							gy *= 0.5;
							if(_this28.ws1.worldCOMx * gx + _this28.ws1.worldCOMy * gy > _this28.ws2.worldCOMx * gx + _this28.ws2.worldCOMy * gy) {
								var t4 = mass1 + mass2;
								buoyx -= gx * t4;
								buoyy -= gy * t4;
							} else {
								var t5 = mass1 + mass2;
								buoyx += gx * t5;
								buoyy += gy * t5;
							}
						}
					} else if(_this28.ws1.fluidEnabled) {
						var mass = _this28.overlap * _this28.ws1.fluidProperties.density;
						buoyx -= g1x * mass;
						buoyy -= g1y * mass;
					} else if(_this28.ws2.fluidEnabled) {
						var mass3 = _this28.overlap * _this28.ws2.fluidProperties.density;
						buoyx += g2x * mass3;
						buoyy += g2y * mass3;
					}
					buoyx *= dt;
					buoyy *= dt;
					_this28.buoyx = buoyx;
					_this28.buoyy = buoyy;
					if(_this28.b1.type == 2) {
						var t6 = _this28.b1.imass;
						_this28.b1.velx -= buoyx * t6;
						_this28.b1.vely -= buoyy * t6;
						_this28.b1.angvel -= (buoyy * _this28.r1x - buoyx * _this28.r1y) * _this28.b1.iinertia;
					}
					if(_this28.b2.type == 2) {
						var t7 = _this28.b2.imass;
						_this28.b2.velx += buoyx * t7;
						_this28.b2.vely += buoyy * t7;
						_this28.b2.angvel += (buoyy * _this28.r2x - buoyx * _this28.r2y) * _this28.b2.iinertia;
					}
					if((!_this28.ws1.fluidEnabled || _this28.ws1.fluidProperties.viscosity == 0) && (!_this28.ws2.fluidEnabled || _this28.ws2.fluidProperties.viscosity == 0)) {
						_this28.nodrag = true;
						_this28.dampx = 0;
						_this28.dampy = 0;
						_this28.adamp = 0;
					} else {
						_this28.nodrag = false;
						var tViscosity = 0.0;
						if(_this28.ws1.fluidEnabled) {
							_this28.ws2.validate_angDrag();
							tViscosity = _this28.ws1.fluidProperties.viscosity * _this28.ws2.angDrag * _this28.overlap / _this28.ws2.area;
						}
						if(_this28.ws2.fluidEnabled) {
							_this28.ws1.validate_angDrag();
							tViscosity += _this28.ws2.fluidProperties.viscosity * _this28.ws1.angDrag * _this28.overlap / _this28.ws1.area;
						}
						if(tViscosity != 0) {
							var iSum = _this28.b1.sinertia + _this28.b2.sinertia;
							if(iSum != 0) {
								_this28.wMass = 1 / iSum;
							} else {
								_this28.wMass = 0.0;
							}
							tViscosity *= 0.0004;
							var omega = 2 * Math.PI * tViscosity;
							_this28.agamma = 1 / (dt * omega * (2 + omega * dt));
							var ig = 1 / (1 + _this28.agamma);
							_this28.agamma *= ig;
							_this28.wMass *= ig;
						} else {
							_this28.wMass = 0.0;
							_this28.agamma = 0.0;
						}
						var vrnx = _this28.b2.velx + _this28.b2.kinvelx - _this28.r2y * (_this28.b2.angvel + _this28.b2.kinangvel) - (_this28.b1.velx + _this28.b1.kinvelx - _this28.r1y * (_this28.b2.angvel + _this28.b2.kinangvel));
						var vrny = _this28.b2.vely + _this28.b2.kinvely + _this28.r2x * (_this28.b2.angvel + _this28.b2.kinangvel) - (_this28.b1.vely + _this28.b1.kinvely + _this28.r1x * (_this28.b1.angvel + _this28.b1.kinangvel));
						if(!(vrnx * vrnx + vrny * vrny < nape_Config.epsilon * nape_Config.epsilon)) {
							var imag = 1.0 / Math.sqrt(vrnx * vrnx + vrny * vrny);
							vrnx *= imag;
							vrny *= imag;
							_this28.nx = vrnx;
							_this28.ny = vrny;
						}
						var tViscosity1 = 0.0;
						if(_this28.ws1.fluidEnabled) {
							var f = -_this28.ws1.fluidProperties.viscosity * _this28.overlap / _this28.ws2.area;
							if(_this28.ws2.type == 0) {
								tViscosity1 = 0.0 - f * _this28.ws2.circle.radius * nape_Config.fluidLinearDrag / (2 * _this28.ws2.circle.radius * Math.PI);
							} else {
								var bord = 0.0;
								var acc = 0.0;
								var cx_ite9 = _this28.ws2.polygon.edges.head;
								while(cx_ite9 != null) {
									var ex = cx_ite9.elt;
									bord += ex.length;
									var fact = f * ex.length * (ex.gnormx * _this28.nx + ex.gnormy * _this28.ny);
									if(fact > 0) {
										fact *= -nape_Config.fluidVacuumDrag;
										fact = fact;
									}
									acc -= fact * 0.5 * nape_Config.fluidLinearDrag;
									cx_ite9 = cx_ite9.next;
								}
								tViscosity1 = acc / bord;
							}
						}
						if(_this28.ws2.fluidEnabled) {
							var f1 = -_this28.ws2.fluidProperties.viscosity * _this28.overlap / _this28.ws1.area;
							if(_this28.ws1.type == 0) {
								tViscosity1 -= f1 * _this28.ws1.circle.radius * nape_Config.fluidLinearDrag / (2 * _this28.ws1.circle.radius * Math.PI);
							} else {
								var bord1 = 0.0;
								var acc1 = 0.0;
								var cx_ite10 = _this28.ws1.polygon.edges.head;
								while(cx_ite10 != null) {
									var ex1 = cx_ite10.elt;
									bord1 += ex1.length;
									var fact1 = f1 * ex1.length * (ex1.gnormx * _this28.nx + ex1.gnormy * _this28.ny);
									if(fact1 > 0) {
										fact1 *= -nape_Config.fluidVacuumDrag;
										fact1 = fact1;
									}
									acc1 -= fact1 * 0.5 * nape_Config.fluidLinearDrag;
									cx_ite10 = cx_ite10.next;
								}
								tViscosity1 += acc1 / bord1;
							}
						}
						if(tViscosity1 != 0) {
							var m = _this28.b1.smass + _this28.b2.smass;
							var Ka = 0.0;
							var Kb = 0.0;
							var Kc = 0.0;
							Ka = m;
							Kb = 0;
							Kc = m;
							if(_this28.b1.sinertia != 0) {
								var Y = _this28.r1y * _this28.b1.sinertia;
								Ka = m + Y * _this28.r1y;
								Kb += -Y * _this28.r1x;
								Kc = m + _this28.r1x * _this28.b1.sinertia * _this28.r1x;
							}
							if(_this28.b2.sinertia != 0) {
								var Y1 = _this28.r2y * _this28.b2.sinertia;
								Ka += Y1 * _this28.r2y;
								Kb += -Y1 * _this28.r2x;
								Kc += _this28.r2x * _this28.b2.sinertia * _this28.r2x;
							}
							var det1 = Ka * Kc - Kb * Kb;
							if(det1 != det1) {
								Kc = 0;
								Kb = Kc;
								Ka = Kb;
							} else if(det1 == 0) {
								if(Ka != 0) {
									Ka = 1 / Ka;
								} else {
									Ka = 0;
								}
								if(Kc != 0) {
									Kc = 1 / Kc;
								} else {
									Kc = 0;
								}
								Kb = 0;
							} else {
								det1 = 1 / det1;
								var t8 = Kc * det1;
								Kc = Ka * det1;
								Ka = t8;
								Kb *= -det1;
							}
							_this28.vMassa = Ka;
							_this28.vMassb = Kb;
							_this28.vMassc = Kc;
							var omega1 = 2 * Math.PI * tViscosity1;
							_this28.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
							var ig1 = 1 / (1 + _this28.lgamma);
							_this28.lgamma *= ig1;
							_this28.vMassa *= ig1;
							_this28.vMassb *= ig1;
							_this28.vMassc *= ig1;
						} else {
							_this28.vMassa = 0;
							_this28.vMassb = 0;
							_this28.vMassc = 0;
							_this28.lgamma = 0.0;
						}
					}
					_this28.dampx *= dtratio1;
					_this28.dampy *= dtratio1;
					_this28.adamp *= dtratio1;
				}
			}
		} else if(arb.colarb != null) {
			var _this29 = arb.colarb;
			var fst1 = true;
			var pre7 = null;
			var prei1 = null;
			var cx_itei1 = _this29.innards.next;
			_this29.hc2 = false;
			var cx_ite11 = _this29.contacts.next;
			while(cx_ite11 != null) {
				var c3 = cx_ite11;
				if(c3.stamp + nape_Config.arbiterExpirationDelay < _this29.stamp) {
					var _this30 = _this29.contacts;
					var old8;
					var ret25;
					if(pre7 == null) {
						old8 = _this30.next;
						ret25 = old8.next;
						_this30.next = ret25;
						if(_this30.next == null) {
							_this30.pushmod = true;
						}
					} else {
						old8 = pre7.next;
						ret25 = old8.next;
						pre7.next = ret25;
						if(ret25 == null) {
							_this30.pushmod = true;
						}
					}
					old8._inuse = false;
					_this30.modified = true;
					_this30.length--;
					_this30.pushmod = true;
					cx_ite11 = ret25;
					var _this31 = _this29.innards;
					var old9;
					var ret26;
					if(prei1 == null) {
						old9 = _this31.next;
						ret26 = old9.next;
						_this31.next = ret26;
						if(_this31.next == null) {
							_this31.pushmod = true;
						}
					} else {
						old9 = prei1.next;
						ret26 = old9.next;
						prei1.next = ret26;
						if(ret26 == null) {
							_this31.pushmod = true;
						}
					}
					old9._inuse = false;
					_this31.modified = true;
					_this31.length--;
					_this31.pushmod = true;
					cx_itei1 = ret26;
					c3.arbiter = null;
					c3.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c3;
					continue;
				}
				var ci1 = c3.inner;
				var pact2 = c3.active;
				c3.active = c3.stamp == _this29.stamp;
				if(c3.active) {
					if(fst1) {
						fst1 = false;
						_this29.c1 = ci1;
						_this29.oc1 = c3;
					} else {
						_this29.hc2 = true;
						_this29.c2 = ci1;
						_this29.oc2 = c3;
					}
				}
				if(pact2 != c3.active) {
					_this29.contacts.modified = true;
				}
				pre7 = cx_ite11;
				prei1 = cx_itei1;
				cx_itei1 = cx_itei1.next;
				cx_ite11 = cx_ite11.next;
			}
			if(_this29.hc2) {
				_this29.hpc2 = true;
				if(_this29.oc1.posOnly) {
					var tmp4 = _this29.c1;
					_this29.c1 = _this29.c2;
					_this29.c2 = tmp4;
					var tmp22 = _this29.oc1;
					_this29.oc1 = _this29.oc2;
					_this29.oc2 = tmp22;
					_this29.hc2 = false;
				} else if(_this29.oc2.posOnly) {
					_this29.hc2 = false;
				}
				if(_this29.oc1.posOnly) {
					fst1 = true;
				}
			} else {
				_this29.hpc2 = false;
			}
			if(fst1) {
				arb.active = false;
			}
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) {
						con.compound.wrap_constraints.remove(con.outer);
					} else {
						this.wrap_constraints.remove(con.outer);
					}
					this.midstep = true;
				} else {
					con.active = false;
				}
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			if(this.presteparb(arbite.elt,dt)) {
				var old;
				var ret;
				if(pre1 == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre1.next;
					ret = old.next;
					pre1.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		while(arbite1 != null) {
			if(this.presteparb(arbite1.elt,dt)) {
				var old1;
				var ret1;
				if(pre2 == null) {
					old1 = arbs1.head;
					ret1 = old1.next;
					arbs1.head = ret1;
					if(arbs1.head == null) {
						arbs1.pushmod = true;
					}
				} else {
					old1 = pre2.next;
					ret1 = old1.next;
					pre2.next = ret1;
					if(ret1 == null) {
						arbs1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o1;
				arbs1.modified = true;
				arbs1.length--;
				arbs1.pushmod = true;
				arbite1 = ret1;
				continue;
			}
			pre2 = arbite1;
			arbite1 = arbite1.next;
		}
		var pre3 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		while(arbite2 != null) {
			if(this.presteparb(arbite2.elt,dt)) {
				var old2;
				var ret2;
				if(pre3 == null) {
					old2 = arbs2.head;
					ret2 = old2.next;
					arbs2.head = ret2;
					if(arbs2.head == null) {
						arbs2.pushmod = true;
					}
				} else {
					old2 = pre3.next;
					ret2 = old2.next;
					pre3.next = ret2;
					if(ret2 == null) {
						arbs2.pushmod = true;
					}
				}
				var o2 = old2;
				o2.elt = null;
				o2.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o2;
				arbs2.modified = true;
				arbs2.length--;
				arbs2.pushmod = true;
				arbite2 = ret2;
				continue;
			}
			pre3 = arbite2;
			arbite2 = arbite2.next;
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & 1) != 0) {
				var t = arb.b1.imass;
				arb.b1.velx -= arb.dampx * t;
				arb.b1.vely -= arb.dampy * t;
				var t1 = arb.b2.imass;
				arb.b2.velx += arb.dampx * t1;
				arb.b2.vely += arb.dampy * t1;
				arb.b1.angvel -= arb.b1.iinertia * (arb.dampy * arb.r1x - arb.dampx * arb.r1y);
				arb.b2.angvel += arb.b2.iinertia * (arb.dampy * arb.r2x - arb.dampx * arb.r2y);
				arb.b1.angvel -= arb.adamp * arb.b1.iinertia;
				arb.b2.angvel += arb.adamp * arb.b2.iinertia;
			}
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & 1) != 0) {
				var jx = arb1.nx * arb1.c1.jnAcc - arb1.ny * arb1.c1.jtAcc;
				var jy = arb1.ny * arb1.c1.jnAcc + arb1.nx * arb1.c1.jtAcc;
				var t2 = arb1.b1.imass;
				arb1.b1.velx -= jx * t2;
				arb1.b1.vely -= jy * t2;
				arb1.b1.angvel -= arb1.b1.iinertia * (jy * arb1.c1.r1x - jx * arb1.c1.r1y);
				var t3 = arb1.b2.imass;
				arb1.b2.velx += jx * t3;
				arb1.b2.vely += jy * t3;
				arb1.b2.angvel += arb1.b2.iinertia * (jy * arb1.c1.r2x - jx * arb1.c1.r2y);
				if(arb1.hc2) {
					var jx1 = arb1.nx * arb1.c2.jnAcc - arb1.ny * arb1.c2.jtAcc;
					var jy1 = arb1.ny * arb1.c2.jnAcc + arb1.nx * arb1.c2.jtAcc;
					var t4 = arb1.b1.imass;
					arb1.b1.velx -= jx1 * t4;
					arb1.b1.vely -= jy1 * t4;
					arb1.b1.angvel -= arb1.b1.iinertia * (jy1 * arb1.c2.r1x - jx1 * arb1.c2.r1y);
					var t5 = arb1.b2.imass;
					arb1.b2.velx += jx1 * t5;
					arb1.b2.vely += jy1 * t5;
					arb1.b2.angvel += arb1.b2.iinertia * (jy1 * arb1.c2.r2x - jx1 * arb1.c2.r2y);
				}
				arb1.b2.angvel += arb1.jrAcc * arb1.b2.iinertia;
				arb1.b1.angvel -= arb1.jrAcc * arb1.b1.iinertia;
			}
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			cx_ite1.elt.warmStart();
			cx_ite1 = cx_ite1.next;
		}
	}
	,iterateVel: function(times) {
		var _g1 = 0;
		while(_g1 < times) {
			++_g1;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & 1) != 0) {
					if(!arb.nodrag) {
						var w1 = arb.b1.angvel + arb.b1.kinangvel;
						var w2 = arb.b2.angvel + arb.b2.kinangvel;
						var jx = arb.b1.velx + arb.b1.kinvelx - arb.r1y * w1 - (arb.b2.velx + arb.b2.kinvelx - arb.r2y * w2);
						var jy = arb.b1.vely + arb.b1.kinvely + arb.r1x * w1 - (arb.b2.vely + arb.b2.kinvely + arb.r2x * w2);
						var t = arb.vMassa * jx + arb.vMassb * jy;
						jy = arb.vMassb * jx + arb.vMassc * jy;
						jx = t;
						var t1 = arb.lgamma;
						jx -= arb.dampx * t1;
						jy -= arb.dampy * t1;
						arb.dampx += jx;
						arb.dampy += jy;
						var t2 = arb.b1.imass;
						arb.b1.velx -= jx * t2;
						arb.b1.vely -= jy * t2;
						var t3 = arb.b2.imass;
						arb.b2.velx += jx * t3;
						arb.b2.vely += jy * t3;
						arb.b1.angvel -= arb.b1.iinertia * (jy * arb.r1x - jx * arb.r1y);
						arb.b2.angvel += arb.b2.iinertia * (jy * arb.r2x - jx * arb.r2y);
						var j_damp = (w1 - w2) * arb.wMass - arb.adamp * arb.agamma;
						arb.adamp += j_damp;
						arb.b1.angvel -= j_damp * arb.b1.iinertia;
						arb.b2.angvel += j_damp * arb.b2.iinertia;
					}
				}
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.head;
			while(cx_ite1 != null) {
				var con = cx_ite1.elt;
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) {
							con.compound.wrap_constraints.remove(con.outer);
						} else {
							this.wrap_constraints.remove(con.outer);
						}
						this.midstep = true;
					} else {
						con.active = false;
					}
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elt;
				if(arb1.active && (arb1.immState & 1) != 0) {
					var jx1;
					var jy1;
					var j;
					var jMax;
					var jOld;
					var cjAcc;
					var v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
					var v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
					j = (v1y * arb1.nx - v1x * arb1.ny + arb1.surfacex) * arb1.c1.tMass;
					jMax = arb1.c1.friction * arb1.c1.jnAcc;
					jOld = arb1.c1.jtAcc;
					cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					arb1.c1.jtAcc = cjAcc;
					jx1 = -arb1.ny * j;
					jy1 = arb1.nx * j;
					arb1.b2.velx += jx1 * arb1.b2.imass;
					arb1.b2.vely += jy1 * arb1.b2.imass;
					arb1.b1.velx -= jx1 * arb1.b1.imass;
					arb1.b1.vely -= jy1 * arb1.b1.imass;
					arb1.b2.angvel += arb1.rt1b * j * arb1.b2.iinertia;
					arb1.b1.angvel -= arb1.rt1a * j * arb1.b1.iinertia;
					if(arb1.hc2) {
						var v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
						var v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
						j = (v2y * arb1.nx - v2x * arb1.ny + arb1.surfacex) * arb1.c2.tMass;
						jMax = arb1.c2.friction * arb1.c2.jnAcc;
						jOld = arb1.c2.jtAcc;
						cjAcc = jOld - j;
						if(cjAcc > jMax) {
							cjAcc = jMax;
						} else if(cjAcc < -jMax) {
							cjAcc = -jMax;
						}
						j = cjAcc - jOld;
						arb1.c2.jtAcc = cjAcc;
						jx1 = -arb1.ny * j;
						jy1 = arb1.nx * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += arb1.rt2b * j * arb1.b2.iinertia;
						arb1.b1.angvel -= arb1.rt2a * j * arb1.b1.iinertia;
						v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
						v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
						v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
						v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
						var ax = arb1.c1.jnAcc;
						var ay = arb1.c2.jnAcc;
						var jnx = v1x * arb1.nx + v1y * arb1.ny + arb1.surfacey + arb1.c1.bounce - (arb1.Ka * ax + arb1.Kb * ay);
						var jny = v2x * arb1.nx + v2y * arb1.ny + arb1.surfacey + arb1.c2.bounce - (arb1.Kb * ax + arb1.Kc * ay);
						var xx = -(arb1.kMassa * jnx + arb1.kMassb * jny);
						var xy = -(arb1.kMassb * jnx + arb1.kMassc * jny);
						if(xx >= 0 && xy >= 0) {
							jnx = xx - ax;
							jny = xy - ay;
							arb1.c1.jnAcc = xx;
							arb1.c2.jnAcc = xy;
						} else {
							xx = -arb1.c1.nMass * jnx;
							if(xx >= 0 && arb1.Kb * xx + jny >= 0) {
								jnx = xx - ax;
								jny = -ay;
								arb1.c1.jnAcc = xx;
								arb1.c2.jnAcc = 0;
							} else {
								xy = -arb1.c2.nMass * jny;
								if(xy >= 0 && arb1.Kb * xy + jnx >= 0) {
									jnx = -ax;
									jny = xy - ay;
									arb1.c1.jnAcc = 0;
									arb1.c2.jnAcc = xy;
								} else if(jnx >= 0 && jny >= 0) {
									jnx = -ax;
									jny = -ay;
									arb1.c1.jnAcc = arb1.c2.jnAcc = 0;
								} else {
									jnx = 0;
									jny = 0;
								}
							}
						}
						j = jnx + jny;
						jx1 = arb1.nx * j;
						jy1 = arb1.ny * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += (arb1.rn1b * jnx + arb1.rn2b * jny) * arb1.b2.iinertia;
						arb1.b1.angvel -= (arb1.rn1a * jnx + arb1.rn2a * jny) * arb1.b1.iinertia;
					} else {
						if(arb1.radius != 0.0) {
							j = (arb1.b2.angvel - arb1.b1.angvel) * arb1.rMass;
							jMax = arb1.rfric * arb1.c1.jnAcc;
							jOld = arb1.jrAcc;
							arb1.jrAcc -= j;
							if(arb1.jrAcc > jMax) {
								arb1.jrAcc = jMax;
							} else if(arb1.jrAcc < -jMax) {
								arb1.jrAcc = -jMax;
							}
							j = arb1.jrAcc - jOld;
							arb1.b2.angvel += j * arb1.b2.iinertia;
							arb1.b1.angvel -= j * arb1.b1.iinertia;
						}
						v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
						v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
						j = (arb1.c1.bounce + (arb1.nx * v1x + arb1.ny * v1y) + arb1.surfacey) * arb1.c1.nMass;
						jOld = arb1.c1.jnAcc;
						cjAcc = jOld - j;
						if(cjAcc < 0.0) {
							cjAcc = 0.0;
						}
						j = cjAcc - jOld;
						arb1.c1.jnAcc = cjAcc;
						jx1 = arb1.nx * j;
						jy1 = arb1.ny * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += arb1.rn1b * j * arb1.b2.iinertia;
						arb1.b1.angvel -= arb1.rn1a * j * arb1.b1.iinertia;
					}
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g1 = 0;
		while(_g1 < times) {
			++_g1;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) {
								con.compound.wrap_constraints.remove(con.outer);
							} else {
								this.wrap_constraints.remove(con.outer);
							}
							this.midstep = true;
						} else {
							con.active = false;
						}
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & 1) != 0) {
					if(arb.ptype == 2) {
						var c = arb.c1;
						var r2x = 0.0;
						var r2y = 0.0;
						r2x = arb.b2.axisy * c.lr2x - arb.b2.axisx * c.lr2y;
						r2y = c.lr2x * arb.b2.axisx + c.lr2y * arb.b2.axisy;
						r2x += arb.b2.posx;
						r2y += arb.b2.posy;
						var r1x = 0.0;
						var r1y = 0.0;
						r1x = arb.b1.axisy * c.lr1x - arb.b1.axisx * c.lr1y;
						r1y = c.lr1x * arb.b1.axisx + c.lr1y * arb.b1.axisy;
						r1x += arb.b1.posx;
						r1y += arb.b1.posy;
						var dx = 0.0;
						var dy = 0.0;
						dx = r2x - r1x;
						dy = r2y - r1y;
						var dl = Math.sqrt(dx * dx + dy * dy);
						var r = arb.radius - nape_Config.collisionSlop;
						var err = dl - r;
						if(dx * arb.nx + dy * arb.ny < 0) {
							dx = -dx;
							dy = -dy;
							err -= arb.radius;
						}
						if(err < 0) {
							if(dl < nape_Config.epsilon) {
								if(arb.b1.smass != 0.0) {
									arb.b1.posx += nape_Config.epsilon * 10;
								} else {
									arb.b2.posx += nape_Config.epsilon * 10;
								}
							} else {
								var t = 1.0 / dl;
								dx *= t;
								dy *= t;
								var px = 0.5 * (r1x + r2x);
								var py = 0.5 * (r1y + r2y);
								r1x = px - arb.b1.posx;
								r1y = py - arb.b1.posy;
								r2x = px - arb.b2.posx;
								r2y = py - arb.b2.posy;
								var rn1 = dy * r1x - dx * r1y;
								var rn2 = dy * r2x - dx * r2y;
								var K = arb.b2.smass + rn2 * rn2 * arb.b2.sinertia + arb.b1.smass + rn1 * rn1 * arb.b1.sinertia;
								if(K != 0) {
									var jn = -arb.biasCoef * (dl - r) / K;
									var Jx = 0.0;
									var Jy = 0.0;
									Jx = dx * jn;
									Jy = dy * jn;
									var t1 = arb.b1.imass;
									arb.b1.posx -= Jx * t1;
									arb.b1.posy -= Jy * t1;
									var _this = arb.b1;
									var dr = -rn1 * arb.b1.iinertia * jn;
									_this.rot += dr;
									if(dr * dr > 0.0001) {
										_this.axisx = Math.sin(_this.rot);
										_this.axisy = Math.cos(_this.rot);
									} else {
										var d2 = dr * dr;
										var p = 1 - 0.5 * d2;
										var m = 1 - d2 * d2 / 8;
										var nx = (p * _this.axisx + dr * _this.axisy) * m;
										_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
										_this.axisx = nx;
									}
									var t2 = arb.b2.imass;
									arb.b2.posx += Jx * t2;
									arb.b2.posy += Jy * t2;
									var _this1 = arb.b2;
									var dr1 = rn2 * arb.b2.iinertia * jn;
									_this1.rot += dr1;
									if(dr1 * dr1 > 0.0001) {
										_this1.axisx = Math.sin(_this1.rot);
										_this1.axisy = Math.cos(_this1.rot);
									} else {
										var d21 = dr1 * dr1;
										var p1 = 1 - 0.5 * d21;
										var m1 = 1 - d21 * d21 / 8;
										var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
										_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
										_this1.axisx = nx1;
									}
								}
							}
						}
					} else {
						var gnormx = 0.0;
						var gnormy = 0.0;
						var gproj;
						var clip1x = 0.0;
						var clip1y = 0.0;
						var clip2x = 0;
						var clip2y = 0;
						if(arb.ptype == 0) {
							gnormx = arb.b1.axisy * arb.lnormx - arb.b1.axisx * arb.lnormy;
							gnormy = arb.lnormx * arb.b1.axisx + arb.lnormy * arb.b1.axisy;
							gproj = arb.lproj + (gnormx * arb.b1.posx + gnormy * arb.b1.posy);
							clip1x = arb.b2.axisy * arb.c1.lr1x - arb.b2.axisx * arb.c1.lr1y;
							clip1y = arb.c1.lr1x * arb.b2.axisx + arb.c1.lr1y * arb.b2.axisy;
							clip1x += arb.b2.posx;
							clip1y += arb.b2.posy;
							if(arb.hpc2) {
								clip2x = arb.b2.axisy * arb.c2.lr1x - arb.b2.axisx * arb.c2.lr1y;
								clip2y = arb.c2.lr1x * arb.b2.axisx + arb.c2.lr1y * arb.b2.axisy;
								clip2x += arb.b2.posx;
								clip2y += arb.b2.posy;
							}
						} else {
							gnormx = arb.b2.axisy * arb.lnormx - arb.b2.axisx * arb.lnormy;
							gnormy = arb.lnormx * arb.b2.axisx + arb.lnormy * arb.b2.axisy;
							gproj = arb.lproj + (gnormx * arb.b2.posx + gnormy * arb.b2.posy);
							clip1x = arb.b1.axisy * arb.c1.lr1x - arb.b1.axisx * arb.c1.lr1y;
							clip1y = arb.c1.lr1x * arb.b1.axisx + arb.c1.lr1y * arb.b1.axisy;
							clip1x += arb.b1.posx;
							clip1y += arb.b1.posy;
							if(arb.hpc2) {
								clip2x = arb.b1.axisy * arb.c2.lr1x - arb.b1.axisx * arb.c2.lr1y;
								clip2y = arb.c2.lr1x * arb.b1.axisx + arb.c2.lr1y * arb.b1.axisy;
								clip2x += arb.b1.posx;
								clip2y += arb.b1.posy;
							}
						}
						var err1 = clip1x * gnormx + clip1y * gnormy - gproj - arb.radius;
						err1 += nape_Config.collisionSlop;
						var err2 = 0.0;
						if(arb.hpc2) {
							err2 = clip2x * gnormx + clip2y * gnormy - gproj - arb.radius;
							err2 += nape_Config.collisionSlop;
						}
						if(err1 < 0 || err2 < 0) {
							if(arb.rev) {
								gnormx = -gnormx;
								gnormy = -gnormy;
							}
							var c1r1x = 0.0;
							var c1r1y = 0.0;
							c1r1x = clip1x - arb.b1.posx;
							c1r1y = clip1y - arb.b1.posy;
							var c1r2x = 0.0;
							var c1r2y = 0.0;
							c1r2x = clip1x - arb.b2.posx;
							c1r2y = clip1y - arb.b2.posy;
							var c2r1x = 0;
							var c2r1y = 0;
							var c2r2x = 0;
							var c2r2y = 0;
							if(arb.hpc2) {
								c2r1x = clip2x - arb.b1.posx;
								c2r1y = clip2y - arb.b1.posy;
								c2r2x = clip2x - arb.b2.posx;
								c2r2y = clip2y - arb.b2.posy;
								var rn1a = gnormy * c1r1x - gnormx * c1r1y;
								var rn1b = gnormy * c1r2x - gnormx * c1r2y;
								var rn2a = gnormy * c2r1x - gnormx * c2r1y;
								var rn2b = gnormy * c2r2x - gnormx * c2r2y;
								var mass_sum = arb.b1.smass + arb.b2.smass;
								arb.kMassa = mass_sum + arb.b1.sinertia * rn1a * rn1a + arb.b2.sinertia * rn1b * rn1b;
								arb.kMassb = mass_sum + arb.b1.sinertia * rn1a * rn2a + arb.b2.sinertia * rn1b * rn2b;
								arb.kMassc = mass_sum + arb.b1.sinertia * rn2a * rn2a + arb.b2.sinertia * rn2b * rn2b;
								var Ka = 0.0;
								var Kb = 0.0;
								var Kc = 0.0;
								Ka = arb.kMassa;
								Kb = arb.kMassb;
								Kc = arb.kMassc;
								var bx = err1 * arb.biasCoef;
								var by = err2 * arb.biasCoef;
								while(true) {
									var xx = 0.0;
									var xy = 0.0;
									xx = bx;
									xy = by;
									xx = -bx;
									xy = -by;
									var det = arb.kMassa * arb.kMassc - arb.kMassb * arb.kMassb;
									if(det != det) {
										xy = 0;
										xx = xy;
									} else if(det == 0) {
										if(arb.kMassa != 0) {
											xx /= arb.kMassa;
										} else {
											xx = 0;
										}
										if(arb.kMassc != 0) {
											xy /= arb.kMassc;
										} else {
											xy = 0;
										}
									} else {
										det = 1 / det;
										var t3 = det * (arb.kMassc * xx - arb.kMassb * xy);
										xy = det * (arb.kMassa * xy - arb.kMassb * xx);
										xx = t3;
									}
									if(xx >= 0 && xy >= 0) {
										var t4 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t4;
										arb.b1.posy -= gnormy * t4;
										var _this2 = arb.b1;
										var dr2 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this2.rot += dr2;
										if(dr2 * dr2 > 0.0001) {
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										} else {
											var d22 = dr2 * dr2;
											var p2 = 1 - 0.5 * d22;
											var m2 = 1 - d22 * d22 / 8;
											var nx2 = (p2 * _this2.axisx + dr2 * _this2.axisy) * m2;
											_this2.axisy = (p2 * _this2.axisy - dr2 * _this2.axisx) * m2;
											_this2.axisx = nx2;
										}
										var t5 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t5;
										arb.b2.posy += gnormy * t5;
										var _this3 = arb.b2;
										var dr3 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this3.rot += dr3;
										if(dr3 * dr3 > 0.0001) {
											_this3.axisx = Math.sin(_this3.rot);
											_this3.axisy = Math.cos(_this3.rot);
										} else {
											var d23 = dr3 * dr3;
											var p3 = 1 - 0.5 * d23;
											var m3 = 1 - d23 * d23 / 8;
											var nx3 = (p3 * _this3.axisx + dr3 * _this3.axisy) * m3;
											_this3.axisy = (p3 * _this3.axisy - dr3 * _this3.axisx) * m3;
											_this3.axisx = nx3;
										}
										break;
									}
									xx = -bx / Ka;
									xy = 0;
									if(xx >= 0 && Kb * xx + by >= 0) {
										var t6 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t6;
										arb.b1.posy -= gnormy * t6;
										var _this4 = arb.b1;
										var dr4 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this4.rot += dr4;
										if(dr4 * dr4 > 0.0001) {
											_this4.axisx = Math.sin(_this4.rot);
											_this4.axisy = Math.cos(_this4.rot);
										} else {
											var d24 = dr4 * dr4;
											var p4 = 1 - 0.5 * d24;
											var m4 = 1 - d24 * d24 / 8;
											var nx4 = (p4 * _this4.axisx + dr4 * _this4.axisy) * m4;
											_this4.axisy = (p4 * _this4.axisy - dr4 * _this4.axisx) * m4;
											_this4.axisx = nx4;
										}
										var t7 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t7;
										arb.b2.posy += gnormy * t7;
										var _this5 = arb.b2;
										var dr5 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this5.rot += dr5;
										if(dr5 * dr5 > 0.0001) {
											_this5.axisx = Math.sin(_this5.rot);
											_this5.axisy = Math.cos(_this5.rot);
										} else {
											var d25 = dr5 * dr5;
											var p5 = 1 - 0.5 * d25;
											var m5 = 1 - d25 * d25 / 8;
											var nx5 = (p5 * _this5.axisx + dr5 * _this5.axisy) * m5;
											_this5.axisy = (p5 * _this5.axisy - dr5 * _this5.axisx) * m5;
											_this5.axisx = nx5;
										}
										break;
									}
									xx = 0;
									xy = -by / Kc;
									if(xy >= 0 && Kb * xy + bx >= 0) {
										var t8 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t8;
										arb.b1.posy -= gnormy * t8;
										var _this6 = arb.b1;
										var dr6 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this6.rot += dr6;
										if(dr6 * dr6 > 0.0001) {
											_this6.axisx = Math.sin(_this6.rot);
											_this6.axisy = Math.cos(_this6.rot);
										} else {
											var d26 = dr6 * dr6;
											var p6 = 1 - 0.5 * d26;
											var m6 = 1 - d26 * d26 / 8;
											var nx6 = (p6 * _this6.axisx + dr6 * _this6.axisy) * m6;
											_this6.axisy = (p6 * _this6.axisy - dr6 * _this6.axisx) * m6;
											_this6.axisx = nx6;
										}
										var t9 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t9;
										arb.b2.posy += gnormy * t9;
										var _this7 = arb.b2;
										var dr7 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this7.rot += dr7;
										if(dr7 * dr7 > 0.0001) {
											_this7.axisx = Math.sin(_this7.rot);
											_this7.axisy = Math.cos(_this7.rot);
										} else {
											var d27 = dr7 * dr7;
											var p7 = 1 - 0.5 * d27;
											var m7 = 1 - d27 * d27 / 8;
											var nx7 = (p7 * _this7.axisx + dr7 * _this7.axisy) * m7;
											_this7.axisy = (p7 * _this7.axisy - dr7 * _this7.axisx) * m7;
											_this7.axisx = nx7;
										}
										break;
									}
									break;
								}
							} else {
								var rn11 = gnormy * c1r1x - gnormx * c1r1y;
								var rn21 = gnormy * c1r2x - gnormx * c1r2y;
								var K1 = arb.b2.smass + rn21 * rn21 * arb.b2.sinertia + arb.b1.smass + rn11 * rn11 * arb.b1.sinertia;
								if(K1 != 0) {
									var jn1 = -arb.biasCoef * err1 / K1;
									var Jx1 = 0.0;
									var Jy1 = 0.0;
									Jx1 = gnormx * jn1;
									Jy1 = gnormy * jn1;
									var t10 = arb.b1.imass;
									arb.b1.posx -= Jx1 * t10;
									arb.b1.posy -= Jy1 * t10;
									var _this8 = arb.b1;
									var dr8 = -rn11 * arb.b1.iinertia * jn1;
									_this8.rot += dr8;
									if(dr8 * dr8 > 0.0001) {
										_this8.axisx = Math.sin(_this8.rot);
										_this8.axisy = Math.cos(_this8.rot);
									} else {
										var d28 = dr8 * dr8;
										var p8 = 1 - 0.5 * d28;
										var m8 = 1 - d28 * d28 / 8;
										var nx8 = (p8 * _this8.axisx + dr8 * _this8.axisy) * m8;
										_this8.axisy = (p8 * _this8.axisy - dr8 * _this8.axisx) * m8;
										_this8.axisx = nx8;
									}
									var t11 = arb.b2.imass;
									arb.b2.posx += Jx1 * t11;
									arb.b2.posy += Jy1 * t11;
									var _this9 = arb.b2;
									var dr9 = rn21 * arb.b2.iinertia * jn1;
									_this9.rot += dr9;
									if(dr9 * dr9 > 0.0001) {
										_this9.axisx = Math.sin(_this9.rot);
										_this9.axisy = Math.cos(_this9.rot);
									} else {
										var d29 = dr9 * dr9;
										var p9 = 1 - 0.5 * d29;
										var m9 = 1 - d29 * d29 / 8;
										var nx9 = (p9 * _this9.axisx + dr9 * _this9.axisy) * m9;
										_this9.axisy = (p9 * _this9.axisy - dr9 * _this9.axisx) * m9;
										_this9.axisx = nx9;
									}
								}
							}
						}
					}
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _gthis = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		var itype;
		var itype1;
		if(!con_ignore) {
			var cur = s1;
			while(cur != null && cur.group == null) if(cur.ishape != null) {
				cur = cur.ishape.body;
			} else if(cur.icompound != null) {
				cur = cur.icompound.compound;
			} else {
				cur = cur.ibody.compound;
			}
			var g1 = cur == null ? null : cur.group;
			var itype2;
			if(g1 == null) {
				itype2 = false;
			} else {
				var cur1 = s2;
				while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
					cur1 = cur1.ishape.body;
				} else if(cur1.icompound != null) {
					cur1 = cur1.icompound.compound;
				} else {
					cur1 = cur1.ibody.compound;
				}
				var g2 = cur1 == null ? null : cur1.group;
				if(g2 == null) {
					itype2 = false;
				} else {
					var ret1 = false;
					while(g1 != null && g2 != null) {
						if(g1 == g2) {
							ret1 = g1.ignore;
							break;
						}
						if(g1.depth < g2.depth) {
							g2 = g2.group;
						} else {
							g1 = g1.group;
						}
					}
					itype2 = ret1;
				}
			}
			itype1 = !itype2;
		} else {
			itype1 = false;
		}
		if(itype1) {
			var itype3;
			if(s1.sensorEnabled || s2.sensorEnabled) {
				var _this = s1.filter;
				var x = s2.filter;
				if((_this.sensorMask & x.sensorGroup) != 0) {
					itype3 = (x.sensorMask & _this.sensorGroup) != 0;
				} else {
					itype3 = false;
				}
			} else {
				itype3 = false;
			}
			if(itype3) {
				itype = 2;
			} else {
				var itype4;
				var itype5;
				if(s1.fluidEnabled || s2.fluidEnabled) {
					var _this1 = s1.filter;
					var x1 = s2.filter;
					if((_this1.fluidMask & x1.fluidGroup) != 0) {
						itype5 = (x1.fluidMask & _this1.fluidGroup) != 0;
					} else {
						itype5 = false;
					}
				} else {
					itype5 = false;
				}
				if(itype5) {
					itype4 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
				} else {
					itype4 = false;
				}
				if(itype4) {
					itype = 0;
				} else {
					var itype6;
					var _this2 = s1.filter;
					var x2 = s2.filter;
					if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
						itype6 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
					} else {
						itype6 = false;
					}
					if(itype6) {
						itype = 1;
					} else {
						itype = -1;
					}
				}
			}
		} else {
			itype = -1;
		}
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret2 = null;
					var cx_ite1 = (b1.arbiters.length < b2.arbiters.length ? b1 : b2).arbiters.head;
					while(cx_ite1 != null) {
						var arb = cx_ite1.elt;
						if(arb.id == sa.id && arb.di == sb.id) {
							ret2 = arb;
							break;
						}
						cx_ite1 = cx_ite1.next;
					}
					xarb = ret2;
				} else {
					xarb = in_arb;
				}
				var first = xarb == null;
				var arb1;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb1 = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb1 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
				} else if(xarb.fluidarb == null) {
					xarb.cleared = true;
					var _this3 = xarb.b1.arbiters;
					var pre = null;
					var cur2 = _this3.head;
					while(cur2 != null) {
						if(cur2.elt == xarb) {
							var old;
							var ret3;
							if(pre == null) {
								old = _this3.head;
								ret3 = old.next;
								_this3.head = ret3;
								if(_this3.head == null) {
									_this3.pushmod = true;
								}
							} else {
								old = pre.next;
								ret3 = old.next;
								pre.next = ret3;
								if(ret3 == null) {
									_this3.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this3.modified = true;
							_this3.length--;
							_this3.pushmod = true;
							break;
						}
						pre = cur2;
						cur2 = cur2.next;
					}
					var _this4 = xarb.b2.arbiters;
					var pre1 = null;
					var cur3 = _this4.head;
					while(cur3 != null) {
						if(cur3.elt == xarb) {
							var old1;
							var ret4;
							if(pre1 == null) {
								old1 = _this4.head;
								ret4 = old1.next;
								_this4.head = ret4;
								if(_this4.head == null) {
									_this4.pushmod = true;
								}
							} else {
								old1 = pre1.next;
								ret4 = old1.next;
								pre1.next = ret4;
								if(ret4 == null) {
									_this4.pushmod = true;
								}
							}
							var o1 = old1;
							o1.elt = null;
							o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o1;
							_this4.modified = true;
							_this4.length--;
							_this4.pushmod = true;
							break;
						}
						pre1 = cur3;
						cur3 = cur3.next;
					}
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb1 = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb1 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					arb1.intchange = true;
					first = true;
					swapped = true;
				} else {
					arb1 = xarb.fluidarb;
				}
				if(first || arb1.stamp != this.stamp || continuous) {
					arb1.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.flowCollide(sa,sb,arb1)) {
						if(first) {
							var di = sb.id;
							arb1.b1 = s1.body;
							arb1.ws1 = s1;
							arb1.b2 = s2.body;
							arb1.ws2 = s2;
							arb1.id = sa.id;
							arb1.di = di;
							var _this5 = arb1.b1.arbiters;
							var ret5;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret5 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.elt = arb1;
							var temp = ret5;
							temp.next = _this5.head;
							_this5.head = temp;
							_this5.modified = true;
							_this5.length++;
							var _this6 = arb1.b2.arbiters;
							var ret6;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret6 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.elt = arb1;
							var temp1 = ret6;
							temp1.next = _this6.head;
							_this6.head = temp1;
							_this6.modified = true;
							_this6.length++;
							arb1.active = true;
							arb1.present = 0;
							arb1.cleared = false;
							arb1.sleeping = false;
							arb1.fresh = false;
							arb1.presentable = false;
							arb1.nx = 0;
							arb1.ny = 1;
							arb1.dampx = 0;
							arb1.dampy = 0;
							arb1.adamp = 0.0;
							var _this7 = this.f_arbiters;
							var ret7;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret7 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret7.next;
								ret7.next = null;
							}
							ret7.elt = arb1;
							var temp2 = ret7;
							temp2.next = _this7.head;
							_this7.head = temp2;
							_this7.modified = true;
							_this7.length++;
							arb1.fresh = !swapped;
						} else {
							arb1.fresh = arb1.up_stamp < this.stamp - 1 || arb1.endGenerated == this.stamp && continuous;
						}
						arb1.up_stamp = arb1.stamp;
						if(arb1.fresh || (arb1.immState & 4) == 0) {
							arb1.immState = 1;
							var anyimpure = false;
							var arbs1 = arb1.ws1.id > arb1.ws2.id ? arb1.ws2 : arb1.ws1;
							var arbs2 = arb1.ws1.id > arb1.ws2.id ? arb1.ws1 : arb1.ws2;
							var _this8 = this.mrca1;
							while(_this8.head != null) {
								var ret8 = _this8.head;
								_this8.head = ret8.next;
								ret8.elt = null;
								ret8.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret8;
								if(_this8.head == null) {
									_this8.pushmod = true;
								}
								_this8.modified = true;
								_this8.length--;
							}
							_this8.pushmod = true;
							var _this9 = this.mrca2;
							while(_this9.head != null) {
								var ret9 = _this9.head;
								_this9.head = ret9.next;
								ret9.elt = null;
								ret9.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret9;
								if(_this9.head == null) {
									_this9.pushmod = true;
								}
								_this9.modified = true;
								_this9.length--;
							}
							_this9.pushmod = true;
							if(arbs1.cbSet != null) {
								var _this10 = this.mrca1;
								var ret10;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret10 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret10 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret10.next;
									ret10.next = null;
								}
								ret10.elt = arbs1;
								var temp3 = ret10;
								temp3.next = _this10.head;
								_this10.head = temp3;
								_this10.modified = true;
								_this10.length++;
							}
							if(arbs1.body.cbSet != null) {
								var _this11 = this.mrca1;
								var ret11;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret11 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret11 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret11.next;
									ret11.next = null;
								}
								ret11.elt = arbs1.body;
								var temp4 = ret11;
								temp4.next = _this11.head;
								_this11.head = temp4;
								_this11.modified = true;
								_this11.length++;
							}
							if(arbs2.cbSet != null) {
								var _this12 = this.mrca2;
								var ret12;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret12 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret12 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret12.next;
									ret12.next = null;
								}
								ret12.elt = arbs2;
								var temp5 = ret12;
								temp5.next = _this12.head;
								_this12.head = temp5;
								_this12.modified = true;
								_this12.length++;
							}
							if(arbs2.body.cbSet != null) {
								var _this13 = this.mrca2;
								var ret13;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret13 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret13 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret13.next;
									ret13.next = null;
								}
								ret13.elt = arbs2.body;
								var temp6 = ret13;
								temp6.next = _this13.head;
								_this13.head = temp6;
								_this13.modified = true;
								_this13.length++;
							}
							var c1 = arbs1.body.compound;
							var c2 = arbs2.body.compound;
							while(c1 != c2) if((c1 == null ? 0 : c1.depth) < (c2 == null ? 0 : c2.depth)) {
								if(c2.cbSet != null) {
									var _this14 = this.mrca2;
									var ret14;
									if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
										ret14 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
									} else {
										ret14 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret14.next;
										ret14.next = null;
									}
									ret14.elt = c2;
									var temp7 = ret14;
									temp7.next = _this14.head;
									_this14.head = temp7;
									_this14.modified = true;
									_this14.length++;
								}
								c2 = c2.compound;
							} else {
								if(c1.cbSet != null) {
									var _this15 = this.mrca1;
									var ret15;
									if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
										ret15 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
									} else {
										ret15 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret15.next;
										ret15.next = null;
									}
									ret15.elt = c1;
									var temp8 = ret15;
									temp8.next = _this15.head;
									_this15.head = temp8;
									_this15.modified = true;
									_this15.length++;
								}
								c1 = c1.compound;
							}
							var cx_ite2 = this.mrca1.head;
							while(cx_ite2 != null) {
								var i1 = cx_ite2.elt;
								var cx_ite3 = this.mrca2.head;
								while(cx_ite3 != null) {
									var i2 = cx_ite3.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									var ret16 = null;
									var cx_ite4 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
									while(cx_ite4 != null) {
										var p = cx_ite4.elt;
										if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
											ret16 = p;
											break;
										}
										cx_ite4 = cx_ite4.next;
									}
									if(ret16 == null) {
										var ret17;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret17 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret17 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret17.next;
											ret17.next = null;
										}
										ret17.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret17.a = cb1;
											ret17.b = cb2;
										} else {
											ret17.a = cb2;
											ret17.b = cb1;
										}
										ret16 = ret17;
										cb1.cbpairs.add(ret16);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret16);
										}
									}
									if(ret16.zip_listeners) {
										ret16.zip_listeners = false;
										ret16.__validate();
									}
									if(ret16.listeners.head == null) {
										cx_ite3 = cx_ite3.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									var _this16 = this.prelisteners;
									while(_this16.head != null) {
										var ret18 = _this16.head;
										_this16.head = ret18.next;
										ret18.elt = null;
										ret18.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret18;
										if(_this16.head == null) {
											_this16.pushmod = true;
										}
										_this16.modified = true;
										_this16.length--;
									}
									_this16.pushmod = true;
									var lite = null;
									var ret19 = null;
									var cx_ite5 = (cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs).head;
									while(cx_ite5 != null) {
										var p1 = cx_ite5.elt;
										if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
											ret19 = p1;
											break;
										}
										cx_ite5 = cx_ite5.next;
									}
									if(ret19 == null) {
										var ret20;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret20 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret20 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret20.next;
											ret20.next = null;
										}
										ret20.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret20.a = cb1;
											ret20.b = cb2;
										} else {
											ret20.a = cb2;
											ret20.b = cb1;
										}
										ret19 = ret20;
										cb1.cbpairs.add(ret19);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret19);
										}
									}
									if(ret19.zip_listeners) {
										ret19.zip_listeners = false;
										ret19.__validate();
									}
									var cx_ite6 = ret19.listeners.head;
									while(cx_ite6 != null) {
										var x3 = cx_ite6.elt;
										if(x3.event == 5) {
											if((x3.itype & 4) != 0) {
												var _this17 = _gthis.prelisteners;
												var ret21;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret21 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret21 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret21.next;
													ret21.next = null;
												}
												ret21.elt = x3;
												var temp9 = ret21;
												if(lite == null) {
													temp9.next = _this17.head;
													_this17.head = temp9;
												} else {
													temp9.next = lite.next;
													lite.next = temp9;
												}
												_this17.pushmod = _this17.modified = true;
												_this17.length++;
												lite = temp9;
												if(!anyimpure) {
													anyimpure = !x3.pure;
												} else {
													anyimpure = true;
												}
											}
										}
										cx_ite6 = cx_ite6.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite3 = cx_ite3.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & 4) == 0) {
										if(ncallbackset != null) {
											callbackset = ncallbackset;
										}
										if(callbackset != null) {
											var cx_ite7 = this.prelisteners.head;
											while(cx_ite7 != null) {
												if(cx_ite7.elt.itype == 7) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else {
													callbackset.FLUIDstamp = this.stamp;
												}
												cx_ite7 = cx_ite7.next;
											}
										}
										var pact = arb1.active;
										arb1.active = true;
										this.precb.zpp_inner.pre_arbiter = arb1;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite8 = this.prelisteners.head;
										while(cx_ite8 != null) {
											var listener = cx_ite8.elt;
											this.precb.zpp_inner.listener = listener;
											var cb = this.precb.zpp_inner;
											var o11 = callbackset.int1;
											var o2 = callbackset.int2;
											var ret22;
											var _this18 = listener.options1;
											var xs = o11.cbTypes;
											if(_this18.nonemptyintersection(xs,_this18.includes) && !_this18.nonemptyintersection(xs,_this18.excludes)) {
												var _this19 = listener.options2;
												var xs1 = o2.cbTypes;
												if(_this19.nonemptyintersection(xs1,_this19.includes)) {
													ret22 = !_this19.nonemptyintersection(xs1,_this19.excludes);
												} else {
													ret22 = false;
												}
											} else {
												ret22 = false;
											}
											if(ret22) {
												cb.int1 = o11;
												cb.int2 = o2;
											} else {
												cb.int1 = o2;
												cb.int2 = o11;
											}
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret23 = listener.handlerp(this.precb);
											if(ret23 != null) {
												var ret24;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret23 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret24 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret23 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret24 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														if(ret23 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
															ret24 = 6;
														} else {
															ret24 = 2;
														}
													}
												}
												arb1.immState = ret24;
											}
											cx_ite8 = cx_ite8.next;
										}
										arb1.active = pact;
										if(callbackset != null) {
											var cx_ite9 = this.prelisteners.head;
											while(cx_ite9 != null) {
												if(cx_ite9.elt.itype == 7) {
													callbackset.COLLISIONstate = arb1.immState;
													callbackset.SENSORstate = arb1.immState;
													callbackset.FLUIDstate = arb1.immState;
												} else {
													callbackset.FLUIDstate = arb1.immState;
												}
												cx_ite9 = cx_ite9.next;
											}
										}
									} else if(callbackset == null) {
										if((arb1.immState & 4) == 0) {
											arb1.immState = 1;
										}
									} else {
										arb1.immState = callbackset.FLUIDstate;
									}
									cx_ite3 = cx_ite3.next;
								}
								cx_ite2 = cx_ite2.next;
							}
							if(anyimpure && (arb1.immState & 4) == 0) {
								if(arb1.b1.type == 2) {
									var o3 = arb1.b1;
									if(!o3.world) {
										o3.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o3.type == 3) {
											o3.kinematicDelaySleep = true;
										}
										if(o3.component.sleeping) {
											this.really_wake(o3,false);
										}
									}
								}
								if(arb1.b1.type == 2) {
									var o4 = arb1.b2;
									if(!o4.world) {
										o4.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o4.type == 3) {
											o4.kinematicDelaySleep = true;
										}
										if(o4.component.sleeping) {
											this.really_wake(o4,false);
										}
									}
								}
							}
						}
						if((arb1.immState & 1) != 0) {
							if(arb1.b1.type == 2 && arb1.b1.component.sleeping) {
								var o5 = arb1.b1;
								if(!o5.world) {
									o5.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o5.type == 3) {
										o5.kinematicDelaySleep = true;
									}
									if(o5.component.sleeping) {
										this.really_wake(o5,false);
									}
								}
							}
							if(arb1.b2.type == 2 && arb1.b2.component.sleeping) {
								var o6 = arb1.b2;
								if(!o6.world) {
									o6.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o6.type == 3) {
										o6.kinematicDelaySleep = true;
									}
									if(o6.component.sleeping) {
										this.really_wake(o6,false);
									}
								}
							}
						}
						if(arb1.sleeping) {
							arb1.sleeping = false;
							var _this20 = this.f_arbiters;
							var ret25;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret25 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret25 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret25.next;
								ret25.next = null;
							}
							ret25.elt = arb1;
							var temp10 = ret25;
							temp10.next = _this20.head;
							_this20.head = temp10;
							_this20.modified = true;
							_this20.length++;
						}
						ret = arb1;
					} else if(first) {
						var o7 = arb1;
						o7.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o7;
						ret = null;
					} else {
						ret = arb1;
					}
				} else {
					ret = arb1;
				}
			} else if(itype == 1) {
				var carbs = stat ? this.c_arbiters_true : this.c_arbiters_false;
				var xarb1;
				if(in_arb == null) {
					var ret26 = null;
					var cx_ite10 = (b1.arbiters.length < b2.arbiters.length ? b1 : b2).arbiters.head;
					while(cx_ite10 != null) {
						var arb2 = cx_ite10.elt;
						if(arb2.id == sa.id && arb2.di == sb.id) {
							ret26 = arb2;
							break;
						}
						cx_ite10 = cx_ite10.next;
					}
					xarb1 = ret26;
				} else {
					xarb1 = in_arb;
				}
				var first1 = xarb1 == null;
				var arb3;
				var swapped1 = false;
				if(first1) {
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb3 = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb3 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					arb3.stat = stat;
				} else if(xarb1.colarb == null) {
					xarb1.cleared = true;
					var _this21 = xarb1.b1.arbiters;
					var pre2 = null;
					var cur4 = _this21.head;
					while(cur4 != null) {
						if(cur4.elt == xarb1) {
							var old2;
							var ret27;
							if(pre2 == null) {
								old2 = _this21.head;
								ret27 = old2.next;
								_this21.head = ret27;
								if(_this21.head == null) {
									_this21.pushmod = true;
								}
							} else {
								old2 = pre2.next;
								ret27 = old2.next;
								pre2.next = ret27;
								if(ret27 == null) {
									_this21.pushmod = true;
								}
							}
							var o8 = old2;
							o8.elt = null;
							o8.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o8;
							_this21.modified = true;
							_this21.length--;
							_this21.pushmod = true;
							break;
						}
						pre2 = cur4;
						cur4 = cur4.next;
					}
					var _this22 = xarb1.b2.arbiters;
					var pre3 = null;
					var cur5 = _this22.head;
					while(cur5 != null) {
						if(cur5.elt == xarb1) {
							var old3;
							var ret28;
							if(pre3 == null) {
								old3 = _this22.head;
								ret28 = old3.next;
								_this22.head = ret28;
								if(_this22.head == null) {
									_this22.pushmod = true;
								}
							} else {
								old3 = pre3.next;
								ret28 = old3.next;
								pre3.next = ret28;
								if(ret28 == null) {
									_this22.pushmod = true;
								}
							}
							var o9 = old3;
							o9.elt = null;
							o9.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o9;
							_this22.modified = true;
							_this22.length--;
							_this22.pushmod = true;
							break;
						}
						pre3 = cur5;
						cur5 = cur5.next;
					}
					if(xarb1.pair != null) {
						xarb1.pair.arb = null;
						xarb1.pair = null;
					}
					xarb1.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb3 = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb3 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					arb3.intchange = true;
					arb3.stat = stat;
					first1 = true;
					swapped1 = true;
				} else {
					arb3 = xarb1.colarb;
					reverse = sa != arb3.s1;
					if(arb3.stat != stat) {
						arb3.stat = stat;
						if(!arb3.sleeping) {
							(stat ? this.c_arbiters_false : this.c_arbiters_true).remove(arb3);
							carbs.add(arb3);
						}
					}
				}
				if(first1 || arb3.stamp != this.stamp || continuous) {
					arb3.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.contactCollide(sa,sb,arb3,reverse)) {
						if(first1) {
							var di1 = sb.id;
							arb3.b1 = s1.body;
							arb3.ws1 = s1;
							arb3.b2 = s2.body;
							arb3.ws2 = s2;
							arb3.id = sa.id;
							arb3.di = di1;
							var _this23 = arb3.b1.arbiters;
							var ret29;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret29 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret29 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret29.next;
								ret29.next = null;
							}
							ret29.elt = arb3;
							var temp11 = ret29;
							temp11.next = _this23.head;
							_this23.head = temp11;
							_this23.modified = true;
							_this23.length++;
							var _this24 = arb3.b2.arbiters;
							var ret30;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret30 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret30 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret30.next;
								ret30.next = null;
							}
							ret30.elt = arb3;
							var temp12 = ret30;
							temp12.next = _this24.head;
							_this24.head = temp12;
							_this24.modified = true;
							_this24.length++;
							arb3.active = true;
							arb3.present = 0;
							arb3.cleared = false;
							arb3.sleeping = false;
							arb3.fresh = false;
							arb3.presentable = false;
							arb3.s1 = s1;
							arb3.s2 = s2;
							if(!arb3.userdef_restitution) {
								if(arb3.s1.material.elasticity <= -Infinity || arb3.s2.material.elasticity <= -Infinity) {
									arb3.restitution = 0;
								} else if(arb3.s1.material.elasticity >= Infinity || arb3.s2.material.elasticity >= Infinity) {
									arb3.restitution = 1;
								} else {
									arb3.restitution = (arb3.s1.material.elasticity + arb3.s2.material.elasticity) / 2;
								}
								if(arb3.restitution < 0) {
									arb3.restitution = 0;
								}
								if(arb3.restitution > 1) {
									arb3.restitution = 1;
								}
							}
							if(!arb3.userdef_dyn_fric) {
								arb3.dyn_fric = Math.sqrt(arb3.s1.material.dynamicFriction * arb3.s2.material.dynamicFriction);
							}
							if(!arb3.userdef_stat_fric) {
								arb3.stat_fric = Math.sqrt(arb3.s1.material.staticFriction * arb3.s2.material.staticFriction);
							}
							if(!arb3.userdef_rfric) {
								arb3.rfric = Math.sqrt(arb3.s1.material.rollingFriction * arb3.s2.material.rollingFriction);
							}
							var ret31;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret31 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret31 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret31.next;
								ret31.next = null;
							}
							ret31.elt = arb3;
							var temp13 = ret31;
							temp13.next = carbs.head;
							carbs.head = temp13;
							carbs.modified = true;
							carbs.length++;
							arb3.fresh = !swapped1;
						} else {
							arb3.fresh = arb3.up_stamp < this.stamp - 1 || arb3.endGenerated == this.stamp && continuous;
						}
						arb3.up_stamp = arb3.stamp;
						if(arb3.fresh || (arb3.immState & 4) == 0) {
							arb3.immState = 1;
							var anyimpure1 = false;
							var arbs11 = arb3.ws1.id > arb3.ws2.id ? arb3.ws2 : arb3.ws1;
							var arbs21 = arb3.ws1.id > arb3.ws2.id ? arb3.ws1 : arb3.ws2;
							var _this25 = this.mrca1;
							while(_this25.head != null) {
								var ret32 = _this25.head;
								_this25.head = ret32.next;
								ret32.elt = null;
								ret32.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret32;
								if(_this25.head == null) {
									_this25.pushmod = true;
								}
								_this25.modified = true;
								_this25.length--;
							}
							_this25.pushmod = true;
							var _this26 = this.mrca2;
							while(_this26.head != null) {
								var ret33 = _this26.head;
								_this26.head = ret33.next;
								ret33.elt = null;
								ret33.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret33;
								if(_this26.head == null) {
									_this26.pushmod = true;
								}
								_this26.modified = true;
								_this26.length--;
							}
							_this26.pushmod = true;
							if(arbs11.cbSet != null) {
								var _this27 = this.mrca1;
								var ret34;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret34 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret34 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret34.next;
									ret34.next = null;
								}
								ret34.elt = arbs11;
								var temp14 = ret34;
								temp14.next = _this27.head;
								_this27.head = temp14;
								_this27.modified = true;
								_this27.length++;
							}
							if(arbs11.body.cbSet != null) {
								var _this28 = this.mrca1;
								var ret35;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret35 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret35 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret35.next;
									ret35.next = null;
								}
								ret35.elt = arbs11.body;
								var temp15 = ret35;
								temp15.next = _this28.head;
								_this28.head = temp15;
								_this28.modified = true;
								_this28.length++;
							}
							if(arbs21.cbSet != null) {
								var _this29 = this.mrca2;
								var ret36;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret36 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret36 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret36.next;
									ret36.next = null;
								}
								ret36.elt = arbs21;
								var temp16 = ret36;
								temp16.next = _this29.head;
								_this29.head = temp16;
								_this29.modified = true;
								_this29.length++;
							}
							if(arbs21.body.cbSet != null) {
								var _this30 = this.mrca2;
								var ret37;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret37 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret37 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret37.next;
									ret37.next = null;
								}
								ret37.elt = arbs21.body;
								var temp17 = ret37;
								temp17.next = _this30.head;
								_this30.head = temp17;
								_this30.modified = true;
								_this30.length++;
							}
							var c11 = arbs11.body.compound;
							var c21 = arbs21.body.compound;
							while(c11 != c21) if((c11 == null ? 0 : c11.depth) < (c21 == null ? 0 : c21.depth)) {
								if(c21.cbSet != null) {
									var _this31 = this.mrca2;
									var ret38;
									if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
										ret38 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
									} else {
										ret38 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret38.next;
										ret38.next = null;
									}
									ret38.elt = c21;
									var temp18 = ret38;
									temp18.next = _this31.head;
									_this31.head = temp18;
									_this31.modified = true;
									_this31.length++;
								}
								c21 = c21.compound;
							} else {
								if(c11.cbSet != null) {
									var _this32 = this.mrca1;
									var ret39;
									if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
										ret39 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
									} else {
										ret39 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret39.next;
										ret39.next = null;
									}
									ret39.elt = c11;
									var temp19 = ret39;
									temp19.next = _this32.head;
									_this32.head = temp19;
									_this32.modified = true;
									_this32.length++;
								}
								c11 = c11.compound;
							}
							var cx_ite11 = this.mrca1.head;
							while(cx_ite11 != null) {
								var i11 = cx_ite11.elt;
								var cx_ite12 = this.mrca2.head;
								while(cx_ite12 != null) {
									var i21 = cx_ite12.elt;
									var cb11 = i11.cbSet;
									var cb21 = i21.cbSet;
									var ret40 = null;
									var cx_ite13 = (cb11.cbpairs.length < cb21.cbpairs.length ? cb11.cbpairs : cb21.cbpairs).head;
									while(cx_ite13 != null) {
										var p2 = cx_ite13.elt;
										if(p2.a == cb11 && p2.b == cb21 || p2.a == cb21 && p2.b == cb11) {
											ret40 = p2;
											break;
										}
										cx_ite13 = cx_ite13.next;
									}
									if(ret40 == null) {
										var ret41;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret41 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret41 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret41.next;
											ret41.next = null;
										}
										ret41.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb11,cb21)) {
											ret41.a = cb11;
											ret41.b = cb21;
										} else {
											ret41.a = cb21;
											ret41.b = cb11;
										}
										ret40 = ret41;
										cb11.cbpairs.add(ret40);
										if(cb21 != cb11) {
											cb21.cbpairs.add(ret40);
										}
									}
									if(ret40.zip_listeners) {
										ret40.zip_listeners = false;
										ret40.__validate();
									}
									if(ret40.listeners.head == null) {
										cx_ite12 = cx_ite12.next;
										continue;
									}
									var callbackset1 = null;
									var ncallbackset1 = null;
									var _this33 = this.prelisteners;
									while(_this33.head != null) {
										var ret42 = _this33.head;
										_this33.head = ret42.next;
										ret42.elt = null;
										ret42.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret42;
										if(_this33.head == null) {
											_this33.pushmod = true;
										}
										_this33.modified = true;
										_this33.length--;
									}
									_this33.pushmod = true;
									var lite1 = null;
									var ret43 = null;
									var cx_ite14 = (cb11.cbpairs.length < cb21.cbpairs.length ? cb11.cbpairs : cb21.cbpairs).head;
									while(cx_ite14 != null) {
										var p3 = cx_ite14.elt;
										if(p3.a == cb11 && p3.b == cb21 || p3.a == cb21 && p3.b == cb11) {
											ret43 = p3;
											break;
										}
										cx_ite14 = cx_ite14.next;
									}
									if(ret43 == null) {
										var ret44;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret44 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret44 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret44.next;
											ret44.next = null;
										}
										ret44.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb11,cb21)) {
											ret44.a = cb11;
											ret44.b = cb21;
										} else {
											ret44.a = cb21;
											ret44.b = cb11;
										}
										ret43 = ret44;
										cb11.cbpairs.add(ret43);
										if(cb21 != cb11) {
											cb21.cbpairs.add(ret43);
										}
									}
									if(ret43.zip_listeners) {
										ret43.zip_listeners = false;
										ret43.__validate();
									}
									var cx_ite15 = ret43.listeners.head;
									while(cx_ite15 != null) {
										var x4 = cx_ite15.elt;
										if(x4.event == 5) {
											if((x4.itype & 1) != 0) {
												var _this34 = _gthis.prelisteners;
												var ret45;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret45 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret45 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret45.next;
													ret45.next = null;
												}
												ret45.elt = x4;
												var temp20 = ret45;
												if(lite1 == null) {
													temp20.next = _this34.head;
													_this34.head = temp20;
												} else {
													temp20.next = lite1.next;
													lite1.next = temp20;
												}
												_this34.pushmod = _this34.modified = true;
												_this34.length++;
												lite1 = temp20;
												if(!anyimpure1) {
													anyimpure1 = !x4.pure;
												} else {
													anyimpure1 = true;
												}
											}
										}
										cx_ite15 = cx_ite15.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite12 = cx_ite12.next;
										continue;
									}
									callbackset1 = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
									if(callbackset1 == null) {
										ncallbackset1 = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
										this.add_callbackset(ncallbackset1);
									}
									if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & 4) == 0) {
										if(ncallbackset1 != null) {
											callbackset1 = ncallbackset1;
										}
										if(callbackset1 != null) {
											var cx_ite16 = this.prelisteners.head;
											while(cx_ite16 != null) {
												if(cx_ite16.elt.itype == 7) {
													callbackset1.COLLISIONstamp = this.stamp;
													callbackset1.SENSORstamp = this.stamp;
													callbackset1.FLUIDstamp = this.stamp;
												} else {
													callbackset1.COLLISIONstamp = this.stamp;
												}
												cx_ite16 = cx_ite16.next;
											}
										}
										var pact1 = arb3.active;
										arb3.active = true;
										var fst = true;
										var pre4 = null;
										var prei = null;
										var cx_itei = arb3.innards.next;
										arb3.hc2 = false;
										var cx_ite17 = arb3.contacts.next;
										while(cx_ite17 != null) {
											var c = cx_ite17;
											if(c.stamp + nape_Config.arbiterExpirationDelay < arb3.stamp) {
												var _this35 = arb3.contacts;
												var old4;
												var ret46;
												if(pre4 == null) {
													old4 = _this35.next;
													ret46 = old4.next;
													_this35.next = ret46;
													if(_this35.next == null) {
														_this35.pushmod = true;
													}
												} else {
													old4 = pre4.next;
													ret46 = old4.next;
													pre4.next = ret46;
													if(ret46 == null) {
														_this35.pushmod = true;
													}
												}
												old4._inuse = false;
												_this35.modified = true;
												_this35.length--;
												_this35.pushmod = true;
												cx_ite17 = ret46;
												var _this36 = arb3.innards;
												var old5;
												var ret47;
												if(prei == null) {
													old5 = _this36.next;
													ret47 = old5.next;
													_this36.next = ret47;
													if(_this36.next == null) {
														_this36.pushmod = true;
													}
												} else {
													old5 = prei.next;
													ret47 = old5.next;
													prei.next = ret47;
													if(ret47 == null) {
														_this36.pushmod = true;
													}
												}
												old5._inuse = false;
												_this36.modified = true;
												_this36.length--;
												_this36.pushmod = true;
												cx_itei = ret47;
												c.arbiter = null;
												c.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
												zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c;
												continue;
											}
											var ci = c.inner;
											var pact2 = c.active;
											c.active = c.stamp == arb3.stamp;
											if(c.active) {
												if(fst) {
													fst = false;
													arb3.c1 = ci;
													arb3.oc1 = c;
												} else {
													arb3.hc2 = true;
													arb3.c2 = ci;
													arb3.oc2 = c;
												}
											}
											if(pact2 != c.active) {
												arb3.contacts.modified = true;
											}
											pre4 = cx_ite17;
											prei = cx_itei;
											cx_itei = cx_itei.next;
											cx_ite17 = cx_ite17.next;
										}
										if(arb3.hc2) {
											arb3.hpc2 = true;
											if(arb3.oc1.posOnly) {
												var tmp = arb3.c1;
												arb3.c1 = arb3.c2;
												arb3.c2 = tmp;
												var tmp2 = arb3.oc1;
												arb3.oc1 = arb3.oc2;
												arb3.oc2 = tmp2;
												arb3.hc2 = false;
											} else if(arb3.oc2.posOnly) {
												arb3.hc2 = false;
											}
										} else {
											arb3.hpc2 = false;
										}
										this.precb.zpp_inner.pre_arbiter = arb3;
										this.precb.zpp_inner.set = callbackset1;
										var cx_ite18 = this.prelisteners.head;
										while(cx_ite18 != null) {
											var listener1 = cx_ite18.elt;
											this.precb.zpp_inner.listener = listener1;
											var cb3 = this.precb.zpp_inner;
											var o12 = callbackset1.int1;
											var o21 = callbackset1.int2;
											var ret48;
											var _this37 = listener1.options1;
											var xs2 = o12.cbTypes;
											if(_this37.nonemptyintersection(xs2,_this37.includes) && !_this37.nonemptyintersection(xs2,_this37.excludes)) {
												var _this38 = listener1.options2;
												var xs3 = o21.cbTypes;
												if(_this38.nonemptyintersection(xs3,_this38.includes)) {
													ret48 = !_this38.nonemptyintersection(xs3,_this38.excludes);
												} else {
													ret48 = false;
												}
											} else {
												ret48 = false;
											}
											if(ret48) {
												cb3.int1 = o12;
												cb3.int2 = o21;
											} else {
												cb3.int1 = o21;
												cb3.int2 = o12;
											}
											this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
											var ret49 = listener1.handlerp(this.precb);
											if(ret49 != null) {
												var ret50;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret49 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret50 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret49 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret50 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														if(ret49 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
															ret50 = 6;
														} else {
															ret50 = 2;
														}
													}
												}
												arb3.immState = ret50;
											}
											cx_ite18 = cx_ite18.next;
										}
										arb3.active = pact1;
										if(callbackset1 != null) {
											var cx_ite19 = this.prelisteners.head;
											while(cx_ite19 != null) {
												if(cx_ite19.elt.itype == 7) {
													callbackset1.COLLISIONstate = arb3.immState;
													callbackset1.SENSORstate = arb3.immState;
													callbackset1.FLUIDstate = arb3.immState;
												} else {
													callbackset1.COLLISIONstate = arb3.immState;
												}
												cx_ite19 = cx_ite19.next;
											}
										}
									} else if(callbackset1 == null) {
										if((arb3.immState & 4) == 0) {
											arb3.immState = 1;
										}
									} else {
										arb3.immState = callbackset1.COLLISIONstate;
									}
									cx_ite12 = cx_ite12.next;
								}
								cx_ite11 = cx_ite11.next;
							}
							if(anyimpure1 && (arb3.immState & 4) == 0) {
								if(arb3.b1.type == 2) {
									var o10 = arb3.b1;
									if(!o10.world) {
										o10.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o10.type == 3) {
											o10.kinematicDelaySleep = true;
										}
										if(o10.component.sleeping) {
											this.really_wake(o10,false);
										}
									}
								}
								if(arb3.b1.type == 2) {
									var o13 = arb3.b2;
									if(!o13.world) {
										o13.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o13.type == 3) {
											o13.kinematicDelaySleep = true;
										}
										if(o13.component.sleeping) {
											this.really_wake(o13,false);
										}
									}
								}
							}
						}
						if((arb3.immState & 1) != 0) {
							if(arb3.b1.type == 2 && arb3.b1.component.sleeping) {
								var o14 = arb3.b1;
								if(!o14.world) {
									o14.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o14.type == 3) {
										o14.kinematicDelaySleep = true;
									}
									if(o14.component.sleeping) {
										this.really_wake(o14,false);
									}
								}
							}
							if(arb3.b2.type == 2 && arb3.b2.component.sleeping) {
								var o15 = arb3.b2;
								if(!o15.world) {
									o15.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o15.type == 3) {
										o15.kinematicDelaySleep = true;
									}
									if(o15.component.sleeping) {
										this.really_wake(o15,false);
									}
								}
							}
						}
						if(arb3.sleeping) {
							arb3.sleeping = false;
							var ret51;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret51 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret51 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret51.next;
								ret51.next = null;
							}
							ret51.elt = arb3;
							var temp21 = ret51;
							temp21.next = carbs.head;
							carbs.head = temp21;
							carbs.modified = true;
							carbs.length++;
						}
						ret = arb3;
					} else if(first1) {
						var o16 = arb3;
						o16.userdef_dyn_fric = false;
						o16.userdef_stat_fric = false;
						o16.userdef_restitution = false;
						o16.userdef_rfric = false;
						o16.__ref_edge1 = o16.__ref_edge2 = null;
						o16.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o16;
						ret = null;
					} else {
						ret = arb3;
					}
				} else {
					ret = arb3;
				}
			} else {
				var xarb2;
				if(in_arb == null) {
					var ret52 = null;
					var cx_ite20 = (b1.arbiters.length < b2.arbiters.length ? b1 : b2).arbiters.head;
					while(cx_ite20 != null) {
						var arb4 = cx_ite20.elt;
						if(arb4.id == sa.id && arb4.di == sb.id) {
							ret52 = arb4;
							break;
						}
						cx_ite20 = cx_ite20.next;
					}
					xarb2 = ret52;
				} else {
					xarb2 = in_arb;
				}
				var first2 = xarb2 == null;
				var arb5;
				var swapped2 = false;
				if(first2) {
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb5 = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb5 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
				} else if(xarb2.sensorarb == null) {
					xarb2.cleared = true;
					var _this39 = xarb2.b1.arbiters;
					var pre5 = null;
					var cur6 = _this39.head;
					while(cur6 != null) {
						if(cur6.elt == xarb2) {
							var old6;
							var ret53;
							if(pre5 == null) {
								old6 = _this39.head;
								ret53 = old6.next;
								_this39.head = ret53;
								if(_this39.head == null) {
									_this39.pushmod = true;
								}
							} else {
								old6 = pre5.next;
								ret53 = old6.next;
								pre5.next = ret53;
								if(ret53 == null) {
									_this39.pushmod = true;
								}
							}
							var o17 = old6;
							o17.elt = null;
							o17.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o17;
							_this39.modified = true;
							_this39.length--;
							_this39.pushmod = true;
							break;
						}
						pre5 = cur6;
						cur6 = cur6.next;
					}
					var _this40 = xarb2.b2.arbiters;
					var pre6 = null;
					var cur7 = _this40.head;
					while(cur7 != null) {
						if(cur7.elt == xarb2) {
							var old7;
							var ret54;
							if(pre6 == null) {
								old7 = _this40.head;
								ret54 = old7.next;
								_this40.head = ret54;
								if(_this40.head == null) {
									_this40.pushmod = true;
								}
							} else {
								old7 = pre6.next;
								ret54 = old7.next;
								pre6.next = ret54;
								if(ret54 == null) {
									_this40.pushmod = true;
								}
							}
							var o18 = old7;
							o18.elt = null;
							o18.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o18;
							_this40.modified = true;
							_this40.length--;
							_this40.pushmod = true;
							break;
						}
						pre6 = cur7;
						cur7 = cur7.next;
					}
					if(xarb2.pair != null) {
						xarb2.pair.arb = null;
						xarb2.pair = null;
					}
					xarb2.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb5 = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb5 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					arb5.intchange = true;
					first2 = true;
					swapped2 = true;
				} else {
					arb5 = xarb2.sensorarb;
				}
				if(first2 || arb5.stamp != this.stamp || continuous) {
					arb5.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.testCollide(sa,sb)) {
						if(first2) {
							var di2 = sb.id;
							arb5.b1 = s1.body;
							arb5.ws1 = s1;
							arb5.b2 = s2.body;
							arb5.ws2 = s2;
							arb5.id = sa.id;
							arb5.di = di2;
							var _this41 = arb5.b1.arbiters;
							var ret55;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret55 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret55 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret55.next;
								ret55.next = null;
							}
							ret55.elt = arb5;
							var temp22 = ret55;
							temp22.next = _this41.head;
							_this41.head = temp22;
							_this41.modified = true;
							_this41.length++;
							var _this42 = arb5.b2.arbiters;
							var ret56;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret56 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret56 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret56.next;
								ret56.next = null;
							}
							ret56.elt = arb5;
							var temp23 = ret56;
							temp23.next = _this42.head;
							_this42.head = temp23;
							_this42.modified = true;
							_this42.length++;
							arb5.active = true;
							arb5.present = 0;
							arb5.cleared = false;
							arb5.sleeping = false;
							arb5.fresh = false;
							arb5.presentable = false;
							var _this43 = this.s_arbiters;
							var ret57;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret57 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret57 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret57.next;
								ret57.next = null;
							}
							ret57.elt = arb5;
							var temp24 = ret57;
							temp24.next = _this43.head;
							_this43.head = temp24;
							_this43.modified = true;
							_this43.length++;
							arb5.fresh = !swapped2;
						} else {
							arb5.fresh = arb5.up_stamp < this.stamp - 1 || arb5.endGenerated == this.stamp && continuous;
						}
						arb5.up_stamp = arb5.stamp;
						if(arb5.fresh || (arb5.immState & 4) == 0) {
							arb5.immState = 1;
							var anyimpure2 = false;
							var arbs12 = arb5.ws1.id > arb5.ws2.id ? arb5.ws2 : arb5.ws1;
							var arbs22 = arb5.ws1.id > arb5.ws2.id ? arb5.ws1 : arb5.ws2;
							var _this44 = this.mrca1;
							while(_this44.head != null) {
								var ret58 = _this44.head;
								_this44.head = ret58.next;
								ret58.elt = null;
								ret58.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret58;
								if(_this44.head == null) {
									_this44.pushmod = true;
								}
								_this44.modified = true;
								_this44.length--;
							}
							_this44.pushmod = true;
							var _this45 = this.mrca2;
							while(_this45.head != null) {
								var ret59 = _this45.head;
								_this45.head = ret59.next;
								ret59.elt = null;
								ret59.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret59;
								if(_this45.head == null) {
									_this45.pushmod = true;
								}
								_this45.modified = true;
								_this45.length--;
							}
							_this45.pushmod = true;
							if(arbs12.cbSet != null) {
								var _this46 = this.mrca1;
								var ret60;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret60 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret60 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret60.next;
									ret60.next = null;
								}
								ret60.elt = arbs12;
								var temp25 = ret60;
								temp25.next = _this46.head;
								_this46.head = temp25;
								_this46.modified = true;
								_this46.length++;
							}
							if(arbs12.body.cbSet != null) {
								var _this47 = this.mrca1;
								var ret61;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret61 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret61 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret61.next;
									ret61.next = null;
								}
								ret61.elt = arbs12.body;
								var temp26 = ret61;
								temp26.next = _this47.head;
								_this47.head = temp26;
								_this47.modified = true;
								_this47.length++;
							}
							if(arbs22.cbSet != null) {
								var _this48 = this.mrca2;
								var ret62;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret62 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret62 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret62.next;
									ret62.next = null;
								}
								ret62.elt = arbs22;
								var temp27 = ret62;
								temp27.next = _this48.head;
								_this48.head = temp27;
								_this48.modified = true;
								_this48.length++;
							}
							if(arbs22.body.cbSet != null) {
								var _this49 = this.mrca2;
								var ret63;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret63 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret63 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret63.next;
									ret63.next = null;
								}
								ret63.elt = arbs22.body;
								var temp28 = ret63;
								temp28.next = _this49.head;
								_this49.head = temp28;
								_this49.modified = true;
								_this49.length++;
							}
							var c12 = arbs12.body.compound;
							var c22 = arbs22.body.compound;
							while(c12 != c22) if((c12 == null ? 0 : c12.depth) < (c22 == null ? 0 : c22.depth)) {
								if(c22.cbSet != null) {
									var _this50 = this.mrca2;
									var ret64;
									if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
										ret64 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
									} else {
										ret64 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret64.next;
										ret64.next = null;
									}
									ret64.elt = c22;
									var temp29 = ret64;
									temp29.next = _this50.head;
									_this50.head = temp29;
									_this50.modified = true;
									_this50.length++;
								}
								c22 = c22.compound;
							} else {
								if(c12.cbSet != null) {
									var _this51 = this.mrca1;
									var ret65;
									if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
										ret65 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
									} else {
										ret65 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret65.next;
										ret65.next = null;
									}
									ret65.elt = c12;
									var temp30 = ret65;
									temp30.next = _this51.head;
									_this51.head = temp30;
									_this51.modified = true;
									_this51.length++;
								}
								c12 = c12.compound;
							}
							var cx_ite21 = this.mrca1.head;
							while(cx_ite21 != null) {
								var i12 = cx_ite21.elt;
								var cx_ite22 = this.mrca2.head;
								while(cx_ite22 != null) {
									var i22 = cx_ite22.elt;
									var cb12 = i12.cbSet;
									var cb22 = i22.cbSet;
									var ret66 = null;
									var cx_ite23 = (cb12.cbpairs.length < cb22.cbpairs.length ? cb12.cbpairs : cb22.cbpairs).head;
									while(cx_ite23 != null) {
										var p4 = cx_ite23.elt;
										if(p4.a == cb12 && p4.b == cb22 || p4.a == cb22 && p4.b == cb12) {
											ret66 = p4;
											break;
										}
										cx_ite23 = cx_ite23.next;
									}
									if(ret66 == null) {
										var ret67;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret67 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret67 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret67.next;
											ret67.next = null;
										}
										ret67.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb12,cb22)) {
											ret67.a = cb12;
											ret67.b = cb22;
										} else {
											ret67.a = cb22;
											ret67.b = cb12;
										}
										ret66 = ret67;
										cb12.cbpairs.add(ret66);
										if(cb22 != cb12) {
											cb22.cbpairs.add(ret66);
										}
									}
									if(ret66.zip_listeners) {
										ret66.zip_listeners = false;
										ret66.__validate();
									}
									if(ret66.listeners.head == null) {
										cx_ite22 = cx_ite22.next;
										continue;
									}
									var callbackset2 = null;
									var ncallbackset2 = null;
									var _this52 = this.prelisteners;
									while(_this52.head != null) {
										var ret68 = _this52.head;
										_this52.head = ret68.next;
										ret68.elt = null;
										ret68.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret68;
										if(_this52.head == null) {
											_this52.pushmod = true;
										}
										_this52.modified = true;
										_this52.length--;
									}
									_this52.pushmod = true;
									var lite2 = null;
									var ret69 = null;
									var cx_ite24 = (cb12.cbpairs.length < cb22.cbpairs.length ? cb12.cbpairs : cb22.cbpairs).head;
									while(cx_ite24 != null) {
										var p5 = cx_ite24.elt;
										if(p5.a == cb12 && p5.b == cb22 || p5.a == cb22 && p5.b == cb12) {
											ret69 = p5;
											break;
										}
										cx_ite24 = cx_ite24.next;
									}
									if(ret69 == null) {
										var ret70;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret70 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret70 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret70.next;
											ret70.next = null;
										}
										ret70.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb12,cb22)) {
											ret70.a = cb12;
											ret70.b = cb22;
										} else {
											ret70.a = cb22;
											ret70.b = cb12;
										}
										ret69 = ret70;
										cb12.cbpairs.add(ret69);
										if(cb22 != cb12) {
											cb22.cbpairs.add(ret69);
										}
									}
									if(ret69.zip_listeners) {
										ret69.zip_listeners = false;
										ret69.__validate();
									}
									var cx_ite25 = ret69.listeners.head;
									while(cx_ite25 != null) {
										var x5 = cx_ite25.elt;
										if(x5.event == 5) {
											if((x5.itype & 2) != 0) {
												var _this53 = _gthis.prelisteners;
												var ret71;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret71 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret71 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret71.next;
													ret71.next = null;
												}
												ret71.elt = x5;
												var temp31 = ret71;
												if(lite2 == null) {
													temp31.next = _this53.head;
													_this53.head = temp31;
												} else {
													temp31.next = lite2.next;
													lite2.next = temp31;
												}
												_this53.pushmod = _this53.modified = true;
												_this53.length++;
												lite2 = temp31;
												if(!anyimpure2) {
													anyimpure2 = !x5.pure;
												} else {
													anyimpure2 = true;
												}
											}
										}
										cx_ite25 = cx_ite25.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite22 = cx_ite22.next;
										continue;
									}
									callbackset2 = zpp_$nape_phys_ZPP_$Interactor.get(i12,i22);
									if(callbackset2 == null) {
										ncallbackset2 = zpp_$nape_space_ZPP_$CallbackSet.get(i12,i22);
										this.add_callbackset(ncallbackset2);
									}
									if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & 4) == 0) {
										if(ncallbackset2 != null) {
											callbackset2 = ncallbackset2;
										}
										if(callbackset2 != null) {
											var cx_ite26 = this.prelisteners.head;
											while(cx_ite26 != null) {
												if(cx_ite26.elt.itype == 7) {
													callbackset2.COLLISIONstamp = this.stamp;
													callbackset2.SENSORstamp = this.stamp;
													callbackset2.FLUIDstamp = this.stamp;
												} else {
													callbackset2.SENSORstamp = this.stamp;
												}
												cx_ite26 = cx_ite26.next;
											}
										}
										var pact3 = arb5.active;
										arb5.active = true;
										this.precb.zpp_inner.pre_arbiter = arb5;
										this.precb.zpp_inner.set = callbackset2;
										var cx_ite27 = this.prelisteners.head;
										while(cx_ite27 != null) {
											var listener2 = cx_ite27.elt;
											this.precb.zpp_inner.listener = listener2;
											var cb4 = this.precb.zpp_inner;
											var o19 = callbackset2.int1;
											var o22 = callbackset2.int2;
											var ret72;
											var _this54 = listener2.options1;
											var xs4 = o19.cbTypes;
											if(_this54.nonemptyintersection(xs4,_this54.includes) && !_this54.nonemptyintersection(xs4,_this54.excludes)) {
												var _this55 = listener2.options2;
												var xs5 = o22.cbTypes;
												if(_this55.nonemptyintersection(xs5,_this55.includes)) {
													ret72 = !_this55.nonemptyintersection(xs5,_this55.excludes);
												} else {
													ret72 = false;
												}
											} else {
												ret72 = false;
											}
											if(ret72) {
												cb4.int1 = o19;
												cb4.int2 = o22;
											} else {
												cb4.int1 = o22;
												cb4.int2 = o19;
											}
											this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
											var ret73 = listener2.handlerp(this.precb);
											if(ret73 != null) {
												var ret74;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret73 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret74 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret73 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret74 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														if(ret73 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
															ret74 = 6;
														} else {
															ret74 = 2;
														}
													}
												}
												arb5.immState = ret74;
											}
											cx_ite27 = cx_ite27.next;
										}
										arb5.active = pact3;
										if(callbackset2 != null) {
											var cx_ite28 = this.prelisteners.head;
											while(cx_ite28 != null) {
												if(cx_ite28.elt.itype == 7) {
													callbackset2.COLLISIONstate = arb5.immState;
													callbackset2.SENSORstate = arb5.immState;
													callbackset2.FLUIDstate = arb5.immState;
												} else {
													callbackset2.SENSORstate = arb5.immState;
												}
												cx_ite28 = cx_ite28.next;
											}
										}
									} else if(callbackset2 == null) {
										if((arb5.immState & 4) == 0) {
											arb5.immState = 1;
										}
									} else {
										arb5.immState = callbackset2.SENSORstate;
									}
									cx_ite22 = cx_ite22.next;
								}
								cx_ite21 = cx_ite21.next;
							}
							if(anyimpure2 && (arb5.immState & 4) == 0) {
								if(arb5.b1.type != 1) {
									var o20 = arb5.b1;
									if(!o20.world) {
										o20.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o20.type == 3) {
											o20.kinematicDelaySleep = true;
										}
										if(o20.component.sleeping) {
											this.really_wake(o20,false);
										}
									}
								}
								if(arb5.b2.type != 1) {
									var o23 = arb5.b2;
									if(!o23.world) {
										o23.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o23.type == 3) {
											o23.kinematicDelaySleep = true;
										}
										if(o23.component.sleeping) {
											this.really_wake(o23,false);
										}
									}
								}
							}
						}
						if(arb5.sleeping) {
							arb5.sleeping = false;
							var _this56 = this.s_arbiters;
							var ret75;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret75 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret75 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret75.next;
								ret75.next = null;
							}
							ret75.elt = arb5;
							var temp32 = ret75;
							temp32.next = _this56.head;
							_this56.head = temp32;
							_this56.modified = true;
							_this56.length++;
						}
						ret = arb5;
					} else if(first2) {
						var o24 = arb5;
						o24.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o24;
						ret = null;
					} else {
						ret = arb5;
					}
				} else {
					ret = arb5;
				}
			}
		}
		return ret;
	}
	,MRCA_chains: function(s1,s2) {
		var _this = this.mrca1;
		while(_this.head != null) {
			var ret = _this.head;
			_this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret;
			if(_this.head == null) {
				_this.pushmod = true;
			}
			_this.modified = true;
			_this.length--;
		}
		_this.pushmod = true;
		var _this1 = this.mrca2;
		while(_this1.head != null) {
			var ret1 = _this1.head;
			_this1.head = ret1.next;
			ret1.elt = null;
			ret1.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1;
			if(_this1.head == null) {
				_this1.pushmod = true;
			}
			_this1.modified = true;
			_this1.length--;
		}
		_this1.pushmod = true;
		if(s1.cbSet != null) {
			var _this2 = this.mrca1;
			var ret2;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.elt = s1;
			var temp = ret2;
			temp.next = _this2.head;
			_this2.head = temp;
			_this2.modified = true;
			_this2.length++;
		}
		if(s1.body.cbSet != null) {
			var _this3 = this.mrca1;
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = s1.body;
			var temp1 = ret3;
			temp1.next = _this3.head;
			_this3.head = temp1;
			_this3.modified = true;
			_this3.length++;
		}
		if(s2.cbSet != null) {
			var _this4 = this.mrca2;
			var ret4;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret4 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = s2;
			var temp2 = ret4;
			temp2.next = _this4.head;
			_this4.head = temp2;
			_this4.modified = true;
			_this4.length++;
		}
		if(s2.body.cbSet != null) {
			var _this5 = this.mrca2;
			var ret5;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret5 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret5.next;
				ret5.next = null;
			}
			ret5.elt = s2.body;
			var temp3 = ret5;
			temp3.next = _this5.head;
			_this5.head = temp3;
			_this5.modified = true;
			_this5.length++;
		}
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) if((c1 == null ? 0 : c1.depth) < (c2 == null ? 0 : c2.depth)) {
			if(c2.cbSet != null) {
				var _this6 = this.mrca2;
				var ret6;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
					ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
				} else {
					ret6 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret6.next;
					ret6.next = null;
				}
				ret6.elt = c2;
				var temp4 = ret6;
				temp4.next = _this6.head;
				_this6.head = temp4;
				_this6.modified = true;
				_this6.length++;
			}
			c2 = c2.compound;
		} else {
			if(c1.cbSet != null) {
				var _this7 = this.mrca1;
				var ret7;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
					ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
				} else {
					ret7 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret7.next;
					ret7.next = null;
				}
				ret7.elt = c1;
				var temp5 = ret7;
				temp5.next = _this7.head;
				_this7.head = temp5;
				_this7.modified = true;
				_this7.length++;
			}
			c1 = c1.compound;
		}
	}
	,__class__: zpp_$nape_space_ZPP_$Space
};
var zpp_$nape_space_ZPP_$SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["zpp_nape.space.ZPP_SweepData"] = zpp_$nape_space_ZPP_$SweepData;
zpp_$nape_space_ZPP_$SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_$nape_space_ZPP_$SweepData.prototype = {
	__class__: zpp_$nape_space_ZPP_$SweepData
};
var zpp_$nape_space_ZPP_$SweepPhase = function(space) {
	this.list = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
$hxClasses["zpp_nape.space.ZPP_SweepPhase"] = zpp_$nape_space_ZPP_$SweepPhase;
zpp_$nape_space_ZPP_$SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_$nape_space_ZPP_$SweepPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$SweepPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	__insert: function(shape) {
		var dat;
		if(zpp_$nape_space_ZPP_$SweepData.zpp_pool == null) {
			dat = new zpp_$nape_space_ZPP_$SweepData();
		} else {
			dat = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
			zpp_$nape_space_ZPP_$SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) {
			this.list.prev = dat;
		}
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) {
			this.list = dat.next;
		} else {
			dat.prev.next = dat.next;
		}
		if(dat.next != null) {
			dat.next.prev = dat.prev;
		}
		shape.sweep = null;
		dat.prev = null;
		dat.shape = null;
		dat.aabb = null;
		dat.next = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = dat;
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			var a = this.list.next;
			while(a != null) {
				var n = a.next;
				var b = a.prev;
				if(a.aabb.minx > b.aabb.minx) {
					a = n;
					continue;
				}
				while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
				var prev = a.prev;
				prev.next = a.next;
				if(a.next != null) {
					a.next.prev = prev;
				}
				if(b.prev == null) {
					a.prev = null;
					this.list = a;
					a.next = b;
					b.prev = a;
				} else {
					a.prev = b.prev;
					b.prev = a;
					a.prev.next = a;
					a.next = b;
				}
				a = n;
			}
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) {
						break;
					}
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == 1 && b2.type == 1) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					var _this = s1.aabb;
					var x = s2.aabb;
					if(!(x.miny > _this.maxy || _this.miny > x.maxy)) {
						if(discrete) {
							space.narrowPhase(s1,s2,b1.type != 2 || b2.type != 2,null,false);
						} else {
							space.continuousEvent(s1,s2,b1.type != 2 || b2.type != 2,null,false);
						}
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,clear: function() {
		while(this.list != null) {
			this.list.shape.removedFromSpace();
			this.__remove(this.list.shape);
		}
	}
	,__class__: zpp_$nape_space_ZPP_$SweepPhase
});
var zpp_$nape_util_ZNPList_$ZPP_$CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CallbackSet"] = zpp_$nape_util_ZNPList_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPList_$ZPP_$Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Shape"] = zpp_$nape_util_ZNPList_$ZPP_$Shape;
zpp_$nape_util_ZNPList_$ZPP_$Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_$nape_util_ZNPList_$ZPP_$Shape.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Shape
};
var zpp_$nape_util_ZNPList_$ZPP_$Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Body"] = zpp_$nape_util_ZNPList_$ZPP_$Body;
zpp_$nape_util_ZNPList_$ZPP_$Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_$nape_util_ZNPList_$ZPP_$Body.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Body
};
var zpp_$nape_util_ZNPList_$ZPP_$Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Compound"] = zpp_$nape_util_ZNPList_$ZPP_$Compound;
zpp_$nape_util_ZNPList_$ZPP_$Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
zpp_$nape_util_ZNPList_$ZPP_$Compound.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Compound();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Compound
};
var zpp_$nape_util_ZNPList_$ZPP_$Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Arbiter"] = zpp_$nape_util_ZNPList_$ZPP_$Arbiter;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			ret.elt = null;
			ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSetPair"] = zpp_$nape_util_ZNPList_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBPair"] = zpp_$nape_util_ZNPList_$ZPP_$AABBPair;
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPList_$ZPP_$Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Edge"] = zpp_$nape_util_ZNPList_$ZPP_$Edge;
zpp_$nape_util_ZNPList_$ZPP_$Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_$nape_util_ZNPList_$ZPP_$Edge.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Edge
};
var zpp_$nape_util_ZNPList_$ZPP_$Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Component"] = zpp_$nape_util_ZNPList_$ZPP_$Component;
zpp_$nape_util_ZNPList_$ZPP_$Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_$nape_util_ZNPList_$ZPP_$Component.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Component
};
var zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Listener"] = zpp_$nape_util_ZNPList_$ZPP_$Listener;
zpp_$nape_util_ZNPList_$ZPP_$Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_$nape_util_ZNPList_$ZPP_$Listener.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Listener
};
var zpp_$nape_util_ZNPList_$ZPP_$ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ColArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = this.head;
					ret = old.next;
					this.head = ret;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPList_$ZPP_$ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ToiEvent"] = zpp_$nape_util_ZNPList_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPList_$ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ConvexResult"] = zpp_$nape_util_ZNPList_$ConvexResult;
zpp_$nape_util_ZNPList_$ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
zpp_$nape_util_ZNPList_$ConvexResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ConvexResult
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomPoly"] = zpp_$nape_util_ZNPList_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPList_$RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_RayResult"] = zpp_$nape_util_ZNPList_$RayResult;
zpp_$nape_util_ZNPList_$RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_$nape_util_ZNPList_$RayResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$RayResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbType = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbType"] = zpp_$nape_util_ZNPNode_$ZPP_$CbType;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
zpp_$nape_util_ZNPNode_$ZPP_$CbType.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbType
};
var zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CallbackSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Shape = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Shape"] = zpp_$nape_util_ZNPNode_$ZPP_$Shape;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_$nape_util_ZNPNode_$ZPP_$Shape.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Shape
};
var zpp_$nape_util_ZNPNode_$ZPP_$Body = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Body"] = zpp_$nape_util_ZNPNode_$ZPP_$Body;
zpp_$nape_util_ZNPNode_$ZPP_$Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_$nape_util_ZNPNode_$ZPP_$Body.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Body
};
var zpp_$nape_util_ZNPNode_$ZPP_$Constraint = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Constraint"] = zpp_$nape_util_ZNPNode_$ZPP_$Constraint;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPNode_$ZPP_$Compound = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Compound"] = zpp_$nape_util_ZNPNode_$ZPP_$Compound;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
zpp_$nape_util_ZNPNode_$ZPP_$Compound.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Compound
};
var zpp_$nape_util_ZNPNode_$ZPP_$Arbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Arbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionListener"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSet;
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Interactor = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Interactor"] = zpp_$nape_util_ZNPNode_$ZPP_$Interactor;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPNode_$ZPP_$BodyListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_BodyListener"] = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener;
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSetPair"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$Vec2 = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Vec2"] = zpp_$nape_util_ZNPNode_$ZPP_$Vec2;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Vec2
};
var zpp_$nape_util_ZNPNode_$ZPP_$AABBPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBPair"] = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair;
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$Edge = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Edge"] = zpp_$nape_util_ZNPNode_$ZPP_$Edge;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_$nape_util_ZNPNode_$ZPP_$Edge.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Edge
};
var zpp_$nape_util_ZNPNode_$ZPP_$Component = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Component"] = zpp_$nape_util_ZNPNode_$ZPP_$Component;
zpp_$nape_util_ZNPNode_$ZPP_$Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_$nape_util_ZNPNode_$ZPP_$Component.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Component
};
var zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$Listener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Listener"] = zpp_$nape_util_ZNPNode_$ZPP_$Listener;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_$nape_util_ZNPNode_$ZPP_$Listener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Listener
};
var zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ColArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ToiEvent"] = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPNode_$ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ConvexResult"] = zpp_$nape_util_ZNPNode_$ConvexResult;
zpp_$nape_util_ZNPNode_$ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
zpp_$nape_util_ZNPNode_$ConvexResult.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ConvexResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomPoly"] = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPNode_$RayResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_RayResult"] = zpp_$nape_util_ZNPNode_$RayResult;
zpp_$nape_util_ZNPNode_$RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_$nape_util_ZNPNode_$RayResult.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$RayResult
};
var zpp_$nape_util_ZPP_$MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape_geom_Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
$hxClasses["zpp_nape.util.ZPP_MixVec2List"] = zpp_$nape_util_ZPP_$MixVec2List;
zpp_$nape_util_ZPP_$MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_$nape_util_ZPP_$MixVec2List.get = function(list,immutable) {
	if(immutable == null) {
		immutable = false;
	}
	var ret = new zpp_$nape_util_ZPP_$MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_$nape_util_ZPP_$MixVec2List.__super__ = nape_geom_Vec2List;
zpp_$nape_util_ZPP_$MixVec2List.prototype = $extend(nape_geom_Vec2List.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) break;
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) break;
		}
		var _this = this.at_ite;
		if(_this.outer == null) {
			_this.outer = new nape_geom_Vec2();
			var o = _this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			_this.outer.zpp_inner = _this;
		}
		return _this.outer;
	}
	,push: function(obj) {
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.inner.add(obj.zpp_inner);
			} else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,__class__: zpp_$nape_util_ZPP_$MixVec2List
});
var zpp_$nape_util_ZPP_$ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConstraintList"] = zpp_$nape_util_ZPP_$ConstraintList;
zpp_$nape_util_ZPP_$ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_$nape_util_ZPP_$ConstraintList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_constraint_ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConstraintList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ConstraintList
};
var zpp_$nape_util_ZPP_$BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_BodyList"] = zpp_$nape_util_ZPP_$BodyList;
zpp_$nape_util_ZPP_$BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_$nape_util_ZPP_$BodyList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_BodyList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$BodyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$BodyList
};
var zpp_$nape_util_ZPP_$InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
$hxClasses["zpp_nape.util.ZPP_InteractorList"] = zpp_$nape_util_ZPP_$InteractorList;
zpp_$nape_util_ZPP_$InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
zpp_$nape_util_ZPP_$InteractorList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$InteractorList
};
var zpp_$nape_util_ZPP_$CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CompoundList"] = zpp_$nape_util_ZPP_$CompoundList;
zpp_$nape_util_ZPP_$CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
zpp_$nape_util_ZPP_$CompoundList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CompoundList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$CompoundList
};
var zpp_$nape_util_ZPP_$ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ListenerList"] = zpp_$nape_util_ZPP_$ListenerList;
zpp_$nape_util_ZPP_$ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_$nape_util_ZPP_$ListenerList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ListenerList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ListenerList
};
var zpp_$nape_util_ZPP_$CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CbTypeList"] = zpp_$nape_util_ZPP_$CbTypeList;
zpp_$nape_util_ZPP_$CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
zpp_$nape_util_ZPP_$CbTypeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CbTypeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$CbTypeList
};
var zpp_$nape_util_ZPP_$Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_Vec2List"] = zpp_$nape_util_ZPP_$Vec2List;
zpp_$nape_util_ZPP_$Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_$nape_util_ZPP_$Vec2List.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$Vec2List
};
var zpp_$nape_util_ZPP_$GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
$hxClasses["zpp_nape.util.ZPP_GeomPolyList"] = zpp_$nape_util_ZPP_$GeomPolyList;
zpp_$nape_util_ZPP_$GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_$nape_util_ZPP_$GeomPolyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$GeomPolyList
};
var zpp_$nape_util_ZPP_$RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
$hxClasses["zpp_nape.util.ZPP_RayResultList"] = zpp_$nape_util_ZPP_$RayResultList;
zpp_$nape_util_ZPP_$RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_$nape_util_ZPP_$RayResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$RayResultList
};
var zpp_$nape_util_ZPP_$ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
$hxClasses["zpp_nape.util.ZPP_ConvexResultList"] = zpp_$nape_util_ZPP_$ConvexResultList;
zpp_$nape_util_ZPP_$ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
zpp_$nape_util_ZPP_$ConvexResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ConvexResultList
};
var zpp_$nape_util_ZPP_$EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
$hxClasses["zpp_nape.util.ZPP_EdgeList"] = zpp_$nape_util_ZPP_$EdgeList;
zpp_$nape_util_ZPP_$EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_$nape_util_ZPP_$EdgeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$EdgeList
};
var zpp_$nape_util_ZPP_$ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ShapeList"] = zpp_$nape_util_ZPP_$ShapeList;
zpp_$nape_util_ZPP_$ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_$nape_util_ZPP_$ShapeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_shape_ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ShapeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ShapeList
};
var zpp_$nape_util_ZPP_$InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
$hxClasses["zpp_nape.util.ZPP_InteractionGroupList"] = zpp_$nape_util_ZPP_$InteractionGroupList;
zpp_$nape_util_ZPP_$InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
zpp_$nape_util_ZPP_$InteractionGroupList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$InteractionGroupList
};
var zpp_$nape_util_ZPP_$ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ArbiterList"] = zpp_$nape_util_ZPP_$ArbiterList;
zpp_$nape_util_ZPP_$ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_$nape_util_ZPP_$ArbiterList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_dynamics_ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ArbiterList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ArbiterList
};
var zpp_$nape_util_ZPP_$ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
};
$hxClasses["zpp_nape.util.ZPP_ContactList"] = zpp_$nape_util_ZPP_$ContactList;
zpp_$nape_util_ZPP_$ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_$nape_util_ZPP_$ContactList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ContactList
};
var zpp_$nape_util_ZPP_$PubPool = function() { };
$hxClasses["zpp_nape.util.ZPP_PubPool"] = zpp_$nape_util_ZPP_$PubPool;
zpp_$nape_util_ZPP_$PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSetPair"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.prototype = {
	__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
				x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
			} else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.next;
				}
			} else {
				break;
			}
		}
		if(x == null) {
			return cur;
		} else {
			if(x.parent == null) {
				x.colour = 1;
			} else {
				x.colour = 0;
				if(x.parent.colour == 0) {
					this.__fix_dbl_red(x);
				}
			}
			return x;
		}
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSet"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.prototype = {
	empty: function() {
		return this.parent == null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else {
			cur = cur.next;
		}
		return cur;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			cur = cur.next;
		} else {
			break;
		}
		return cur;
	}
	,remove: function(obj) {
		this.remove_node(this.find(obj));
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) {
				this.swapped(cur.data,sm.data);
			}
			cur = sm;
		}
		var child = cur.prev == null ? cur.next : cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) {
				child.colour = 1;
			} else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) {
							parent.colour = 1;
						} else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) {
			this.parent = child;
		} else if(par.prev == cur) {
			par.prev = child;
		} else {
			par.next = child;
		}
		if(child != null) {
			child.parent = par;
		}
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) {
				trl.parent = negred;
			}
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) {
				this.swapped(parent.data,nr.data);
			}
			nr.prev = trr;
			if(trr != null) {
				trr.parent = nr;
			}
			nr.next = parent.next;
			if(parent.next != null) {
				parent.next.parent = nr;
			}
			parent.next = nr;
			if(nr != null) {
				nr.parent = parent;
			}
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) {
				trl1.parent = negred;
			}
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) {
				this.swapped(parent.data,nr1.data);
			}
			nr1.next = trr1;
			if(trr1 != null) {
				trr1.parent = nr1;
			}
			nr1.prev = parent.prev;
			if(parent.prev != null) {
				parent.prev.parent = nr1;
			}
			parent.prev = nr1;
			if(nr1 != null) {
				nr1.parent = parent;
			}
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) {
			this.__fix_dbl_red(child.prev);
		} else if(child.next != null && child.next.colour == 0) {
			this.__fix_dbl_red(child.next);
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
			x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
		} else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		if(this.parent == null) {
			this.parent = x;
		} else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		}
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "default.frag.textured.gl3.glsl", data : "I3ZlcnNpb24gMzMwIGNvcmUNCg0KdW5pZm9ybSBzYW1wbGVyMkQgdGV4MDsNCmluIHZlYzIgdGNvb3JkOw0KaW4gdmVjNCBjb2xvcjsNCm91dCB2ZWM0IGZyYWc7DQoNCnZvaWQgbWFpbigpIHsNCiAgICB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZSh0ZXgwLCB0Y29vcmQpOw0KICAgIGZyYWcgPSBjb2xvciAqIHRleGNvbG9yOw0KfQ"},{ name : "version", data : "MS4wLjAtYWxwaGEuMw"},{ name : "default.vert.gl3.glsl", data : "I3ZlcnNpb24gMzMwIGNvcmUNCg0KbGF5b3V0KGxvY2F0aW9uID0gMCkgaW4gdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsNCmxheW91dChsb2NhdGlvbiA9IDEpIGluIHZlYzIgdmVydGV4VENvb3JkOw0KbGF5b3V0KGxvY2F0aW9uID0gMikgaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsNCmxheW91dChsb2NhdGlvbiA9IDMpIGluIHZlYzMgdmVydGV4Tm9ybWFsOw0KDQpvdXQgdmVjMiB0Y29vcmQ7DQpvdXQgdmVjNCBjb2xvcjsNCg0KdW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7DQp1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4Ow0KDQp2b2lkIG1haW4odm9pZCkgew0KDQogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsNCiAgICB0Y29vcmQgPSB2ZXJ0ZXhUQ29vcmQ7DQogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsNCg0KfQ"},{ name : "default.vert.glsl", data : "YXR0cmlidXRlIHZlYzMgdmVydGV4UG9zaXRpb247DQphdHRyaWJ1dGUgdmVjMiB2ZXJ0ZXhUQ29vcmQ7DQphdHRyaWJ1dGUgdmVjNCB2ZXJ0ZXhDb2xvcjsNCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleE5vcm1hbDsNCg0KdmFyeWluZyB2ZWMyIHRjb29yZDsNCnZhcnlpbmcgdmVjNCBjb2xvcjsNCg0KdW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7DQp1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4Ow0KDQp2b2lkIG1haW4odm9pZCkgew0KDQogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsNCiAgICB0Y29vcmQgPSB2ZXJ0ZXhUQ29vcmQ7DQogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsNCiAgICAgICAgLy9obW0hIEkgdGhpbmsgc2hhZGVycyBhcmUgY29tcGlsZWQgb3B0aW1pc2VkLCByZW1vdmluZyB1bnVzZWQgdmFsdWVzIHdoaWNoIG1lYW5zDQogICAgICAgIC8vdGhhdCB0aGUgc2hhZGVycyBnZXRWZXJ0ZXhOb3JtYWwgYXR0cmlidXRlIHJldHVybnMgaW52YWxpZCAoLTEpIHZhbHVlcyENCiAgICB2ZWMzIG4gPSB2ZXJ0ZXhOb3JtYWw7DQogICAgZ2xfUG9pbnRTaXplID0gMS4wOw0KDQp9"},{ name : "default.frag.bitmapfont.gl3.glsl", data : "I3ZlcnNpb24gMzMwIGNvcmUNCg0KI2RlZmluZSBPVVRMSU5FIDENCiNkZWZpbmUgR0xPVyAxDQojZGVmaW5lIFNVUEVSU0FNUExFIDENCg0KdW5pZm9ybSBzYW1wbGVyMkQgdGV4MDsNCmluIHZlYzIgdGNvb3JkOw0KaW4gdmVjNCBjb2xvcjsNCm91dCB2ZWM0IGZyYWc7DQoNCnVuaWZvcm0gZmxvYXQgc21vb3RobmVzczsNCnVuaWZvcm0gZmxvYXQgdGhpY2tuZXNzOw0KDQp1bmlmb3JtIHZlYzQgb3V0bGluZV9jb2xvcjsNCnVuaWZvcm0gZmxvYXQgb3V0bGluZTsNCg0KdW5pZm9ybSB2ZWM0IGdsb3dfY29sb3I7DQp1bmlmb3JtIGZsb2F0IGdsb3dfdGhyZXNob2xkOw0KdW5pZm9ybSBmbG9hdCBnbG93X2Ftb3VudDsNCg0KDQpmbG9hdCBlZGdlKGZsb2F0IHZhbHVlLCBmbG9hdCBhbW91bnQsIGZsb2F0IHQpIHsNCiAgICByZXR1cm4gc21vb3Roc3RlcCh2YWx1ZSAtIGFtb3VudCwgdmFsdWUgKyBhbW91bnQsIHQpOw0KfQ0KDQpmbG9hdCBnZXQodmVjMiB1diwgZmxvYXQgd2lkdGgpIHsNCiAgICBmbG9hdCB0ZXhhID0gdGV4dHVyZSh0ZXgwLCB1dikuYTsNCiAgICByZXR1cm4gc21vb3Roc3RlcCgwLjUgLSB3aWR0aCwgMC41ICsgd2lkdGgsIHRleGEpOw0KfQ0KDQp2b2lkIG1haW4oKSB7DQoNCi8vYmFzaWMgc2RmDQoNCiAgICBmbG9hdCBkaXN0ID0gdGV4dHVyZSh0ZXgwLCB0Y29vcmQpLmE7DQogICAgICAgIC8vZndpZHRoIGtlZXBzIHdpZHRoIHNpbWlsYXIgZGVzcGl0ZSBzY2FsaW5nLCBzZWUgYmVsb3cgZm9yIG9wdGlvbnMNCiAgICBmbG9hdCBzbW9vdGhhbXQgPSBzbW9vdGhuZXNzICogZndpZHRoKGRpc3QpOw0KICAgIC8vIGZsb2F0IHNtb290aGFtdCA9IHNtb290aG5lc3MgKiBsZW5ndGgodmVjMihkRmR4KGRpc3QpLCBkRmR5KGRpc3QpKSk7DQoNCiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIGVkZ2Ugc21vb3RoaW5nDQogICAgZmxvYXQgYWxwaGEgPSBlZGdlKDEuMCAtIHRoaWNrbmVzcywgc21vb3RoYW10LCBkaXN0KTsNCg0KLy9zdXBlciBzYW1wbGluZw0KDQogICAgICAgICNpZiBTVVBFUlNBTVBMRSA9PSAxDQoNCiAgICAgICAgICAgICAgICAvL3RoZXNlIHZhbHVlcyBjYW4gYmUgZXhwb3NlZCBsYXRlcg0KICAgICAgICAgICAgICAgIC8vdGhlIGN1cnJlbnQgYmVpbmcgMC4yNS9zcXJ0KDIpDQogICAgICAgICAgICBmbG9hdCBmYWN0b3IgPSAwLjE3Njc3NjY5NTM7DQogICAgICAgICAgICBmbG9hdCBzYW1wbGVhbXQgPSAwLjU7DQogICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgc2ltcGxlIGJveCBmaWx0ZXIgYXJvdW5kIHRoZSBwb2ludCwNCiAgICAgICAgICAgICAgICAvL3dlIHVzZSBhIHNlcGFyYXRlIHdpZHRoIGZvciBub3cNCiAgICAgICAgICAgIGZsb2F0IHNhbXBsZXcgPSBzYW1wbGVhbXQgKiBmd2lkdGgoZGlzdCk7DQogICAgICAgICAgICB2ZWMyIHNhbXBsZW9mZnNldCA9IGZhY3RvciAqIChkRmR4KHRjb29yZCkgKyBkRmR5KHRjb29yZCkpOw0KICAgICAgICAgICAgdmVjNCBmbHRyID0gdmVjNCh0Y29vcmQgLSBzYW1wbGVvZmZzZXQsIHRjb29yZCArIHNhbXBsZW9mZnNldCk7DQoNCiAgICAgICAgICAgIGZsb2F0IHRvdGFsID0gZ2V0KCBmbHRyLnh5LCBzYW1wbGV3ICkgKyBnZXQoIGZsdHIuencsIHNhbXBsZXcgKSArDQogICAgICAgICAgICAgICAgICAgICAgICAgIGdldCggZmx0ci54dywgc2FtcGxldyApICsgZ2V0KCBmbHRyLnp5LCBzYW1wbGV3ICk7DQoNCiAgICAgICAgICAgIGFscGhhID0gKGFscGhhICsgMC41ICogdG90YWwpIC8gMy4wOw0KDQogICAgICAgICNlbmRpZiAvL1NVUEVSU0FNUExFDQoNCiAgICAgICAgLy90aGUgYmFzZSBjb2xvciArIHNjYWxlZCBieSB0aGUgbmV3IGFscGhhDQogICAgdmVjNCBmaW5hbENvbG9yID0gdmVjNChjb2xvci5yZ2IsIGNvbG9yLmEgKiBhbHBoYSk7DQoNCi8vb3V0bGluZQ0KDQogICAgI2lmIE9VVExJTkUgPT0gMQ0KDQogICAgICAgICAgICAvL3dpcA0KICAgICAgICBpZihvdXRsaW5lID4gMC4wKSB7DQoNCiAgICAgICAgICAgIC8vcmFuZ2Ugb2YgMS4wIH4gMC4xLCB3ZSBnZXQgMCB+IDENCiAgICAgICAgICAgIGZsb2F0IF9vdXRsaW5lID0gMC45IC0gKG91dGxpbmUgKiAwLjkpOw0KICAgICAgICAgICAgZmxvYXQgX291dGxpbmVfYSA9IGVkZ2UoX291dGxpbmUsIHNtb290aGFtdCwgZGlzdCk7DQogICAgICAgICAgICB2ZWM0IF9vdXRsaW5lX2MgPSB2ZWM0KG91dGxpbmVfY29sb3IucmdiLCBvdXRsaW5lX2NvbG9yLmEgKiBfb3V0bGluZV9hKTsNCg0KICAgICAgICAgICAgZmluYWxDb2xvciA9IG1peChfb3V0bGluZV9jLCBmaW5hbENvbG9yLCBhbHBoYSk7DQoNCiAgICAgICAgfSAvL291dGxpbmUgPiAwLjANCg0KICAgICNlbmRpZiAvL09VVExJTkUNCg0KLy8gZ2xvdw0KDQogICAgI2lmIEdMT1cgPT0gMQ0KDQogICAgICAgICAgICAvL3dpcA0KICAgICAgICBpZihnbG93X2Ftb3VudCA+IDAuMCkgew0KDQogICAgICAgICAgICAvLzp0b2RvOiBleHBvc2Ugb2Zmc2V0IGZvciBkaXJlY3Rpb25hbCBzaGFkb3cNCiAgICAgICAgICAgIC8vIHZlYzIgX2dsb3dfb2ZmcyA9IHZlYzIoMCwwKTsNCiAgICAgICAgICAgIC8vIGZsb2F0IF9nbG93X2Rpc3QgPSB0ZXh0dXJlKHRleDAsIHRjb29yZCAtIF9nbG93X29mZnNldCkuYTsNCg0KICAgICAgICAgICAgZmxvYXQgX2dsb3dfYW10ID0gMS4wIC0gZ2xvd19hbW91bnQ7DQogICAgICAgICAgICBmbG9hdCBfZ2xvd19saW1pdCA9IChfZ2xvd19hbXQgKiBnbG93X3RocmVzaG9sZCk7DQogICAgICAgICAgICBmbG9hdCBfZ2xvd19hID0gZWRnZShfZ2xvd19hbXQsIF9nbG93X2xpbWl0LCBkaXN0KTsNCiAgICAgICAgICAgIHZlYzQgIF9nbG93X2MgPSB2ZWM0KGdsb3dfY29sb3IucmdiLCBnbG93X2NvbG9yLmEgKiBfZ2xvd19hKTsNCg0KICAgICAgICAgICAgZmluYWxDb2xvciA9IG1peChfZ2xvd19jLCBmaW5hbENvbG9yLCBmaW5hbENvbG9yLmEpOw0KDQogICAgICAgIH0gLy9nbG93X2Ftb3VudCA+IDANCg0KICAgICNlbmRpZiAvL0dMT1cNCg0KLy9kb25lDQoNCiAgICBmcmFnID0gZmluYWxDb2xvcjsNCg0KDQp9IC8vbWFpbg0K"},{ name : "build", data : "KzczNDVmNmZlMmQ"},{ name : "default.frag.glsl", data : "dmFyeWluZyB2ZWMyIHRjb29yZDsNCnZhcnlpbmcgdmVjNCBjb2xvcjsNCg0Kdm9pZCBtYWluKCkgew0KICAgIGdsX0ZyYWdDb2xvciA9IGNvbG9yOw0KfQ"},{ name : "default.fnt", data : ""},{ name : "default.png", data : ""},{ name : "default.frag.gl3.glsl", data : "I3ZlcnNpb24gMzMwIGNvcmUNCg0KaW4gdmVjNCBjb2xvcjsNCmluIHZlYzIgdGNvb3JkOw0KDQpvdXQgdmVjNCBmcmFnOw0KDQp2b2lkIG1haW4oKXsNCiAgICBmcmFnID0gY29sb3I7DQp9DQo"},{ name : "default.frag.textured.glsl", data : "dW5pZm9ybSBzYW1wbGVyMkQgdGV4MDsNCnZhcnlpbmcgdmVjMiB0Y29vcmQ7DQp2YXJ5aW5nIHZlYzQgY29sb3I7DQoNCnZvaWQgbWFpbigpIHsNCiAgICB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleDAsIHRjb29yZCk7DQogICAgZ2xfRnJhZ0NvbG9yID0gY29sb3IgKiB0ZXhjb2xvcjsNCn0"},{ name : "default.frag.bitmapfont.glsl", data : "I2RlZmluZSBPVVRMSU5FIDENCiNkZWZpbmUgR0xPVyAxDQojZGVmaW5lIFNVUEVSU0FNUExFIDENCg0KdW5pZm9ybSBzYW1wbGVyMkQgdGV4MDsNCnZhcnlpbmcgdmVjMiB0Y29vcmQ7DQp2YXJ5aW5nIHZlYzQgY29sb3I7DQoNCnVuaWZvcm0gZmxvYXQgc21vb3RobmVzczsNCnVuaWZvcm0gZmxvYXQgdGhpY2tuZXNzOw0KDQp1bmlmb3JtIHZlYzQgb3V0bGluZV9jb2xvcjsNCnVuaWZvcm0gZmxvYXQgb3V0bGluZTsNCg0KdW5pZm9ybSB2ZWM0IGdsb3dfY29sb3I7DQp1bmlmb3JtIGZsb2F0IGdsb3dfdGhyZXNob2xkOw0KdW5pZm9ybSBmbG9hdCBnbG93X2Ftb3VudDsNCg0KDQpmbG9hdCBlZGdlKGZsb2F0IHZhbHVlLCBmbG9hdCBhbW91bnQsIGZsb2F0IHQpIHsNCiAgICByZXR1cm4gc21vb3Roc3RlcCh2YWx1ZSAtIGFtb3VudCwgdmFsdWUgKyBhbW91bnQsIHQpOw0KfQ0KDQpmbG9hdCBnZXQodmVjMiB1diwgZmxvYXQgd2lkdGgpIHsNCiAgICBmbG9hdCB0ZXhhID0gdGV4dHVyZTJEKHRleDAsIHV2KS5hOw0KICAgIHJldHVybiBzbW9vdGhzdGVwKDAuNSAtIHdpZHRoLCAwLjUgKyB3aWR0aCwgdGV4YSk7DQp9DQoNCnZvaWQgbWFpbigpIHsNCg0KLy9iYXNpYyBzZGYNCg0KICAgIGZsb2F0IGRpc3QgPSB0ZXh0dXJlMkQodGV4MCwgdGNvb3JkKS5hOw0KICAgICAgICAvL2Z3aWR0aCBrZWVwcyB3aWR0aCBzaW1pbGFyIGRlc3BpdGUgc2NhbGluZywgc2VlIGJlbG93IGZvciBvcHRpb25zDQogICAgZmxvYXQgc21vb3RoYW10ID0gc21vb3RobmVzcyAqIGZ3aWR0aChkaXN0KTsNCiAgICAvLyBmbG9hdCBzbW9vdGhhbXQgPSBzbW9vdGhuZXNzICogbGVuZ3RoKHZlYzIoZEZkeChkaXN0KSwgZEZkeShkaXN0KSkpOw0KDQogICAgICAgIC8vY2FsY3VsYXRlIHRoZSBlZGdlIHNtb290aGluZw0KICAgIGZsb2F0IGFscGhhID0gZWRnZSgxLjAgLSB0aGlja25lc3MsIHNtb290aGFtdCwgZGlzdCk7DQoNCi8vc3VwZXIgc2FtcGxpbmcNCg0KICAgICAgICAjaWYgU1VQRVJTQU1QTEUgPT0gMQ0KDQogICAgICAgICAgICAgICAgLy90aGVzZSB2YWx1ZXMgY2FuIGJlIGV4cG9zZWQgbGF0ZXINCiAgICAgICAgICAgICAgICAvL3RoZSBjdXJyZW50IGJlaW5nIDAuMjUvc3FydCgyKQ0KICAgICAgICAgICAgZmxvYXQgZmFjdG9yID0gMC4xNzY3NzY2OTUzOw0KICAgICAgICAgICAgZmxvYXQgc2FtcGxlYW10ID0gMC41Ow0KICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIHNpbXBsZSBib3ggZmlsdGVyIGFyb3VuZCB0aGUgcG9pbnQsDQogICAgICAgICAgICAgICAgLy93ZSB1c2UgYSBzZXBhcmF0ZSB3aWR0aCBmb3Igbm93DQogICAgICAgICAgICBmbG9hdCBzYW1wbGV3ID0gc2FtcGxlYW10ICogZndpZHRoKGRpc3QpOw0KICAgICAgICAgICAgdmVjMiBzYW1wbGVvZmZzZXQgPSBmYWN0b3IgKiAoZEZkeCh0Y29vcmQpICsgZEZkeSh0Y29vcmQpKTsNCiAgICAgICAgICAgIHZlYzQgZmx0ciA9IHZlYzQodGNvb3JkIC0gc2FtcGxlb2Zmc2V0LCB0Y29vcmQgKyBzYW1wbGVvZmZzZXQpOw0KDQogICAgICAgICAgICBmbG9hdCB0b3RhbCA9IGdldCggZmx0ci54eSwgc2FtcGxldyApICsgZ2V0KCBmbHRyLnp3LCBzYW1wbGV3ICkgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQoIGZsdHIueHcsIHNhbXBsZXcgKSArIGdldCggZmx0ci56eSwgc2FtcGxldyApOw0KDQogICAgICAgICAgICBhbHBoYSA9IChhbHBoYSArIDAuNSAqIHRvdGFsKSAvIDMuMDsNCg0KICAgICAgICAjZW5kaWYgLy9TVVBFUlNBTVBMRQ0KDQogICAgICAgIC8vdGhlIGJhc2UgY29sb3IgKyBzY2FsZWQgYnkgdGhlIG5ldyBhbHBoYQ0KICAgIHZlYzQgZmluYWxDb2xvciA9IHZlYzQoY29sb3IucmdiLCBjb2xvci5hICogYWxwaGEpOw0KDQovL291dGxpbmUNCg0KICAgICNpZiBPVVRMSU5FID09IDENCg0KICAgICAgICAgICAgLy93aXANCiAgICAgICAgaWYob3V0bGluZSA+IDAuMCkgew0KDQogICAgICAgICAgICAvL3JhbmdlIG9mIDEuMCB+IDAuMSwgd2UgZ2V0IDAgfiAxDQogICAgICAgICAgICBmbG9hdCBfb3V0bGluZSA9IDAuOSAtIChvdXRsaW5lICogMC45KTsNCiAgICAgICAgICAgIGZsb2F0IF9vdXRsaW5lX2EgPSBlZGdlKF9vdXRsaW5lLCBzbW9vdGhhbXQsIGRpc3QpOw0KICAgICAgICAgICAgdmVjNCBfb3V0bGluZV9jID0gdmVjNChvdXRsaW5lX2NvbG9yLnJnYiwgb3V0bGluZV9jb2xvci5hICogX291dGxpbmVfYSk7DQoNCiAgICAgICAgICAgIGZpbmFsQ29sb3IgPSBtaXgoX291dGxpbmVfYywgZmluYWxDb2xvciwgYWxwaGEpOw0KDQogICAgICAgIH0gLy9vdXRsaW5lID4gMC4wDQoNCiAgICAjZW5kaWYgLy9PVVRMSU5FDQoNCi8vIGdsb3cNCg0KICAgICNpZiBHTE9XID09IDENCg0KICAgICAgICAgICAgLy93aXANCiAgICAgICAgaWYoZ2xvd19hbW91bnQgPiAwLjApIHsNCg0KICAgICAgICAgICAgLy86dG9kbzogZXhwb3NlIG9mZnNldCBmb3IgZGlyZWN0aW9uYWwgc2hhZG93DQogICAgICAgICAgICAvLyB2ZWMyIF9nbG93X29mZnMgPSB2ZWMyKDAsMCk7DQogICAgICAgICAgICAvLyBmbG9hdCBfZ2xvd19kaXN0ID0gdGV4dHVyZTJEKHRleDAsIHRjb29yZCAtIF9nbG93X29mZnNldCkuYTsNCg0KICAgICAgICAgICAgZmxvYXQgX2dsb3dfYW10ID0gMS4wIC0gZ2xvd19hbW91bnQ7DQogICAgICAgICAgICBmbG9hdCBfZ2xvd19saW1pdCA9IChfZ2xvd19hbXQgKiBnbG93X3RocmVzaG9sZCk7DQogICAgICAgICAgICBmbG9hdCBfZ2xvd19hID0gZWRnZShfZ2xvd19hbXQsIF9nbG93X2xpbWl0LCBkaXN0KTsNCiAgICAgICAgICAgIHZlYzQgIF9nbG93X2MgPSB2ZWM0KGdsb3dfY29sb3IucmdiLCBnbG93X2NvbG9yLmEgKiBfZ2xvd19hKTsNCg0KICAgICAgICAgICAgZmluYWxDb2xvciA9IG1peChfZ2xvd19jLCBmaW5hbENvbG9yLCBmaW5hbENvbG9yLmEpOw0KDQogICAgICAgIH0gLy9nbG93X2Ftb3VudCA+IDANCg0KICAgICNlbmRpZiAvL0dMT1cNCg0KLy9kb25lDQoNCiAgICBnbF9GcmFnQ29sb3IgPSBmaW5hbENvbG9yOw0KDQoNCn0gLy9tYWluDQo"}];
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT = new nape_callbacks_CbType();
zpp_$nape_ZPP_$ID._Interactor = 0;
zpp_$nape_ZPP_$ID._CbType = 0;
zpp_$nape_ZPP_$ID._CbSet = 0;
zpp_$nape_ZPP_$ID._Listener = 0;
Builder.Chicken = new nape_callbacks_CbType();
Builder.Monster = new nape_callbacks_CbType();
ComponentHolder_$components_$Kill.__MAP = new haxe_ds_IntMap();
ComponentHolder_$components_$Status.__MAP = new haxe_ds_IntMap();
ComponentHolder_$components_$Vel.__MAP = new haxe_ds_IntMap();
ComponentHolder_$luxe_$Sprite.__MAP = new haxe_ds_IntMap();
ComponentHolder_$nape_$phys_$Body.__MAP = new haxe_ds_IntMap();
Log.INIT_STAMP = new Date().getTime() / 1000;
Log.logs = [];
Log.tracks = [];
Log.tracksMap = new haxe_ds_StringMap();
Log.tracer = function(val) {
	haxe_Log.trace(val,{ fileName : "Log.hx", lineNumber : 21, className : "Log", methodName : "tracer"});
};
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
echo_Echo.__IDSEQUENCE = 0;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
luxe_Debug.debug_batch_tag = "batcher.debug_batcher";
luxe_Debug.trace_callbacks = [];
luxe_Debug.shut_down = false;
luxe_Debug.tracing = false;
luxe_Tag.update = "update dt";
luxe_Tag.tick = "tick dt";
luxe_Tag.game_update = "game.update";
luxe_Tag.render = "core.render";
luxe_Tag.debug = "core.debug";
luxe_Tag.updates = "core.updates";
luxe_Tag.events = "core.events";
luxe_Tag.audio = "core.audio";
luxe_Tag.input = "core.input";
luxe_Tag.timer = "core.timer";
luxe_Tag.scene = "core.scene";
luxe_Physics.tag_physics = "physics";
luxe_debug_ProfilerDebugView.color_red = new phoenix_Color().rgb(13369344);
luxe_debug_ProfilerDebugView.color_green = new phoenix_Color().rgb(2263108);
luxe_debug_ProfilerDebugView.color_normal = new phoenix_Color().rgb(15790320);
luxe_physics_nape_DebugDraw.cache_euler = new phoenix_Vector();
luxe_tween_actuators_SimpleActuator.actuators = [];
luxe_tween_actuators_SimpleActuator.actuatorsLength = 0;
luxe_tween_actuators_SimpleActuator.addedEvent = false;
luxe_tween_actuators_SimpleActuator.update_timer = 0;
luxe_tween_actuators_SimpleActuator.current_time = 0;
luxe_tween_Actuate.defaultActuator = luxe_tween_actuators_SimpleActuator;
luxe_tween_Actuate.defaultEase = luxe_tween_easing_Quad.get_easeOut();
luxe_tween_Actuate.targetLibraries = new haxe_ds_ObjectMap();
nape_Config.epsilon = 1e-8;
nape_Config.fluidAngularDragFriction = 2.5;
nape_Config.fluidAngularDrag = 100;
nape_Config.fluidVacuumDrag = 0.5;
nape_Config.fluidLinearDrag = 0.5;
nape_Config.collisionSlop = 0.2;
nape_Config.collisionSlopCCD = 0.5;
nape_Config.distanceThresholdCCD = 0.05;
nape_Config.staticCCDLinearThreshold = 0.05;
nape_Config.staticCCDAngularThreshold = 0.005;
nape_Config.bulletCCDLinearThreshold = 0.125;
nape_Config.bulletCCDAngularThreshold = 0.0125;
nape_Config.dynamicSweepLinearThreshold = 17;
nape_Config.dynamicSweepAngularThreshold = 0.6;
nape_Config.angularCCDSlipScale = 0.75;
nape_Config.arbiterExpirationDelay = 6;
nape_Config.staticFrictionThreshold = 2;
nape_Config.elasticThreshold = 20;
nape_Config.sleepDelay = 60;
nape_Config.linearSleepThreshold = 0.2;
nape_Config.angularSleepThreshold = 0.4;
nape_Config.contactBiasCoef = 0.3;
nape_Config.contactStaticBiasCoef = 0.6;
nape_Config.contactContinuousBiasCoef = 0.4;
nape_Config.contactContinuousStaticBiasCoef = 0.5;
nape_Config.illConditionedThreshold = 2e+8;
phoenix_Batcher._sequence_key = -1;
phoenix_Batcher.all = [];
phoenix_Texture.default_filter = 9729;
phoenix_Texture.default_clamp = 33071;
phoenix_geometry_Geometry._sequence_key = -1;
phoenix_geometry_TextGeometry.tab_regex = new EReg("\t","gim");
snow_Snow.next_queue = [];
snow_Snow.defer_queue = [];
snow_api_Promises.calls = [];
snow_api_Promises.defers = [];
snow_api_Timer.running_timers = [];
snow_core_web_Runtime.web_window_id = 1;
snow_core_web_Runtime.timestamp_start = 0.0;
snow_core_web_Runtime.key_press_ignored = [8,13];
snow_core_web__$Runtime_DOMKeys.dom_shift = 16;
snow_core_web__$Runtime_DOMKeys.dom_ctrl = 17;
snow_core_web__$Runtime_DOMKeys.dom_alt = 18;
snow_core_web__$Runtime_DOMKeys.dom_capslock = 20;
snow_core_web__$Runtime_DOMKeys.dom_pageup = 33;
snow_core_web__$Runtime_DOMKeys.dom_pagedown = 34;
snow_core_web__$Runtime_DOMKeys.dom_end = 35;
snow_core_web__$Runtime_DOMKeys.dom_home = 36;
snow_core_web__$Runtime_DOMKeys.dom_left = 37;
snow_core_web__$Runtime_DOMKeys.dom_up = 38;
snow_core_web__$Runtime_DOMKeys.dom_right = 39;
snow_core_web__$Runtime_DOMKeys.dom_down = 40;
snow_core_web__$Runtime_DOMKeys.dom_printscr = 44;
snow_core_web__$Runtime_DOMKeys.dom_insert = 45;
snow_core_web__$Runtime_DOMKeys.dom_delete = 46;
snow_core_web__$Runtime_DOMKeys.dom_lmeta = 91;
snow_core_web__$Runtime_DOMKeys.dom_rmeta = 93;
snow_core_web__$Runtime_DOMKeys.dom_kp_0 = 96;
snow_core_web__$Runtime_DOMKeys.dom_kp_1 = 97;
snow_core_web__$Runtime_DOMKeys.dom_kp_2 = 98;
snow_core_web__$Runtime_DOMKeys.dom_kp_3 = 99;
snow_core_web__$Runtime_DOMKeys.dom_kp_4 = 100;
snow_core_web__$Runtime_DOMKeys.dom_kp_5 = 101;
snow_core_web__$Runtime_DOMKeys.dom_kp_6 = 102;
snow_core_web__$Runtime_DOMKeys.dom_kp_7 = 103;
snow_core_web__$Runtime_DOMKeys.dom_kp_8 = 104;
snow_core_web__$Runtime_DOMKeys.dom_kp_9 = 105;
snow_core_web__$Runtime_DOMKeys.dom_kp_multiply = 106;
snow_core_web__$Runtime_DOMKeys.dom_kp_plus = 107;
snow_core_web__$Runtime_DOMKeys.dom_kp_minus = 109;
snow_core_web__$Runtime_DOMKeys.dom_kp_decimal = 110;
snow_core_web__$Runtime_DOMKeys.dom_kp_divide = 111;
snow_core_web__$Runtime_DOMKeys.dom_kp_numlock = 144;
snow_core_web__$Runtime_DOMKeys.dom_f1 = 112;
snow_core_web__$Runtime_DOMKeys.dom_f2 = 113;
snow_core_web__$Runtime_DOMKeys.dom_f3 = 114;
snow_core_web__$Runtime_DOMKeys.dom_f4 = 115;
snow_core_web__$Runtime_DOMKeys.dom_f5 = 116;
snow_core_web__$Runtime_DOMKeys.dom_f6 = 117;
snow_core_web__$Runtime_DOMKeys.dom_f7 = 118;
snow_core_web__$Runtime_DOMKeys.dom_f8 = 119;
snow_core_web__$Runtime_DOMKeys.dom_f9 = 120;
snow_core_web__$Runtime_DOMKeys.dom_f10 = 121;
snow_core_web__$Runtime_DOMKeys.dom_f11 = 122;
snow_core_web__$Runtime_DOMKeys.dom_f12 = 123;
snow_core_web__$Runtime_DOMKeys.dom_f13 = 124;
snow_core_web__$Runtime_DOMKeys.dom_f14 = 125;
snow_core_web__$Runtime_DOMKeys.dom_f15 = 126;
snow_core_web__$Runtime_DOMKeys.dom_f16 = 127;
snow_core_web__$Runtime_DOMKeys.dom_f17 = 128;
snow_core_web__$Runtime_DOMKeys.dom_f18 = 129;
snow_core_web__$Runtime_DOMKeys.dom_f19 = 130;
snow_core_web__$Runtime_DOMKeys.dom_f20 = 131;
snow_core_web__$Runtime_DOMKeys.dom_f21 = 132;
snow_core_web__$Runtime_DOMKeys.dom_f22 = 133;
snow_core_web__$Runtime_DOMKeys.dom_f23 = 134;
snow_core_web__$Runtime_DOMKeys.dom_f24 = 135;
snow_core_web__$Runtime_DOMKeys.dom_caret = 160;
snow_core_web__$Runtime_DOMKeys.dom_exclaim = 161;
snow_core_web__$Runtime_DOMKeys.dom_quotedbl = 162;
snow_core_web__$Runtime_DOMKeys.dom_hash = 163;
snow_core_web__$Runtime_DOMKeys.dom_dollar = 164;
snow_core_web__$Runtime_DOMKeys.dom_percent = 165;
snow_core_web__$Runtime_DOMKeys.dom_ampersand = 166;
snow_core_web__$Runtime_DOMKeys.dom_underscore = 167;
snow_core_web__$Runtime_DOMKeys.dom_leftparen = 168;
snow_core_web__$Runtime_DOMKeys.dom_rightparen = 169;
snow_core_web__$Runtime_DOMKeys.dom_asterisk = 170;
snow_core_web__$Runtime_DOMKeys.dom_plus = 171;
snow_core_web__$Runtime_DOMKeys.dom_pipe = 172;
snow_core_web__$Runtime_DOMKeys.dom_minus = 173;
snow_core_web__$Runtime_DOMKeys.dom_leftbrace = 174;
snow_core_web__$Runtime_DOMKeys.dom_rightbrace = 175;
snow_core_web__$Runtime_DOMKeys.dom_tilde = 176;
snow_core_web__$Runtime_DOMKeys.dom_audiomute = 181;
snow_core_web__$Runtime_DOMKeys.dom_volumedown = 182;
snow_core_web__$Runtime_DOMKeys.dom_volumeup = 183;
snow_core_web__$Runtime_DOMKeys.dom_comma = 188;
snow_core_web__$Runtime_DOMKeys.dom_period = 190;
snow_core_web__$Runtime_DOMKeys.dom_slash = 191;
snow_core_web__$Runtime_DOMKeys.dom_backquote = 192;
snow_core_web__$Runtime_DOMKeys.dom_leftbracket = 219;
snow_core_web__$Runtime_DOMKeys.dom_rightbracket = 221;
snow_core_web__$Runtime_DOMKeys.dom_backslash = 220;
snow_core_web__$Runtime_DOMKeys.dom_quote = 222;
snow_core_web__$Runtime_DOMKeys.dom_meta = 224;
snow_core_web_assets_Assets.POT = true;
snow_modules_webaudio_Audio.half_pi = 1.5707;
snow_types_Config.app_config = "config.json";
snow_types_Config.app_ident = "com.wimcake.chickens";
snow_types_Config.extensions = [];
spritesheet_SpriteSheet.DEFAULT_NAME_EXTRACTOR = new EReg("([^0-9.]+)(\\d*)(?:[\\D]*)","i");
systems_Nape.__meta__ = { fields : { step : { u : null}}};
systems_Render.__meta__ = { fields : { render : { u : null}}};
zpp_$nape_util_ZPP_$Flags.internal = false;
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.COL = 1;
zpp_$nape_dynamics_ZPP_$Arbiter.FLUID = 4;
zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR = 2;
zpp_$nape_dynamics_ZPP_$Contact.internal = false;
zpp_$nape_geom_ZPP_$Collide.flowpoly = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$Collide.flowsegs = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_phys_ZPP_$Body.types = (function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = [null,zpp_$nape_util_ZPP_$Flags.BodyType_STATIC,zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC,zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC];
	return $r;
}(this));
zpp_$nape_phys_ZPP_$Material.WAKE = 1;
zpp_$nape_phys_ZPP_$Material.PROPS = 2;
zpp_$nape_phys_ZPP_$Material.ANGDRAG = 4;
zpp_$nape_phys_ZPP_$Material.ARBITERS = 8;
zpp_$nape_shape_ZPP_$Edge.internal = false;
zpp_$nape_space_ZPP_$AABBTree.tmpaabb = new zpp_$nape_geom_ZPP_$AABB();
zpp_$nape_util_ZPP_$ConstraintList.internal = false;
zpp_$nape_util_ZPP_$BodyList.internal = false;
zpp_$nape_util_ZPP_$InteractorList.internal = false;
zpp_$nape_util_ZPP_$CompoundList.internal = false;
zpp_$nape_util_ZPP_$ListenerList.internal = false;
zpp_$nape_util_ZPP_$CbTypeList.internal = false;
zpp_$nape_util_ZPP_$Vec2List.internal = false;
zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
zpp_$nape_util_ZPP_$RayResultList.internal = false;
zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
zpp_$nape_util_ZPP_$EdgeList.internal = false;
zpp_$nape_util_ZPP_$ShapeList.internal = false;
zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
zpp_$nape_util_ZPP_$ArbiterList.internal = false;
zpp_$nape_util_ZPP_$ContactList.internal = false;
luxe_Game.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
